<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ARM on The LLVM Project Blog</title><link>https://blog.llvm.org/tags/arm/</link><description>Recent content in ARM on The LLVM Project Blog</description><generator>Hugo -- gohugo.io</generator><copyright>llvm.org</copyright><lastBuildDate>Wed, 07 Apr 2010 21:34:00 +0000</lastBuildDate><atom:link href="https://blog.llvm.org/tags/arm/index.xml" rel="self" type="application/rss+xml"/><item><title>GSoC 2024: ABI Lowering in ClangIR</title><link>https://blog.llvm.org/posts/2024-09-07-abi-lowering-in-clangir/</link><pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2024-09-07-abi-lowering-in-clangir/</guid><description>&lt;p>ClangIR is an ongoing effort to build a high-level intermediate representation(IR) for C/C++ within the LLVM ecosystem. Its key advantage lies in its abilityto retain more source code information. While ClangIR is making progress, itstill lacks certain features, notably ABI handling. Currently, ClangIR lowersmost functions without accounting for ABI-specific calling convention details.&lt;/p>&lt;h2 id="goals">Goals&lt;/h2>&lt;p>The &amp;ldquo;Build &amp;amp; Run SingleSource Benchmarks with ClangIR - Part 2&amp;rdquo; Google Summer ofCode 2024 builds on my contributions from GSoC 2023 by addressing one of themain issues I encountered: target-specific lowering. It focuses on extendingClangIR’s code generation capabilities, particularly in ABI-lowering for X86-64.Several tests rely on operations and types (e.g., &lt;code>va_arg&lt;/code> calls and complexdata types) that require target-specific information to compile correctly.&lt;/p>&lt;p>The concrete steps to achieve this were:&lt;/p>&lt;ol>&lt;li>&lt;strong>Implement foundational infrastructure&lt;/strong> that can scale to multiplearchitectures while adhering to ClangIR design principles such as CodeGenparity, feature guarding, and AST backreferences.&lt;/li>&lt;li>&lt;strong>Handle basic calling convention scenarios&lt;/strong> as a proof of concept tovalidate the foundational infrastructure.&lt;/li>&lt;li>&lt;strong>Add lowering for a second architecture&lt;/strong> to further validate theinfrastructure&amp;rsquo;s extensibility to multiple architectures.&lt;/li>&lt;li>&lt;strong>Unify target-specific ClangIR lowering into the library&lt;/strong>, as there are afew isolated methods handling target-specific code lowering like&lt;code>cir.va_arg&lt;/code>.&lt;/li>&lt;li>&lt;strong>Integrate calling convention lowering into the main pipeline&lt;/strong> to ensurefuture contributions and continued development of this infrastructure.&lt;/li>&lt;/ol>&lt;h2 id="contributions">Contributions&lt;/h2>&lt;p>The list of contribution (PRs) can be found&lt;a href="https://github.com/llvm/clangir/pulls?q=is%3Apr+is%3Aclosed+author%3Asitio-couto+closed%3A%3E2024-05-01">here&lt;/a>.&lt;/p>&lt;h3 id="target-lowering-library">Target Lowering Library&lt;/h3>&lt;p>The most significant contribution of this project was the development of amodular &lt;a href="https://github.com/llvm/clangir/pull/643">&lt;code>TargetLowering&lt;/code> library&lt;/a>.This ensures that target-specific MLIR lowering passes can leverage this sharedlibrary for lowering logic. The library also follows ClangIR&amp;rsquo;s feature guardingprinciples, ensuring that any contributor can refer to the original CodeGen forcontributions, and any unimplemented feature is asserted at specific codepoints, making it easy to track missing functionality.&lt;/p>&lt;h3 id="calling-convention-lowering-pass">Calling Convention Lowering Pass&lt;/h3>&lt;p>As a proof of concept, the initial development of the &lt;code>TargetLowering&lt;/code> libraryfocused on implementing a &lt;a href="https://github.com/llvm/clangir/pull/642">calling convention loweringpass&lt;/a> that targets multiplearchitectures. Currently, ClangIR ignores the target ABI during CodeGen toretain high-level information. For example, structs are not unraveled to improveargument-passing efficiency. ABI-specific LLVM attributes are also ignored. Thispass addresses these issues by properly tagging LLVM attributes and rewritingfunction definitions and calls to handle unraveled structs. This was implementedfor both X86-64 and &lt;a href="https://github.com/llvm/clangir/pull/679">AArch64&lt;/a>,demonstrating the library&amp;rsquo;s multi-architecture support.&lt;/p>&lt;h2 id="shortcomings">Shortcomings&lt;/h2>&lt;h3 id="target-specific-lowering-unification">Target-Specific Lowering Unification&lt;/h3>&lt;p>While some target-specific lowering code was moved into the library, it wascopied and pasted rather than properly integrated. This is not ideal forleveraging the library’s multi-architecture features.&lt;/p>&lt;h3 id="inclusion-in-the-main-pipeline">Inclusion in the Main Pipeline&lt;/h3>&lt;p>This is still a work in progress, as the library is not yet mature enough tohandle most pre-existing ClangIR tests. There are also feature guards withunreachable statements for many unimplemented features.&lt;/p>&lt;h2 id="future-work">Future Work&lt;/h2>&lt;p>Now that there is a base infrastructure for handling target-agnostic totarget-specific CIR code, there is a large amount of future work to be done,including:&lt;/p>&lt;ul>&lt;li>Improving DataLayout-related queries using MLIR&amp;rsquo;s built-in tools.&lt;/li>&lt;li>Implementing calling convention lowering for additional types, such aspointers.&lt;/li>&lt;li>Extending the TargetLowering library to support more architectures.&lt;/li>&lt;li>Unifying remaining target-specific lowering code from other parts of ClangIR.&lt;/li>&lt;/ul>&lt;h2 id="acknowledgements">Acknowledgements&lt;/h2>&lt;p>I would like to thank my Google Summer of Code mentors, Bruno Cardoso Lopes andNathan Lanza, for another great GSoC experience. I also want to thank the LLVMcommunity and Google for organizing the program.&lt;/p></description></item><item><title>GSoC 2024: Statistical Analysis of LLVM-IR Compilation</title><link>https://blog.llvm.org/posts/2024-08-29-gsoc-2024-statistical_analysis_of_llvm-ir_compilation/</link><pubDate>Mon, 23 Sep 2024 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2024-08-29-gsoc-2024-statistical_analysis_of_llvm-ir_compilation/</guid><description>&lt;p>Welcome! My name is Andrew and I contributed to LLVM through the 2024 Google Summer of Code Program. My project is called &lt;a href="https://summerofcode.withgoogle.com/programs/2024/projects/hquDyVBK">Statistical Analysis of LLVM-IR Compilation&lt;/a>. The objective of this project is to provide an analysis of how time is spent in the optimization pipeline. Generally, drastic differences in the percentage of time spent by a pass in the pipeline is considered abnormal.&lt;/p>&lt;h1 id="background">Background&lt;/h1>&lt;p>In principle, an LLVM IR bitcode file, or module, contains IR features that determine the behavior of the compiler optimization pipeline. By varying these features, the optimization pipeline, opt, can add significantly to the compilation time or marginally. More specifically, optimizations succeed in less or more time; the user can wait for a microsecond or a few minutes. LLVM compiler developers constantly edit the pipeline, so the performance of these optimizations can vary by compiler version (sometimes significantly).&lt;/p>&lt;p>Having a large IR dataset such as &lt;a href="https://huggingface.co/datasets/llvm-ml/ComPile">ComPile&lt;/a> allows for testing the LLVM compilation pipeline on a varied sample of IR. The size of this sample is sufficient to determine outlying IR modules. By identifying and examining such files using utilities which are being added to the &lt;a href="https://github.com/llvm-ml/llvm-ir-dataset-utils">LLVM IR Dataset Utils Repo&lt;/a>, the causes of unexpected compilation times can be determined. Developers can then modify and improve the compilation pipeline accordingly.&lt;/p>&lt;h1 id="summary-of-work">Summary of Work&lt;/h1>&lt;p>The utilities added in &lt;a href="https://github.com/llvm-ml/llvm-ir-dataset-utils/pull/37">PR37&lt;/a> are intended to write each IR module to a tar file corresponding to a programming language. Each file written to the tar files is indexed by its location in the HF dataset. This allows easy identification of files for tools which can be used for data extraction and analysis in the shell, notably clang. Tar file creation allows for potentially using less storage space then downloading the HF dataset to disk, and it allows code to be written which does not depend on the Python interpreter to load the dataset for access.&lt;/p>&lt;p>The Makefile from &lt;a href="https://github.com/llvm-ml/llvm-ir-dataset-utils/pull/36">PR36&lt;/a> is responsible for carrying out the data collection. This data includes text segment size, user CPU instruction counts during compile time (analogous to time), IR feature counts sourced from the LLVM pass &lt;code>print&amp;lt;func-properties&amp;gt;&lt;/code>, and maximum relative time pass names and percentage counts. The data can be extracted in parallel or serially and is stored in a CSV file.&lt;/p>&lt;p>An important data collection command in the Makefile is &lt;code>clang -w -c -ftime-report $(lang)/bc_files/file$@.bc -o /dev/null&lt;/code>. The output from the command is large, but the part of interest is the first &lt;code>Pass execution timing report&lt;/code>:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">===-------------------------------------------------------------------------=== Pass execution timing report===-------------------------------------------------------------------------=== Total Execution Time: 2.2547 seconds (2.2552 wall clock) ---User Time--- --System Time-- --User+System-- ---Wall Time--- --- Name --- 2.1722 ( 96.5%) 0.0019 ( 47.5%) 2.1741 ( 96.4%) 2.1745 ( 96.4%) VerifierPass 0.0726 ( 3.2%) 0.0000 ( 0.0%) 0.0726 ( 3.2%) 0.0726 ( 3.2%) AlwaysInlinerPass 0.0042 ( 0.2%) 0.0015 ( 39.2%) 0.0058 ( 0.3%) 0.0058 ( 0.3%) AnnotationRemarksPass 0.0014 ( 0.1%) 0.0005 ( 13.3%) 0.0019 ( 0.1%) 0.0020 ( 0.1%) EntryExitInstrumenterPass 0.0003 ( 0.0%) 0.0000 ( 0.0%) 0.0003 ( 0.0%) 0.0003 ( 0.0%) CoroConditionalWrapper 2.2507 (100.0%) 0.0039 (100.0%) 2.2547 (100.0%) 2.2552 (100.0%) Total&lt;/code>&lt;/pre>&lt;/div>&lt;p>A user can visually see the distribution of these passes by using a profiling tool for .json files. The .json file for a given bitcode file is obtained by &lt;code>clang -c -ftime-trace &amp;lt;file&amp;gt;&lt;/code>.&lt;/p>&lt;p>The visualization of this output can be filtered to the passes of interest as in the following image:&lt;/p>&lt;figure>&lt;img src="https://blog.llvm.org/img/file4504_pass_trace.png" alt="ftime-trace of C IR Outlier"/>&lt;/figure>&lt;p>The CoroConditionalWrapper pass is accounted by the &amp;ldquo;Total CoroConditionalWrapper&amp;rdquo; block. Clearly, that pass takes a far smaller amount of time than the others, as accounted for by the pass execution timing report. However, instead of seeing the pass as an insignificant percentage of time, the visualization allows for additional comparisons of the relative timings of each pass. The example image has the optimization passes of interest selected, but the .json file provides information on the entire compilation pipeline as well. Thus, the entire pipeline execution flow can be visualized.&lt;/p>&lt;h1 id="current-status">Current Status&lt;/h1>&lt;p>Currently, there are three PRs that require approval to be merged. There has been ongoing discussion on their contents, so few steps should be left to merge them.In the current state, users of the utilities in &lt;a href="https://github.com/llvm-ml/llvm-ir-dataset-utils/pull/38">PR38&lt;/a> should be able to readily reproduce the quantitative results I had obtained for my GSoC midterm presentation graphs. Users can easily perform outlier analysis as well on the IR files (excluding Julia IR). Some of the results include the following:&lt;/p>&lt;p>Scatter Plot of C IR Files:&lt;/p>&lt;figure>&lt;img src="https://blog.llvm.org/img/c_instvtext.png" alt="C IR Compiler Instruction Counts versus Text Segment Size"/>&lt;/figure>&lt;p>Table of outliers for C IR files:&lt;/p>&lt;figure>&lt;img src="https://blog.llvm.org/img/c_outliers.png" alt="C IR Outlier Files"/>&lt;/figure>&lt;h1 id="future-work">Future Work&lt;/h1>&lt;p>It was discussed in PR 37 to consolidate the tar file creation into the dataset file writer Python script. This is a feature I wish to implement in order to speed up the tar file creation process by having the bitcode files written from memory to the tar instead of from memory, to disk, to tar.&lt;/p>&lt;p>As mentioned, Julia IR was not analyzed. Modifying the scripts to include Julia IR results is desirable to make complete use of the dataset.Adding additional documentation for demonstration-of-use purposes could help clarify ways to use the tools.&lt;/p>&lt;p>Additionally, outlier analysis can be expanded upon by using more advanced outlier detection methods. Not all the data collected in the CSV files was used, so using those extra features&amp;ndash;in particular the &lt;code>print&amp;lt;func-properties&amp;gt;&lt;/code> pass&amp;ndash;can allow for improved accuracy in outlier detection.&lt;/p>&lt;h1 id="acknowledgements">Acknowledgements&lt;/h1>&lt;p>I would like to thank my mentors Johannes Doerfert and Aiden Grossman for their constant support during and prior to the GSoC program. Additionally, I would like to acknowledge the work of the LLVM Foundation admins and the GSoC admins.&lt;/p>&lt;h1 id="links">Links&lt;/h1>&lt;ul>&lt;li>&lt;p>&lt;a href="https://github.com/llvm-ml/llvm-ir-dataset-utils/pull/38">PR 38&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;a href="https://github.com/llvm-ml/llvm-ir-dataset-utils/pull/37">PR 37&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;a href="https://github.com/llvm-ml/llvm-ir-dataset-utils/pull/36">PR 36&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;a href="https://github.com/llvm-ml/llvm-ir-dataset-utils">LLVM IR Dataset Utils Repo&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;a href="https://huggingface.co/datasets/llvm-ml/ComPile">Compile Dataset&lt;/a>&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>GSoC 2024: Reviving NewGVN</title><link>https://blog.llvm.org/posts/2024-09-01-reviving-newgvn/</link><pubDate>Mon, 16 Sep 2024 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2024-09-01-reviving-newgvn/</guid><description>&lt;p>This summer I participated in GSoC under the LLVM Compiler Infrastructure. The goal of the project was to improve the NewGVN pass so that it can replace GVN as the main value numbering pass in LLVM.&lt;/p>&lt;h1 id="background">Background&lt;/h1>&lt;p>Global Value Numbering (GVN) consists of assigning value numbers such that instructions with the same value number are equivalent. NewGVN was introduced in 2016 to replace GVN. We now highlight a few aspects in which NewGVN is better than GVN.&lt;/p>&lt;p>A key advantage of NewGVN over GVN is that it is complete for loops, while GVN is only complete for acyclical code. NewGVN is complete for loops because when it first processes loops, it assumes that only the first iteration will be executed, later corroborating these assumptions—this is known as the optimistic assumption. In practice, the optimistic assumption boils down to assuming that backedges are unreachable and, consequently, that when evaluating phi instructions, the values carried by them can be ignored. For instance, in the example below, &lt;code>%a&lt;/code> is optimistically evaluated to &lt;code>0&lt;/code>. This leads to evaluating &lt;code>%c&lt;/code> to &lt;code>%x&lt;/code>, which in turn leads to evaluating &lt;code>%a.i&lt;/code> to &lt;code>0&lt;/code>. At this point, there are two possibilities: either the assumption was correct and the loop actually only executes once, and the value numbers computed so far are correct, or the instructions in the loop need to be reevaluated. Assume, for this example, that NewGVN could not prove that only one iteration is executed. Then &lt;code>%a&lt;/code> once again evaluates to &lt;code>0&lt;/code>, and all other registers also evaluate to the same. Thanks to the optimistic assumption, we were able to discover that &lt;code>%a&lt;/code> is loop-invariant and, moreover, that it is equal to &lt;code>0&lt;/code>.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="color:#66d9ef">define&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> @optimistic(&lt;span style="color:#66d9ef">i32&lt;/span> %x, &lt;span style="color:#66d9ef">i32&lt;/span> %y){entry: &lt;span style="color:#66d9ef">br&lt;/span> &lt;span style="color:#66d9ef">label&lt;/span> %looploop: %a = &lt;span style="color:#66d9ef">phi&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>, %entry], [%a.i, %loop] ... %c = &lt;span style="color:#66d9ef">xor&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> %x, %a %a.i = &lt;span style="color:#66d9ef">sub&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> %x, %c &lt;span style="color:#66d9ef">br&lt;/span> &lt;span style="color:#66d9ef">i1&lt;/span> ..., &lt;span style="color:#66d9ef">label&lt;/span> %loop,&lt;span style="color:#66d9ef">label&lt;/span> %exitexit: &lt;span style="color:#66d9ef">ret&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> %a}&lt;/code>&lt;/pre>&lt;/div>&lt;p>On the other hand, GVN fails to detect this equivalence because it would pessimistically evaluate &lt;code>%a&lt;/code> to itself, and the previously described evaluation steps would never take place.&lt;/p>&lt;p>Another advantage of NewGVN is the value numbering of memory operations using &lt;a href="https://releases.llvm.org/14.0.0/docs/MemorySSA.html">MemorySSA&lt;/a>. It provides a functional view of memory where instructions that can modify memory produce a new memory version, which is then used by other memory operations. This greatly simplifies the detection of redundancies among memory operations. For example, two loads of the same type from equivalent pointers and memory versions are trivially equivalent.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="color:#66d9ef">define&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> @foo(&lt;span style="color:#66d9ef">i32&lt;/span> %v, &lt;span style="color:#960050;background-color:#1e0010">ptr&lt;/span> %p) {entry:&lt;span style="color:#75715e">; 1 = MemoryDef(liveOnEntry)&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">store&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> %v, &lt;span style="color:#960050;background-color:#1e0010">ptr&lt;/span> %p, &lt;span style="color:#66d9ef">align&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#75715e">; MemoryUse(1)&lt;/span>&lt;span style="color:#75715e">&lt;/span> %a = &lt;span style="color:#66d9ef">load&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span>, &lt;span style="color:#960050;background-color:#1e0010">ptr&lt;/span> %p, &lt;span style="color:#66d9ef">align&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#75715e">; MemoryUse(1)&lt;/span>&lt;span style="color:#75715e">&lt;/span> %b = &lt;span style="color:#66d9ef">load&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span>, &lt;span style="color:#960050;background-color:#1e0010">ptr&lt;/span> %p, &lt;span style="color:#66d9ef">align&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#75715e">; 2 = MemoryDef(1)&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">call&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> @f(&lt;span style="color:#66d9ef">i32&lt;/span> %a)&lt;span style="color:#75715e">; MemoryUse(2)&lt;/span>&lt;span style="color:#75715e">&lt;/span> %c = &lt;span style="color:#66d9ef">load&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span>, &lt;span style="color:#960050;background-color:#1e0010">ptr&lt;/span> %p, &lt;span style="color:#66d9ef">align&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> %d = &lt;span style="color:#66d9ef">sub&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> %b, %c &lt;span style="color:#66d9ef">ret&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> %d}&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the example above (annotated with MemorySSA), &lt;code>%a&lt;/code> and &lt;code>%b&lt;/code> are equivalent, while &lt;code>%c&lt;/code> is not. All three loads are of the same type from the same pointer, but they don&amp;rsquo;t all load from the same memory state. Loads &lt;code>%a&lt;/code> and &lt;code>%b&lt;/code> load from the memory defined by the store (Memory &lt;code>1&lt;/code>), while &lt;code>%c&lt;/code> loads from the memory defined by the function call (Memory &lt;code>2&lt;/code>). GVN can also detect these redundancies, but it relies on the more expensive and less general MemoryDependenceAnalysis.&lt;/p>&lt;p>Despite these and other improvements NewGVN is still not widely used, mainly because it lacks partial redundancy elimination (PRE) and because it is bug-ridden.&lt;/p>&lt;h1 id="implementing-pre">Implementing PRE&lt;/h1>&lt;p>Our main contribution was the development of a PRE stage for NewGVN (&lt;a href="https://github.com/ManuelJBrito/llvm-project/tree/Benchmarks">found here&lt;/a>). Our solution relied on generalizing Phi-of-Ops. It performs a special case of PRE where the instruction depends on a phi instruction, and an equivalent value is available on every reaching path. This is achieved in two steps: phi-translation and phi-insertion.&lt;/p>&lt;p>Phi-translation consists of evaluating the original instruction in the context of each of its block&amp;rsquo;s predecessors. Phi operands are replaced by the value incoming from the predecessor. The value is available in the predecessor if the translated instruction is equivalent to a constant, function argument, or another instruction that dominates the predecessor.&lt;/p>&lt;p>Phi-insertion occurs after phi-translation if the value is available in every predecessor. At that point, a phi of the equivalent values is constructed and used to replace the original instruction. The full process is illustrated in the following example.&lt;/p>&lt;div style="margin:0 auto;"> &lt;img src="https://blog.llvm.org/img/reviving-newgvn-phiofops.png">&lt;br/>&lt;/div>&lt;p>Our generalization eliminated the need for a dependent phi and introduced the ability to insert the missing values in cases where the instruction is partially redundant. To prevent increases in code size (ignoring the inserted phi instructions), the insertion is only made if it’s the only one required. The full process is illustrated in the following example.&lt;/p>&lt;div style="margin:0 auto;"> &lt;img src="https://blog.llvm.org/img/reviving-newgvn-pre.png">&lt;br/>&lt;/div>&lt;p>Integrating PRE into the existing framework also allowed us to gain loop-invariant code motion (LICM) for free. The optimistic assumption, combined with PRE, allows NewGVN to speculatively hoist instructions out of loops. On the other hand, LICM in GVN relies on using LoopInfo and can only handle very specific cases.&lt;/p>&lt;h1 id="missing-features">Missing Features&lt;/h1>&lt;p>The two main features our PRE implementation lacks are critical edge splitting and load coercion. Critical edge splitting is required to ensure that we do not insert instructions into paths where they won&amp;rsquo;t be used. Currently, our implementation simply bails in such cases. Load coercion allows us to detect equivalences of loaded values with different types, such as loads of &lt;code>i32&lt;/code> and &lt;code>float&lt;/code>, and then coerce the loaded type using conversion operations.&lt;/p>&lt;p>The difficulty in implementing these features is that NewGVN is designed to perform analysis and transformation in separate steps, while these features involve modifying the function during the analysis phase.&lt;/p>&lt;h1 id="results">Results&lt;/h1>&lt;p>We evaluated our implementation using the automated benchmarking tool &lt;a href="https://www.phoronix-test-suite.com/">Phoronix Test Suite&lt;/a> from which we selected a set of 20 C/C++ applications (listed below).&lt;/p>&lt;table>&lt;thead>&lt;tr>&lt;th>&lt;/th>&lt;th>&lt;/th>&lt;th>&lt;/th>&lt;th>&lt;/th>&lt;/tr>&lt;/thead>&lt;tbody>&lt;tr>&lt;td>aircrack-ng&lt;/td>&lt;td>encode-flac&lt;/td>&lt;td>luajit&lt;/td>&lt;td>scimark2&lt;/td>&lt;/tr>&lt;tr>&lt;td>botan&lt;/td>&lt;td>espeak&lt;/td>&lt;td>mafft&lt;/td>&lt;td>simdjson&lt;/td>&lt;/tr>&lt;tr>&lt;td>zstd&lt;/td>&lt;td>fftw&lt;/td>&lt;td>ngspice&lt;/td>&lt;td>sqlite-speedtest&lt;/td>&lt;/tr>&lt;tr>&lt;td>crafty&lt;/td>&lt;td>john-the-ripper&lt;/td>&lt;td>quantlib&lt;/td>&lt;td>tjbench&lt;/td>&lt;/tr>&lt;tr>&lt;td>draco&lt;/td>&lt;td>jpegxl&lt;/td>&lt;td>rnnoise&lt;/td>&lt;td>graphics-magick&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>&lt;p>The default &lt;code>-O2&lt;/code> pipeline was used. The only change betweeen compilations was the value numbering pass used.&lt;/p>&lt;p>Despite the missing features, we observed that our implementation, on average, performs 0.4% better than GVN. However, it is important to mention that our solution hasn&amp;rsquo;t been fine-tuned to consider the rest of the optimization pipeline, which resulted in some cases where our implementation regressed compared to both GVN and the existing NewGVN. The most severe case was with jpegxl, where our implementation, on average, performed 10% worse than GVN. It&amp;rsquo;s important to note that this was an outlier; excluding jpegxl, most regressions were at most 2%. Unfortunately, due to time constraints, we were unable to study these cases in more detail.&lt;/p>&lt;h1 id="future-work">Future Work&lt;/h1>&lt;p>In the future, we plan to implement the aforementioned missing features and fine-tune the heuristics for when to perform PRE to prevent the regressions discussed in the results section. Once these issues are addressed, we&amp;rsquo;ll upstream our implementation, bringing us a step closer to reviving NewGVN.&lt;/p></description></item><item><title>GSoC 2024: Compile GPU kernels using ClangIR</title><link>https://blog.llvm.org/posts/2024-08-29-gsoc-opencl-c-support-for-clangir/</link><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2024-08-29-gsoc-opencl-c-support-for-clangir/</guid><description>&lt;p>Hello everyone! I&amp;rsquo;m 7mile. My GSoC project this summer is &lt;a href="https://discourse.llvm.org/t/clangir-compile-gpu-kernels-using-clangir/76984">Compile GPU kernels using ClangIR&lt;/a>. It&amp;rsquo;s been an exciting journey in compiler development, and I&amp;rsquo;m thrilled to share the progress and insights gained along the way here.&lt;/p>&lt;h1 id="background">Background&lt;/h1>&lt;p>&lt;a href="https://github.com/llvm/clangir">The ClangIR project&lt;/a> aims to establish a new IR for Clang, built on top of MLIR. As part of the ongoing effort to support heterogeneous programming models, this project focuses on integrating OpenCL C language support into ClangIR. The ultimate goal is to enable the compilation of GPU kernels written in OpenCL C into LLVM IR targeting the SPIR-V architecture, laying the groundwork for future enhancements in SYCL and CUDA support.&lt;/p>&lt;h1 id="what-we-did">What We Did&lt;/h1>&lt;p>Our work involved several key areas:&lt;/p>&lt;ol>&lt;li>&lt;p>&lt;strong>Address Space Support&lt;/strong>: One of the fundamental tasks was teaching ClangIR to handle address spaces, a vital feature for languages like OpenCL. Initially, we considered mimicking LLVM&amp;rsquo;s approach, but this proved inadequate for ClangIR&amp;rsquo;s goals. After thorough discussion and an &lt;a href="https://discourse.llvm.org/t/rfc-clangir-unified-address-space-design-in-clangir/79728">RFC&lt;/a>, we implemented a unified address space design that aligns with ClangIR&amp;rsquo;s objectives, ensuring a clean and maintainable code structure.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;strong>OpenCL Language and SPIR-V Target Integration&lt;/strong>: We extended ClangIR to support the OpenCL language and the SPIR-V target. This involved enhancing the pipeline to accommodate the latest OpenCL 3.0 specification and implementing hooks for language-specific and target-specific customizations.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;strong>Vector Type Support&lt;/strong>: OpenCL vector types, a critical feature for GPU programming, were integrated into ClangIR. We leveraged ClangIR&amp;rsquo;s existing cir.vector type to generate the necessary code, ensuring consistent compilation results.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;strong>Kernel and Module Metadata Emission&lt;/strong>: We added support for emitting OpenCL kernel and module metadata in ClangIR, a necessary step for proper integration with the SPIR-V target. This included the creation of structured attributes to represent metadata, following MLIR&amp;rsquo;s preferences for well-defined structures.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;strong>Global and Static Variables with Qualifiers&lt;/strong>: We implemented support for global and static variables with qualifiers like &lt;code>global&lt;/code>, &lt;code>constant&lt;/code>, and &lt;code>local&lt;/code>, ensuring that these constructs are correctly represented and lowered in the ClangIR pipeline.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;strong>Calling Conventions&lt;/strong>: We adjusted the calling conventions in ClangIR to align with SPIR-V requirements, migrating from the default &lt;code>cdecl&lt;/code> to SPIR-V-specific conventions like &lt;code>SpirKernel&lt;/code> and &lt;code>SpirFunction&lt;/code>. This also enables most OpenCL built-in functions like &lt;code>barrier&lt;/code> and &lt;code>get_global_id&lt;/code>.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;strong>User Experience Enhancements&lt;/strong>: Finally, we ensured that the end-to-end kernel compilation experience using ClangIR was smooth and intuitive, with minimal manual intervention required.&lt;/p>&lt;/li>&lt;/ol>&lt;h1 id="results">Results&lt;/h1>&lt;p>The project successfully met its primary goals. OpenCL kernels from the Polybench-GPU benchmark suite can now be compiled using ClangIR into LLVM IR for SPIR-V. All patches have been merged into the main ClangIR repository, and the project’s progress has been well-documented in the &lt;a href="https://github.com/llvm/clangir/issues/689">overview issue&lt;/a>. I believe the work not only advanced OpenCL support but also laid a solid foundation for future enhancements, such as SYCL and CUDA support in ClangIR.&lt;/p>&lt;p>We have successfully compiled and executed all 20 OpenCL C benchmarks from the &lt;a href="https://github.com/sgrauerg/polybenchGpu">polybenchGpu&lt;/a> repository, passing the built-in result validation. Please refer to our &lt;a href="https://github.com/seven-mile/clangir-ocl-ae">artifact evaluation repository&lt;/a> for detailed instructions on how to experiment with our work.&lt;/p>&lt;h1 id="future-works">Future Works&lt;/h1>&lt;p>As we look forward, there are two key areas that require further development:&lt;/p>&lt;ol>&lt;li>&lt;p>&lt;strong>Function Attribute Consistency&lt;/strong>: For example, the &lt;code>convergent&lt;/code> function attribute is crucial for preventing misoptimizations in SIMT languages like OpenCL. ClangIR currently lacks this attribute, which could lead to issues in parallel computing contexts. Addressing this is a priority to ensure correct optimization behavior.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;strong>Support for OpenCL Built-in Types&lt;/strong>: Another critical area for future work is the support for OpenCL built-in types, such as &lt;code>pipe&lt;/code> and &lt;code>image&lt;/code>. These types are essential for handling data streams and image processing tasks in various specialized OpenCL applications. Supporting these types will significantly enhance ClangIR&amp;rsquo;s adherence to the OpenCL standard, broadening its applicability and ensuring better compatibility with a wide range of OpenCL programs.&lt;/p>&lt;/li>&lt;/ol>&lt;h1 id="acknowledgements">Acknowledgements&lt;/h1>&lt;p>This project would not have been possible without the guidance and support of the LLVM community. I extend my deepest gratitude to my mentors, Julian Oppermann, Victor Lomüller, and Bruno Cardoso Lopes, whose expertise and encouragement were instrumental throughout this journey. Additionally, I would like to thank Vinicius Couto Espindola for his collaboration on ABI-related work. This experience has been immensely rewarding, both technically and in terms of community engagement.&lt;/p>&lt;h1 id="appendix">Appendix&lt;/h1>&lt;ul>&lt;li>&lt;a href="https://github.com/llvm/clangir/issues/689">Overview issue of OpenCL C support&lt;/a>&lt;/li>&lt;li>&lt;a href="https://github.com/seven-mile/clangir-ocl-ae">Artifact Evaluation Instructions&lt;/a>&lt;/li>&lt;/ul></description></item><item><title>GSoC 2024: Half-precision in LLVM libc</title><link>https://blog.llvm.org/posts/2024-08-31-half-precision-in-llvm-libc/</link><pubDate>Sat, 31 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2024-08-31-half-precision-in-llvm-libc/</guid><description>&lt;p>C23 defines new floating-point types, such as &lt;code>_Float16&lt;/code>, which corresponds tothe binary16 format from IEEE Std 754, also known as &amp;ldquo;half-precision,&amp;rdquo; or FP16.C23 also defines new variants of the C standard library&amp;rsquo;s math functionsaccordingly, such as &lt;code>fabsf16&lt;/code> to get the absolute value of a &lt;code>_Float16&lt;/code>.&lt;/p>&lt;p>The &amp;ldquo;Half-precision in LLVM libc&amp;rdquo; Google Summer of Code 2024 project aimed toimplement these new &lt;code>_Float16&lt;/code> math functions in LLVM libc, making it the firstknown C standard library implementation to implement these C23 functions.&lt;/p>&lt;p>We split math functions into two categories: basic operations and higher mathfunctions. The current implementation status of math functions in LLVM libc canbe viewed at &lt;a href="https://libc.llvm.org/math/index.html#implementation-status">https://libc.llvm.org/math/index.html#implementation-status&lt;/a>.&lt;/p>&lt;p>The exact goals of this project were to:&lt;/p>&lt;ol>&lt;li>Setup generated headers properly so that the &lt;code>_Float16&lt;/code> type and &lt;code>_Float16&lt;/code>functions can be used with various compilers and architectures.&lt;/li>&lt;li>Add generic implementations of &lt;code>_Float16&lt;/code> basic operations for supportedarchitectures.&lt;/li>&lt;li>Add optimized implementations of &lt;code>_Float16&lt;/code> basic operations for specificarchitectures using special hardware instructions and compiler builtinswhenever possible.&lt;/li>&lt;li>Add generic implementations of as many &lt;code>_Float16&lt;/code> higher math functions aspossible. We knew we would not have enough time to implement all of them.&lt;/li>&lt;/ol>&lt;h2 id="work-done">Work done&lt;/h2>&lt;ol>&lt;li>The &lt;code>_Float16&lt;/code> type can now be used in generated headers, and declarations of&lt;code>_Float16&lt;/code> math functions are generated with &lt;code>#ifdef&lt;/code> guards to enable themwhen they are supported.&lt;ul>&lt;li>&lt;a href="https://github.com/llvm/llvm-project/pull/93567">https://github.com/llvm/llvm-project/pull/93567&lt;/a>&lt;/li>&lt;/ul>&lt;/li>&lt;li>All 70 planned &lt;code>_Float16&lt;/code> basic operations have been merged.&lt;ul>&lt;li>&lt;a href="https://github.com/llvm/llvm-project/issues/93566">https://github.com/llvm/llvm-project/issues/93566&lt;/a>&lt;/li>&lt;/ul>&lt;/li>&lt;li>The &lt;code>_Float16&lt;/code>, &lt;code>float&lt;/code> and &lt;code>double&lt;/code> variants of various basic operationshave been optimized on certain architectures.&lt;ul>&lt;li>&lt;a href="https://github.com/llvm/llvm-project/pull/98376">https://github.com/llvm/llvm-project/pull/98376&lt;/a>&lt;/li>&lt;li>&lt;a href="https://github.com/llvm/llvm-project/pull/99037">https://github.com/llvm/llvm-project/pull/99037&lt;/a>&lt;/li>&lt;li>&lt;a href="https://github.com/llvm/llvm-project/pull/100002">https://github.com/llvm/llvm-project/pull/100002&lt;/a>&lt;/li>&lt;/ul>&lt;/li>&lt;li>Out of the 54 planned &lt;code>_Float16&lt;/code> higher math functions, 8 have been mergedand 9 have an open pull request.&lt;ul>&lt;li>&lt;a href="https://github.com/llvm/llvm-project/issues/95250">https://github.com/llvm/llvm-project/issues/95250&lt;/a>&lt;/li>&lt;/ul>&lt;/li>&lt;/ol>&lt;p>We ran into unexpected issues, such as:&lt;/p>&lt;ul>&lt;li>Bugs in Clang 11, which is currently still supported by LLVM libc and used inpost-commit CI.&lt;/li>&lt;li>Some post-commit CI workers having old versions of compiler runtimes that aremissing some floating-point conversion functions on certain architectures.&lt;/li>&lt;li>Inconsistent behavior of floating-point conversion functions across compilerruntime vendors (GCC&amp;rsquo;s libgcc and LLVM&amp;rsquo;s compiler-rt) and CPU architectures.&lt;/li>&lt;/ul>&lt;p>Due to these issues, LLVM libc currently only enables all &lt;code>_Float16&lt;/code> functionson x86-64 Linux. Some were disabled on AArch64 due to Clang 11 bugs, and allwere disabled on 32-bit Arm and on RISC-V due to issues with compiler runtimes.Some are not available on GPUs because they take &lt;code>_Float128&lt;/code> arguments, and the&lt;code>_Float128&lt;/code> type is not available on GPUs.&lt;/p>&lt;p>There is work in progress to work around issues with compiler runtimes by usingour own floating-point conversion functions.&lt;/p>&lt;h2 id="work-left-to-do">Work left to do&lt;/h2>&lt;ul>&lt;li>Implement the remaining &lt;code>_Float16&lt;/code> higher math functions.&lt;/li>&lt;li>Enable the &lt;code>_Float16&lt;/code> math functions that are disabled on AArch64 once LLVMlibc bumps its minimum supported Clang version.&lt;/li>&lt;li>Enable &lt;code>_Float16&lt;/code> math functions on 32-bit Arm and on RISC-V once issues withcompiler runtimes are resolved.&lt;/li>&lt;/ul>&lt;h2 id="acknowledgements">Acknowledgements&lt;/h2>&lt;p>I would like to thank my Google Summer of Code mentors, Tue Ly and Joseph Huber,as well as other LLVM maintainers I interacted with, for their help. I wouldalso like to thank Google for organizing this program.&lt;/p></description></item><item><title>GSoC 2024: GPU Libc Benchmarking</title><link>https://blog.llvm.org/posts/2024-08-09-libc-gpu-benchmarking/</link><pubDate>Fri, 09 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2024-08-09-libc-gpu-benchmarking/</guid><description>&lt;p>Hey everyone! My name is James and I worked on LLVM this summer through GSoC. My project is called &lt;a href="https://summerofcode.withgoogle.com/programs/2024/projects/HkRoz49I">GPU Libc Benchmarking&lt;/a>. The main objective of this project was to develop microbenchmarking infrastructure for libc on the GPU.&lt;/p>&lt;h1 id="background">Background&lt;/h1>&lt;p>The LLVM libc project was designed as an alternative to glibc that aims to be modular, configurable, and sanitizer-friendly. Currently, LLVM libc is being ported to Nvidia and AMD GPUs to give libc functionality (e.g. printf(), malloc(), and math functions) on the GPU. As of March 2024, programs can use GPU libc in offloading languages (CUDA, OpenMP) or through direct compilation and linking with the libc library.&lt;/p>&lt;h1 id="what-we-did">What We Did&lt;/h1>&lt;p>During this project, we developed a microbenchmarking framework that is directly compiled for and run on the GPU, using libc functions to display output to the user. As this was a short project (90 hours), we mostly focused on developing the infrastructure and writing a few example usages (isalnum(), isalpha(), and sin()).&lt;/p>&lt;p>Our benchmarking infrastructure is based on Google Benchmark and measures the average cycles, minimum, maximum, and standard deviation of each benchmark. Each benchmark is run for multiple iterations to stabilize the results. Benchmark writers can measure against vendor implementations of libc functions by passing specific linking flags to the benchmark’s CMake portion and registering the corresponding vendor function from the benchmark itself.&lt;/p>&lt;p>Below is an example of our benchmarking infrastructure&amp;rsquo;s output for &lt;code>sinf()&lt;/code>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">Benchmark &lt;span style="color:#f92672">|&lt;/span> Cycles &lt;span style="color:#f92672">|&lt;/span> Min &lt;span style="color:#f92672">|&lt;/span> Max &lt;span style="color:#f92672">|&lt;/span> Iterations &lt;span style="color:#f92672">|&lt;/span> Time &lt;span style="color:#f92672">/&lt;/span> Iteration &lt;span style="color:#f92672">|&lt;/span> Stddev &lt;span style="color:#f92672">|&lt;/span> Threads &lt;span style="color:#f92672">|&lt;/span>&lt;span style="color:#f92672">----------------------------------------------------------------------------------------------------------&lt;/span>Sinf_1 &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">764&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">369&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">2101&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">273&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> us &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">323&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">|&lt;/span>Sinf_128 &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">721&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">699&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">744&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">913&lt;/span> us &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">|&lt;/span>Sinf_1024 &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">661&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">650&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">689&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> ms &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">31&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">|&lt;/span>Sinf_4096 &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">666&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">663&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">669&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">28&lt;/span> ms &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">28&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">|&lt;/span>SinfTwoPi_1 &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">372&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">369&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">632&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">70&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> us &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">39&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">|&lt;/span>SinfTwoPi_128 &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">379&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">379&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">379&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">895&lt;/span> us &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">|&lt;/span>SinfTwoPi_1024 &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">335&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">335&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">338&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> ms &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">|&lt;/span>SinfTwoPi_4096 &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">335&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">335&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">335&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">28&lt;/span> ms &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">|&lt;/span>SinfTwoPow30_1 &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">371&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">369&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">510&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">70&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> us &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">17&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">|&lt;/span>SinfTwoPow30_128 &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">379&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">379&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">379&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">894&lt;/span> us &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">|&lt;/span>SinfTwoPow30_1024 &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">335&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">335&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">338&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> ms &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">|&lt;/span>SinfTwoPow30_4096 &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">335&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">335&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">335&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">28&lt;/span> ms &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">|&lt;/span>SinfVeryLarge_1 &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">477&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">369&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">632&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">70&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> us &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">58&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">|&lt;/span>SinfVeryLarge_128 &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">487&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">480&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">493&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">900&lt;/span> us &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">|&lt;/span>SinfVeryLarge_1024 &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">442&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">440&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">447&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> ms &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">18&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">|&lt;/span>SinfVeryLarge_4096 &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">441&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">441&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">442&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">28&lt;/span> ms &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">|&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Users can register benchmarks similar to Google Benchmark, using a macro:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#66d9ef">uint64_t&lt;/span> &lt;span style="color:#a6e22e">BM_IsAlnumCapital&lt;/span>() { &lt;span style="color:#66d9ef">char&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>; &lt;span style="color:#66d9ef">return&lt;/span> LIBC_NAMESPACE&lt;span style="color:#f92672">::&lt;/span>latency(LIBC_NAMESPACE&lt;span style="color:#f92672">::&lt;/span>isalnum, x);}BENCHMARK(LlvmLibcIsAlNumGpuBenchmark, IsAlnumCapital, BM_IsAlnumCapital);&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="results">Results&lt;/h1>&lt;p>This project met its major goal of creating microbenchmarking infrastructure for the GPU. However, the original scope of this proposal included a CPU component that would use vendor tools to measure GPU kernel properties. However, this was removed after discussion with the mentors due to technical obstacles in offloading specific kernels to the GPU that would require major changes to other parts of the code.&lt;/p>&lt;h1 id="future-work">Future Work&lt;/h1>&lt;p>As this was a short project (90 hours), we only focused on implementing the microbenchmarking infrastructure. Future contributors can use the benchmarking infrastructure to add additional benchmarks. In addition, there are improvements to microbenchmarking infrastructure that could be added, such as more options for user input ranges, better random distributions for math functions, and a CPU element that can launch multiple kernels and compare results against functions running on the CPU.&lt;/p>&lt;p>The existing code can be found in the &lt;a href="https://github.com/llvm/llvm-project/tree/main/libc/benchmarks/gpu">LLVM repo&lt;/a>.&lt;/p>&lt;h1 id="acknowledgements">Acknowledgements&lt;/h1>&lt;p>This project would not have been possible without my amazing mentor, Joseph Huber, the LLVM Foundation admins, and the GSoC admins.&lt;/p>&lt;h1 id="links">Links&lt;/h1>&lt;p>&lt;a href="https://github.com/llvm/llvm-project/commits?author=jameshu15869">Landed PRs&lt;/a>&lt;/p>&lt;p>&lt;a href="https://github.com/llvm/llvm-project">LLVM GitHub&lt;/a>&lt;/p>&lt;p>&lt;a href="https://llvm.org/">LLVM Homepage&lt;/a>&lt;/p>&lt;p>&lt;a href="https://summerofcode.withgoogle.com/programs/2024/projects/HkRoz49I">GSoC Project Page&lt;/a>&lt;/p></description></item><item><title>LLVM Google Summer of Code 2024 &amp; 2023</title><link>https://blog.llvm.org/posts/2024-02-26-gsoc/</link><pubDate>Thu, 14 Mar 2024 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2024-02-26-gsoc/</guid><description>&lt;p>The LLVM organization was accepted to participate in Google Summer of Code in 2024. Soon, prospective participants will begin submitting their project proposals, and mentors will review them to select those who will spend a significant amount of time this year contributing to various parts of LLVM.&lt;/p>&lt;p>But first, let&amp;rsquo;s look back and see what we had in 2023. The Google Summer of Code 2023 was very successful for the LLVM project. Overall, we received 54 proposals for 24 open projects. Out of this set of proposals, 20 projects were successfully completed and covered many different aspects of LLVM and its subprojects.&lt;/p>&lt;ul>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/lAxUTgOM">ExtractAPI while building&lt;/a> by Ankur Saini, mentored by Daniel Grumberg&lt;/li>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/X0cFgJkY">WebAssembly Support for clang-repl&lt;/a> by Anubhab Ghosh, mentored by Vassil Vassilev and Alexander Penev&lt;/li>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/XvbLGMbT">Modules Build Daemon: Build System Agnostic Support for Explicitly Built Modules&lt;/a> by Connor Sughrue, mentored by Jan Svoboda, Michael Spencer&lt;/li>&lt;li>[Interactive MLIR query tool to make exploring the IR easier] (&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/bdePp9VD">https://summerofcode.withgoogle.com/archive/2023/projects/bdePp9VD&lt;/a>) by Devajith Valaparambil Sreeramaswamy, mentored by Jacques Pienaar&lt;/li>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/JdqGUwNq">Improving Compile Times&lt;/a> by Dhruv Chawla, mentored by Nikita Popov&lt;/li>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/uBg3dUrw">Adding C++ Support to Clang&amp;rsquo;s ExtractAPI&lt;/a> by Erick Velez, mentored by Daniel Grumberg&lt;/li>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/AtKA6GoV">Optimizing MLIR’s Presburger library&lt;/a> by gilsaia, mentored by Kunwar Grover&lt;/li>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/sc4OauXM">Adapting IR Load Semantics to Freeze All or Freeze Only Uninitialized Data&lt;/a> by John McIver, mentored by Nuno Lopes&lt;/li>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/a16FfPnb">Addressing Rust optimization failures in LLVM&lt;/a> by Kohei Asano, mentored by Nikita Popov&lt;/li>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/qxuEqL8W">Tutorial development with clang-repl&lt;/a> by Krishna Narayanan, mentored by Vassil Vassilev&lt;/li>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/oQUfcx89">Fix Handling of Undefined Behavior in NewGVN&lt;/a> by Manuel Brito, mentored by Nuno Lopes&lt;/li>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/JToY28Mf">Map LLVM values to corresponding source-level expressions&lt;/a> by phyBrackets, mentored by Satish Guggilla and Karthik Senthil&lt;/li>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/T8rB84Sr">Machine Learning Guided Ordering of Compiler Optimization Passes&lt;/a> by Puneeth A R, mentored by Tarindu Jayatilaka, Johannes Doerfert, and Mircea Trofin&lt;/li>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/TMnF4MqC">Patch based test coverage for quick test feedback&lt;/a> by ShivamGupta123, mentored by Henrik Olsson&lt;/li>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/4vqXC8Ez">Re-optimization using JITLink&lt;/a> by Sunho Kim, mentored by Vassil Vassilev, Stefan Gränitz, and Lang Hames&lt;/li>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/wxRFR261">Improvements in Clang Diagnostics&lt;/a> by Takuya Shimizu, mentored by Timm Bäder&lt;/li>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/Yofn8VfG">Build &amp;amp; Run SingleSource Benchmarks with ClangIR&lt;/a> by Vinicius Espindola, mentored by Bruno Cardoso Lopes and Nathan Lanza&lt;/li>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/wiTzRdnV">Better Performance Models for MLGO Training&lt;/a> by Viraj Shah, mentored by Mircea Trofin, Aiden Grossman, and Ondrej Sykora&lt;/li>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/ghJRTsUJ">Enhancing llvm-cov to Generate Hierarchical Coverage Reports&lt;/a> by Yuhao Gu, mentored by Petr Hosek and Gulfem Savrun Yeniceri&lt;/li>&lt;li>&lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/Gxg82Pvd">Autocompletion in Clang-REPL&lt;/a> by Yuquan Fu, mentored by Vassil Vassilev&lt;/li>&lt;/ul>&lt;p>Some projects also provided detailed end-of-project reports or project diaries that are outstanding on their own:&lt;/p>&lt;ul>&lt;li>&lt;a href="https://blog.llvm.org/posts/2023-10-5-tutorial-development-with-clang-repl/">Tutorial Development with Clang-Repl&lt;/a>&lt;/li>&lt;li>&lt;a href="ttps://blog.llvm.org/posts/2023-09-19-diagnostic-improvements-in-clang-17/">Diagnostic Improvements in Clang 17&lt;/a>&lt;/li>&lt;li>&lt;a href="https://dc03.github.io/">Improving Compile Times&lt;/a>&lt;/li>&lt;li>&lt;a href="https://khei4.github.io/gsoc2023/">Addressing Rust optimization failures in LLVM&lt;/a>&lt;/li>&lt;li>&lt;a href="https://blog.llvm.org/posts/2023-09-19-gsoc-2023-blog-post/">Map LLVM Values to corresponding source level expression&lt;/a>&lt;/li>&lt;li>&lt;a href="https://blog.llvm.org/posts/2023-12-31-compiler-research-internships-2023/">Another step forward towards interactive programming&lt;/a> - covers &lt;em>Autocompletion in Clang-REPL&lt;/em>, &lt;em>WebAssembly Support for Clang-Repl&lt;/em>, &lt;em>Re-optimization using JITLink&lt;/em> and &lt;em>Tutorial development with clang-repl&lt;/em> projects.&lt;/li>&lt;/ul>&lt;h2 id="gsoc-2024">GSoC 2024&lt;/h2>&lt;p>With a successful end to 2023, the LLVM Project is excited to participate in GSOC 2024. If you are interested in participating, here are some guidelines:&lt;/p>&lt;h3 id="1-project-ideas">1. Project ideas&lt;/h3>&lt;p>Please take a look on list of projects at &lt;a href="https://llvm.org/OpenProjects.html#gsoc24">Open Projects&lt;/a> page. Projects also have topics below on &lt;a href="https://discourse.llvm.org/tag/gsoc2024">LLVM Discourse&lt;/a> having #gsoc24 tag, so you can ask mentors about details of the project, skills required, etc.&lt;/p>&lt;h3 id="2-way-to-submitting-a-proposal">2. Way to submitting a proposal&lt;/h3>&lt;p>We encourage you to discuss your proposal before submitting to GSoC system. Having your proposal discussed ensures that your proposal will be well aligned with the project. Please do not hijack other threads (e.g. with mentor Q&amp;amp;A) and create a separate new thread to discuss your proposal. The ideal proposal will contain:&lt;/p>&lt;ul>&lt;li>A descriptive title&lt;/li>&lt;li>Information about you, including contact information. Please do not forget to include:&lt;ul>&lt;li>Your prior compiler and compiler-related experience, if any (e.g. studies at the University, prior contributions)&lt;/li>&lt;li>Whether you have any prior contributions to LLVM. If yes, please provide links to these contributions.&lt;/li>&lt;li>Your past open source participation and contributions, if any&lt;/li>&lt;li>Your knowledge of programming languages (e.g. C, C++, Python, Rust, etc.) and your estimate of your level of experience&lt;/li>&lt;/ul>&lt;/li>&lt;li>Information about your proposed project. This should be fairly detailed and include a timeline.&lt;/li>&lt;li>Information about other commitments that might affect your ability to work during the GSoC period (exams, classes, holidays, other jobs, weddings, etc.). Also, if the project allows both medium- and large-size participation, indicate the intended size of the project and the timeframe of your participation.&lt;/li>&lt;/ul>&lt;h3 id="3-useful-links">3. Useful links&lt;/h3>&lt;p>&lt;a href="https://llvm.org/docs/Contributing.html">LLVM Contribution Guidelines&lt;/a>&lt;a href="https://llvm.org/docs/DeveloperPolicy.html">LLVM Developer Policy&lt;/a>&lt;a href="https://discord.gg/ezbevd7tJC">GSoC channel on LLVM Discord&lt;/a>&lt;a href="https://llvm.org/docs/GettingInvolved.html">Other documents&lt;/a>&lt;a href="https://llvm.org/docs/CodeOfConduct.html">LLVM Community Code of Conduct&lt;/a>&lt;a href="https://google.github.io/gsocguides/student/">GSoC Contributor Guide&lt;/a>&lt;a href="https://developers.google.com/open-source/gsoc/help/%5Bstudent-advice">Advice for People Applying for GSoC&lt;/a>&lt;a href="https://summerofcode.withgoogle.com/">GSoC Program Website&lt;/a>&lt;a href="https://llvm.org/docs/GettingInvolved.html#office-hours">LLVM Office Hours&lt;/a>&lt;/p>&lt;h3 id="4-deadlines">4. Deadlines&lt;/h3>&lt;ul>&lt;li>Submission to GSoC system opens on March 18th at 18:00 UTC.&lt;/li>&lt;li>Submission to GSoC system ends on April 2nd at 18:00 UTC.&lt;/li>&lt;li>Results to be announced on May 1st at 18:00 UTC.&lt;/li>&lt;/ul>&lt;p>Welcome to the 20th Google Summer of Code!&lt;/p></description></item><item><title>Another step forward towards interactive programming</title><link>https://blog.llvm.org/posts/2023-12-31-compiler-research-internships-2023/</link><pubDate>Sun, 31 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2023-12-31-compiler-research-internships-2023/</guid><description>&lt;p>The &lt;a href="https://compiler-research.org">Compiler Research&lt;/a> team is pleased to announce the successful completionof another round of internships focused on enhancements in interactiveprogramming, specifically in relation to the &lt;a href="https://clang.llvm.org/docs/ClangRepl.html">Clang-REPL&lt;/a> component in LLVM.&lt;/p>&lt;p>The Compiler Research team includes researchers located at Princeton Universityand CERN. Our primary goal is best described as follows:&lt;/p>&lt;blockquote>&lt;p>To establish a proficient workflow in LLVM, where &lt;a href="https://compiler-research.org/interactive_cpp">interactive development&lt;/a> inC++ is possible, and exploratory C++ becomes an accessible experience to awider audience.&lt;/p>&lt;/blockquote>&lt;p>Following are some notable contributions by our interns this year.&lt;/p>&lt;h2 id="yuquan-fu---autocompletion-in-clang-repl">Yuquan Fu - Autocompletion in Clang-REPL&lt;/h2>&lt;p>Clang-Repl allows developers to program in C++ interactively with a REPLenvironment. However, it was missing the ability to suggest code completion orauto-complete options for user input, which can be time-consuming and prone totyping errors.&lt;/p>&lt;p>With this code completion system, users can either complete their input quicklyor see a list of valid completion candidates. The code completion is alsocontext-aware, providing semantically relevant results based on the currentposition and input on the current line.&lt;/p>&lt;p>Mentors: Vassil Vassilev (&lt;a href="https://www.princeton.edu/">Princeton.edu&lt;/a>) &amp;amp; David Lange (&lt;a href="https://www.princeton.edu/">Princeton.edu&lt;/a>)&lt;/p>&lt;p>Project Details: &lt;a href="https://www.syntaxforge.net/clang-repl-cc/">Autocompletion in Clang-REPL&lt;/a>&lt;/p>&lt;p>Funding: Google Summer of Code 2023&lt;/p>&lt;h3 id="example--avoiding-tedious-typing">Example – avoiding tedious typing&lt;/h3>&lt;pre tabindex="0">&lt;code>clang-repl&amp;gt; struct WhateverMeaningfulLoooooooooongName{ int field;};clang-repl&amp;gt; Wh&amp;lt;tab&amp;gt;&lt;/code>&lt;/pre>&lt;p>With code completion, hitting tab completes the entity name:&lt;/p>&lt;pre tabindex="0">&lt;code>clang-repl&amp;gt; WhateverMeaningfulLoooooooooongName&lt;/code>&lt;/pre>&lt;blockquote>&lt;p>For implementation details, please see the respective &lt;a href="https://compiler-research.org/assets/presentations/CaaS_Weekly_30_08_2023_Fred-Code_Completion_in_ClangRepl_GSoC.pdf">slides&lt;/a> and the&lt;a href="https://compiler-research.org/blogs/gsoc23_ffu_experience_blog/">blog&lt;/a>.&lt;/p>&lt;/blockquote>&lt;h2 id="anubhab-ghosh---webassembly-support-for-clang-repl">Anubhab Ghosh - WebAssembly Support for Clang-Repl&lt;/h2>&lt;p>The Xeus Framework enables accessing Clang-REPL (an interpreter that JITcompiles C++ code into native code) in a web browser, using Jupyter. However,this shifts the computational load to the server.&lt;/p>&lt;p>A more scalable approach is to use WebAssembly. It allows sandboxed executionof native (e.g. C/C++/Rust) programs compiled to an intermediate bytecode atcloser to native speeds. The idea is to run clang-repl within WebAssembly andgenerate JIT-compiled WebAssembly code and execute it on the client side.&lt;/p>&lt;p>However, this comes with some challenges (e.g., code in WebAssembly isimmutable, which is unacceptable for JIT).&lt;/p>&lt;p>Solution: To address the code immutability issue, a new WebAssembly module iscreated at each iteration of the REPL loop. Initially, a precompiled modulecontaining the Standard C/C++ libraries, LLVM, Clang, and wasm-ld is sent tothe browser, which runs the interpreter and compiles the user code.&lt;/p>&lt;p>Since we cannot call Interpreter::Execute() to execute the module (due toJITLink reliance), the LLVM WebAssembly backend is used manually to produce anobject file. This file is then passed to the WebAssembly version of LLD(wasm-ld) to turn it into a shared library which is written to the virtual filesystem of Emscripten. The dynamic linking facilities of Emscripten can be usedto load this library.&lt;/p>&lt;p>Mentors: Vassil Vassilev (&lt;a href="https://www.princeton.edu/">Princeton.edu&lt;/a>) &amp;amp; Alexander Penev (&lt;a href="https://uni-plovdiv.bg/en/">Uni-Plovdiv.bg&lt;/a>)&lt;/p>&lt;p>Project Details: &lt;a href="https://gist.github.com/argentite/c0852d3e178c4770a429f14291e83475">WebAssembly Support for Clang-Repl&lt;/a>&lt;/p>&lt;p>Funding: Google Summer of Code 2023&lt;/p>&lt;h3 id="example">Example:&lt;/h3>&lt;pre tabindex="0">&lt;code>SDL_Init(SDL_INIT_VIDEO);SDL_Window *window;SDL_Rendered *renderer;SDL_CreateWindowAndRenderer (300, 300, 0, &amp;amp;window, &amp;amp;renderer);&lt;/code>&lt;/pre>&lt;p>This should connect to a simple black canvas. Next, we can draw things into it.&lt;/p>&lt;pre tabindex="0">&lt;code>SDL_SetRenderDrawColor(renderer, 0x80, 0x00, 0x00, 0xFF);SDL_Rect rect3 = {.x = 20, .y = 20, .w = 150, .h = 100};SDL_RenderFillRect(rendered, &amp;amp;rect3); SDL_SetRenderDrawColor(renderer, 0x00, 0x80, 0x00, 0xFF);SDL_Rect rect4 = {.x = 40, .y = 40, .w = 150, .h = 100};SDL_RenderFillRect(rendered, &amp;amp;rect4); SDL_RenderPresent(renderer);&lt;/code>&lt;/pre>&lt;p>The output should look something like this:&lt;/p>&lt;figure>&lt;img src="https://blog.llvm.org/img/WebAssemblyExample.png" alt="Web Assembly Example"/>&lt;/figure>&lt;h2 id="sunho-kim----re-optimization-using-jitlink">Sunho Kim - Re-optimization using JITLink&lt;/h2>&lt;p>In order to support re-optimization, the JITLink API was extended by adding thecross-architecture stub creation API. This API works in all platforms andarchitectures that JITLink supports and through this we can create theredirectable stubs by using JITLink.&lt;/p>&lt;p>Once the re-optimization API was developed, it was time to actually implementre-optimization. A new layer was introduced to support re-optimization of IRmodules. There were many abstraction levels where redirection could beimplemented, but we ended up doing it at IR level since that brings a lot ofre-optimization techniques to be implemented easily by transforming IRdirectly. From an API perspective, the most flexible abstraction level to dothis may be at the FrontEnd AST level.&lt;/p>&lt;p>Clang-Repl relies on LLJIT to do JIT-related tasks. Enabling re-optimizationfor LLJIT also helped enable it in Clang-Repl. However, there were minorchallenges (e.g., mismatch in what clang-repl expects from how the runtimeexecutes the static initializers and how ELF orc runtime runs it). Possiblesolutions for these are in discussion (e.g., adding a new dl function).Nevertheless, we now have a real-world experimental environment where we cantest new re-optimization techniques and perform benchmarks to see if they areuseful.&lt;/p>&lt;p>Finally, based on the above infrastructure, profile guided optimization is nowpossible (by transforming the IR module). There are still some enhancementspending before the code is fully upstreamed, but the current code achievesinstrumentation on the orc-runtime side, which simplifies implementation by alot.&lt;/p>&lt;p>Mentors: Vassil Vassilev (&lt;a href="https://www.princeton.edu/">Princeton.edu&lt;/a>) &amp;amp; Lang Hames/ lhames (&lt;a href="https://www.apple.com">Apple&lt;/a>)&lt;/p>&lt;p>Project Details: &lt;a href="https://gist.github.com/sunho/bbbf7c415ea4e16d37bec5cea8adce5a">Re-optimization using JITLink&lt;/a>&lt;/p>&lt;p>Funding: Google Summer of Code 2023&lt;/p>&lt;h3 id="example-doing-the--o2-optimization-if-function-was-called-more-than-10-times">Example: Doing the -O2 optimization if function was called more than 10 times&lt;/h3>&lt;p>The following example builds a PassManager using the LLVM library and then runsthe optimization pipeline.&lt;/p>&lt;pre tabindex="0">&lt;code>static Error reoptimizeTo02(ReOptimizeLayer &amp;amp;Parent, ReOptMaterializationUnitID MUID, unsigned Curverison, ResourceTrackerSP OldRT, ThreadSafeModule &amp;amp;TSM) { TSM.withModuleDo([&amp;amp;]{llvm::Module &amp;amp;M) { auto PassManager = buildPassManager(); PassManager.run(M); }); return Error::success();}ReOptLayer -&amp;gt;setReoptimizeFunc(reoptimizeTo02);ReOptLayer -&amp;gt;setAddProfileFunc(reoptimizeIfCallFrequent);&lt;/code>&lt;/pre>&lt;p>For more examples, please see the &lt;a href="https://github.com/sunho/LLVM-JITLink-COFF-Example">LLVM-JITLink-COFF-Example&lt;/a> repo.&lt;/p>&lt;h2 id="krishna-narayanan---tutorial-development-with-clang-repl">Krishna Narayanan - Tutorial development with clang-repl&lt;/h2>&lt;p>Open Source documentation is often a neglected area in the software lifecycle.Specifically, this project targeted helping contributors by documenting howthey can set up respective environments on their local machines to contributeto the code and documentation of the respective project. These environmentswere set up locally, tested and then the setup methodology was updated in therelevant documentation.&lt;/p>&lt;p>Besides other compiler research technologies, write-ups were also added to LLVM(specifically the Clang-Repl documentation) as part of this project. Usageexamples were also added.&lt;/p>&lt;p>Mentors: Vassil Vassilev (&lt;a href="https://www.princeton.edu/">Princeton.edu&lt;/a>) &amp;amp; David Lange (&lt;a href="https://www.princeton.edu/">Princeton.edu&lt;/a>)&lt;/p>&lt;p>Project Details: &lt;a href="https://github.com/Krishna-13-cyber/GSoC23-LLVM/blob/main/README.md">Tutorial development with clang-repl&lt;/a>&lt;/p>&lt;p>Funding: Google Summer of Code 2023&lt;/p>&lt;h3 id="example-1">Example&lt;/h3>&lt;pre tabindex="0">&lt;code>// Classes and Structuresclang-repl&amp;gt; #include &amp;lt;iostream&amp;gt;clang-repl&amp;gt; class Rectangle {int width, height; public: void set_values (int,int);\clang-repl... int area() {return width*height;}};clang-repl&amp;gt; void Rectangle::set_values (int x, int y) { width = x;height = y;}clang-repl&amp;gt; int main () { Rectangle rect;rect.set_values (3,4);\clang-repl... std::cout &amp;lt;&amp;lt; &amp;quot;area: &amp;quot; &amp;lt;&amp;lt; rect.area() &amp;lt;&amp;lt; std::endl;\clang-repl... return 0;}clang-repl&amp;gt; main();area: 12&lt;/code>&lt;/pre></description></item><item><title>Tools for Learning LLVM TableGen</title><link>https://blog.llvm.org/posts/2023-12-07-tools-for-learning-llvm-tablegen/</link><pubDate>Thu, 07 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2023-12-07-tools-for-learning-llvm-tablegen/</guid><description>&lt;p>&lt;a href="https://github.com/llvm/llvm-project/tree/main/llvm/utils/TableGen">TableGen&lt;/a>is a language used within the LLVM project for generating a variety of files,when manual maintenance would be very difficult.&lt;/p>&lt;p>For example, it is used to define all of the instructions that can be used on aparticular architecture. The information is defined in TableGen and we canproduce many things based on that single source file. C++ code, documentation,command line options, and so on.&lt;/p>&lt;p>TableGen has been in existence since&lt;a href="https://github.com/llvm/llvm-project/commit/a6240f6b1a34f9238cbe8bc8c9b6376257236b0a">before&lt;/a>the first official release of LLVM, over 20 years ago.&lt;/p>&lt;p>Today in the &lt;a href="https://github.com/llvm/llvm-project">LLVM project repository&lt;/a> there areover a thousand TableGen source files totalling over 500,000 lines of code.Making it the 5th most popular language in the repository.&lt;/p>&lt;table>&lt;thead>&lt;tr>&lt;th>Language&lt;/th>&lt;th>files&lt;/th>&lt;th>blank&lt;/th>&lt;th>comment&lt;/th>&lt;th>code&lt;/th>&lt;/tr>&lt;/thead>&lt;tbody>&lt;tr>&lt;td>C++&lt;/td>&lt;td>29642&lt;/td>&lt;td>958542&lt;/td>&lt;td>1870101&lt;/td>&lt;td>5544445&lt;/td>&lt;/tr>&lt;tr>&lt;td>C/C++ Header&lt;/td>&lt;td>11844&lt;/td>&lt;td>316806&lt;/td>&lt;td>499845&lt;/td>&lt;td>1486165&lt;/td>&lt;/tr>&lt;tr>&lt;td>C&lt;/td>&lt;td>10535&lt;/td>&lt;td>259900&lt;/td>&lt;td>1603594&lt;/td>&lt;td>1011269&lt;/td>&lt;/tr>&lt;tr>&lt;td>Assembly&lt;/td>&lt;td>10694&lt;/td>&lt;td>478035&lt;/td>&lt;td>1222315&lt;/td>&lt;td>820236&lt;/td>&lt;/tr>&lt;tr>&lt;td>TableGen&lt;/td>&lt;td>1312&lt;/td>&lt;td>94112&lt;/td>&lt;td>83616&lt;/td>&lt;td>580289&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>&lt;p>(Counted from&lt;a href="https://github.com/llvm/llvm-project/commit/ba24b814f2a20a136f0a7a0b492b6ad8a62114c6">this commit&lt;/a>,rest of table omitted)&lt;/p>&lt;p>With projects such as MLIR&lt;a href="https://mlir.llvm.org/docs/DefiningDialects/Operations/">embracing TableGen&lt;/a>,it is only going to grow. So if you are contributing to LLVM, you will encounterit at some point.&lt;/p>&lt;p>Which might be a problem as TableGen only exists within LLVM. Unlike a languagesuch as C++, TableGen does not have a large array of resources.&lt;/p>&lt;p>So, as well as joining a new project, you also need to learn a newDomain Specific Language (DSL). You did not come to LLVM to learn a DSL, youprobably came here to write a compiler.&lt;/p>&lt;p>I cannot say when this problem might be solved, but the situation is not asbleak as it appears. There have been big improvements in TableGen toolsrecently, which means you can put more of your energy into the goals thatbrought you to LLVM in the first place.&lt;/p>&lt;h1 id="a-brief-introduction-to-tablegen">A Brief Introduction to TableGen&lt;/h1>&lt;p>Imagine you wanted to represent the registers of an architecture. I am going touse Arm&amp;rsquo;s AArch64 in particular here.&lt;/p>&lt;p>You could describe them in TableGen as:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat register.tdclass Register&amp;lt;int _size, string _alias&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span> int size &lt;span style="color:#f92672">=&lt;/span> _size; string alias &lt;span style="color:#f92672">=&lt;/span> _alias;&lt;span style="color:#f92672">}&lt;/span>// &lt;span style="color:#ae81ff">64&lt;/span> bit general purpose registers are X&amp;lt;N&amp;gt;.def X0: Register&amp;lt;8&amp;gt; &lt;span style="color:#f92672">{}&lt;/span>// Some have special alternate names.def X29: Register&amp;lt;8, &lt;span style="color:#e6db74">&amp;#34;frame pointer&amp;#34;&lt;/span>&amp;gt; &lt;span style="color:#f92672">{}&lt;/span>// Some registers omitted...&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default, the TableGen compiler &lt;code>llvm-tblgen&lt;/code> creates “records” - which areshown below.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ./bin/llvm-tblgen register.td------------- Classes -----------------class Register&amp;lt;int Register:_size &lt;span style="color:#f92672">=&lt;/span> ?, string Register:_alias &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span> int size &lt;span style="color:#f92672">=&lt;/span> Register:_size; string alias &lt;span style="color:#f92672">=&lt;/span> Register:_alias;&lt;span style="color:#f92672">}&lt;/span>------------- Defs -----------------def X0 &lt;span style="color:#f92672">{&lt;/span> // Register int size &lt;span style="color:#f92672">=&lt;/span> 8; string alias &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>;&lt;span style="color:#f92672">}&lt;/span>def X29 &lt;span style="color:#f92672">{&lt;/span> // Register int size &lt;span style="color:#f92672">=&lt;/span> 8; string alias &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;frame pointer&amp;#34;&lt;/span>;&lt;span style="color:#f92672">}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is the intermediate representation (IR) of the TableGen compiler, similarto LLVM&amp;rsquo;s &amp;ldquo;LLVM IR&amp;rdquo;.&lt;/p>&lt;p>When using LLVM you would select a &amp;ldquo;target&amp;rdquo; which is the processor architectureyou want to generate instructions for. TableGen&amp;rsquo;s equivalent is a &amp;ldquo;backend&amp;rdquo;.These backends do not generate instructions, but instead output a format forthat backend&amp;rsquo;s specific use case.&lt;/p>&lt;p>For example, there is a backend that generates C++ code for&lt;a href="https://godbolt.org/z/5c696j1f9">searching&lt;/a> data tables. Other examples areC header files and &lt;a href="https://docutils.sourceforge.io/rst.html">reStructuredText&lt;/a>documentation.&lt;/p>&lt;pre tabindex="0">&lt;code> TableGen source | +--llvm-tblgen----------------|------------------------+ | v | | +----- Expanded records ----+ | | | | | | v v | | +-------------------------+ +-------------------+ | | | --gen-searchable-tables | | Other backends... | | | +-------------------------+ +-------------------+ | | | | | +--------------|---------------------------|-----------+ v v .inc file with C++ code Other output formats... for table searching.&lt;/code>&lt;/pre>&lt;p>The main compiler is &lt;code>llvm-tblgen&lt;/code>, but there are others specific tosub-projects of LLVM. For example &lt;code>clang-tblgen&lt;/code> and &lt;code>lldb-tblgen&lt;/code>. The onlydifference is the backends included in each one, the language is the same.&lt;/p>&lt;p>You might take your register definitions and produce C++ code to initialise themin some kind of bootloader. Perhaps you also document it and produce a diagramof the process. With enough backends, you could do all that from the sameTableGen source code.&lt;/p>&lt;p>You would write these backends either in C++ within the TableGen compiler,or as an external backend using the compiler&amp;rsquo;s&lt;a href="https://godbolt.org/z/vre845e77">JSON output&lt;/a> (&lt;code>--dump-json&lt;/code>). So you can useany language with a JSON parser (such as&lt;a href="https://github.com/llvm/llvm-project/blob/main/llvm/utils/TableGen/jupyter/sql_query_backend.ipynb">Python&lt;/a>).&lt;/p>&lt;h1 id="there-is-tablegen-and-there-are-things-built-with-tablegen">There is TableGen and There Are Things Built With TableGen&lt;/h1>&lt;p>This is more a mindset than a tool. It is summed up best by a quote from the&lt;a href="https://llvm.org/docs/TableGen/index.html#tablegen-deficiencies">documentation&lt;/a>:&lt;/p>&lt;blockquote>&lt;p>Despite being very generic, TableGen has some deficiencies that have beenpointed out numerous times. The common theme is that, while TableGen allowsyou to build domain specific languages, the final languages that you createlack the power of other DSLs, which in turn increase considerably the size andcomplexity of TableGen files.&lt;/p>&lt;p>At the same time, TableGen allows you to create virtually any meaning of thebasic concepts via custom-made backends, which can pervert the original designand make it very hard for newcomers to understand the evil TableGen file.”&lt;/p>&lt;/blockquote>&lt;p>This means that you will be tackling TableGen, and things built with TableGen.Which are often more complicated than the language.&lt;/p>&lt;p>It is like learning C++ and struggling to use &lt;a href="https://www.boost.org/">Boost&lt;/a>.Someone might say to you, “Boost is not required, why not remove it and saveyourself the hassle?”. As someone new to C++, you might not be aware of theboundary between the two of them.&lt;/p>&lt;p>Of course this does not help you too much if the project you want to contributeto uses Boost. You are stuck dealing with both. In LLVM terms, the TableGenlanguage and the backends that consume it are a package deal.&lt;/p>&lt;p>I mention this so that you can draw a distinction between not understandingone or the other. Knowing which one is confusing you is a big advantageto finding help.&lt;/p>&lt;p>For any task there are probably one or two &amp;ldquo;things built with TableGen&amp;rdquo; that youneed to understand and even then, not entirely.&lt;/p>&lt;p>Do not think that your TableGen journey must end with understanding all the waysit is used. That is possible, but it is not required, and hardly anyone learnseverything. Instead put your energy into the things that really interest you.&lt;/p>&lt;h1 id="compiler-explorer">Compiler Explorer&lt;/h1>&lt;p>Of course we have TableGen in Compiler Explorer! Is a language even real if it isnot in Compiler Explorer?&lt;/p>&lt;p>(Of course it is, but if your favourite language is not there, Compiler Explorerhas &lt;a href="https://github.com/compiler-explorer/compiler-explorer/blob/main/docs/AddingALanguage.md">excellent documentation&lt;/a>and friendly maintainers)&lt;/p>&lt;p>Compiler Explorer is a whole bunch of different versions of compilers fordifferent languages and different architectures that you can access with just abrowser tab.&lt;/p>&lt;p>It is an incredible tool for learning, teaching, triaging, optimising and&lt;a href="https://www.youtube.com/watch?v=O5sEug_iaf4">many more&lt;/a> things. I will not go intodetail about it here, just a few things about TableGen&amp;rsquo;s inclusion.&lt;/p>&lt;p>The obvious thing is that &lt;code>llvm-tblgen&lt;/code> does not emit instructions (though ahypothetical backend could) so there is no option to compile to binary orexecute code.&lt;/p>&lt;p>By default, records are printed as plain text. You can choose a backend by adding acompiler option, or by opening the &amp;ldquo;Overrides&amp;rdquo; menu and selecting an &amp;ldquo;Action&amp;rdquo;.&lt;/p>&lt;p>It is important to note that TableGen backends have very specific expectations ofwhat will be in the source code. As if you had a C++ compiler thatwould not compile for Arm unless it saw &lt;code>arm_is_cool&lt;/code> somewhere in thesource code.&lt;/p>&lt;p>In the LLVM repository all the required classes are set up for you, but inCompiler Explorer they are not. So, if you would like to experiment with anexisting backend, I suggest you provide stub implementations of the classes, orcopy some from the LLVM project repository. You can also use standard includesfrom &lt;code>include/llvm/*.td&lt;/code>.&lt;/p>&lt;p>It is not possible at this time to develop a backend within Compiler Explorer,but you can select the JSON backend and copy that JSON to give to local scripts.&lt;/p>&lt;p>Multi-file projects (“IDE mode”) also work as expected, so, if you would like,you can have your own &lt;a href="https://godbolt.org/z/4qhdoaMjE">include files&lt;/a>.&lt;/p>&lt;p>Finally, remember that you can share Compiler Explorer examples. If you areasking or answering questions about TableGen, always include a Compiler Explorerlink if you can!&lt;/p>&lt;h1 id="jupyter-notebooks">Jupyter Notebooks&lt;/h1>&lt;p>&lt;a href="https://jupyter.org/">Jupyter&lt;/a> creates interactive notebooks. A notebook is asingle document which contains text, code and the results of running that code.This enables you to edit the code and rerun it to update the results in thenotebook.&lt;/p>&lt;p>This is great for taking notes or building up large examples from small chunksof code. You can export the document as a notebook that anyone can edit, orin noninteractive formats such as PDF or Markdown.&lt;/p>&lt;p>TableGen can be used in notebooks by using the TableGen Jupyter Kernel.Installation instructions are available &lt;a href="https://github.com/llvm/llvm-project/tree/main/llvm/utils/TableGen/jupyter">here&lt;/a> and you can watch me talk more about it&lt;a href="https://www.youtube.com/watch?v=Gf0FUiY2TRo">here&lt;/a>.&lt;/p>&lt;p>&lt;strong>Note:&lt;/strong> There is also an&lt;a href="https://github.com/llvm/llvm-project/tree/main/mlir/utils/jupyter">MLIR kernel&lt;/a>for Jupyter, along with many others.&lt;/p>&lt;p>We have aimed to give the same experience as other languages, so I will focusnot on how to use a notebook, but instead on what we have been able to make withthem.&lt;/p>&lt;h2 id="tablegen-tutorial-notebook">TableGen Tutorial Notebook&lt;/h2>&lt;p>This notebook is an introduction to TableGen. You can read it on&lt;a href="https://github.com/llvm/llvm-project/blob/main/llvm/utils/TableGen/jupyter/tablegen_tutorial_part_1.ipynb">GitHub&lt;/a>,or &lt;a href="https://raw.githubusercontent.com/llvm/llvm-project/main/llvm/utils/TableGen/jupyter/tablegen_tutorial_part_1.ipynb">download&lt;/a>it and read it in Jupyter.&lt;/p>&lt;p>When using Jupyter, you can edit the document to add your own examples or expandthe ones that you find interesting.&lt;/p>&lt;h2 id="how-to-write-a-tablegen-backend-notebook">&amp;ldquo;How to Write a TableGen Backend&amp;rdquo; Notebook&lt;/h2>&lt;p>This notebook uses Python instead of TableGen, and it shows you how to write abackend.&lt;/p>&lt;p>The 2021 EU LLVM Developer&amp;rsquo;s Meeting talk&lt;a href="https://www.youtube.com/watch?v=UP-LBRbvI_U">“How to write a TableGen backend”&lt;/a>by Min-Yih Hsu is the basis for this. The&lt;a href="https://github.com/llvm/llvm-project/blob/main/llvm/utils/TableGen/jupyter/sql_query_backend.ipynb">notebook&lt;/a>is in fact a Python port of Min&amp;rsquo;s own&lt;a href="https://github.com/mshockwave/SQLGen">C++&lt;/a> implementation.&lt;/p>&lt;p>It shows you how to take the JSON output of &lt;code>llvm-tblgen&lt;/code> and process it withPython to create SQL queries.&lt;/p>&lt;p>What is unique here is we now have the same content in multiple media forms andmultiple programming languages. Choose the ones that suit you best.&lt;/p>&lt;p>Referring back to “There is TableGen and There are Things Built With TableGen”, the tutorial notebook is TableGen. The writing a backend notebook is “ThingsBuilt With TableGen”.&lt;/p>&lt;h2 id="limitations">Limitations&lt;/h2>&lt;p>The major limitation of the notebooks is that we have no output filtering. Thismeans if you do &lt;code>include “llvm/Target/Target.td&amp;quot;&lt;/code> you will get about 320,000lines of output (before you have added any of your own code). This is more thana default notebook accepts from a kernel and when I removed that limit, thebrowser tab crashed.&lt;/p>&lt;p>This is not a problem in most cases and the possible solutions have bigtrade-offs, so we are not going to rush a fix. If it does affect you, please add yourfeedback to the&lt;a href="https://github.com/llvm/llvm-project/issues/72856">tracking issue&lt;/a>.&lt;/p>&lt;h1 id="tablegen-language-server">TableGen Language Server&lt;/h1>&lt;p>The MLIR project has implemented a server for the&lt;a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol&lt;/a>(LSP). Which supports TableGen and&lt;a href="https://mlir.llvm.org/docs/Tools/MLIRLSP/">2 other languages&lt;/a> used within MLIR.&lt;/p>&lt;p>The language server protocol provides information to compatible editors aboutthe structure of a language and project. For example, where are the includedfiles? Where is the definition of a particular type?&lt;/p>&lt;p>If you have used a LSP compatible editor (such as Visual Studio Code), you haveprobably used a language server without knowing. “Go To Definition” is themost common feature they provide.&lt;/p>&lt;p>The Language Server Protocol allows you to open a project, go to the code youwant to change and jump from there directly to the other relevant parts of therepository. With 500,000+ lines of TableGen in the LLVM project, that is a lot ofcode you get to ignore!&lt;/p>&lt;h1 id="setup">Setup&lt;/h1>&lt;p>You will need a copy of the server binary &lt;code>tblgen-lsp-server&lt;/code>. Which you can getfrom the&lt;a href="https://github.com/llvm/llvm-project/releases">release package&lt;/a> for yourplatform, or you can build it yourself.&lt;/p>&lt;p>This is how to build it yourself:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cmake -G Ninja &amp;lt;path-to&amp;gt;/llvm-project/llvm -DCMAKE_BUILD_TYPE&lt;span style="color:#f92672">=&lt;/span>Release -DLLVM_ENABLE_PROJECTS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;mlir&amp;#34;&lt;/span>$ ninja tblgen-lsp-server&lt;/code>&lt;/pre>&lt;/div>&lt;p>Having run those commands, &lt;code>tblgen-lsp-server&lt;/code> is found in &lt;code>&amp;lt;build-dir&amp;gt;/bin/&lt;/code>.&lt;/p>&lt;p>The server reads a compilation database file &lt;code>tablegen_compile_commands.yml&lt;/code>,which is made for you when you configure LLVM using CMake.&lt;/p>&lt;p>This serves a similar purpose to the &lt;code>compile_commands.json&lt;/code> file generated when using&lt;code>CMAKE_EXPORT_COMPILE_COMMANDS&lt;/code>, but the two files are not related.&lt;/p>&lt;p>As long as your checkout of llvm-project includes&lt;a href="https://github.com/llvm/llvm-project/commit/c4afeccdd235a282d200c450e06a730504a66a08">this commit&lt;/a>the compilation database includes TableGen files from all enabledprojects (prior to that commit it was MLIR only).&lt;/p>&lt;p>For example this configure command includes information about TableGen files from theLLVM, Clang, MLIR and LLDB subprojects:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cmake -G Ninja &amp;lt;path-to&amp;gt;/llvm-project/llvm -DCMAKE_BUILD_TYPE&lt;span style="color:#f92672">=&lt;/span>Release -DLLVM_ENABLE_PROJECTS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;clang;llvm;lldb;mlir&amp;#34;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This also applies to &lt;code>-DLLVM_TARGETS_TO_BUILD=&lt;/code>. Enabling only one target meansthat the compilation database only has files relevant to that target.&lt;/p>&lt;p>&lt;strong>Note:&lt;/strong> You do not need to build a project to include its TableGen files inthe compilation database. Configuring is all that is needed.&lt;/p>&lt;p>Next, configure the LSP client for your editor.&lt;/p>&lt;p>If you are using Visual Studio Code, install the MLIR&lt;a href="https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.vscode-mlir">extension&lt;/a>. Then follow the setup instructions&lt;a href="https://mlir.llvm.org/docs/Tools/MLIRLSP/#td---tablegen-files">here&lt;/a> to tellthe extension where the server and compilation database are.&lt;/p>&lt;p>If you are using a different editor, refer to its documentation to learn how toset up a language server. Setting the path to the compilation database may requirethe use of the server&amp;rsquo;s command line options. Run &lt;code>tblgen-lsp-server --help&lt;/code> tosee all available options.&lt;/p>&lt;h2 id="example">Example&lt;/h2>&lt;p>This example assumes you have configured LLVM with the &lt;code>AArch64&lt;/code> target enabled.(It is enabled by default)&lt;/p>&lt;ul>&lt;li>Open the file &lt;code>llvm/lib/Target/AArch64/AArch64.td&lt;/code>.&lt;/li>&lt;li>Put your cursor on a use of the &lt;code>SubtargetFeature&lt;/code> type.&lt;/li>&lt;li>In the menu bar, select &amp;ldquo;Go&amp;rdquo; then &amp;ldquo;Go to Definition&amp;rdquo;.&lt;/li>&lt;li>This takes you to &lt;code>llvm/include/llvm/Target/Target.td&lt;/code>, where&lt;code>SubtargetFeature&lt;/code> is defined.&lt;/li>&lt;/ul>&lt;h2 id="limitations-1">Limitations&lt;/h2>&lt;p>The language server highlights an anti-pattern in the way some LLVM targetssuch as AArch64 use TableGen.&lt;/p>&lt;p>You may find yourself in a file that uses a class but does not define it orinclude any files which define it. This is because this file is intended to beincluded in another file, which does include a definition of that class.&lt;/p>&lt;pre tabindex="0">&lt;code>example.td: class Example {}uses_example.td: def example: Example {}main.td: include &amp;quot;example.td&amp;quot; include &amp;quot;uses_example.td&amp;quot;&lt;/code>&lt;/pre>&lt;p>The example above shows this anti-pattern:&lt;/p>&lt;ul>&lt;li>The file &lt;code>example.td&lt;/code> defines the class &lt;code>Example&lt;/code>.&lt;/li>&lt;li>&lt;code>uses_example.td&lt;/code> uses the class &lt;code>Example&lt;/code>, but does not include &lt;code>example.td&lt;/code>.&lt;/li>&lt;li>&lt;code>main.td&lt;/code> includes both &lt;code>example.td&lt;/code> and &lt;code>uses_example.td&lt;/code>.&lt;/li>&lt;li>&lt;code>main.td&lt;/code> is the file that is compiled.&lt;/li>&lt;li>When you are in &lt;code>uses_example.td&lt;/code>, the language server does not know where&lt;code>Example&lt;/code> is defined,&lt;/li>&lt;li>When you are in &lt;code>main.td&lt;/code>, the language server does know where &lt;code>Example&lt;/code> isdefined.&lt;/li>&lt;/ul>&lt;p>Perhaps we can address this by improving the language server, or reorganisingthe includes so we do not have files that appear to be isolated.&lt;/p>&lt;h1 id="dump">Dump&lt;/h1>&lt;p>What about &lt;code>printf&lt;/code>? The best debugging tool of them all.&lt;/p>&lt;p>TableGen&amp;rsquo;s equivalent is&lt;a href="https://llvm.org/docs/TableGen/ProgRef.html#dump-print-messages-to-stderr">dump&lt;/a>,and its companion &lt;code>repr&lt;/code>.&lt;/p>&lt;pre tabindex="0">&lt;code>def op;class A { string A = &amp;quot;some text&amp;quot;; dag X =(op op);}def a : A;dump &amp;quot;The Value of a is: \n&amp;quot; # !repr(a);&lt;/code>&lt;/pre>&lt;p>&lt;code>dump&lt;/code> prints to &lt;code>stderr&lt;/code>:&lt;/p>&lt;pre tabindex="0">&lt;code>&amp;lt;source&amp;gt;:8:1: note: The Value of a is:a {// A string A = &amp;quot;some text&amp;quot;; dag X = (op op);}dump &amp;quot;The Value of a is: \n&amp;quot; # !repr(a);^&lt;/code>&lt;/pre>&lt;p>This was added&lt;a href="https://github.com/llvm/llvm-project/commit/411c4edeef076bd2e01b104fe095ba381600a3d3">recently&lt;/a>.So you will need a recent build, or a released version 18.0 or newer (which is unreleasedat time of writing).&lt;/p>&lt;p>Of course you can try this&lt;a href="https://godbolt.org/z/Ta6jb19hr">on Compiler Explorer&lt;/a> right now!&lt;/p>&lt;h1 id="assertions">Assertions&lt;/h1>&lt;p>An assertion checks that a condition is true at a specific point in yourprogram. An assertion consists of:&lt;/p>&lt;ul>&lt;li>The keyword &lt;code>assert&lt;/code>.&lt;/li>&lt;li>A condition (usually a call to one of the&lt;a href="https://llvm.org/docs/TableGen/ProgRef.html#bang-operators">bang operators&lt;/a>).&lt;/li>&lt;li>A message.&lt;/li>&lt;/ul>&lt;p>If the condition is false, a compiler error is generated with the message youprovided.&lt;/p>&lt;p>For example, the code below checks that you have not tried to make a registerwith a size that is less than 0.&lt;/p>&lt;pre tabindex="0">&lt;code>class Register&amp;lt;int _size&amp;gt; { assert !gt(_size, 0), &amp;quot;Register size must be &amp;gt; 0, not &amp;quot; # _size # &amp;quot;.&amp;quot; ; int size = _size;}def X0: Register&amp;lt;8&amp;gt; {}def X1: Register&amp;lt;-8&amp;gt; {}&lt;/code>&lt;/pre>&lt;p>(&lt;a href="https://godbolt.org/z/e4GzvhEeh">Try this on Compiler Explorer&lt;/a>)&lt;/p>&lt;p>The register &lt;code>X0&lt;/code> has &lt;code>_size=8&lt;/code>, so the condition &lt;code>!gt(_size, 0)&lt;/code> (which wouldbe &lt;code>_size &amp;gt; 0&lt;/code> in C syntax) is true and therefore no error is generated.&lt;/p>&lt;p>The register &lt;code>X1&lt;/code> has &lt;code>_size=-8&lt;/code>, so the condition is false and an error isgenerated. The compiler output is shown below:&lt;/p>&lt;pre tabindex="0">&lt;code>&amp;lt;source&amp;gt;:2:11: error: assertion failed assert !gt(_size, 0), ^note: Register size must be &amp;gt; 0, not -8.&lt;/code>&lt;/pre>&lt;p>While learning new code it is helpful to add your own assertions to check yourassumptions. In addition, adding assertions to code written to be used by otherpeople is a good way to stop them using it incorrectly. Unlike documentation,you cannot miss an assertion error.&lt;/p>&lt;h1 id="find-in-files">Find In Files&lt;/h1>&lt;p>This is last because in an ideal world it would be the last option, but it isoften not the least of the options. Grep, ack, Find In Files, whatever you call it,searching text is unreasonably effective if you have a little knowledge of thelanguage syntax.&lt;/p>&lt;p>Why should I mention such an obvious idea? Well, obvious is subjective, andthere is a special situation that makes it more effective than usual.&lt;/p>&lt;p>In the LLVM project repository we have the vast majority of TableGen code in use today.Would you like to know how to use a particular feature? It is all there,somewhere in 500,000+ lines of source code. You would be surprised by what asimple query can find despite that.&lt;/p>&lt;p>Think about the thing you are trying to find. What do you think its sourcecode would look like? If it is a class would it have template arguments or notand so would there be a &lt;code>&amp;lt;&lt;/code> after the name? If it is an error message, what partswould be constant and what parts would be inserted into a template message?&lt;/p>&lt;p>&lt;code>Expected end of line&lt;/code> is likely to be a static string so you can search for themessage itself. In contrast, &lt;code>class Foo has no attribute Bar&lt;/code> is more likely tobe created by substituting in the name of the class and attribute. So a goodsearch term for this would be &lt;code>has no attribute&lt;/code>.&lt;/p>&lt;p>There are also tests for the compiler, most of which are in&lt;a href="https://github.com/llvm/llvm-project/tree/main/llvm/test/TableGen">this folder&lt;/a>.This folder contains minimal examples for the language features. Try narrowingyour search to this location.&lt;/p>&lt;h1 id="conclusion">Conclusion&lt;/h1>&lt;p>Learning TableGen does not have to be scary. Do not think that because it is anisolated DSL that it does not have what you have come to expect from yourfavourite languages.&lt;/p>&lt;p>Keep in mind that TableGen is also a tool, not a goal in itself. If you canachieve your goals with a limited but accurate understanding of TableGen and itsbackends, that is great. Learn as much as you want or need.&lt;/p>&lt;p>In addition to the tools, there is an active community ready to answer yourquestions on &lt;a href="https://discord.com/invite/xS7Z362">Discord&lt;/a> or the&lt;a href="https://discourse.llvm.org/">forums&lt;/a>.&lt;/p>&lt;p>If you find problems or want to contribute improvements please do so. Open aGitHub &lt;a href="https://github.com/llvm/llvm-project/issues">Issue&lt;/a> or&lt;a href="https://llvm.org/docs/Contributing.html">Pull Request&lt;/a>.&lt;/p>&lt;p>Look at the other languages you use. Do they have these tools? Should they? Theymight be the difference between frustration and your new favourite language.&lt;/p>&lt;h1 id="acknowledgements">Acknowledgements&lt;/h1>&lt;p>Thank you to Andrzej Warzyński, Francesco Petrogalli, Min-Yih Hsu and Sally Neale (Arm) for reviewing this article.&lt;/p></description></item><item><title>Tutorial Development with Clang-Repl</title><link>https://blog.llvm.org/posts/2023-10-5-tutorial-development-with-clang-repl/</link><pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2023-10-5-tutorial-development-with-clang-repl/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>&lt;p>I&amp;rsquo;m Krishna Narayanan, a final undergraduate at Veermata Jijabai TechnologicalInstitute, Mumbai and I am talking about my GSoC project in this blog postwhich mentions the goals, tasks we have accomplished during this summer tenure.My GSoC project aims to develop tutorials demonstrating the current capabilities ofClang-repl. The need for Clang-repl is that it presents opportunities for rigorousopen-source development. However, even though it is inspired by cling, not all ofClang-repl and Cling are the same, i.e., they are similar, but work needs to be done toadd Xeus protocol support for Clang-repl.In a similar convention, tutorials were demonstrated for CppInterOp (clang-based C++),Xeus-cpp (interactive programming environment for C++) and Xeus-clang-repl.&lt;/p>&lt;h2 id="contributions">Contributions:&lt;/h2>&lt;p>This is the list of contributions according to the pull requests I have sent:&lt;/p>&lt;h3 id="1-update-clang-repl-documentation">1. Update Clang-Repl Documentation&lt;/h3>&lt;ul>&lt;li>&lt;a href="https://reviews.llvm.org/D152109">https://reviews.llvm.org/D152109&lt;/a>&lt;/li>&lt;li>&lt;a href="https://reviews.llvm.org/D156858">https://reviews.llvm.org/D156858&lt;/a>&lt;/li>&lt;li>&lt;a href="https://github.com/llvm/llvm-project/pull/65650">https://github.com/llvm/llvm-project/pull/65650&lt;/a>&lt;/li>&lt;/ul>&lt;p>This patch adds support for Clang-Repl documentation, basically, it provides alldetails regarding the usage of Clang-Repl. It emphasises the features of Clang-Replthat it offers to the user. The REPL nature enables users to prototype,experiment and gives a user-friendly experience. Similarly, the second patchadds Clang-Repl Execution Handling Results by Saqib in which we enabled thegraphviz extension for the llvm/clang documents to support the graphviz conventionfor pictorial representation (under review).&lt;/p>&lt;h3 id="2-add-c-interop-documentation-setup">2. Add C++ InterOp Documentation Setup&lt;/h3>&lt;ul>&lt;li>&lt;a href="https://github.com/compiler-research/CppInterOp/pull/87">https://github.com/compiler-research/CppInterOp/pull/87&lt;/a>&lt;/li>&lt;li>&lt;a href="https://github.com/compiler-research/CppInterOp/pull/99">https://github.com/compiler-research/CppInterOp/pull/99&lt;/a>&lt;/li>&lt;li>&lt;a href="https://github.com/compiler-research/CppInterOp/pull/105">https://github.com/compiler-research/CppInterOp/pull/105&lt;/a>&lt;/li>&lt;li>&lt;a href="https://github.com/compiler-research/CppInterOp/pull/121">https://github.com/compiler-research/CppInterOp/pull/121&lt;/a>&lt;/li>&lt;li>&lt;a href="https://github.com/compiler-research/CppInterOp/pull/134">https://github.com/compiler-research/CppInterOp/pull/134&lt;/a>&lt;/li>&lt;/ul>&lt;p>&lt;strong>CppInterOp&lt;/strong> is a clang-based C++ Interoperability library, which enables interoperabilitywith C++ code to more interactive languages like Python. The above patch addsdocumentation setup for CppInterOp consisting of both sphinx and doxygendocumentations. The above patches have covered all topics, points catering to thedevelopment and usage of CppInterOp which include building from source(installation), usage, FAQs, developer’s documentation, tutorials and references. The tutorials inthe docs give a detailed understanding of C++ InterOp usage, which includes C-C++interoperability and C++-python interoperability.&lt;/p>&lt;h3 id="3-add-xeus-clang-repl-documentation-setup">3. Add xeus-clang-repl Documentation Setup&lt;/h3>&lt;ul>&lt;li>&lt;a href="https://github.com/compiler-research/xeus-clang-repl/pull/33">https://github.com/compiler-research/xeus-clang-repl/pull/33&lt;/a>&lt;/li>&lt;li>&lt;a href="https://github.com/compiler-research/xeus-clang-repl/pull/34">https://github.com/compiler-research/xeus-clang-repl/pull/34&lt;/a>&lt;/li>&lt;li>&lt;a href="https://github.com/compiler-research/xeus-clang-repl/pull/35">https://github.com/compiler-research/xeus-clang-repl/pull/35&lt;/a>&lt;/li>&lt;/ul>&lt;p>&lt;strong>Xeus-clang-repl&lt;/strong> integrates clang-repl with the xeus protocol and is a platformfor C++ usage in Jupyter Notebooks. The above patch adds a documentation setupfor xeus-clang-repl consisting of both sphinx and doxygen documentations. Thedocumentation covers all information regarding installation, usage, importanceand references for xeus-clang-repl. It includes tutorials portraying the differentfeatures that can be used in xeus-clang-repl, especially the C++-python integrationexecuting simultaneously in the Jupyter cell with the help of magic commands( %%python).&lt;/p>&lt;h3 id="4-add-xeus-cpp-documentation-setup">4. Add xeus-cpp Documentation Setup&lt;/h3>&lt;ul>&lt;li>&lt;a href="https://github.com/compiler-research/xeus-cpp/pull/13">https://github.com/compiler-research/xeus-cpp/pull/13&lt;/a>&lt;/li>&lt;/ul>&lt;p>&lt;strong>Xeus-cpp&lt;/strong> is an interactive programming environment that allows you toexecute C++ code in a Jupyter Notebook. The above patch adds a documentation setupfor xeus-cpp consisting of both sphinx and doxygen documentations.The documentationcovers all information regarding installation, usage, importance and referencesfor xeus-cpp.It includes tutorials portraying the different features that can be used in xeus-cpp,especially the C++-python integration executing simultaneously in the Jupyter cellwith the help of magic commands(%%python).&lt;/p>&lt;h3 id="5-others">5. Others&lt;/h3>&lt;ul>&lt;li>&lt;a href="https://github.com/compiler-research/xeus-cpp/pull/12">https://github.com/compiler-research/xeus-cpp/pull/12&lt;/a>&lt;/li>&lt;li>&lt;a href="https://github.com/vgvassilev/clad/pull/610">https://github.com/vgvassilev/clad/pull/610&lt;/a>&lt;/li>&lt;/ul>&lt;p>These are miscellaneous patches contributing to the development of currentdocumentation setup and content. It includes migration from the v1 to the v2 configurationfor readthedocs setup.&lt;/p>&lt;h2 id="acknowledgements">Acknowledgements&lt;/h2>&lt;p>All the goals that were originally proposed have been completed to the best of myabilities (the xeus-cpp setup has not been merged yet). I will be working on improvingthese things after suggestions in the upcoming weeks to make tutorials and documentationmore understandable for users. I will keep working with the compiler research groupeven after the GSoC period, contributing to tutorials and landing other developmentpatches.&lt;/p>&lt;p>I am extremely grateful to my mentors, Vassil and David, for their constanthelp and support in the last two months. Many thanks to Vassil for providing helpand reviewing the code promptly and guiding me towards the final goal, specialthanks to Parth and Baidyanath for guiding me during the initial phase of GSoC.The journey has been quite full of learning, experiencing new techstack and realisingthe importance of documentation and tutorials for a better user experience. I thankVassil and all LLVM community members for giving me this great opportunity to workwith such an evergreen and interesting community.&lt;/p>&lt;p>Finally, thanking everyone at the compiler research group for assisting throughoutthe GSoC period with many new concepts and help I needed. I am also thankful toGoogle for providing me the opportunity to work on this project during the summer,which helped me learn a lot and will also surely help in my career in the future.&lt;/p></description></item><item><title>Diagnostic Improvements in Clang 17</title><link>https://blog.llvm.org/posts/2023-09-19-diagnostic-improvements-in-clang-17/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2023-09-19-diagnostic-improvements-in-clang-17/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>&lt;p>In the last few months, I have been a part of an ongoing effort to improve Clang&amp;rsquo;s diagnostic capabilities.The newly released Clang 17 brings several of these improvements to the forefront.This blog post aims to provide a comprehensive overview of these diagnostic enhancements.We will employ simplified code examples and compare diagnostic outputs from Clang 16 and Clang 17 to illustrate how the latest updates can enhance the development experience for Clang users.&lt;/p>&lt;h3 id="multi-line-printing-of-code-snippets">Multi-line printing of code snippets&lt;/h3>&lt;p>One of the most anticipated diagnostic features of Clang 17 is its support for multi-line printing of code snippets.This marks a departure from the old single-line limit, which used to make it difficult to fully understand the context around a code issue.This new feature improves the readability and comprehensibility of diagnostic messages by displaying a more complete view of the code in question.Moreover, line numbers are now attached to the left of each line, allowing for quicker navigation and issue resolution.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">func&lt;/span>( &lt;span style="color:#66d9ef">int&lt;/span> a, &lt;span style="color:#66d9ef">int&lt;/span> b, &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> r);&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>ptr) { func(&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>); func(&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>);}&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:5:3: error: no matching function for call to &amp;#39;func&amp;#39; func(3, 4, 5); ^~~~&amp;lt;source&amp;gt;:1:5: note: candidate function not viable: expects an lvalue for 3rd argumentint func( ^&amp;lt;source&amp;gt;:6:3: error: no matching function for call to &amp;#39;func&amp;#39; func(3, 4); ^~~~&amp;lt;source&amp;gt;:1:5: note: candidate function not viable: requires 3 arguments, but 2 were providedint func( ^&lt;/code>&lt;/pre>&lt;/div>&lt;p>After:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:5:3: error: no matching function for call to &amp;#39;func&amp;#39; 5 | func(3, 4, 5); | ^~~~&amp;lt;source&amp;gt;:1:5: note: candidate function not viable: expects an lvalue for 3rd argument 1 | int func( | ^ 2 | int a, int b, int&amp;amp; r); | ~~~~~~&amp;lt;source&amp;gt;:6:3: error: no matching function for call to &amp;#39;func&amp;#39; 6 | func(3, 4); | ^~~~&amp;lt;source&amp;gt;:1:5: note: candidate function not viable: requires 3 arguments, but 2 were provided 1 | int func( | ^ 2 | int a, int b, int&amp;amp; r); | ~~~~~~~~~~~~~~~~~~~~&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, the newly covered source ranges make it easier to understand why the overload candidate is invalid.&lt;/p>&lt;p>Commit: &lt;a href="https://reviews.llvm.org/D147875">https://reviews.llvm.org/D147875&lt;/a> (Timm Bäder)&lt;/p>&lt;h3 id="preprocessor-related-diagnostics">Preprocessor-related diagnostics&lt;/h3>&lt;ul>&lt;li>Clang warns on macro redefinitions. When the redefinition happens in assembly files, and the previous definition of the macro comes from the command line, the last definition is now diagnosed as coming from &lt;code>&amp;lt;command line&amp;gt;&lt;/code> instead of &lt;code>&amp;lt;built-in&amp;gt;&lt;/code>.&lt;/li>&lt;/ul>&lt;p>Assembly file:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-asm" data-lang="asm">&lt;span style="color:#75715e">#define MACRO 3&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Clang invocation command:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">clang -DMACRO=1 file.S&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">warning: &amp;#39;MACRO&amp;#39; macro redefined [-Wmacro-redefined]#define MACRO &lt;span style="color:#ae81ff">3&lt;/span> ^&amp;lt;built-in&amp;gt;:362:9: note: previous definition is here#define MACRO &lt;span style="color:#ae81ff">1&lt;/span> ^&lt;/code>&lt;/pre>&lt;/div>&lt;p>After:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">warning: &amp;#39;MACRO&amp;#39; macro redefined [-Wmacro-redefined] 1 | #define MACRO 3 | ^&amp;lt;command line&amp;gt;:1:9: note: previous definition is here 1 | #define MACRO 1 | ^&lt;/code>&lt;/pre>&lt;/div>&lt;p>Commit: &lt;a href="https://reviews.llvm.org/D145397">https://reviews.llvm.org/D145397&lt;/a> (John Brawn)&lt;/p>&lt;br>&lt;ul>&lt;li>Clang 17 emits a warning on any language-defined builtin macro being undefined or redefined, some of which were just ignored in Clang 16.&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#undef __cplusplus&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before: &lt;em>No Warning&lt;/em>&lt;/p>&lt;p>After:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:1:8: warning: undefining builtin macro [-Wbuiltin-macro-redefined] 1 | #undef __cplusplus | ^&lt;/code>&lt;/pre>&lt;/div>&lt;p>Redefinition of compiler builtin macros usually leads to unintended results because library headers often rely on these macros, and they do notexpect these macros to be modified by users.&lt;/p>&lt;p>Commit: &lt;a href="https://reviews.llvm.org/D144654">https://reviews.llvm.org/D144654&lt;/a> (John Brawn)&lt;/p>&lt;br>&lt;ul>&lt;li>Clang 17 diagnoses unexpected tokens after a &lt;code>#pragma clang|GCC diagnostic push|pop&lt;/code> directive.&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#pragma clang diagnostic push ignore&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before: &lt;em>No Warning&lt;/em>&lt;/p>&lt;p>After:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:1:31: warning: unexpected token in pragma diagnostic [-Wunknown-pragmas] 1 | #pragma clang diagnostic push ignored | ^&lt;/code>&lt;/pre>&lt;/div>&lt;p>Commit: &lt;a href="https://github.com/llvm/llvm-project/commit/7ff507f1448bfdfcaa91d177d1f655dcb17557e7">https://github.com/llvm/llvm-project/commit/7ff507f1448bfdfcaa91d177d1f655dcb17557e7&lt;/a> (Aaron Ballman)&lt;/p>&lt;h3 id="attribute-related-diagnostics">Attribute related diagnostics&lt;/h3>&lt;ul>&lt;li>Clang 17 generates notes and fix-its for &lt;code>ifunc&lt;/code>/&lt;code>alias&lt;/code> attributes which point to unmangled function names.&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">__attribute__((used)) &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>resolve_foo() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; }__attribute__((ifunc(&lt;span style="color:#e6db74">&amp;#34;resolve_foo&amp;#34;&lt;/span>))) &lt;span style="color:#66d9ef">void&lt;/span> foo();&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:3:16: error: ifunc must point to a defined function__attribute__((ifunc(&amp;#34;resolve_foo&amp;#34;))) void foo(); ^&lt;/code>&lt;/pre>&lt;/div>&lt;p>After:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:3:16: error: ifunc must point to a defined function 3 | __attribute__((ifunc(&amp;#34;resolve_foo&amp;#34;))) void foo(); | ^&amp;lt;source&amp;gt;:3:16: note: the function specified in an ifunc must refer to its mangled name&amp;lt;source&amp;gt;:3:16: note: function by that name is mangled as &amp;#34;_ZL11resolve_foov&amp;#34; 3 | __attribute__((ifunc(&amp;#34;resolve_foo&amp;#34;))) void foo(); | ^~~~~~~~~~~~~~~~~~~~ | ifunc(&amp;#34;_ZL11resolve_foov&amp;#34;)&lt;/code>&lt;/pre>&lt;/div>&lt;p>One needs to be aware of the C++ name mangling when using &lt;code>ifunc&lt;/code> or &lt;code>alias&lt;/code> attributes, but knowing the mangled name from a function signature isn&amp;rsquo;tan easy task for many people.This change makes the error message highly understandable by suggesting that the &lt;code>ifunc&lt;/code> needs to refer to the mangled name,and it also makes this error more actionable by representing the mangled name.&lt;/p>&lt;p>Commit: &lt;a href="https://reviews.llvm.org/D143803">https://reviews.llvm.org/D143803&lt;/a> (Dhruv Chawla)&lt;/p>&lt;br>&lt;ul>&lt;li>Clang 17 avoids duplicate warnings on unreachable &lt;code>[[fallthrough]];&lt;/code> statements previously issued from &lt;code>-Wunreachable-code&lt;/code> and &lt;code>-Wunreachable-code-fallthrough&lt;/code> by prioritizing &lt;code>-Wunreachable-code-fallthrough&lt;/code>.&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> n) { &lt;span style="color:#66d9ef">switch&lt;/span> (n) { &lt;span style="color:#a6e22e">[[fallthrough]]&lt;/span>; &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>; }}&lt;/code>&lt;/pre>&lt;/div>&lt;p>Clang invocation command:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">clang++ -Wunreachable file.cpp&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:3:5: warning: code will never be executed [-Wunreachable-code] [[fallthrough]]; ^~~~~~~~~~~~~~~~&amp;lt;source&amp;gt;:3:5: warning: fallthrough annotation in unreachable code [-Wunreachable-code-fallthrough]&lt;/code>&lt;/pre>&lt;/div>&lt;p>After:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:3:5: warning: fallthrough annotation in unreachable code [-Wunreachable-code-fallthrough] 3 | [[fallthrough]]; | ^&lt;/code>&lt;/pre>&lt;/div>&lt;p>Commit: &lt;a href="https://reviews.llvm.org/D145842">https://reviews.llvm.org/D145842&lt;/a> (Takuya Shimizu)&lt;/p>&lt;br>&lt;ul>&lt;li>Clang 17 correctly emits diagnostics for &lt;code>unavailable&lt;/code> attributes that were ignored in Clang 16.&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">_ValueType&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">__attribute__&lt;/span>((unavailable)) polymorphic_allocator {};&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>() { polymorphic_allocator&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> a; }&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before:No diagnostics&lt;/p>&lt;p>After:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:4:12: error: &amp;#39;polymorphic_allocator&amp;lt;void&amp;gt;&amp;#39; is unavailable 4 | void f() { polymorphic_allocator&amp;lt;void&amp;gt; a; } | ^&amp;lt;source&amp;gt;:2:36: note: &amp;#39;polymorphic_allocator&amp;lt;void&amp;gt;&amp;#39; has been explicitly marked unavailable here 2 | class __attribute__((unavailable)) polymorphic_allocator {}; | ^&lt;/code>&lt;/pre>&lt;/div>&lt;p>Commit: &lt;a href="https://reviews.llvm.org/D147495">https://reviews.llvm.org/D147495&lt;/a> (Shafik Yaghmour)&lt;/p>&lt;br>&lt;ul>&lt;li>Clang no longer emits &lt;code>-Wunused-variable&lt;/code> warnings for variables declared with &lt;code>__attribute__((cleanup(...)))&lt;/code> to match GCC&amp;rsquo;s behavior.&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>);&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>) { &lt;span style="color:#66d9ef">int&lt;/span> __attribute__((cleanup(c))) X1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>; }&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:2:48: warning: unused variable &amp;#39;X1&amp;#39; [-Wunused-variable]void f(void) { int __attribute__((cleanup(c))) X1 = 4; } ^&lt;/code>&lt;/pre>&lt;/div>&lt;p>After: &lt;em>No Warning&lt;/em>&lt;/p>&lt;p>&lt;code>cleanup&lt;/code> attribute is used to write RAII in C.Objects declared with this attribute are actually &lt;em>used&lt;/em> as arguments to the function specified in &lt;code>cleanup&lt;/code> attribute after its declaration,and thus, it&amp;rsquo;s considered better not to diagnose them as unused.&lt;/p>&lt;p>Commit: &lt;a href="https://reviews.llvm.org/D152180">https://reviews.llvm.org/D152180&lt;/a> (Nathan Chancellor)&lt;/p>&lt;h3 id="alignas-specifier">&lt;code>alignas&lt;/code> specifier&lt;/h3>&lt;ul>&lt;li>Clang 16 modeled &lt;code>alignas(type-id)&lt;/code> as &lt;code>alignas(alignof(type-id))&lt;/code>.Clang 17 fixes this modeling and thus fixes the wrong mention of &lt;code>alignof&lt;/code> in diagnostics about &lt;code>alignas&lt;/code> and &lt;code>_Alignas&lt;/code>.&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">alignas&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>) A {};&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:1:16: error: invalid application of &amp;#39;alignof&amp;#39; to an incomplete type &amp;#39;void&amp;#39;struct alignas(void) A {}; ~^~~~~&lt;/code>&lt;/pre>&lt;/div>&lt;p>After:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:1:16: error: invalid application of &amp;#39;alignas&amp;#39; to an incomplete type &amp;#39;void&amp;#39; 1 | struct alignas(void) A {}; | ~^~~~~&lt;/code>&lt;/pre>&lt;/div>&lt;p>Commit: &lt;a href="https://reviews.llvm.org/D150528">https://reviews.llvm.org/D150528&lt;/a> (yronglin)&lt;/p>&lt;h3 id="shadowings">Shadowings&lt;/h3>&lt;ul>&lt;li>Clang 17 emits an error when lambda&amp;rsquo;s captured variable shadows a template parameter.&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">auto&lt;/span> h &lt;span style="color:#f92672">=&lt;/span> [y &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> y&lt;span style="color:#f92672">&amp;gt;&lt;/span>(y) { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; }&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before: &lt;em>No Error&lt;/em>&lt;/p>&lt;p>After:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:1:11: error: declaration of &amp;#39;y&amp;#39; shadows template parameter 1 | auto h = [y = 0]&amp;lt;typename y&amp;gt;(y) { return 0; }; | ^&amp;lt;source&amp;gt;:1:27: note: template parameter is declared here 1 | auto h = [y = 0]&amp;lt;typename y&amp;gt;(y) { return 0; }; | ^&lt;/code>&lt;/pre>&lt;/div>&lt;p>Commit: &lt;a href="https://reviews.llvm.org/D148712">https://reviews.llvm.org/D148712&lt;/a> (Mariya Podchishchaeva)&lt;/p>&lt;br>&lt;ul>&lt;li>Clang 17&amp;rsquo;s &lt;code>-Wshadow&lt;/code> diagnoses shadowings by static local variables.&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">int&lt;/span> var;&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>() { &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> var &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>; }&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before: &lt;em>No Warning&lt;/em>&lt;/p>&lt;p>After:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:2:23: warning: declaration shadows a variable in the global namespace [-Wshadow] 2 | void f() { static int var = 42; } | ^&amp;lt;source&amp;gt;:1:5: note: previous declaration is here 1 | int var; | ^&lt;/code>&lt;/pre>&lt;/div>&lt;p>Commit: &lt;a href="https://reviews.llvm.org/D151214">https://reviews.llvm.org/D151214&lt;/a> (Takuya Shimizu)&lt;/p>&lt;h3 id="-wformat">&lt;code>-Wformat&lt;/code>&lt;/h3>&lt;ul>&lt;li>Clang 17 diagnoses invalid use of scoped enumeration types in format strings, which is an Undefined Behavior.Now it also emits a fix-it hint to suggest the use of &lt;code>static_cast&lt;/code> to its underlying type to avoid the UB.&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;limits.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> { Bar &lt;span style="color:#f92672">=&lt;/span> LONG_MAX,};&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { printf(&lt;span style="color:#e6db74">&amp;#34;%ld&amp;#34;&lt;/span>, Foo&lt;span style="color:#f92672">::&lt;/span>Bar); }&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before: &lt;em>No Warning&lt;/em>&lt;/p>&lt;p>After:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:8:28: warning: format specifies type &amp;#39;long&amp;#39; but the argument has type &amp;#39;Foo&amp;#39; [-Wformat] 8 | int main() { printf(&amp;#34;%ld&amp;#34;, Foo::Bar); } | ~~~ ^~~~~~~~ | static_cast&amp;lt;long&amp;gt;( )&lt;/code>&lt;/pre>&lt;/div>&lt;p>Commit: &lt;a href="https://github.com/llvm/llvm-project/commit/3632e2f5179a420ea8ab84e6ca33747ff6130fa2">https://github.com/llvm/llvm-project/commit/3632e2f5179a420ea8ab84e6ca33747ff6130fa2&lt;/a> (Aaron Ballman)&lt;/p>&lt;p>Commit: &lt;a href="https://reviews.llvm.org/D153622">https://reviews.llvm.org/D153622&lt;/a> (Alex Brachet)&lt;/p>&lt;br>&lt;ul>&lt;li>Clang 17&amp;rsquo;s &lt;code>-Wformat&lt;/code> recognizes &lt;code>%lb&lt;/code> and &lt;code>%lB&lt;/code> as format specifiers.&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { printf(&lt;span style="color:#e6db74">&amp;#34;%lb %lB&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">10L&lt;/span>, &lt;span style="color:#ae81ff">10L&lt;/span>); }&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:2:23: warning: length modifier &amp;#39;l&amp;#39; results in undefined behavior or no effect with &amp;#39;b&amp;#39; conversion specifier [-Wformat]int main() { printf(&amp;#34;%lb %lB&amp;#34;, 10L, 10L); } ~^~&amp;lt;source&amp;gt;:2:27: warning: length modifier &amp;#39;l&amp;#39; results in undefined behavior or no effect with &amp;#39;B&amp;#39; conversion specifier [-Wformat]int main() { printf(&amp;#34;%lb %lB&amp;#34;, 10L, 10L); } ~^~&lt;/code>&lt;/pre>&lt;/div>&lt;p>After: &lt;em>No Warning&lt;/em>&lt;/p>&lt;p>&lt;code>%b&lt;/code> and &lt;code>%B&lt;/code> are new formats for printing binary representations of integers specified in the ISO C23 draft.There are already several libc implementations available that support this format. (glibc &amp;gt;= 2.35, for example)&lt;/p>&lt;p>Clang 16 already recognizes &lt;code>%b&lt;/code> and &lt;code>%llb&lt;/code> as valid format specifiers but handles &lt;code>%lb&lt;/code> as invalid.Clang 17 recognizes &lt;code>%lb&lt;/code> and &lt;code>%lB&lt;/code> to avoid false positive warnings and to emit correct fix-it hints.&lt;/p>&lt;p>Commit: &lt;a href="https://reviews.llvm.org/D148779">https://reviews.llvm.org/D148779&lt;/a> (Fangrui Song)&lt;/p>&lt;h3 id="constexpr-related-diagnostics">Constexpr-related diagnostics&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang often prints the subexpression values of binary operators such as &lt;code>==&lt;/code>, &lt;code>||&lt;/code>, and &lt;code>&amp;amp;&amp;amp;&lt;/code> in static assertion failures to help usersunderstand the cause of the failure.Clang 17 stops printing subexpression values if the binary operator is &lt;code>||&lt;/code> because it is evident that both subexpressions evaluate to &lt;code>false&lt;/code> in that case.&lt;/p>&lt;/li>&lt;li>&lt;p>The error message for the failure of static assertion now points to the asserted expression instead of the &lt;code>static_assert&lt;/code> token.&lt;/p>&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">constexpr&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> false;&lt;span style="color:#66d9ef">constexpr&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> false;&lt;span style="color:#66d9ef">static_assert&lt;/span>(a &lt;span style="color:#f92672">||&lt;/span> b);&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:3:1: error: static assertion failed due to requirement &amp;#39;a || b&amp;#39;static_assert(a || b);^ ~~~~~~&amp;lt;source&amp;gt;:3:17: note: expression evaluates to &amp;#39;false || false&amp;#39;static_assert(a || b); ~~^~~~&lt;/code>&lt;/pre>&lt;/div>&lt;p>After:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:3:15: error: static assertion failed due to requirement &amp;#39;a || b&amp;#39; 3 | static_assert(a || b); | ^~~~~~&lt;/code>&lt;/pre>&lt;/div>&lt;p>Commit: &lt;a href="https://reviews.llvm.org/D147745">https://reviews.llvm.org/D147745&lt;/a> (Jorge Pinto Sousa)&lt;/p>&lt;p>Commit: &lt;a href="https://reviews.llvm.org/D146376">https://reviews.llvm.org/D146376&lt;/a> (Krishna Narayanan)&lt;/p>&lt;br>&lt;ul>&lt;li>Clang 17 diagnoses calls to a null function pointer in constexpr evaluation as such instead of just saying it is invalid.&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">constexpr&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>F)()) { &lt;span style="color:#66d9ef">return&lt;/span> F();}&lt;span style="color:#66d9ef">static_assert&lt;/span>(call(&lt;span style="color:#66d9ef">nullptr&lt;/span>));&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:4:15: error: static assertion expression is not an integral constant expressionstatic_assert(call(nullptr)); ^~~~~~~~~~~~~&amp;lt;source&amp;gt;:2:12: note: subexpression not valid in a constant expression return F(); ^&amp;lt;source&amp;gt;:4:15: note: in call to &amp;#39;call(nullptr)&amp;#39;static_assert(call(nullptr)); ^&lt;/code>&lt;/pre>&lt;/div>&lt;p>After:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:4:15: error: static assertion expression is not an integral constant expression 4 | static_assert(call(nullptr)); | ^~~~~~~~~~~~~&amp;lt;source&amp;gt;:2:12: note: &amp;#39;F&amp;#39; evaluates to a null function pointer 2 | return F(); | ^&amp;lt;source&amp;gt;:4:15: note: in call to &amp;#39;call(nullptr)&amp;#39; 4 | static_assert(call(nullptr)); | ^~~~~~~~~~~~~&lt;/code>&lt;/pre>&lt;/div>&lt;p>Commit: &lt;a href="https://reviews.llvm.org/D145793">https://reviews.llvm.org/D145793&lt;/a> (Takuya Shimizu)&lt;/p>&lt;br>&lt;ul>&lt;li>Member function calls are displayed more true to the user-written code.&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span> { &lt;span style="color:#66d9ef">constexpr&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">div&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i) &lt;span style="color:#66d9ef">const&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">/&lt;/span> i; }};&lt;span style="color:#66d9ef">constexpr&lt;/span> Foo obj;&lt;span style="color:#66d9ef">constexpr&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> Foo &lt;span style="color:#f92672">&amp;amp;&lt;/span>ref &lt;span style="color:#f92672">=&lt;/span> obj;&lt;span style="color:#66d9ef">static_assert&lt;/span>(ref.div(&lt;span style="color:#ae81ff">0&lt;/span>));&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:7:15: error: static assertion expression is not an integral constant expressionstatic_assert(ref.div(0)); ^~~~~~~~~~&amp;lt;source&amp;gt;:2:45: note: division by zero constexpr int div(int i) const { return 1 / i; } ^&amp;lt;source&amp;gt;:7:19: note: in call to &amp;#39;&amp;amp;obj-&amp;gt;div(0)&amp;#39;static_assert(ref.div(0)); ^&lt;/code>&lt;/pre>&lt;/div>&lt;p>After:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:7:15: error: static assertion expression is not an integral constant expression 7 | static_assert(ref.div(0)); | ^~~~~~~~~~&amp;lt;source&amp;gt;:2:45: note: division by zero 2 | constexpr int div(int i) const { return 1 / i; } | ^ ~&amp;lt;source&amp;gt;:7:15: note: in call to &amp;#39;ref.div(0)&amp;#39; 7 | static_assert(ref.div(0)); | ^~~~~~~~~~&lt;/code>&lt;/pre>&lt;/div>&lt;p>Commit: &lt;a href="https://reviews.llvm.org/D151720">https://reviews.llvm.org/D151720&lt;/a> (Takuya Shimizu)&lt;/p>&lt;br>&lt;ul>&lt;li>When a constexpr variable&amp;rsquo;s constructor call leaves its subobject uninitialized, Clang 17 prints the uninitialized subobject&amp;rsquo;s name instead of its type.&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span> { &lt;span style="color:#66d9ef">constexpr&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span>() {} &lt;span style="color:#66d9ef">int&lt;/span> val;};&lt;span style="color:#66d9ef">constexpr&lt;/span> Foo ff;&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:5:15: error: constexpr variable &amp;#39;ff&amp;#39; must be initialized by a constant expressionconstexpr Foo ff; ^~&amp;lt;source&amp;gt;:5:15: note: subobject of type &amp;#39;int&amp;#39; is not initialized&amp;lt;source&amp;gt;:3:7: note: subobject declared here int val; ^&lt;/code>&lt;/pre>&lt;/div>&lt;p>After:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:5:15: error: constexpr variable &amp;#39;ff&amp;#39; must be initialized by a constant expression 5 | constexpr Foo ff; | ^~&amp;lt;source&amp;gt;:5:15: note: subobject &amp;#39;val&amp;#39; is not initialized&amp;lt;source&amp;gt;:3:7: note: subobject declared here 3 | int val; | ^&lt;/code>&lt;/pre>&lt;/div>&lt;p>Commit: &lt;a href="https://reviews.llvm.org/D146358">https://reviews.llvm.org/D146358&lt;/a> (Takuya Shimizu)&lt;/p>&lt;br>&lt;ul>&lt;li>Clang 17 diagnoses unused const variable template as &amp;ldquo;unused variable template&amp;rdquo; instead of &amp;ldquo;unused variable&amp;rdquo;.&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">namespace&lt;/span> {&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">constexpr&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> var_t &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:2:40: warning: unused variable &amp;#39;var_t&amp;#39; [-Wunused-const-variable]template &amp;lt;typename T&amp;gt; constexpr double var_t = 0; ^&lt;/code>&lt;/pre>&lt;/div>&lt;p>After:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-console" data-lang="console">&amp;lt;source&amp;gt;:2:40: warning: unused variable template &amp;#39;var_t&amp;#39; [-Wunused-template] 2 | template &amp;lt;typename T&amp;gt; constexpr double var_t = 0; | ^~~~~&lt;/code>&lt;/pre>&lt;/div>&lt;p>Uninstantiated templates do not generate symbols, and thus, the meaning of &lt;em>unused&lt;/em> is broader than the usualunused variables or functions.&lt;/p>&lt;p>For this reason, &lt;code>-Wunused&lt;/code> omits &lt;code>-Wunused-template&lt;/code>.This change follows the rationale and leads to fewer unwanted &lt;code>-Wunused-const-variable&lt;/code> warnings.&lt;/p>&lt;p>Commit: &lt;a href="https://reviews.llvm.org/D152796">https://reviews.llvm.org/D152796&lt;/a> (Takuya Shimizu)&lt;/p>&lt;h2 id="acknowledgements">Acknowledgements&lt;/h2>&lt;p>Special thanks are in order for Timm Bäder, my Google Summer of Code mentor, for his invaluable guidance and support throughout the project.&lt;/p>&lt;p>Further gratitude is extended to my regular reviewers: Aaron Ballman, Christopher Di Bella, and Shafik Yaghmour, for their insightful and constructive feedbackthat greatly improved my codes.&lt;/p></description></item><item><title>Map LLVM Values to corresponding source level expression, GSoC'23 Project</title><link>https://blog.llvm.org/posts/2023-09-19-gsoc-2023-blog-post/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2023-09-19-gsoc-2023-blog-post/</guid><description>&lt;p>Hi, My name is Shivam, I involved with the LLVM Foundation in 2023 GSoC edition and worked on an interesting project &lt;a href="https://discourse.llvm.org/t/map-llvm-values-to-corresponding-source-level-expressions/68450">Map LLVM Values to corresponding source level expression&lt;/a>.&lt;/p>&lt;h1 id="project-scope">Project Scope&lt;/h1>&lt;p>Programmers frequently rely on compiler-generated remarks and analysis reports to enhance the efficiency of their code. While compilers excel at including source code positions (such as line and column numbers) in these generated messages, it would be advantageous if these reports also contained the corresponding source-level expressions. The LLVM implementation presently employs a limited set of intrinsic functions to establish a connection between LLVM program elements and source-level expressions. This project&amp;rsquo;s objective is to leverage the data embedded in these intrinsic functions to either generate source expressions that correspond to LLVM values. The optimization of memory accesses within a program is crucial for achieving optimal application performance. Specifically, our goal is to utilize compiler analysis messages that detail source-level memory accesses associated with LLVM load/store pointer values, which can impede compiler optimizations. As an illustration, this information can be used to identify memory access dependencies that hinder vectorization.&lt;/p>&lt;p>Expected result was to provide an interface which takes an LLVM value at any point in the LLVM transformations pipeline and returns a string corresponding to the equivalent source-level expression. We are especially interested in using this interface to map addresses used in load/store instructions to equivalent source-level memory references.&lt;/p>&lt;h1 id="what-we-did">What we did&lt;/h1>&lt;p>The core achievement of the project is the development of an analysis pass that operates on LLVM intermediate representation (IR). This analysis pass identifies load and store instructions, and then conducts a recursive traversal to construct source expressions that represent equivalent source-level memory references. This is achieved by utilizing the metadata and debug intrinsics available in the LLVM IR. This pass was integrated into the loop vectorizer framework, which is a significant step towards practical application. Accompanying the implementation, a comprehensive suite of tests was developed to ensure the accuracy and expected behavior of the analysis pass.Analysis pass exist at &lt;code>llvm/lib/Analysis/SourceExpressionAnalysis.cpp&lt;/code>&lt;/p>&lt;h1 id="implementation-overview">Implementation Overview&lt;/h1>&lt;h2 id="debug-metadata-handling">Debug Metadata Handling:&lt;/h2>&lt;p>The implementation effectively processes debug metadata associated with instructions. It leverages debug value and declare instructions to retrieve variable names, which are then used to construct source expressions. This enables accurate mapping of LLVM values to their corresponding source-level expressions.&lt;/p>&lt;h2 id="instruction-types-handling">Instruction Types Handling:&lt;/h2>&lt;p>The implementation covers a range of instruction types, including binary operators, GetElementPtr, sign extension instructions, LoadInst, and StoreInst. This comprehensive coverage ensures that a wide array of LLVM instructions can be translated into meaningful source-level expressions.&lt;/p>&lt;h2 id="type-and-tag-handling">Type and Tag Handling:&lt;/h2>&lt;p>The implementation utilizes type information from DIType to determine the type tag, which aids in constructing accurate source-level expressions. Different types are handled appropriately, enhancing the fidelity of the generated expressions.&lt;/p>&lt;h2 id="expression-construction">Expression Construction:&lt;/h2>&lt;p>The implementation constructs source-level expressions using the provided LLVM instructions. It combines operand names, operator symbols, and other relevant components to create expressions that closely resemble the original source code.&lt;/p>&lt;h2 id="loadinst-and-storeinst-processing">LoadInst and StoreInst Processing:&lt;/h2>&lt;p>The implementation effectively processes LoadInst and StoreInst instructions. It generates source expressions for the loaded and stored values, considering both instruction operands and their associated debug metadata.&lt;/p>&lt;h2 id="mapping-storage">Mapping Storage:&lt;/h2>&lt;p>The SourceExpressionsMap efficiently stores generated source expressions for various LLVM values. This storage mechanism helps in avoiding redundant calculations and ensures consistent results throughout the analysis.&lt;/p>&lt;p>However, It’s important to note that the generated source expressions are in C/C++ Style. Accounting for different source languages and their peculiarities has been beyond the scope of this initial attempt.In addition to developing a separate analysis pass for translating LLVM values into source-level expressions, the implementation was further enhanced by integrating this pass with the Loop Vectorizer. This integration allows for the reporting of source expressions for dependence source and destination pointers in the context of the loop vectorization process. This feature provides valuable insights to developers, aiding in their understanding of memory access patterns and facilitating optimizations.&lt;/p>&lt;h1 id="the-current-state">The Current State&lt;/h1>&lt;p>The project has successfully delivered the core functionality of generating source expressions for load and store instructions, covering array and pointer memory references. While initial attempts were made to handle complex structures like structs, this aspect is currently outside the project&amp;rsquo;s scope.&lt;/p>&lt;p>Structs pose a unique challenge due to their intricate representation within the LLVM Intermediate Representation (IR). While the project did make initial attempts to incorporate basic support for handling structs, the complexity of nested structures presented significant difficulties. As a result, we encountered obstacles in accurately extracting source expressions for structs and their complex compositions.&lt;/p>&lt;p>The code still didn’t get merge, we still need review on the patch from other community members, the pull request is trackable on Github now &lt;a href="https://github.com/llvm/llvm-project/pull/66591">Map LLVM Values to source level expression&lt;/a>&lt;/p>&lt;p>Let’s look at how the analysis pass able to provide useful source level expression for the memory dependencies in the loop.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">//test.c&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">test_backward_dep&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> n, &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>A) { &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> n&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>; i &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>) { A[i] &lt;span style="color:#f92672">=&lt;/span> A[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]; A[i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> A[i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>]; }}&lt;/code>&lt;/pre>&lt;/div>&lt;p>Generate LLVM file (*.ll) using&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">clang &lt;span style="color:#f92672">-&lt;/span>O3 &lt;span style="color:#f92672">-&lt;/span>S &lt;span style="color:#f92672">-&lt;/span>g emitllvm test.c&lt;/code>&lt;/pre>&lt;/div>&lt;p>(Assuming &lt;code>test.ll&lt;/code> file gets generated)&lt;/p>&lt;p>Using below clang command to compile and emit remarks related to loop vectorization along with source expression&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">opt &lt;span style="color:#f92672">-&lt;/span>report&lt;span style="color:#f92672">-&lt;/span>source&lt;span style="color:#f92672">-&lt;/span>expr&lt;span style="color:#f92672">=&lt;/span>true &lt;span style="color:#f92672">-&lt;/span>passes&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>function(loop&lt;span style="color:#f92672">-&lt;/span>vectorize,require&lt;span style="color:#f92672">&amp;lt;&lt;/span>access&lt;span style="color:#f92672">-&lt;/span>info&lt;span style="color:#f92672">&amp;gt;&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span> &lt;span style="color:#f92672">-&lt;/span>disable&lt;span style="color:#f92672">-&lt;/span>output &lt;span style="color:#f92672">-&lt;/span>pass&lt;span style="color:#f92672">-&lt;/span>remarks&lt;span style="color:#f92672">-&lt;/span>analysis&lt;span style="color:#f92672">=&lt;/span>loop&lt;span style="color:#f92672">-&lt;/span>vectorize test.ll&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note&lt;/strong> : A command-line option, ReportSourceExpr, was introduced to control the reporting of source expressions. This option allows users to toggle the reporting of source expressions for Load/Store pointers. By setting this option to true (&lt;code>-report-source-expr=true&lt;/code>), developers can receive additional information about the source expressions associated with dependence source and destination pointers, enhancing the quality and depth of the optimization reports.&lt;/p>&lt;h2 id="output-remarks">Output remarks&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">remark: test.c:&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">12&lt;/span>&lt;span style="color:#f92672">:&lt;/span> loop not vectorized: unsafe dependent memory operations in the loop. Use &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>pragma loop distribute(enable) to allow loop distribution to attempt to isolate the offending operation into a separate loop Dependence source: &lt;span style="color:#f92672">&amp;amp;&lt;/span>A[(i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>)] Dependence destination: &lt;span style="color:#f92672">&amp;amp;&lt;/span>A[(i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)]&lt;/code>&lt;/pre>&lt;/div>&lt;p>This output includes the information about the loop that wasn’t vectorized due to unsafe dependent memory operations. And the interesting part for us is the &lt;code>Dependence Source&lt;/code> and &lt;code>Destination&lt;/code> source expressions.&lt;/p>&lt;p>This quick demonstration shows how the analysis can be integrated into the compilation process to provide valuable insights into the memory access patterns and their implications for Loop Vectorization.&lt;/p>&lt;h1 id="challenges-and-learnings">Challenges and learnings&lt;/h1>&lt;p>One of the challenges faced during the project was integrating support for complex structures like structs. These structures require specialized handling due to their intricacies in the LLVM IR. However, this aspect revealed the depth of understanding needed for successful interaction with LLVM&amp;rsquo;s IR and debug metadata. The project was an interesting journey, allowing for deep exploration of LLVM IR and a practical understanding of optimization remarks and metadata. Additionally, working with the loop vectorizer provided insights into its functionality and integration with custom analyses.Overall, the project served as a stepping stone for me to becoming an active contributor to the LLVM community. It provided invaluable learning opportunities and practical insights into compiler optimizations and LLVM&amp;rsquo;s architecture.&lt;/p>&lt;h1 id="future-work">Future Work&lt;/h1>&lt;pre>&lt;code>• Handling Structs and Complex Data Types• Support for Other LLVM Instructions• Accurately build the source expression  when the Optimizations alters the source level data in the IR rigorously. • Possible integration with LLVM debugger.• Support multiple source languages, we would need to define mappings from LLVM constructs to constructs in each target language. &lt;/code>&lt;/pre>&lt;h1 id="final-words">Final Words&lt;/h1>&lt;p>I really wanted to thanks LLVM Foundation and my mentors Karthik Senthil and Satish Guggila for guiding over the project. It was amazing experience for me to working on this project. I am hoping that I&amp;rsquo;ll keep myself active in LLVM and Compilers. More details of this project can be found in this &lt;a href="https://docs.google.com/document/d/1t1K6vzCYDnFBTH8d1NIJInhxRe5mc1FxkMaX_2WVcmc/edit?usp=sharing">final report&lt;/a>. Feel free to reach out to me at &lt;a href="mailto:physhivam@gmail.com">physhivam@gmail.com&lt;/a> for discussing this patch or anything else.&lt;/p></description></item><item><title>Adding a new target/object backend to LLVM JITLink</title><link>https://blog.llvm.org/posts/2023-03-16-adding-new-llvm-jitlink-target-object-backend/</link><pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2023-03-16-adding-new-llvm-jitlink-target-object-backend/</guid><description>&lt;h2 id="motivation">Motivation&lt;/h2>&lt;p>For the last year, I have been contributing to &lt;a href="https://llvm.org/docs/JITLink.html">LLVM JITLink&lt;/a>. This post aims todoubly serve as a summary of my work and documentation for future contributors looking to add a new target/objectbackend to LLVM JITLink.&lt;/p>&lt;p>We will start by establishing some background and definitions of relevant concepts. Then, we will talk about whatthe project actually entailed. Finally, we will go over the execution details of the project.&lt;/p>&lt;blockquote>&lt;p>The end goal of the project was to make LLVM JITLink capable of linking a 32-bit ELF object file, with i386specific relocations, into a 32-bit process on the i386 hardware architecture.&lt;/p>&lt;p>If the goal of the project already makes sense to you and you are looking to get started with adding a newtarget/object backend to LLVM JITLink yourself, you can skip to the “&lt;a href="#recap-and-conveniences">Recap and conveniences&lt;/a>”section.&lt;/p>&lt;/blockquote>&lt;h2 id="background">Background&lt;/h2>&lt;h3 id="linking">Linking&lt;/h3>&lt;p>Our code often relies on external dependencies. For example, even a simple hello-world program written in C dependson the C stdlib for the printf function. These external dependencies are expressed as symbolic references, which Iwill henceforth refer to as just symbols. Symbols are names of data or functions that have unknown addresses andare resolved or fixed up during the linking process.&lt;/p>&lt;p>In chronological order -&lt;/p>&lt;ol>&lt;li>The compiler converts source code to machine code.&lt;/li>&lt;li>The assembler converts machine code to object files (ELF, MachO, COFF etc.)&lt;/li>&lt;li>The linker links one or more object files (fixing up symbolic references along the way) and produces anexecutable or a shared library (also called shared object or dylib).&lt;/li>&lt;/ol>&lt;blockquote>&lt;p>For the purposes of this discussion we will focus on executables, but the points that will be made hold for sharedobjects as well.&lt;/p>&lt;/blockquote>&lt;h3 id="jit-linking">JIT linking&lt;/h3>&lt;p>Unlike static linking, JIT (Just-in-time) linking is performed at runtime. While a static linker producesexecutables that are stored on disk, a JIT linker produces an in-memory image of the executable &amp;ndash; essentiallyready to execute bytes in memory. JIT linking a C program may feel very much like running a shell script. Underthe hood though, the C program is linked into the memory of the invoking process, also commonly referredto as the executor process. The JIT linker patches up the executor process' memory to account for the addresses ofsymbols at runtime, and executes necessary initializers.&lt;/p>&lt;p>If you are familiar with dynamic loading then JIT linking may sound familiar, and the two have a lot in common,however they are not the same. JIT linking operates on relocatable objects (vs shared objects/dylibs for dynamicloading), and performs both the static linker’s and the dynamic loader’s jobs. Doing so allows the JITlinker to dead-strip redundant symbols, which dynamic loading cannot do, and this allows JIT linking to supportfiner grained compilation of languages that tend to produce a lot of redundant symbol definitions(e.g. C++).&lt;/p>&lt;h3 id="need-for-jit-linking">Need for JIT linking&lt;/h3>&lt;p>JIT linking is primarily useful in the context of pre-compiled languages, such as C, C++, Rust etc. Why? At run time,these languages have no way&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> to bring new symbol definitions into a running process’ memory and resolvereferences to them. Although dynamic loading partially solves this issue, it has its drawbacks (discussed above)and lags far behind the static linking experience.&lt;/p>&lt;p>With JIT linking, at run time, symbolic references can be resolved to existing symbols (from the newly JIT’d code), orto newly JIT&amp;rsquo;d symbols (from the pre-compiled code). The below toy example shows what this looks like in code.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">// Let&amp;#39;s assume we have the following, rather contrived,&lt;/span>&lt;span style="color:#75715e">// C++ program that wants to add 2 numbers, but wants to use&lt;/span>&lt;span style="color:#75715e">// an `add` function from a relocatable object file supplied by&lt;/span>&lt;span style="color:#75715e">// the user.&lt;/span>&lt;span style="color:#75715e">//&lt;/span>&lt;span style="color:#75715e">// Let&amp;#39;s also assume that the add function in the user-supplied&lt;/span>&lt;span style="color:#75715e">// relocatable object will reference a symbol named `MAGIC` in its&lt;/span>&lt;span style="color:#75715e">// definition.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> MAGIC &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>;&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> argv[]) { &lt;span style="color:#66d9ef">int&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#66d9ef">int&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#75715e">// Read the path of the user supplied relocatable object.&lt;/span>&lt;span style="color:#75715e">&lt;/span> string userSuppliedObjectPath &lt;span style="color:#f92672">=&lt;/span> ...; &lt;span style="color:#75715e">// Initialize your JIT class that uses JIT linking under the hood.&lt;/span>&lt;span style="color:#75715e">&lt;/span> JIT J; &lt;span style="color:#75715e">// Add the relocatable object to your JIT.&lt;/span>&lt;span style="color:#75715e">&lt;/span> J.addObject(userSuppliedObjectPath); &lt;span style="color:#75715e">// Lookup the `add` function in the newly added JIT object.&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Once all symbolic references within the user supplied object&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// are resolved, the content is fixed up and emitted to memory.&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// And we can then get a pointer to the `add` function.&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span> &lt;span style="color:#f92672">*&lt;/span>add &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>)(&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#66d9ef">int&lt;/span>))J.lookup(&lt;span style="color:#e6db74">&amp;#34;add&amp;#34;&lt;/span>).getAddress(); &lt;span style="color:#75715e">// At this point the symbolic reference to `MAGIC` in add&amp;#39;s&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// definition must have been resolved to the memory address&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// of the constant `MAGIC` that we defined in this program.&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Run the add function found in the JIT module.&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> result &lt;span style="color:#f92672">=&lt;/span> add(a, b);}&lt;/code>&lt;/pre>&lt;/div>&lt;p>That said, JIT linking by itself is not something that is very useful for an end user. JIT linking is an enablerfor certain use-cases with pre-compiled languages (some use-cases exist for JIT-compiled languages as well&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>).&lt;/p>&lt;ol>&lt;li>&lt;strong>JIT compilers&lt;/strong> (think of something like the JIT compilation component of the &lt;a href="https://en.wikipedia.org/wiki/HotSpot_(virtual_machine)">Java Hotspot VM&lt;/a>, but for astatically compiled language)&lt;/li>&lt;li>&lt;strong>Debugger expression evaluators&lt;/strong> (such as the LLDB expression evaluator)&lt;/li>&lt;li>&lt;strong>REPLs&lt;/strong> (such as &lt;a href="https://root.cern/cling/">Cling&lt;/a> and the currently experimental&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> &lt;a href="https://clang.llvm.org/docs/ClangRepl.html">Clang-REPL&lt;/a>)&lt;/li>&lt;li>&lt;strong>Standalone scripts&lt;/strong> (such as the &lt;a href="https://jblevins.org/log/swift">Swift scripts&lt;/a>, where the JIT linking isused to add an &lt;a href="https://github.com/apple/swift/blob/main/lib/Immediate/Immediate.cpp#L228">immediate&lt;/a> mode tothe compiler, which runs your code in-place via a JIT, rather than compiling it)&lt;/li>&lt;li>&lt;strong>Scriptable extensions&lt;/strong> (think about running JIT’d code in the context of some existing app, allowing the appto be extended by JIT’d code rather than precompiled plugins)&lt;/li>&lt;/ol>&lt;p>While the above use cases may seem different, they are really the same — &lt;strong>JIT linking enables linking code intoexisting processes (that may or may not already contain state/context), in an ABI-compatible way.&lt;/strong>&lt;/p>&lt;h3 id="llvm-jitlink">LLVM JITLink&lt;/h3>&lt;p>LLVM JITLink is a JIT linking implementation, in the form of a low-level library within the LLVM infrastructure.It powers &lt;a href="https://llvm.org/docs/ORCv2.html">LLVM&amp;rsquo;s ORC JIT APIs&lt;/a>, which is what end-users would usually use forbuilding runtime linking environments. It provides primitives for:&lt;/p>&lt;ol>&lt;li>Re-using existing compilers to generate relocatable objects at runtime.&lt;/li>&lt;li>Allocating memory within a target executor process.&lt;/li>&lt;li>Linking code into a target executor process in an ABI-compatible way.&lt;/li>&lt;/ol>&lt;p>In simple words, a program Y, running in a process X, can hand JITLink a relocatable object file and JITLink willlink the object file’s code into X’s memory and run it under X’s existing context (globals, functions etc.), as ifit were part of a dynamic library loaded into process X&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>.&lt;/p>&lt;h2 id="the-project">The project&lt;/h2>&lt;p>Having set up all that background, let’s understand the main task and the end goal of the project.&lt;/p>&lt;h3 id="the-task---adding-the-i386targetelfobjectbackend-to-jitlink">The task - Adding the i386(target)/ELF(object)backend to JITLink&lt;/h3>&lt;ol>&lt;li>&lt;strong>What is a target?&lt;/strong>&lt;ol>&lt;li>Target here, refers to a hardware architecture. &lt;strong>i386 is a 32 bit x86 architecture&lt;/strong>.&lt;/li>&lt;/ol>&lt;/li>&lt;li>&lt;strong>What is an object?&lt;/strong>&lt;ol>&lt;li>Object here, refers to an object file format. &lt;a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">ELF&lt;/a>is the object format commonly used on Linux systems.&lt;/li>&lt;/ol>&lt;/li>&lt;li>&lt;strong>Why do different target/object combinations matter and need additional work?&lt;/strong>&lt;ol>&lt;li>Different target/object combinations matter, because each combination may use distinct methods for connectingsymbolic references to symbol definitions. These methods are commonly referred to as&lt;a href="https://docs.oracle.com/cd/E23824_01/html/819-0690/chapter6-54839.html#scrolltoc">relocations&lt;/a>.&lt;/li>&lt;/ol>&lt;/li>&lt;/ol>&lt;h3 id="the-end-goal">The end goal&lt;/h3>&lt;p>The end goal of the project was to make LLVM JITLink capable of linking a 32-bit ELF object file, with i386 specificrelocations, into a 32-bit process on the i386 hardware architecture.&lt;/p>&lt;h2 id="execution">Execution&lt;/h2>&lt;h3 id="understanding-high-level-constructs">Understanding high level constructs&lt;/h3>&lt;h4 id="linkgraphhttpsgithubcomllvmllvm-projectblob110c1b64a7b9984a604aa2809e0fb8c01278609dllvmincludellvmexecutionenginejitlinkjitlinkhl845">&lt;a href="https://github.com/llvm/llvm-project/blob/110c1b64a7b9984a604aa2809e0fb8c01278609d/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h#L845">LinkGraph&lt;/a>&lt;/h4>&lt;blockquote>&lt;p>The LLVM JITLink &lt;a href="https://llvm.org/docs/JITLink.html#linkgraph">documentation&lt;/a> has an excellent description of LinkGraph.I recommend reading it after the below, high-level description of LinkGraph.&lt;/p>&lt;/blockquote>&lt;p>LinkGraph is an internal representation of an object file within LLVM JITLink. While object formats may havedifferent schemas and terminology for similar concepts, they all aim to represent machine code that can be relocatedin virtual memory. The purpose of a LinkGraph is to provide a generic representation of these concepts and nuancesacross different object file formats.&lt;/p>&lt;p>To draw conceptual analogies between the LinkGraph and an object format, let&amp;rsquo;s use ELF as an example. An ELF objectcontains:&lt;/p>&lt;ol>&lt;li>&lt;strong>Sections&lt;/strong> - Any chunk of bytes that must be moved into memory as a unit.&lt;/li>&lt;li>&lt;strong>Symbols&lt;/strong> - A named chunk of bytes that could represent either data or executable instructions. Symbols occur aschildren of sections.&lt;/li>&lt;li>&lt;strong>Relocations&lt;/strong> - A description of how to fix up bytes within a section once the address of the relocation&amp;rsquo;starget symbol is resolved.&lt;/li>&lt;/ol>&lt;p>A LinkGraph is capable of representing all of the above concepts. It first defines some building blocks.&lt;/p>&lt;ol>&lt;li>&lt;a href="https://github.com/llvm/llvm-project/blob/4cb0b7ce3b4987446264312d582dac9c9a98a488/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h#L105">Addressable&lt;/a> - Anything that can be assigned an address in the executor process’ virtual address space.&lt;/li>&lt;li>&lt;a href="https://github.com/llvm/llvm-project/blob/4cb0b7ce3b4987446264312d582dac9c9a98a488/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h#L152">Block&lt;/a> - A chunk of bytes that is addressable and occurs as part of a section.&lt;/li>&lt;/ol>&lt;p>On top of these building blocks, it defines the higher level object format concepts.&lt;/p>&lt;ol>&lt;li>&lt;a href="https://github.com/llvm/llvm-project/blob/4cb0b7ce3b4987446264312d582dac9c9a98a488/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h#L410">Symbol&lt;/a> - Equivalent of a symbol in the ELF format. Represented using an offset from the base (address) of aBlock and a size in bytes.&lt;/li>&lt;li>&lt;a href="https://github.com/llvm/llvm-project/blob/4cb0b7ce3b4987446264312d582dac9c9a98a488/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h#L688">Section&lt;/a> - Equivalent of a section in the ELF format. Represented using a collection of symbols and blocks.&lt;/li>&lt;li>&lt;a href="https://github.com/llvm/llvm-project/blob/4cb0b7ce3b4987446264312d582dac9c9a98a488/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h#L61">Edge&lt;/a> - Equivalent of a relocation in the ELF format. Represented using an offset from the start of thecontaining block (indicating the storage location that needs to be fixed up), a pointer to the target whose address needs to be used for the fix-up and a kind to specify the patching formula.&lt;/li>&lt;/ol>&lt;h4 id="jitlinkcontexthttpsgithubcomllvmllvm-projectblob4cb0b7ce3b4987446264312d582dac9c9a98a488llvmincludellvmexecutionenginejitlinkjitlinkhl1765">&lt;a href="https://github.com/llvm/llvm-project/blob/4cb0b7ce3b4987446264312d582dac9c9a98a488/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h#L1765">JITLinkContext&lt;/a>&lt;/h4>&lt;p>JITLinkContext represents the target process that you&amp;rsquo;re linking into, and it provides the JIT linker with theability to ask questions about and take actions within the process. This includes the ability to look up symbols andallocate memory, in the target process, as well as to publish the results of the linking process to the broaderenvironment. Specifically, the JITLinkContext informs others of the addresses it has assigned to symbols and when thosesymbols become available in memory.&lt;/p>&lt;h3 id="understanding-the-jit-linking-algorithm">Understanding the JIT linking algorithm&lt;/h3>&lt;p>The LLVM JITLink linking algorithm happens in multiple phases, with each phase consisting of passes over theLinkGraph and a call to the next phase at the end. In each phase the algorithm modifies the LinkGraph as needed, bythe end, producing a ready to execute in-memory image of the relocatable object that we started out with.&lt;/p>&lt;blockquote>&lt;p>Something that did not click for me initially, but simplified things significantly once it did, was the fact thatthe LinkGraph was just that, a graph! Re-reading LLVM JITLink’s high-level description of the &lt;a href="https://llvm.org/docs/JITLink.html#generic-link-algorithm">generic JIT linkingalgorithm&lt;/a> with this simple view of the LinkGraph madeit much easier and intuitive to make sense of what was going on in the JIT linking process.&lt;/p>&lt;/blockquote>&lt;p>The algorithm also provides, implementers and users of JITLink, hooks to tap into the linking process. These hooks canbe used to achieve a number of things, including but not limited to, link-time optimizations, testing, validation etc.&lt;/p>&lt;h3 id="the-tangibles">The tangibles&lt;/h3>&lt;p>First, I set up a test loop to validate whether LLVM JITLink is able to link 32-bit i386 ELF objects, containingvalid i386/ELF relocations, into a 32 bit process. The existing llvm-jitlink tool, which is built and put into the binfolder by default when you build the LLVM project, came in handy. llvm-jitlink is a command line wrapper for theJITLink library. It takes relocatable objects as input and links them into the executor process using JITLink.&lt;/p>&lt;p>The tricky part here, at least for me, was to get a 32-bit llvm-jitlink ELF executable. By default, Clang producesexecutables for the host architecture because of which I had to understand cross-compilation&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> (compiling for atarget different from the host architecture) since I was developing on x86-64 hardware. In order to obtain a 32-bitllvm-jitlink ELF executable, on an x86-64 system, I needed the following -&lt;/p>&lt;ol>&lt;li>&lt;p>&lt;strong>Cross-compiler&lt;/strong> - A cross-compiler that could generate 32 bit x86 code. Clang generates 32-bit x86 code if thefollowing flags are specified in the build configuration:&lt;/p>&lt;ol>&lt;li>&lt;code>CMAKE_CXX_FLAGS=&amp;quot;-m32&amp;quot;&lt;/code> or &lt;code>CMAKE_C_FLAGS=&amp;quot;-m32&amp;quot;&lt;/code> - instructs Clang to generate 32-bit code instead of thedefault 64-bit code.&lt;/li>&lt;li>&lt;code>LLVM_DEFAULT_TARGET_TRIPLE=X86&lt;/code> - instructs Clang to generate machine code for the x86 target by default.&lt;/li>&lt;/ol>&lt;/li>&lt;li>&lt;p>&lt;strong>Target shared libraries&lt;/strong> - 32 bit x86 shared libraries, that might be checked against during compilation. In mycase installing &lt;code>libstdc++.i686&lt;/code> and &lt;code>glibc-devel.i686&lt;/code> sufficed since that is all I needed to generate programscontaining all possible i386/ELF relocations.&lt;/p>&lt;/li>&lt;/ol>&lt;blockquote>&lt;p>The full command that I used to generate my build configuration was -&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">cmake &lt;span style="color:#f92672">-&lt;/span>DCMAKE_CXX_FLAGS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;-m32&amp;#34;&lt;/span> &lt;span style="color:#f92672">-&lt;/span>DCMAKE_C_FLAGS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;-m32&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">\&lt;/span> &lt;span style="color:#f92672">-&lt;/span>DCMAKE_CXX_COMPILER&lt;span style="color:#f92672">=&amp;lt;&lt;/span>PATH_PREFIX&lt;span style="color:#f92672">&amp;gt;/&lt;/span>bin&lt;span style="color:#f92672">/&lt;/span>clang&lt;span style="color:#f92672">++&lt;/span> \&lt;span style="color:#f92672">-&lt;/span>DCMAKE_BUILD_TYPE&lt;span style="color:#f92672">=&lt;/span>Debug &lt;span style="color:#960050;background-color:#1e0010">\&lt;/span> &lt;span style="color:#75715e">// It is important that the `llvm-tblgen`executable is for the host architecture&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">-&lt;/span>DLLVM_TABLEGEN&lt;span style="color:#f92672">=&amp;lt;&lt;/span>LLVM_BUILD_DIR_FOR_HOST_ARCH&lt;span style="color:#f92672">&amp;gt;/&lt;/span>bin&lt;span style="color:#f92672">/&lt;/span>llvm&lt;span style="color:#f92672">-&lt;/span>tblgen \&lt;span style="color:#f92672">-&lt;/span>DLLVM_DEFAULT_TARGET_TRIPLE&lt;span style="color:#f92672">=&lt;/span>i386&lt;span style="color:#f92672">-&lt;/span>unknown&lt;span style="color:#f92672">-&lt;/span>linux&lt;span style="color:#f92672">-&lt;/span>gnu \&lt;span style="color:#75715e">// Set of targets that the compiler must be able to generate code for. &lt;/span>&lt;span style="color:#75715e">// Can save compilation time by omitting redundant target backends.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">-&lt;/span>DLLVM_TARGETS_TO_BUILD&lt;span style="color:#f92672">=&lt;/span>X86 \&lt;span style="color:#f92672">-&lt;/span>G &lt;span style="color:#e6db74">&amp;#34;Ninja&amp;#34;&lt;/span> ..&lt;span style="color:#f92672">/&lt;/span>llvm&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>&lt;p>The last piece of my test loop was the plumbing in LLVM JITLink, on top of which I could start adding i386/ELFrelocations. I added this plumbing as part of my first &lt;a href="https://github.com/llvm/llvm-project/commit/29fe204b4e87dcd78bebd40df512e8017dffea8f">commit&lt;/a> to LLVM JITLink.At a high level, there were 2 things that I implemented in that commit -&lt;/p>&lt;ol>&lt;li>&lt;strong>ELFLinkGraphBuilder_i386&lt;/strong> - contained specialized logic for parsing i386/ELF relocations from an object file.&lt;/li>&lt;li>&lt;strong>ELFJITLinker_i386&lt;/strong> - contained specialized logic for fixing up i386/ELF relocations in the executable imagesupposed to be emitted to memory.&lt;/li>&lt;/ol>&lt;p>Having set up a test loop, I incrementally added support for the following i386/ELF relocations to LLVM JITLink.&lt;/p>&lt;blockquote>&lt;p>Quick aside, before we talk about the individual relocations! Let’s recall what relocations are.&lt;/p>&lt;p>The compiler generates code which contains symbolic references to actual symbols (everything other than localvariables in a function and functions themselves). The compiler just refers to symbols by the names used by theprogrammer and leaves a set of TODOs for the linker to complete during linking.&lt;/p>&lt;p>In ELF objects, these TODOs are found in the &lt;a href="https://docs.oracle.com/cd/E23824_01/html/819-0690/chapter6-54839.html#scrolltoc">relocation&lt;/a>section. They tell the linker where and how a symbolic reference needs to be fixed. The linker then, for the mostpart, follows the compiler’s instructions and resolves all the relocations in the program. The linker can resolverelocations because it has a view of the entire compiled program.&lt;/p>&lt;/blockquote>&lt;ol>&lt;li>R_386_32&lt;ol>&lt;li>&lt;strong>What&lt;/strong> - Tells the linker to replace the symbolic reference with the symbol’s absolute memory address.&lt;/li>&lt;li>&lt;strong>When&lt;/strong> - Used to reference global and static variables in non position-independent code (PIC). PIC allows codeto be loaded at any address in memory, rather than at a fixed address.&lt;/li>&lt;li>&lt;strong>Code&lt;/strong> -&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">// Compile with =&amp;gt; clang -m32 -c -o obj.o obj.c&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">// declare a global variable x&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> x;&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { &lt;span style="color:#75715e">// Compiler should generate a R_386_32 relocation here. &lt;/span>&lt;span style="color:#75715e">&lt;/span> x &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-as" data-lang="as">&lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">55&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">89&lt;/span> &lt;span style="color:#a6e22e">e5&lt;/span> &lt;span style="color:#a6e22e">mov&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">esp&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">50&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">c7&lt;/span> &lt;span style="color:#ae81ff">45&lt;/span> &lt;span style="color:#a6e22e">fc&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#a6e22e">movl&lt;/span> &lt;span style="color:#a6e22e">$0x0&lt;/span>&lt;span style="color:#f92672">,-&lt;/span>&lt;span style="color:#ae81ff">0x4&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>)&lt;span style="color:#75715e">// Compiler wants to move the value of x into&lt;/span>&lt;span style="color:#75715e">// the eax register but doesn&amp;#39;t know the address&lt;/span>&lt;span style="color:#75715e">// of x. So it leaves a TODO for the linker and&lt;/span>&lt;span style="color:#75715e">// temporarily uses 0 as x&amp;#39;s address.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">b&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">a1&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#a6e22e">mov&lt;/span> &lt;span style="color:#ae81ff">0x0&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">R_386_32&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">83&lt;/span> &lt;span style="color:#a6e22e">c0&lt;/span> &lt;span style="color:#ae81ff">01&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span> &lt;span style="color:#a6e22e">$0x1&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span>&lt;span style="color:#75715e">// Same thing here&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#ae81ff">13&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">a3&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#a6e22e">mov&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#ae81ff">0x0&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">R_386_32&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>&lt;span style="color:#ae81ff">18&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">31&lt;/span> &lt;span style="color:#a6e22e">c0&lt;/span> &lt;span style="color:#a6e22e">xor&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#a6e22e">a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">83&lt;/span> &lt;span style="color:#a6e22e">c4&lt;/span> &lt;span style="color:#ae81ff">04&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span> &lt;span style="color:#a6e22e">$0x4&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">esp&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#a6e22e">d&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">pop&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#a6e22e">e&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">c3&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>&lt;/ol>&lt;/li>&lt;li>R_386_PC32&lt;ol>&lt;li>&lt;strong>What&lt;/strong> - Tells the linker to resolve the symbolic reference using the symbol’s relative offset to the currentprogram counter (PC). The linker finds the offset of the referenced symbol, relative to the PC and hard-codesit in the corresponding assembly instruction. At run time, the processor looks at the &lt;a href="https://c9x.me/x86/html/file_module_x86_id_26.html">call instruction’sencoding&lt;/a> and knows that the operand to the instruction represents the symbol’s offset to the PC.&lt;/li>&lt;li>&lt;strong>When&lt;/strong> - Used to call functions in PIC.&lt;/li>&lt;li>&lt;strong>Code&lt;/strong> -&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">// Compile with =&amp;gt; clang -m32 -ffunction-sections -c -o obj.o obj.c&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// declare a global function x&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> x {} &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { &lt;span style="color:#75715e">// Compiler should generate a R_386_PC32 relocation here. &lt;/span>&lt;span style="color:#75715e">&lt;/span> x(); &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; }&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-as" data-lang="as">&lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">x&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">55&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">89&lt;/span> &lt;span style="color:#a6e22e">e5&lt;/span> &lt;span style="color:#a6e22e">mov&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">esp&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">pop&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">c3&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span>&lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">55&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">89&lt;/span> &lt;span style="color:#a6e22e">e5&lt;/span> &lt;span style="color:#a6e22e">mov&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">esp&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">83&lt;/span> &lt;span style="color:#a6e22e">ec&lt;/span> &lt;span style="color:#ae81ff">08&lt;/span> &lt;span style="color:#a6e22e">sub&lt;/span> &lt;span style="color:#a6e22e">$0x8&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">esp&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">c7&lt;/span> &lt;span style="color:#ae81ff">45&lt;/span> &lt;span style="color:#a6e22e">fc&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#a6e22e">movl&lt;/span> &lt;span style="color:#a6e22e">$0x0&lt;/span>&lt;span style="color:#f92672">,-&lt;/span>&lt;span style="color:#ae81ff">0x4&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>)&lt;span style="color:#75715e">// Compiler wants to call function x&lt;/span>&lt;span style="color:#75715e">// but doesn&amp;#39;t know its address. So it leaves&lt;/span>&lt;span style="color:#75715e">// a TODO for the linker and temporarily uses garbage&lt;/span>&lt;span style="color:#75715e">// bytes as x&amp;#39;s address.&lt;/span>&lt;span style="color:#75715e">//&lt;/span>&lt;span style="color:#75715e">// The linker will replace the garbage bytes 0xfffffffc&lt;/span>&lt;span style="color:#75715e">// with `offset =&amp;gt; PC - address of x`.&lt;/span>&lt;span style="color:#75715e">// `e8` here tells the i386 processor that the operand&lt;/span>&lt;span style="color:#75715e">// is a PC relative offset and that the address of x needs&lt;/span>&lt;span style="color:#75715e">// to be computed using `PC + offset`&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">d&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">e8&lt;/span> &lt;span style="color:#a6e22e">fc&lt;/span> &lt;span style="color:#a6e22e">ff&lt;/span> &lt;span style="color:#a6e22e">ff&lt;/span> &lt;span style="color:#a6e22e">ff&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0xe&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">R_386_PC32&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>&lt;span style="color:#ae81ff">12&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">31&lt;/span> &lt;span style="color:#a6e22e">c0&lt;/span> &lt;span style="color:#a6e22e">xor&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span>&lt;span style="color:#ae81ff">14&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">83&lt;/span> &lt;span style="color:#a6e22e">c4&lt;/span> &lt;span style="color:#ae81ff">08&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span> &lt;span style="color:#a6e22e">$0x8&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">esp&lt;/span>&lt;span style="color:#ae81ff">17&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">pop&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>&lt;span style="color:#ae81ff">18&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">c3&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>&lt;/ol>&lt;/li>&lt;/ol>&lt;blockquote>&lt;p>Another short detour to talk about dynamic linking because the remaining relocations are what enable dynamic linking.&lt;/p>&lt;p>In static linking, if your program accesses even a single symbol from a given library, then that entire library islinked with your program, which among other issues, increases the size of the generated executable. For instance, let’stalk about that simple C program that just prints hello world again. With static linking, the executable that’sgenerated from your program is going to pull in the entire C standard library, because your program accessed theprintf function.&lt;/p>&lt;p>In dynamic linking, referenced libraries are accessed at build time but they are not brought into the linkedexecutable. Instead, the referenced global variables from these libraries are linked at load time (when the program isloaded into memory, to be run) and referenced functions from these libraries are linked at invocation time.&lt;/p>&lt;p>There’s pros and cons to both approaches, whose details I will not go into, but will cursorily mention below.&lt;/p>&lt;ol>&lt;li>&lt;p>With static linking the only thing the user of your executable needs is the executable itself. They won’t runinto issues of missing libraries.&lt;/p>&lt;/li>&lt;li>&lt;p>With dynamic linking you don’t need to update your executable, if the shared library is updated. This isespecially useful if you are distributing your executable.&lt;/p>&lt;/li>&lt;li>&lt;p>Dynamic linking is just harder to implement than static linking.&lt;/p>&lt;/li>&lt;/ol>&lt;/blockquote>&lt;blockquote>&lt;p>If you’re not already familiar with the concepts of GOT and PLT, I also recommend you take yet another quick detourfor some &lt;a href="#what-are-got-and-plt">visual explanations&lt;/a>!&lt;/p>&lt;/blockquote>&lt;ol start="3">&lt;li>R_386_GOTPC -&lt;ol>&lt;li>&lt;strong>What&lt;/strong> - Tells the linker to replace the symbolic reference with the delta between the storage location, wherethe relocation has to be applied (or the fixup location) and the address of the GLOBAL_OFFSET_TABLE (GOT) symbol.&lt;/li>&lt;li>&lt;strong>When&lt;/strong> - This relocation isn’t used in isolation. Rather it is an enabler for R_386_GOTOFF, R_386_GOT32 andR_386_PLT32, which need to use the memory address of the GOT.&lt;/li>&lt;li>&lt;strong>Code&lt;/strong> -&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">// Compile with =&amp;gt; clang -m32 -fPIC -c -o obj.o obj.c&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">// Declare a global static&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>;&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { &lt;span style="color:#75715e">// Since we passed the `PIC` flag to Clang to&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// indicate that we want position independent code&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Clang will generate code to access `a` using&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the GOT.&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> a;}&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-as" data-lang="as">&lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">55&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">89&lt;/span> &lt;span style="color:#a6e22e">e5&lt;/span> &lt;span style="color:#a6e22e">mov&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">esp&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">50&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span>&lt;span style="color:#75715e">// This `call` instr is just telling the processor to&lt;/span>&lt;span style="color:#75715e">// push the next instr&amp;#39;s address on the stack and jump to&lt;/span>&lt;span style="color:#75715e">// address 9. But 9 is the address of the next line. That&amp;#39;s&lt;/span>&lt;span style="color:#75715e">// weird...&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">e8&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x9&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#75715e">// And now that we did jump to 9, all we did was pop &lt;/span>&lt;span style="color:#75715e">// the value that was on the stack and store it in ebx.&lt;/span>&lt;span style="color:#75715e">// Wasn&amp;#39;t the value on the stack just 9&amp;#39;s address? Even &lt;/span>&lt;span style="color:#75715e">// weirder...&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#ae81ff">9&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">58&lt;/span> &lt;span style="color:#a6e22e">pop&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebx&lt;/span>&lt;span style="color:#75715e">// Wait a minute. The compiler left a TODO here for the&lt;/span>&lt;span style="color:#75715e">// linker, to find the delta between the fixup location &lt;/span>&lt;span style="color:#75715e">// and the address of the GOT. &lt;/span>&lt;span style="color:#75715e">// &lt;/span>&lt;span style="color:#75715e">// Ok, so if the address of the GOT was let&amp;#39;s say 20, &lt;/span>&lt;span style="color:#75715e">// then the linker will try to hardcode the value &lt;/span>&lt;span style="color:#75715e">// `0x20-0xc =&amp;gt; 0x14` and add it to the value in eax (0x9),&lt;/span>&lt;span style="color:#75715e">// which will give us `0x14 + 0x9 =&amp;gt; 0x1d`. &lt;/span>&lt;span style="color:#75715e">// &lt;/span>&lt;span style="color:#75715e">// Ah, that&amp;#39;s not the address of the GOT. Yes, but &lt;/span>&lt;span style="color:#75715e">// `0x1d + 0x3 =&amp;gt; 0x20` is. Well, where is the 3 coming from?&lt;/span>&lt;span style="color:#75715e">// The compiler helps us here, a bit. The address in eax isn&amp;#39;t&lt;/span>&lt;span style="color:#75715e">// the address of the fixup location it&amp;#39;s off by 0x3. So along&lt;/span>&lt;span style="color:#75715e">// with leaving us a TODO, the compiler also leaves us a reminder&lt;/span>&lt;span style="color:#75715e">// to add 0x3 to our delta calculation, in order to arrive at &lt;/span>&lt;span style="color:#75715e">// the correct address of the GOT.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">81&lt;/span> &lt;span style="color:#a6e22e">c0&lt;/span> &lt;span style="color:#ae81ff">03&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span> &lt;span style="color:#a6e22e">$0x3&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">ebx&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">R_386_GOTPC&lt;/span> &lt;span style="color:#a6e22e">_GLOBAL_OFFSET_TABLE_&lt;/span>&lt;span style="color:#75715e">// Not super important what happens after the R_386_GOTPC&lt;/span>&lt;span style="color:#75715e">// relocation is resolved for now...&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>&lt;/ol>&lt;/li>&lt;li>R_386_GOTOFF -&lt;ol>&lt;li>&lt;strong>What&lt;/strong> - Tells the linker to resolve the symbolic reference with the offset between the symbol’s address andthe address of the GOT’s base (computed and stored in a register when the R_386_GOTPC relocation is handled).&lt;/li>&lt;li>&lt;strong>When&lt;/strong> - Used by shared libraries and executables to access internal symbols in a position independent way.&lt;/li>&lt;li>&lt;strong>Code&lt;/strong> -&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">// Compile with =&amp;gt; clang -m32 -fPIC -c -o obj.o obj.c&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">// Declare a global static&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>;&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { &lt;span style="color:#75715e">// Since we passed the `PIC` flag to Clang to&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// indicate that we want position independent code&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Clang will generate code to access `a` using&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the GOT.&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> a;}&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-as" data-lang="as">&lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">55&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">89&lt;/span> &lt;span style="color:#a6e22e">e5&lt;/span> &lt;span style="color:#a6e22e">mov&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">esp&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">50&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">e8&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x9&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">9&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">58&lt;/span> &lt;span style="color:#a6e22e">pop&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span>&lt;span style="color:#75715e">// We saw above how the R_386_GOTPC relocation gets resolved&lt;/span>&lt;span style="color:#75715e">// and that the ebx register contains the address of the &lt;/span>&lt;span style="color:#75715e">// GOT after the relocation is resolved.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">81&lt;/span> &lt;span style="color:#a6e22e">c0&lt;/span> &lt;span style="color:#ae81ff">03&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span> &lt;span style="color:#a6e22e">$0x3&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">ebx&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">R_386_GOTPC&lt;/span> &lt;span style="color:#a6e22e">_GLOBAL_OFFSET_TABLE_&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">c7&lt;/span> &lt;span style="color:#ae81ff">45&lt;/span> &lt;span style="color:#a6e22e">fc&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#a6e22e">movl&lt;/span> &lt;span style="color:#a6e22e">$0x0&lt;/span>&lt;span style="color:#f92672">,-&lt;/span>&lt;span style="color:#ae81ff">0x4&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>)&lt;span style="color:#75715e">// Compiler wants to access `a`, but since we told it&lt;/span>&lt;span style="color:#75715e">// to generate position-independent code, it generates access&lt;/span>&lt;span style="color:#75715e">// to `a` using the GOT and leaves a TODO for the linker to find&lt;/span>&lt;span style="color:#75715e">// the offset of `a` from the base of the GOT.&lt;/span>&lt;span style="color:#75715e">//&lt;/span>&lt;span style="color:#75715e">// The linker already knows the address of the base of the GOT&lt;/span>&lt;span style="color:#75715e">// at this point - it&amp;#39;s stored in ebx. It computes the address of&lt;/span>&lt;span style="color:#75715e">// `a` and fixes up the 4 bytes after `0x8b 0x80`, to store the&lt;/span>&lt;span style="color:#75715e">// offset between `a` and the GOT&amp;#39;s base.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#ae81ff">17&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#a6e22e">mov&lt;/span> &lt;span style="color:#ae81ff">0x0&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebx&lt;/span>)&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span> &lt;span style="color:#ae81ff">19&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">R_386_GOTOFF&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#a6e22e">d&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">83&lt;/span> &lt;span style="color:#a6e22e">c4&lt;/span> &lt;span style="color:#ae81ff">04&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span> &lt;span style="color:#a6e22e">$0x4&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">esp&lt;/span>&lt;span style="color:#ae81ff">20&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">pop&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>&lt;span style="color:#ae81ff">21&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">c3&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>&lt;/ol>&lt;/li>&lt;li>R_386_GOT32&lt;ol>&lt;li>&lt;strong>What&lt;/strong> - Tells the linker to resolve the symbolic reference with the offset between the address of the GOT’sbase and the symbol’s entry in the GOT (essentially computing an index into the GOT).&lt;/li>&lt;li>&lt;strong>When&lt;/strong> - Used by shared libraries and executable to access external data symbols in a position independent way.&lt;/li>&lt;li>&lt;strong>Code&lt;/strong> -&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">// Compile with =&amp;gt; clang -m32 -fPIC -c -o obj.o obj.c&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">// Declaring that `a` is defined externally.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">extern&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> a;&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { &lt;span style="color:#75715e">// Since we passed the `PIC` flag to Clang to&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// indicate that we want position independent code&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Clang will generate code to access `a` using&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the GOT.&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> a;}&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-as" data-lang="as">&lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">55&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">89&lt;/span> &lt;span style="color:#a6e22e">e5&lt;/span> &lt;span style="color:#a6e22e">mov&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">esp&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">50&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">e8&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x9&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">9&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">59&lt;/span> &lt;span style="color:#a6e22e">pop&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ecx&lt;/span>&lt;span style="color:#75715e">// We saw above how the R_386_GOTPC relocation gets resolved&lt;/span>&lt;span style="color:#75715e">// and that the ebx register contains the address of the&lt;/span>&lt;span style="color:#75715e">// GOT after the relocation is resolved.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">81&lt;/span> &lt;span style="color:#a6e22e">c1&lt;/span> &lt;span style="color:#ae81ff">03&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span> &lt;span style="color:#a6e22e">$0x3&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">ebx&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">R_386_GOTPC&lt;/span> &lt;span style="color:#a6e22e">_GLOBAL_OFFSET_TABLE_&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">c7&lt;/span> &lt;span style="color:#ae81ff">45&lt;/span> &lt;span style="color:#a6e22e">fc&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#a6e22e">movl&lt;/span> &lt;span style="color:#a6e22e">$0x0&lt;/span>&lt;span style="color:#f92672">,-&lt;/span>&lt;span style="color:#ae81ff">0x4&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>)&lt;span style="color:#75715e">// Compiler wants to access `a`, but since we told it to&lt;/span>&lt;span style="color:#75715e">// generate position-independent code, it generates access to&lt;/span>&lt;span style="color:#75715e">// `a` using the GOT and leaves a TODO for the linker to find&lt;/span>&lt;span style="color:#75715e">// the offset of `a`&amp;#39;s GOT entry from the base of the GOT.&lt;/span>&lt;span style="color:#75715e">//&lt;/span>&lt;span style="color:#75715e">// `a` got a GOT entry because we did not define it internally&lt;/span>&lt;span style="color:#75715e">// and the compiler thinks that it will either come from another&lt;/span>&lt;span style="color:#75715e">// source file or a shared library.&lt;/span>&lt;span style="color:#75715e">//&lt;/span>&lt;span style="color:#75715e">// The linker already knows the address of the base of the GOT&lt;/span>&lt;span style="color:#75715e">// at this point - it&amp;#39;s stored in ebx. It finds the address of&lt;/span>&lt;span style="color:#75715e">// `a`&amp;#39;s GOT entry and fixes up the 4 bytes after `0x8b 0x81`,&lt;/span>&lt;span style="color:#75715e">// to store the offset between `a`&amp;#39;s GOT entry and the GOT&amp;#39;s base.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#ae81ff">17&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#ae81ff">81&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#a6e22e">mov&lt;/span> &lt;span style="color:#ae81ff">0x0&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebx&lt;/span>)&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span> &lt;span style="color:#ae81ff">19&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">R_386_GOT32&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>&lt;span style="color:#75715e">// eax, at this point contains `a`&amp;#39;s address, which is dereferenced&lt;/span>&lt;span style="color:#75715e">// in this mov instruction and stored into eax itself.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#a6e22e">d&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#a6e22e">mov&lt;/span> (&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span>)&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#a6e22e">f&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">83&lt;/span> &lt;span style="color:#a6e22e">c4&lt;/span> &lt;span style="color:#ae81ff">04&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span> &lt;span style="color:#a6e22e">$0x4&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">esp&lt;/span>&lt;span style="color:#ae81ff">22&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">pop&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>&lt;span style="color:#ae81ff">23&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">c3&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>&lt;/ol>&lt;/li>&lt;li>R_386_PLT32&lt;ol>&lt;li>&lt;strong>What&lt;/strong> - Tells the linker to resolve the symbolic reference with the symbol’s PLT entry.&lt;/li>&lt;li>&lt;strong>When&lt;/strong> - Used by shared libraries and executables to access external function symbols in aposition-independent way.&lt;/li>&lt;li>&lt;strong>Code&lt;/strong> -&lt;/li>&lt;/ol>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">// Compile with =&amp;gt; clang -m32 -fPIC -c -o obj.o obj.c&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">// Declaring that `foo` is a function defined externally.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">extern&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>);&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>) { &lt;span style="color:#75715e">// Since we passed the `PIC` flag to Clang to&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// indicate that we want position independent code&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Clang will generate code to access `foo` using&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the PLT.&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> foo();}&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-as" data-lang="as"> &lt;span style="color:#ae81ff">00000000&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">55&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">89&lt;/span> &lt;span style="color:#a6e22e">e5&lt;/span> &lt;span style="color:#a6e22e">mov&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">esp&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">53&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebx&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">50&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">e8&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0xa&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#a6e22e">pop&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebx&lt;/span> &lt;span style="color:#75715e">// We saw above how the R_386_GOTPC relocation gets resolved&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// and that the ebx register contains the address of the &lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// GOT after the relocation is resolved.&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">81&lt;/span> &lt;span style="color:#a6e22e">c3&lt;/span> &lt;span style="color:#ae81ff">03&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span> &lt;span style="color:#a6e22e">$0x3&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">ebx&lt;/span> &lt;span style="color:#a6e22e">d&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">R_386_GOTPC&lt;/span> &lt;span style="color:#a6e22e">_GLOBAL_OFFSET_TABLE_&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">c7&lt;/span> &lt;span style="color:#ae81ff">45&lt;/span> &lt;span style="color:#a6e22e">f8&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#ae81ff">00&lt;/span> &lt;span style="color:#a6e22e">movl&lt;/span> &lt;span style="color:#a6e22e">$0x0&lt;/span>&lt;span style="color:#f92672">,-&lt;/span>&lt;span style="color:#ae81ff">0x8&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span>) &lt;span style="color:#75715e">// Compiler wants to access `foo`, but since we told it to&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// generate position-independent code, it generates access to&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// `foo` using its PLT entry and leaves a TODO for the linker to&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// find `foo`&amp;#39;s PLT entry address.&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// The PLT machinery was explained here!&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#ae81ff">18&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">e8&lt;/span> &lt;span style="color:#a6e22e">fc&lt;/span> &lt;span style="color:#a6e22e">ff&lt;/span> &lt;span style="color:#a6e22e">ff&lt;/span> &lt;span style="color:#a6e22e">ff&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span> &lt;span style="color:#ae81ff">19&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x19&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">19&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">R_386_PLT32&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#a6e22e">d&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">83&lt;/span> &lt;span style="color:#a6e22e">c4&lt;/span> &lt;span style="color:#ae81ff">04&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span> &lt;span style="color:#a6e22e">$0x4&lt;/span>&lt;span style="color:#f92672">,%&lt;/span>&lt;span style="color:#a6e22e">esp&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#a6e22e">pop&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebx&lt;/span> &lt;span style="color:#ae81ff">21&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">pop&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">ebp&lt;/span> &lt;span style="color:#ae81ff">22&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">c3&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>&lt;/ol>&lt;h2 id="testing">Testing&lt;/h2>&lt;p>While I did talk about setting up a “test loop” earlier, here I want to briefly touch upon the topic of regressiontests &amp;ndash; not so much upon the “why” and the “what”, but the “how”. There’s some excellent testing utilities alreadyavailable in the LLVM project, but I found related documentation to be lagging. Specifically, I want to focus on theutilities that one might interact with for writing a regression test for one of LLVM JITLink’s target-object backend.&lt;/p>&lt;p>Before we go ahead, I want to mention this high level &lt;a href="https://llvm.org/docs/TestingGuide.html#writing-new-regression-tests">testing guide&lt;/a>for LLVM. The guide should get you to the point where you know where/how to create a test file, how to make your testsdiscoverable by the test runner (LLVM Integration Tester - lit) and how to run the tests using the test runner.&lt;/p>&lt;p>That said, let’s use the sample test file below, to talk about the utilities that you might use for writing a regressiontest for one of LLVM JITLink’s target-object backend.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-as" data-lang="as">&lt;span style="color:#75715e">// Regression test files are assembly files (&amp;#34;.s&amp;#34; extension).&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">// The files must begin with what are known as &amp;#34;RUN&amp;#34; lines.&lt;/span>&lt;span style="color:#75715e">// Each &amp;#34;RUN” line tells lit how to run the test file.&lt;/span>&lt;span style="color:#75715e">// RUN lines look and feel like you were running shell commands.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">// Each regression test will likely begin with the following&lt;/span>&lt;span style="color:#75715e">// two RUN lines, although the exact RUN command may need to be&lt;/span>&lt;span style="color:#75715e">// modified, based on the test cases need.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">RUN&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">llvm&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">mc&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">triple&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">i386&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">unknown&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">linux&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">gnu&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">position&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">independent&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">filetype&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">obj&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">o&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">o&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span>&lt;span style="color:#75715e">// Notice how llvm-jitlink is run with the &amp;#34;-noexec&amp;#34; option.&lt;/span>&lt;span style="color:#75715e">// The option tells llvm-jitlink to not run the code loaded&lt;/span>&lt;span style="color:#75715e">// to memory. This is important because JITLink may be linking&lt;/span>&lt;span style="color:#75715e">// and loading code for an architecture different from the one&lt;/span>&lt;span style="color:#75715e">// where the regression test is running in LLVM&amp;#39;s build/release&lt;/span>&lt;span style="color:#75715e">// pipeline.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">RUN&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">llvm&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">jitlink&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">noexec&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">o&lt;/span>&lt;span style="color:#75715e">// llvm-jitlink also requires each file to have a &amp;#34;main&amp;#34; function.&lt;/span>&lt;span style="color:#75715e">// Your test code can go here, but it doesn&amp;#39;t have to.&lt;/span>&lt;span style="color:#75715e">&lt;/span>.&lt;span style="color:#a6e22e">text&lt;/span>.&lt;span style="color:#a6e22e">globl&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>.&lt;span style="color:#a6e22e">p2align&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0x90&lt;/span>.&lt;span style="color:#a6e22e">type&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#66d9ef">function&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">,&lt;/span> .&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The main thing that we want to determine in these target-object backend regression tests is whether the relocations inthe code emitted to memory were fixed up correctly. Meaning, we have to literally check whether certain bytes in certainmemory locations are what we expect them to be. Let’s look at some more intricate test cases that will show thedifferent kinds of checks we might need to perform and how we can perform them.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-as" data-lang="as">&lt;span style="color:#75715e">// llvm-jitlink allows you to specify jitlink-check expressions.&lt;/span>&lt;span style="color:#75715e">// jit-link check expressions are checks against working memory.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">// jit-link check expressions can be used with the `decode_operand` function.&lt;/span>&lt;span style="color:#75715e">// `decode_operand` decodes the instruction at the given label&lt;/span>&lt;span style="color:#75715e">// and then accesses the operand number that you have specified.&lt;/span>&lt;span style="color:#75715e">//&lt;/span>&lt;span style="color:#75715e">// For the expression below, decode operand decodes the operand at the&lt;/span>&lt;span style="color:#75715e">// label `foo`, accesses its 0th operand `external_data` and checks whether&lt;/span>&lt;span style="color:#75715e">// its value is equal to the bytes represented by `0xDEADBEEF`.&lt;/span>&lt;span style="color:#75715e">//&lt;/span>&lt;span style="color:#75715e">// Note - The operand number does not always have a one-to-one mapping&lt;/span>&lt;span style="color:#75715e">// with what you see and while in this case `external_data` was indeed the&lt;/span>&lt;span style="color:#75715e">// 0th operand of the instruction, for another instruction its operand&lt;/span>&lt;span style="color:#75715e">// number may have been different.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">jitlink&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">check&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">decode_operand&lt;/span>(&lt;span style="color:#a6e22e">foo&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#a6e22e">xDEADBEEF&lt;/span> .&lt;span style="color:#a6e22e">globl&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span> .&lt;span style="color:#a6e22e">p2align&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0x90&lt;/span> .&lt;span style="color:#a6e22e">type&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#66d9ef">function&lt;/span>&lt;span style="color:#a6e22e">foo&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">movl&lt;/span> &lt;span style="color:#a6e22e">external_data&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span>&lt;span style="color:#f92672">,&lt;/span> .&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">foo&lt;/span>&lt;span style="color:#75715e">// The RHS of jitlink-check expressions doesn&amp;#39;t have to be literal&lt;/span>&lt;span style="color:#75715e">// bytes. It can be an expression of labels and other functions over&lt;/span>&lt;span style="color:#75715e">// labels.&lt;/span>&lt;span style="color:#75715e">//&lt;/span>&lt;span style="color:#75715e">// In the below jitlink-check expression, the RHS&lt;/span>&lt;span style="color:#75715e">// is calculating the difference between the address of the label&lt;/span>&lt;span style="color:#75715e">// `foo` and the address of the program counter when the instruction at label&lt;/span>&lt;span style="color:#75715e">// `bar` is executed.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">jitlink&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">check&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">decode_operand&lt;/span>(&lt;span style="color:#a6e22e">bar&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">next_pc&lt;/span>(&lt;span style="color:#a6e22e">bar&lt;/span>) .&lt;span style="color:#a6e22e">globl&lt;/span> &lt;span style="color:#a6e22e">bar&lt;/span> .&lt;span style="color:#a6e22e">p2align&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> .&lt;span style="color:#a6e22e">type&lt;/span> &lt;span style="color:#a6e22e">bar&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#66d9ef">function&lt;/span>&lt;span style="color:#a6e22e">bar&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">calll&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#a6e22e">bar&lt;/span>&lt;span style="color:#f92672">,&lt;/span> .&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">bar&lt;/span>&lt;span style="color:#75715e">// The `got_addr`function can also be used on the RHS, to access the&lt;/span>&lt;span style="color:#75715e">// address of the GOT entry of a symbol.&lt;/span>&lt;span style="color:#75715e">//&lt;/span>&lt;span style="color:#75715e">// In the below jitlink-check expression, the RHS is calculating the&lt;/span>&lt;span style="color:#75715e">// offset between the GOT entry for the symbol `named_data` and the&lt;/span>&lt;span style="color:#75715e">// GOT symbol itself.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">jitlink&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">check&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">decode_operand&lt;/span>(&lt;span style="color:#a6e22e">test_got&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">got_addr&lt;/span>(&lt;span style="color:#a6e22e">test_file_name&lt;/span>.&lt;span style="color:#a6e22e">o&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#a6e22e">named_data&lt;/span>) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">_GLOBAL_OFFSET_TABLE_&lt;/span> .&lt;span style="color:#a6e22e">globl&lt;/span> &lt;span style="color:#a6e22e">test_got&lt;/span> .&lt;span style="color:#a6e22e">p2align&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0x90&lt;/span> .&lt;span style="color:#a6e22e">type&lt;/span> &lt;span style="color:#a6e22e">test_got&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#66d9ef">function&lt;/span>&lt;span style="color:#a6e22e">test_got&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">leal&lt;/span> &lt;span style="color:#a6e22e">named_data&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">GOT&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#a6e22e">test_got&lt;/span>&lt;span style="color:#f92672">,&lt;/span> .&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">test_got&lt;/span>&lt;span style="color:#75715e">// The LHS of a jitlink-check expression, can also be constructed manually&lt;/span>&lt;span style="color:#75715e">// by &amp;#34;casting&amp;#34; a symbol, label or a function over a label to a machine register&lt;/span>&lt;span style="color:#75715e">// size pointer.&lt;/span>&lt;span style="color:#75715e">//&lt;/span>&lt;span style="color:#75715e">// In the below jitlink-check expression the LHS is constructed by casting the&lt;/span>&lt;span style="color:#75715e">// address of the GOT entry for `named_data` to a 32-bit pointer. The constructed&lt;/span>&lt;span style="color:#75715e">// pointer is then dereferenced and compared against the `named_data` label.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">jitlink&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">check&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">*&lt;/span>{&lt;span style="color:#ae81ff">4&lt;/span>}(&lt;span style="color:#a6e22e">got_addr&lt;/span>(&lt;span style="color:#a6e22e">test_file_name&lt;/span>.&lt;span style="color:#a6e22e">o&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#a6e22e">named_data&lt;/span>)) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">named_data&lt;/span> .&lt;span style="color:#a6e22e">globl&lt;/span> &lt;span style="color:#a6e22e">test_got&lt;/span> .&lt;span style="color:#a6e22e">p2align&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0x90&lt;/span> .&lt;span style="color:#a6e22e">type&lt;/span> &lt;span style="color:#a6e22e">test_got&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#66d9ef">function&lt;/span>&lt;span style="color:#a6e22e">test_got&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">leal&lt;/span> &lt;span style="color:#a6e22e">named_data&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">GOT&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">eax&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#a6e22e">test_got&lt;/span>&lt;span style="color:#f92672">,&lt;/span> .&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">test_got&lt;/span>&lt;span style="color:#75715e">// NOTE - The above presented flavors of jitlink-check expressions is not an&lt;/span>&lt;span style="color:#75715e">// exhaustive list of what&amp;#39;s available. Rather it&amp;#39;s just a summarization of some&lt;/span>&lt;span style="color:#75715e">// of the ways in which I used jitlink-check expressions.&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="recap-and-conveniences">Recap and conveniences&lt;/h2>&lt;p>We covered a lot of ground there. Let’s quickly recap the things we talked about.&lt;/p>&lt;ol>&lt;li>We established the context required to understand the project. We defined basic concepts - linking and JITlinking, and talked about the need for JIT linking and LLVM JITLink.&lt;/li>&lt;li>We established an understanding of what the project was.&lt;/li>&lt;li>We went over the execution details of the project. We talked about important high level constructs, the high level JIT linking algorithm used by LLVM JITLink, setting up a testing loop for constant feedback and the details of each relocation that was added as part of the i386/ELF backend.&lt;/li>&lt;li>Finally, we talked about the tools and utilities that can be used to write regression tests for the project.&lt;/li>&lt;/ol>&lt;h3 id="resources">Resources&lt;/h3>&lt;p>Below is an index of resources that I found useful (I may have mentioned them elsewhere in the post as well).&lt;/p>&lt;ol>&lt;li>&lt;a href="https://www.youtube.com/playlist?list=PLhy9gU5W1fvUND_5mdpbNVHC1WCIaABbP">Chris Kanich’s videos&lt;/a> for the systems programming course at University of Illinois, Chicago&lt;/li>&lt;li>Lang Hames' videos (&lt;a href="https://www.youtube.com/watch?v=hILdR8XRvdQ&amp;amp;t=2577s">1&lt;/a>, &lt;a href="https://www.youtube.com/watch?v=MOQG5vkh9J8">2&lt;/a>, and &lt;a href="https://www.youtube.com/watch?v=i-inxFudrgI&amp;amp;t=2243s">3&lt;/a>) on LLVM ORC APIs and JITLink. Thesevideos were extremely valuable in understanding JITLink&amp;rsquo;s raison d&amp;rsquo;être and the context in which it is used.&lt;/li>&lt;li>Linkers and Loaders by John R. Levine&lt;/li>&lt;li>&lt;a href="https://docs.oracle.com/cd/E23824_01/html/819-0690/toc.html">Oracle’s Linker and Libraries guide&lt;/a>&lt;/li>&lt;li>&lt;a href="https://llvm.org/docs/JITLink.html">LLVM JITLink documentation&lt;/a>&lt;/li>&lt;li>&lt;a href="https://llvm.org/docs/TestingGuide.html">LLVM testing infrastructure guide&lt;/a>&lt;/li>&lt;li>Articles by Eli Bendersky on &lt;a href="https://eli.thegreenplace.net/2011/11/03/position-independent-code-pic-in-shared-libraries/#id14">position-independent code&lt;/a> and &lt;a href="https://eli.thegreenplace.net/2011/08/25/load-time-relocation-of-shared-libraries">load time relocation of sharedlibraries&lt;/a>.&lt;/li>&lt;/ol>&lt;h3 id="development-conveniences">Development conveniences&lt;/h3>&lt;ol>&lt;li>&lt;strong>Dev setup&lt;/strong>&lt;ol>&lt;li>There’s detailed information about that on the &lt;a href="https://llvm.org/docs/GettingStarted.html">getting started with LLVM page&lt;/a>.&lt;/li>&lt;li>If you’re okay using AWS EC2 for development you can create an instance using my public machine image.&lt;ol>&lt;li>The image id is ami-00f1c534fe06c05a0. You can use the instructions &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/launch-instance-custom-ami/">here&lt;/a> to boot your instance usingthis image.&lt;/li>&lt;li>The instance comes with all the basic tools and softwares that you need to start contributing to LLVM - Clang, CMake, Python, zlib, ninja, git, php, arc.&lt;/li>&lt;/ol>&lt;/li>&lt;/ol>&lt;/li>&lt;li>&lt;strong>Build system&lt;/strong>&lt;ol>&lt;li>Use &lt;code>ninja&lt;/code>! It is way faster than &lt;code>make&lt;/code>.&lt;/li>&lt;li>If you want to build a &lt;code>llvm-jitlink&lt;/code> binary, which you likely will for testing, just run &lt;code>ninja llvm-jitlink&lt;/code>from your build folder’s root. This will avoid building other targets that you do not need and will complete much faster.&lt;/li>&lt;li>Other than that I’m going to refrain from saying too much here because one’s build system configuration rarely works on another’s machine.&lt;/li>&lt;/ol>&lt;/li>&lt;li>&lt;strong>Files you will be dealing with&lt;/strong>&lt;ol>&lt;li>You’ll likely be dealing with files under &lt;a href="https://github.com/llvm/llvm-project/tree/main/llvm/lib/ExecutionEngine/JITLink">llvm/lib/ExecutionEngine/JITLink&lt;/a>.&lt;/li>&lt;li>The introductory commit for the &lt;a href="https://github.com/llvm/llvm-project/commit/29fe204b4e87dcd78bebd40df512e8017dffea8f">i386/ELF&lt;/a> and &lt;a href="https://github.com/llvm/llvm-project/commit/2ed91da0f1f312aedcfa01786fe991e33c6cf1fe">AArch64/ELF&lt;/a> backends will giveyou a very good idea of what aminimal backend implementation looks like. Keep in mind that these first commits are for backends for an existing object format (ELF in this case). If you are adding support for a backend without an existing object format, you might need to ask for help (more on that in a bit).&lt;/li>&lt;/ol>&lt;/li>&lt;li>&lt;strong>Code reviews&lt;/strong>&lt;ol>&lt;li>Install &lt;a href="https://secure.phabricator.com/book/phabricator/article/arcanist_quick_start/">arcanist&lt;/a> - the tool for creating code reviews when contributing to LLVM.&lt;/li>&lt;li>Once installed the main commands you will be using are (assuming you are using git as your version control) -&lt;ol>&lt;li>arc diff - To create code reviews and new revisions.&lt;/li>&lt;li>arc land - To close code reviews once they are approved and push changes to remote.&lt;/li>&lt;/ol>&lt;/li>&lt;/ol>&lt;/li>&lt;li>&lt;strong>Asking for help&lt;/strong>&lt;ol>&lt;li>&lt;a href="https://discord.gg/9v3CBuKpbx">#jit&lt;/a> channel of the LLVM discord server.&lt;/li>&lt;/ol>&lt;/li>&lt;/ol>&lt;h2 id="closing-thoughts">Closing thoughts&lt;/h2>&lt;p>And that’s about it! I don’t have too much more to say on top of what’s already been said. It was a great learningexperience contributing to LLVM JITLink. I’d recommend it to anyone who wants to understand the story after compilationand up until a program is run - come say hi on the #jit channel of the LLVM discord server!&lt;/p>&lt;p>I’d also like to give a big shout out to the folks on the #jit channel for helping me understand things and answering myquestions. And a special thanks to &lt;a href="https://github.com/lhames">Lang Hames&lt;/a> for his help throughout the project andreviewing this post (thanks to &lt;a href="https://github.com/weliveindetail">Stefan Gränitz&lt;/a> and &lt;a href="https://github.com/vgvassilev">Vassil Vassilev&lt;/a>for reviewing as well)!&lt;/p>&lt;p>I plan on continuing my involvement with LLVM and JITLink, and am excited to see what I pick up next!&lt;/p>&lt;h2 id="appendix">Appendix&lt;/h2>&lt;h3 id="what-are-got-and-plt">What are GOT and PLT?&lt;/h3>&lt;p>The GLOBAL_OFFSET_TABLE (GOT) and PROCEDURE_LINKAGE_TABLE (PLT) are 2 tables used during the linking process thatmake dynamic linking work. Dynamically linked code needs to be position-independent&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>, meaning that it should beable to be loaded at any address in memory and continue to work - all symbols that it references and all referencedsymbols that it contains, must be resolvable. Dynamically linked shared libraries can fulfill this position independencerequirement for internal symbols using pc-relative addressing, as the code of the shared libraries stays together inmemory. However, these libraries may also refer to external symbols or contain symbols, referenced by other sharedlibraries or the main executable. And since the load address of shared libraries, in memory, is not fixed, they requireanother layer of abstraction for the resolution of external symbols, for both data and functions. GOT and PLT are thoseabstractions.&lt;/p>&lt;p>Below are some simple visual examples to understand the GOT and PLT.&lt;/p>&lt;ol>&lt;li>Data symbol access through GOT&lt;/li>&lt;/ol>&lt;div style="max-width:2000px; margin:0 auto;"> &lt;img src="https://blog.llvm.org/img/jitlink-new-backend-GOT-2023-03-16.jpg">&lt;br/>&lt;/div>&lt;ol start="2">&lt;li>&lt;p>Function symbol access through PLT&lt;/p>&lt;ol>&lt;li>&lt;p>&lt;strong>At load time&lt;/strong>&lt;/p>&lt;ol>&lt;li>Call to x is generated via the PLT.&lt;/li>&lt;li>There is also an entry for x in the GOT, whose purpose will become clear in a minute.&lt;/li>&lt;/ol>&lt;/li>&lt;/ol> &lt;div style="max-width:2000px; margin:0 auto;"> &lt;img src="https://blog.llvm.org/img/jitlink-new-backend-PLT-2023-03-16.png">&lt;br/> &lt;/div>&lt;br>&lt;ol start="2">&lt;li>&lt;p>&lt;strong>At first invocation time&lt;/strong>&lt;/p>&lt;ol>&lt;li>Control jumps to PLT[1]&lt;/li>&lt;li>First instr of PLT[1] transfers control to *GOT[3] (the address stored in GOT[3]).&lt;ol>&lt;li>Remember the address stored in GOT[3] is that of the 2nd instr of PLT[1].&lt;/li>&lt;li>Wait, so we go all the way to the PLT, to then go all the way to the GOT only to come back to the next instr in PLT[1]. We would have come there anyways as the processor processed instructions sequentially. Why did we take this roundabout route?&lt;/li>&lt;li>We’ll see in a second!&lt;/li>&lt;/ol>&lt;/li>&lt;li>Once we’re on the 2nd instr of PLT we push a value on the stack (what this value means is not super important here).&lt;/li>&lt;li>Then control jumps to PLT[0], from where you can see it eventually jumps to the address stored in GOT[2].&lt;ol>&lt;li>And whose address is stored in GOT[2]? The dynamic linker’s!&lt;/li>&lt;/ol>&lt;/li>&lt;li>The dynamic linker then goes ahead and links x (the external lib function we called) into the process and fixes the address in GOT[3] (which was initially the address of the 2nd instr of PLT[1]) to the new address of x in the process.&lt;/li>&lt;li>The dynamic linker then invokes x, which is what the user wanted to do in the first place.&lt;/li>&lt;/ol>&lt;/li>&lt;/ol> &lt;div style="max-width:2000px; margin:0 auto;"> &lt;img src="https://blog.llvm.org/img/jitlink-new-backend-PLT2-2023-03-16.png">&lt;br/> &lt;/div>&lt;br>&lt;ol start="3">&lt;li>&lt;strong>Subsequent invocations&lt;/strong>&lt;ol>&lt;li>The first invocation of x looked like this -&lt;ol>&lt;li>PLT[1] → *GOT[3] → PLT[1] → PLT[0] → *GOT[2] → x()&lt;/li>&lt;/ol>&lt;/li>&lt;li>However, since the dynamic linker now fixed the entry in GOT[3] to reflect x’s address, subsequent invocations of x look as below -&lt;ol>&lt;li>PLT[1] → *GOT[3] (which is essentially calling x, since that is what GOT[3] stores now)&lt;/li>&lt;/ol>&lt;/li>&lt;/ol>&lt;/li>&lt;/ol>&lt;/li>&lt;/ol>&lt;p>With the above process dynamic linking enables us to call a functions in position-independent code. Additionally, itmakes the common case (every invocation of x other than the first) faster!&lt;/p>&lt;h2 id="footnotes">Footnotes&lt;/h2>&lt;section class="footnotes" role="doc-endnotes">&lt;hr>&lt;ol>&lt;li id="fn:1" role="doc-endnote">&lt;p>AOT, statically compiled languages - C, C++, Rust, unlike interpreted languages, such as Java, do not have aruntime that can be extended to bring in new symbols at runtime and perform symbol resolution for them. Java, forinstance, has the Java Virtual Machine (JVM) whose &lt;a href="https://www.artima.com/insidejvm/ed2/lifetype.html">loading and linking&lt;/a> behavior can be customized to achievethe aforementioned task.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>&lt;/li>&lt;li id="fn:2" role="doc-endnote">&lt;p>JIT-linking is primarily useful in the context of linking in pre-compiled languages (that&amp;rsquo;s certainly whatinspired it), but it&amp;rsquo;s not only useful in that context. In LLVM JITLink, through the &lt;a href="https://github.com/llvm/llvm-project/blob/4cb0b7ce3b4987446264312d582dac9c9a98a488/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h#L1765">JITLinkContext&lt;/a> you canlink against other (non-statically compiled) code, so it&amp;rsquo;s useful for anyone who wants to interoperate with C/C++ that&amp;rsquo;s linked at runtime. You could also theoretically bring up a purely JIT&amp;rsquo;d language with it (and I think Julia does this). The advantages are interoperability with existing languages, compilers, tools, and the disadvantage is that it&amp;rsquo;s heavyweight compared to a custom JIT that manages its own linking directly.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>&lt;/li>&lt;li id="fn:3" role="doc-endnote">&lt;p>Clang-REPL is an effort to move Cling, which is a standalone tool, into the LLVM infrastructure.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>&lt;/li>&lt;li id="fn:4" role="doc-endnote">&lt;p>In fact, given a suitable JITLinkContext, JITLink can even link objects into a different process. LLDB uses thiscapability (via LLVM’s older MCJIT APIs) to JIT-link expressions in the debugger, but run them in the process being debugged, which may be on a different machine.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>&lt;/li>&lt;li id="fn:5" role="doc-endnote">&lt;p>I found the following 2 resources very useful for understanding cross-compilation.&lt;/p>&lt;ol>&lt;li>“Cross-platform Compilation” chapter of the &lt;a href="https://www.oreilly.com/library/view/getting-started-with/9781782166924/?_gl=1*142ghif*_ga*MTU5OTExNzkyNS4xNjc1MTc2MTkw*_ga_092EL089CH*MTY3Njc3NzE5MC4zLjEuMTY3Njc3NzMxMS42MC4wLjA.">Getting Started with LLVM Core Libraries&lt;/a> book.&lt;/li>&lt;li>Clang &lt;a href="https://clang.llvm.org/docs/CrossCompilation.html">documentation&lt;/a> for cross-compiling.&lt;/li>&lt;/ol>&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/li>&lt;li id="fn:6" role="doc-endnote">&lt;p>Dynamically linked code can actually use the &amp;ldquo;static&amp;rdquo; relocation model, but the position-independent model isgenerally preferred. In position-independent code you only need to fix up the GOT, whereas in static code you need to fix up every external reference, which can hurt launch times.&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>&lt;/li>&lt;/ol>&lt;/section></description></item><item><title>The 2023 EuroLLVM Developers' Meeting Program</title><link>https://blog.llvm.org/posts/2023-03-27-eurollvm2023-program/</link><pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2023-03-27-eurollvm2023-program/</guid><description>&lt;p>&lt;img src="https://blog.llvm.org/img/EuroLLVM2023-horizontal.jpg" alt="2023 EuroLLVM Developers' Meeting">&lt;/p>&lt;p>The LLVM Foundation is excited to announce the &lt;a href="https://llvm.swoogo.com/2023eurollvm/">2023 EuroLLVM Developers' Meeting&lt;/a> program! &lt;strong>Early bird &lt;a href="https://llvm.swoogo.com/2023eurollvm/begin">registration&lt;/a> ends April 10th.&lt;/strong>&lt;/p>&lt;p>&lt;strong>Keynotes:&lt;/strong>&lt;/p>&lt;ul>&lt;li>Order out of Chaos, The LLVM Release Process. - &lt;em>Tobias Hieta&lt;/em>&lt;/li>&lt;li>“-fbounds-safety”: Enforcing bounds safety for production C code - &lt;em>Yeoul Na&lt;/em>&lt;/li>&lt;/ul>&lt;p>&lt;strong>Technical Talks:&lt;/strong>&lt;/p>&lt;ul>&lt;li>An example of data flow analysis in MLIR - &lt;em>Tom Eccles&lt;/em>&lt;/li>&lt;li>MLIR-based offline memory planning and other graph-level optimizations for xcore.ai - &lt;em>Deepak Panickal&lt;/em>&lt;/li>&lt;li>A Rusty CHERI: The path to hardware capabilities in Rust - &lt;em>Lewis Revill&lt;/em>&lt;/li>&lt;li>Extending the AArch32 JITLink backend - &lt;em>Stefan Gränitz&lt;/em>&lt;/li>&lt;li>Using MLIR to Optimize Basic Linear Algebraic Subprograms - &lt;em>Steven Varoumas&lt;/em>&lt;/li>&lt;li>Buddy Compiler: An MLIR-based Compilation Framework for Deep Learning Co-design - &lt;em>Hongbin Zhang&lt;/em>&lt;/li>&lt;li>MachineScheduler - fine grain resource allocation using resource intervals. - &lt;em>Francesco Petrogalli&lt;/em>&lt;/li>&lt;li>Inliner in MLIR - &lt;em>Javed Absar&lt;/em>&lt;/li>&lt;li>How to use llvm-debuginfo-analyzer tool. - &lt;em>Carlos Alberto Enciso&lt;/em>&lt;/li>&lt;li>Practical Global Merge Function with ThinLTO - &lt;em>Kyungwoo Lee&lt;/em>&lt;/li>&lt;li>Prototyping MLIR in Python - &lt;em>Sasha Lopoukhine, Mathieu Fehr&lt;/em>&lt;/li>&lt;li>Extensible and Composable Dataflow Analysis in MLIR - &lt;em>Jeff Niu&lt;/em>&lt;/li>&lt;li>What would it take to remove debug intrinsics? - &lt;em>Jeremy Morse&lt;/em>&lt;/li>&lt;li>Compiling Ruby (with MLIR) - &lt;em>Alex Denisov&lt;/em>&lt;/li>&lt;li>What’s new in MLIR? - &lt;em>Mehdi Amini&lt;/em>&lt;/li>&lt;li>Structured Bindings and How to Analyze Them - &lt;em>Domján Dániel&lt;/em>&lt;/li>&lt;li>MLIR Dialect Design and Composition for Front-End Compilers - &lt;em>Jeff Niu&lt;/em>&lt;/li>&lt;li>ML-LLVM-Tools: Towards Seamless Integration of Machine Learning in Compiler Optimizations - &lt;em>S. VenkataKeerthy, Siddharth Jain, Umesh Kalvakuntla&lt;/em>&lt;/li>&lt;li>Optimizing the Linux Kernel with LLVM BOLT - &lt;em>Maksim Panchenko&lt;/em>&lt;/li>&lt;li>mlir-meminfo : A Memory Model for MLIR - &lt;em>Kunwar Grover,Arjun Pitchanathan&lt;/em>&lt;/li>&lt;/ul>&lt;p>&lt;strong>Tutorials:&lt;/strong>&lt;/p>&lt;ul>&lt;li>Developing BOLT pass - &lt;em>Amir Ayupov&lt;/em>&lt;/li>&lt;li>A whirlwind tour of the LLVM optimizer - &lt;em>Nikita Popov&lt;/em>&lt;/li>&lt;li>Tutorial: Controllable Transformations in MLIR - &lt;em>Alex Zinenko&lt;/em>&lt;/li>&lt;li>GlobalISel by example - &lt;em>Alex Bradbury&lt;/em>&lt;/li>&lt;/ul>&lt;p>&lt;strong>Quick Talks:&lt;/strong>&lt;/p>&lt;ul>&lt;li>Iterative Compilation - Give the compiler a second chance - &lt;em>Ziv Ben Zion&lt;/em>&lt;/li>&lt;li>Another level of indirection - Compiler Fallback of load/store into gather/scatter enhance compiler robustness by overcoming analysis and hardware limitations - &lt;em>Omer Aviram&lt;/em>&lt;/li>&lt;li>Switch per function in LLVM - &lt;em>Tomer Nissim Schneider&lt;/em>&lt;/li>&lt;li>Tensor Evolution - An ML Graph Optimization Technique - &lt;em>Javed Absar,Muthu Baskaran&lt;/em>&lt;/li>&lt;li>ML-on-CPU: should vectorization happen in the LLVM backend or higher up the stack? - &lt;em>Elen Kalda&lt;/em>&lt;/li>&lt;li>CORE-V LLVM: Adding eight vendor extensions to standard RISC-V LLVM - &lt;em>Charlie Keaney,Chunyu Liao (廖春玉),Lewis Revill&lt;/em>&lt;/li>&lt;li>Advanced Bug Reports: Choose Your Own Adventure - &lt;em>Arseniy Zaostrovnykh&lt;/em>&lt;/li>&lt;li>Multiple-Entry, Multiple-Exit MLIR Regions - &lt;em>Jeff Niu&lt;/em>&lt;/li>&lt;li>Target-Independent Integer Arithmetic - &lt;em>Jeff Niu&lt;/em>&lt;/li>&lt;li>Improving Vectorization for Loops with Control Flow - &lt;em>Ashutosh Nema&lt;/em>&lt;/li>&lt;li>How to run the LLVM-Test Suite on GPUs and what you’ll find - &lt;em>Johannes Doerfert&lt;/em>&lt;/li>&lt;li>OpenMP as GPU Kernel Language - &lt;em>Johannes Doerfert&lt;/em>&lt;/li>&lt;/ul>&lt;p>&lt;strong>Lightning Talks:&lt;/strong>&lt;/p>&lt;ul>&lt;li>LLVM IR as an Embedded Domain-Specific Language - &lt;em>Nikita Baksalyar&lt;/em>&lt;/li>&lt;li>Using MLIR for Dalvik Bytecode Analysis - &lt;em>Eduardo Blázquez&lt;/em>&lt;/li>&lt;li>High school student’s experience with Clang - &lt;em>Yubo Hui&lt;/em>&lt;/li>&lt;li>Spot the Difference with LLVM-FLOW: an open-source interactive visualization tool for comparing IR CFGs - &lt;em>Jinmyoung Lee&lt;/em>&lt;/li>&lt;li>Leveraging MLIR for Better SYCL Compilation - &lt;em>Victor Lomüller&lt;/em>&lt;/li>&lt;li>Arm/AArch64 Embedded Development with LLD : What’s New - &lt;em>Amilendra Kodithuwakku&lt;/em>&lt;/li>&lt;li>Using automated tests to tune the -Og pipeline - &lt;em>Stephen Livermore-Tozer&lt;/em>&lt;/li>&lt;li>Buddy-CAAS: Compiler As A Service for MLIR - &lt;em>Hongbin Zhang&lt;/em>&lt;/li>&lt;li>llvm-buildmark - observations, tips, and tricks on reducing LLVM build times - &lt;em>Alex Bradbury&lt;/em>&lt;/li>&lt;li>Lock Coarsening optimizations for loops in Java - &lt;em>Anna Thomas&lt;/em>&lt;/li>&lt;/ul>&lt;p>&lt;strong>Student Technical Talks&lt;/strong>&lt;/p>&lt;ul>&lt;li>Cost Modelling for Register Allocation and Beyond - &lt;em>Aiden Grossman&lt;/em>&lt;/li>&lt;li>A Template-Based Code Generation Approach for MLIR - &lt;em>Florian Drescher&lt;/em>&lt;/li>&lt;li>MLIR Query Tool for easier exploration of the IR - &lt;em>Devajith Valaparambil Sreeramaswamy&lt;/em>&lt;/li>&lt;li>mlirSynth: Synthesis of Domain-Specific Programs in MLIR - &lt;em>Alexander Brauckmann&lt;/em>&lt;/li>&lt;li>Image Processing Ops as first class citizens in MLIR: write once, vectorise everywhere! - &lt;em>Prathamesh Tagore,Hongbin Zhang&lt;/em>&lt;/li>&lt;li>Using the Clang data-flow framework for null-pointer analysis - &lt;em>Viktor Cseh&lt;/em>&lt;/li>&lt;li>Fast and Vectorized Pivot Function for MLIR Presburger Library - &lt;em>Qi&lt;/em>&lt;/li>&lt;li>RISC-V Vector Extension Support in MLIR: Motivation, Abstraction, and Application - &lt;em>Hongbin Zhang&lt;/em>&lt;/li>&lt;/ul>&lt;p>&lt;strong>Posters:&lt;/strong>&lt;/p>&lt;ul>&lt;li>Automatic Translation of C++ to Rust - &lt;em>Henrique Preto&lt;/em>&lt;/li>&lt;li>A sustainable approach to have vector predication in the Loop Vectorizer - &lt;em>Lorenzo Albano&lt;/em>&lt;/li>&lt;li>Performance Analysis of Undefined Behavior Optimizations - &lt;em>Lucian Popescu&lt;/em>&lt;/li>&lt;li>Static Analysis for C++ Rust-Like Lifetime Annotations - &lt;em>Susana Monteiro&lt;/em>&lt;/li>&lt;li>Leveraging MLIR for Better SYCL Compilation - &lt;em>Victor Lomüller&lt;/em>&lt;/li>&lt;li>Forcefully Embedding MLIR into Python - &lt;em>George Mitenkov&lt;/em>&lt;/li>&lt;/ul>&lt;p>We would also like to thank the program committee:&lt;/p>&lt;p>Kristof Beyls (&lt;strong>Chair&lt;/strong>), Alex Bradbury, Alex Denisov, Anupama Chandrasekhar, David Spickett, Florian Hahn, Gabor Horvath,Hans Wennborg, Jakub Kuderski, Jonathan Springer, Jubi Taneja, Mehdi Amini, Michal Paczkowski, Min-Yih Hsu, Nadav Rotem, Paul Kirth, Petr Hosek, Quentin Colombet, Renato Golin, Stephen Neuendorffer, Timothy Harvey,and Tobias Grosser.&lt;/p>&lt;p>Register today to attend the &lt;a href="https://llvm.swoogo.com/2023eurollvm/">2023 EuroLLVM Developers' Meeting&lt;/a> in Glasgow, Scotland.&lt;/p></description></item><item><title>Interactive programming in C++ internships — LLVM Blog Post</title><link>https://blog.llvm.org/posts/2022-12-21-compiler-research-internships/</link><pubDate>Wed, 21 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2022-12-21-compiler-research-internships/</guid><description>&lt;hr>&lt;p>Another program year is ending and our &lt;a href="https://compiler-research.org/">Compiler Research&lt;/a>team is extremely happy to share the hard work and the results of our internscontributors!&lt;/p>&lt;p>The Compiler Research team includes researchers located at Princeton Universityand CERN.Our primary goal is research into foundational software tools helping scientiststo program for speed, interoperability, interactivity, flexibility, andreproducibility. We work in various fields of science such as high energyphysics, where research is fundamentally connected to software at exabyte scale.We develop computational methods and research software for scientificexploration and discovery. Our current research focuses on three main topics:&lt;a href="https://compiler-research.org/interactive_cpp">interpretative C/C++/CUDA&lt;/a>, automatic differentiation tools, and C++ language interoperability with Pythonand D.&lt;/p>&lt;p>This year, we had six participants who worked on seven projects, covering a widerange of topics, from LLVM’s new JIT linker(&lt;a href="https://llvm.org/docs/JITLink.html#jit-linking">JITLink&lt;/a>) to&lt;a href="https://clang.llvm.org/docs/ClangRepl.html">Clang-Repl&lt;/a>,an interactive C++ interpreter for incremental compilation integratedin &lt;a href="https://clang.llvm.org/">Clang&lt;/a>. All projects rise toward acommon, ambitious goal: &lt;strong>to establish a proficient workflow in LLVM,where &lt;a href="https://compiler-research.org/interactive_cpp">interactivedevelopment in C++&lt;/a> is possible, and exploratory C++ becomes an accessibleexperience to a wider audience.&lt;/strong>&lt;/p>&lt;p>Below you can find the list of projects from our interns, an overview of theobjectives and results. We invite you to follow the links to access a moredetailed description of each project.&lt;/p>&lt;h2 id="a-hrefhttpscompiler-researchorgassetsdocssunho_kim_gsoc22_reportpdfjitlink-support-for-a-new-formatarchitecture-elfaarch64a">&lt;a href="https://compiler-research.org/assets/docs/Sunho_Kim_GSoC22_Report.pdf">JITLink support for a new format/architecture (ELF/AARCH64)&lt;/a>&lt;/h2>&lt;p>Developer: &lt;strong>&lt;a href="https://github.com/sunho">Sunho Kim&lt;/a>&lt;/strong>(&lt;em>Computer Science, De Anza College, Cupertino, California&lt;/em>)&lt;/p>&lt;p>Mentors: &lt;strong>Stefan Gränitz&lt;/strong> (&lt;em>Freelance Compiler Developer, Berlin,Deutschland&lt;/em>),&lt;strong>Lang Hames&lt;/strong> (&lt;em>Apple&lt;/em>), &lt;strong>Vassil Vassilev&lt;/strong> (&lt;em>Princeton University/CERN&lt;/em>)&lt;/p>&lt;p>Funding: &lt;strong>Google Summer of Code 2022&lt;/strong>&lt;/p>&lt;p>Suhno developed a &lt;a href="https://llvm.org/docs/JITLink.html#jit-linking">JITLink&lt;/a>specialization that extends JITLink’s generic linker algorithm, allowingJITLink to support ELF/aarch64 target and provides full support of all advancedPE/COFF object file features. By supporting the ELF/aarch64 target, JITLink cannow be used in Julia, while COFF/X86_64 enables Microsoft Visual C++ (MSCV)target in &lt;a href="https://clang.llvm.org/docs/ClangRepl.html">Clang-Repl&lt;/a>.Here you can find Sunho’s GSoC&lt;a href="https://compiler-research.org/assets/docs/Sunho_Kim_GSoC22_Report.pdf">final report&lt;/a>.&lt;/p>&lt;p>&lt;strong>Hurray!&lt;/strong> This project has been accepted as a Tutorial at the&lt;a href="https://llvm.swoogo.com/2022devmtg/speakers">2022 LLVM Developers’ Meeting&lt;/a>!The conference took place in San Jose, California, from 7th to 10th November2022.Here you can find the&lt;a href="https://www.youtube.com/watch?v=UwHgCqQ2DDA&amp;list=PL_R5A0lGi1ACZDCQw533fo2dBljmOqIYx&amp;index=42">video&lt;/a>and the &lt;a href="https://llvm.org/devmtg/2022-11/slides/Tutorial2-JITLink.pdf">slides&lt;/a>of Sunho’s presentation.&lt;/p>&lt;p>The project was also presented at the Compiler As a Service (CaaS) monthlymeeting. Here you can find the &lt;a href="https://www.youtube.com/watch?v=_5_gm58sQIg">video&lt;/a>and the &lt;a href="https://compiler-research.org/assets/presentations/S_Kim-Jitlink_Coff.pdf">slides&lt;/a>of Sunho’s presentation.&lt;/p>&lt;h2 id="a-hrefhttpscompiler-researchorgblogsgsoc22_izvekov_experience_blogextend-clang-to-resugar-template-specialization-accessesa">&lt;a href="https://compiler-research.org/blogs/gsoc22_izvekov_experience_blog/">Extend Clang to resugar template specialization accesses&lt;/a>&lt;/h2>&lt;p>Developer: &lt;strong>&lt;a href="https://github.com/mizvekov">Matheus Izvekov&lt;/a>&lt;/strong>&lt;/p>&lt;p>Mentors: &lt;strong>Richard Smith&lt;/strong> (&lt;em>Google&lt;/em>), &lt;strong>Vassil Vassilev&lt;/strong> (&lt;em>PrincetonUniversity/CERN&lt;/em>)&lt;/p>&lt;p>Funding: &lt;strong>Google Summer of Code 2022&lt;/strong>&lt;/p>&lt;p>&lt;a href="https://clang.llvm.org/">Clang&lt;/a>’s type system was optimized bypushing type-syntactic-sugar on the arguments of a template specialization intothose member accesses. This was achieved by: 1. creating a new type node intothe Abstract Syntax Tree (AST) that represents the sugar of a member access ina template specialization; and 2. implementing single step desugaring logicwhich will perform the substitution of template parameter sugar into thecorresponding specialization argument sugar. As a result, we improved Clang’sdiagnostic system by enabling other constructs to preserve type sugar, allowingboth for their representation when present in the specialization argument.Here you can find Matheus' GSoC&lt;a href="https://compiler-research.org/assets/docs/Matheus_Izvekov_GSoC22_Report.pdf">final report&lt;/a>.&lt;/p>&lt;p>&lt;strong>Hurray!&lt;/strong> This project has been accepted as a Lightning Talk at the&lt;a href="https://llvm.swoogo.com/2022devmtg/speakers">2022 LLVM Developers’ Meeting&lt;/a>!The conference took place in San Jose, California, from 7th to 10th November2022.Here you can find the &lt;a href="https://www.youtube.com/watch?v=bZ2HPrSkTZI">video&lt;/a>and the&lt;a href="https://llvm.org/devmtg/2022-11/slides/Lightning9-TypeResugaringInClang%20.pdf">slides&lt;/a>of Matheus’ presentation.&lt;/p>&lt;h2 id="a-hrefhttpscompiler-researchorgblogsgsoc22_zhang_chaudhari_experience_blogrecovering-from-errors-in-clang-repl-and-code-undoa">&lt;a href="https://compiler-research.org/blogs/gsoc22_zhang_chaudhari_experience_blog/">Recovering from Errors in Clang-Repl and Code Undo&lt;/a>&lt;/h2>&lt;p>Developers: &lt;strong>&lt;a href="https://github.com/junaire">Jun Zhang&lt;/a>&lt;/strong>(&lt;em>Software Engineering, Anhui Normal University, WuHu, China&lt;/em>) and&lt;strong>&lt;a href="https://github.com/Purva-Chaudhari">Purva Chaudhari&lt;/a>&lt;/strong>(&lt;em>California State University Northridge, Northridge CA, USA&lt;/em>)&lt;/p>&lt;p>Mentors: &lt;strong>Vassil Vassilev&lt;/strong> (&lt;em>Princeton University/CERN&lt;/em>)&lt;/p>&lt;p>&lt;a href="https://clang.llvm.org/docs/ClangRepl.html">Clang-Repl&lt;/a> is aninteractive C++ interpreter integrated in Clang, which enables incrementalcompilation. It supports interactive programming for C++ in aRead-Eval_Print Loop(&lt;a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL&lt;/a>)style, compiling the code just-in-time with a JIT approach that reduces thecompile-run cycles. We added the “undo” functionality to Clang-REPL, and weimproved error-recovery by adding the possibility to recover the low-levelexecution infrastructure. As a result, Clang-REPL now supports reversalexecution and recovery actions on behalf of a user in an automatic andconvenient way.&lt;/p>&lt;p>&lt;strong>Hurray!&lt;/strong> This project has been accepted as a Lightning Talk at the&lt;a href="https://llvm.swoogo.com/2022devmtg/speakers">2022 LLVM Developers’ Meeting&lt;/a>!The conference took place in San Jose, California, from 7th to 10th November2022.Here you can find the &lt;a href="https://www.youtube.com/watch?v=LSPBPC2av54">video&lt;/a>and the&lt;a href="https://llvm.org/devmtg/2022-11/slides/Lightning6-RecoveringFromErrorsInClang-ReplAndCodeUndo.pdf">slides&lt;/a>of Purva and Jun’s presentation.&lt;/p>&lt;h2 id="a-hrefhttpscompiler-researchorgblogsgsoc22_ghosh_experience_blogshared-memory-based-jitlink-memory-managera">&lt;a href="https://compiler-research.org/blogs/gsoc22_ghosh_experience_blog/">Shared Memory Based JITLink Memory Manager&lt;/a>&lt;/h2>&lt;p>Developer: &lt;strong>&lt;a href="https://github.com/argentite">Anubhab Ghosh&lt;/a>&lt;/strong>(&lt;em>Computer Science and Engineering, Indian Institute of Information Technology, Kalyani, India&lt;/em>)&lt;/p>&lt;p>Mentors: &lt;strong>Stefan Gränitz&lt;/strong> (&lt;em>Freelance Compiler Developer, Berlin, Deutschland&lt;/em>),&lt;strong>Lang Hames&lt;/strong> (&lt;em>Apple&lt;/em>), &lt;strong>Vassil Vassilev&lt;/strong> (&lt;em>Princeton University/CERN&lt;/em>)&lt;/p>&lt;p>Funding: &lt;strong>Google Summer of Code 2022&lt;/strong>&lt;/p>&lt;p>Anubhab introduced a new &lt;a href="https://llvm.org/docs/JITLink.html">JITLinkMemoryManager&lt;/a>based on a MemoryMapper abstraction that is capable of allocating JIT code(and data) using shared memory. The following advantages should arise from theimplemented strategy: 1. a faster transport (and access) for code and data whenrunning JIT’d code in a separate process on the same machine, and 2. theguarantee that all allocations are close together in memory and meet theconstraints of the default code model allowing the use of outputs from regularcompilers.Here you can find Anubhab’s GSoC&lt;a href="https://compiler-research.org/assets/docs/Anubhab_Ghosh_GSoC2022_Report.pdf">final report&lt;/a>.&lt;/p>&lt;p>&lt;strong>Hurray!&lt;/strong> This project has been accepted as a Lightning Talk at the&lt;a href="https://llvm.swoogo.com/2022devmtg/speakers">2022 LLVM Developers’ Meeting&lt;/a>!The conference took place in San Jose, California, from 7th to 10th November2022.Here you can find the &lt;a href="https://www.youtube.com/watch?v=dosXtBAFWiE">video&lt;/a>and the&lt;a href="https://llvm.org/devmtg/2022-11/slides/Lightning4-EfficientJIT-basedRemoteExecution.pdf">slides&lt;/a>of Anubhab’s presentation.&lt;/p>&lt;h2 id="a-hrefhttpshepsoftwarefoundationorggsocblogs2022blog_root_junzhanghtmloptimize-root-use-of-modules-for-large-codebasesa">&lt;a href="https://hepsoftwarefoundation.org/gsoc/blogs/2022/blog_ROOT_JunZhang.html">Optimize ROOT use of modules for large codebases&lt;/a>&lt;/h2>&lt;p>Developer: &lt;strong>&lt;a href="https://github.com/junaire">Jun Zhang&lt;/a>&lt;/strong>(&lt;em>Software Engineering, Anhui Normal University, WuHu, China&lt;/em>)&lt;/p>&lt;p>Mentors: &lt;strong>David Lange&lt;/strong> (&lt;em>Princeton University&lt;/em>), &lt;strong>Alexander Penev&lt;/strong>(&lt;em>University of Plovdiv Paisii Hilendarski, Bulgaria&lt;/em>), &lt;strong>Vassil Vassilev&lt;/strong>(&lt;em>Princeton University/CERN&lt;/em>)&lt;/p>&lt;p>Funding: &lt;strong>Google Summer of Code 2022&lt;/strong>&lt;/p>&lt;p>The current performance of the modules usage in &lt;a href="https://root.cern/">ROOT&lt;/a>was evaluated, and a strategy for optimizing the memory footprint was developed.This strategy includes reducing unnecessary symbol-lookups and module-loading,and is especially useful for very large codebases like &lt;a href="https://cms-sw.github.io/">CMSSW&lt;/a>,where Jun reduced the amount of memory by half (from 1.1GB to 600MB) for simpleworkflows like hsimple.C, and the number of loaded from 180 to 52.Here you can find Jun’s GSoC&lt;a href="https://compiler-research.org/assets/docs/Jun_Zhang_GSoC22_Report.pdf">final report&lt;/a>.&lt;/p>&lt;h2 id="a-hrefhttpshepsoftwarefoundationorggsocblogs2022blog_compilerresearch-manishkausikhtmladd-initial-integration-of-clad-with-enzymea">&lt;a href="https://hepsoftwarefoundation.org/gsoc/blogs/2022/blog_CompilerResearch-ManishKausik.html">Add Initial Integration of Clad with Enzyme&lt;/a>&lt;/h2>&lt;p>Developer: &lt;strong>&lt;a href="https://github.com/Nirhar">Manish Kausik H&lt;/a>&lt;/strong>(&lt;em>.Tech and M.Tech in Computer Science and Engineering(Dual Degree),Indian Institute of Technology Bhubaneswar&lt;/em>)&lt;/p>&lt;p>Mentors: &lt;strong>David Lange&lt;/strong> (&lt;em>Princeton University&lt;/em>), &lt;strong>William Moses&lt;/strong>(&lt;em>Massachusetts Institute of Technology&lt;/em>), &lt;strong>Vassil Vassilev&lt;/strong> (&lt;em>Princeton University/CERN&lt;/em>)&lt;/p>&lt;p>Funding: &lt;strong>Google Summer of Code 2022&lt;/strong>&lt;/p>&lt;p>&lt;a href="https://clad.readthedocs.io/en/latest/index.html">Clad&lt;/a> is an opensource plugin to the Clang compiler that enables &lt;a href="https://en.wikipedia.org/wiki/Automatic_differentiation">Automatic Differentiation&lt;/a>for C++. Clad receives an Abstract Syntax Tree (AST) from the underlying&lt;br>compiler platform (Clang), decides whether a derivative is requested andproduces it, and modifies the AST to insert the generated code.&lt;a href="https://enzyme.mit.edu/">Enzyme AD&lt;/a> is an LLVM based AD plugin.It works by taking existing code as LLVM IR and computing the derivative(and gradient) of that function.In this project, Manish integrated Enzyme within Clad, giving a Clad user theoption of selecting Enzyme for Automatic Differentiation on demand. Theintegration of Clad and Enzyme t results in a new tool that offers an optimizedand flexible implementation of automatic differentiation.Here you can find Manish’s GSoC&lt;a href="https://compiler-research.org/assets/docs/Manish_Kausik_H_GSoC22_Report.pdf">final report&lt;/a>.&lt;/p>&lt;h2 id="thank-you-developers">Thank you, developers!&lt;/h2>&lt;p>We hope our interns contributors enjoyed our community. Our best reward is toknow that we supported your early steps into the world of open-source softwaredevelopment and compiler construction. We hope that this experience motivatedyou to continue to be involved with the broad LLVM ecosystem.We express our gratitude to the &lt;a href="https://summerofcode.withgoogle.com/">Google Summer of Code&lt;/a>Program and to the Institute for Research and Innovation in Software for HighEnergy Physics (&lt;a href="https://iris-hep.org/">IRIS-HEP&lt;/a>) for supporting ourresearch and providing six young developers this wonderful opportunity.A special thanks goes to the LLVM community for being supportive and for sharingtheir knowledge and introducing our community to the new contributors. Thank youso much!Thanks for choosing Compiler-Research for your internship! We were lucky tohave you!&lt;/p></description></item><item><title>Office hours and the LLVM community calendar.</title><link>https://blog.llvm.org/posts/2022-10-27-office-hours/</link><pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2022-10-27-office-hours/</guid><description>&lt;p>About a thousand people contribute code to LLVM each year. There are probablymany thousands who work on the LLVM code base in downstream projects. And evenmore people use the LLVM libraries to build other cool projects on top of.&lt;/p>&lt;p>The many LLVM users and contributors have long been communicating with eachother using mailing lists, bugzilla, and more recently,&lt;a href="https://discourse.llvm.org/latest">Discourse&lt;/a> and &lt;a href="https://github.com/llvm/llvm-project/issues">githubissues&lt;/a>. Next to theseasynchronous communication channels, the LLVM community has also long had moresynchronous communication channels, such as&lt;a href="https://llvm.org/docs/GettingInvolved.html#irc">IRC&lt;/a> and&lt;a href="https://discord.gg/xS7Z362">Discord&lt;/a>. Twice per year, there is the opportunityto communicate synchronously face-to-face with other LLVM-ers from around theworld: at the &lt;a href="https://llvm.org/devmtg/">LLVM developer meetings&lt;/a>. The &lt;a href="https://www.meetup.com/pro/llvm/">LLVMsocials&lt;/a> that happen in various places aroundthe world also provide the opportunity to meet face-to-face with LLVMers inyour area.&lt;/p>&lt;p>In recent years, we&amp;rsquo;ve added a number of online &amp;ldquo;face-to-face&amp;rdquo; synchronouscommunication channels. They often are the best way to make progress quickly.I think many don&amp;rsquo;t know of their existence yet, or just need a littleencouragement to make more use of them. Therefore, I thought it was worthwhileto highlight them in this post:&lt;/p>&lt;ul>&lt;li>&lt;a href="https://llvm.org/docs/GettingInvolved.html#online-sync-ups">Online sync-ups&lt;/a>are regular calls on specific topics. A few of them have been running foryears, but most started only in the last 2 years. A full list of currentonline sync-ups is documented at&lt;a href="https://llvm.org/docs/GettingInvolved.html#online-sync-ups">https://llvm.org/docs/GettingInvolved.html#online-sync-ups&lt;/a>&lt;/li>&lt;li>More recently, &lt;a href="https://llvm.org/docs/GettingInvolved.html#office-hours">&amp;ldquo;officehours&amp;rdquo;&lt;/a> havestarted. In these, specific experienced people in the community makethemselves available for a chat and to answer questions on anything in theirarea of expertise. They are documented at&lt;a href="https://llvm.org/docs/GettingInvolved.html#office-hours">https://llvm.org/docs/GettingInvolved.html#office-hours&lt;/a>. Whether you&amp;rsquo;reexperienced or not in LLVM, both online sync-ups and office hours can be agreat way to get advice and help on any issues you might be facing when usingor contributing to LLVM.&lt;/li>&lt;/ul>&lt;p>One last way to find LLVM events that may be interesting to you, is to look atour &lt;a href="https://calendar.google.com/calendar/u/0/embed?src=calendar@llvm.org">LLVM communitycalendar&lt;/a>.It shows the schedule for most office hours, online sync-ups and socials. Ifyou&amp;rsquo;re an organizer of any of these events, please do not forget to &lt;a href="https://llvm.org/docs/GettingInvolved.html#llvm-community-calendar">add yourevent to the community calendar by invitingcalendar@llvm.org&lt;/a>.&lt;/p></description></item><item><title>Announcing the LLVM Foundation Board of Directors for the 2022-2024 term</title><link>https://blog.llvm.org/posts/2022-10-03-llvmfoundationboardannouncement/</link><pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2022-10-03-llvmfoundationboardannouncement/</guid><description>&lt;p>The &lt;a href="https://foundation.llvm.org">LLVM Foundation&lt;/a> would like to announce our Board of Directors for the 2022-2024 term:&lt;/p>&lt;ul>&lt;li>&lt;a href="#kit">Kit Barton&lt;/a> (Secretary)&lt;/li>&lt;li>&lt;a href="#kristof">Kristof Beyls&lt;/a>&lt;/li>&lt;li>&lt;a href="#beanz">Chris Bieneman&lt;/a>&lt;/li>&lt;li>&lt;a href="#mike">Mike Edwards&lt;/a> (Treasurer)&lt;/li>&lt;li>&lt;a href="#reid">Reid Kleckner&lt;/a>&lt;/li>&lt;li>&lt;a href="#anton">Anton Korobeynikov&lt;/a>&lt;/li>&lt;li>&lt;a href="#chris">Chris Lattner&lt;/a>&lt;/li>&lt;li>&lt;a href="#tanya">Tanya Lattner&lt;/a> (President)&lt;/li>&lt;li>&lt;a href="#wei">Wei Wu&lt;/a>&lt;/li>&lt;/ul>&lt;p>Three new members and six continuing members were elected to the nine person board.&lt;/p>&lt;p>Thank you to retiring board members Tom Stellard, Cyndy Ishida, and Hal Finkelfor all of their contributions to the board!&lt;/p>&lt;p>About the board of directors (listed alphabetically by last name):&lt;/p>&lt;h3 id="a-namekitkit-bartona">&lt;a name="kit">Kit Barton&lt;/a>&lt;/h3>&lt;p>&lt;img src="https://blog.llvm.org/img/board-22/Kit.png" alt="Kit Barton">&lt;/p>&lt;p>Kit Barton has been contributing to LLVM since 2015. His contributions haveprimarily been to the PowerPC backend and loop optimizations including the loopfusion pass. He has presented multiple technical talks, and tutorials at theLLVM Dev conferences over the last several years.&lt;/p>&lt;p>In addition to the contributions to LLVM, over the last several years Kit hasdriven the effort within IBM to migrate their proprietary C/C++ and Fortrancompilers to leverage LLVM technology. He is currently the technical lead forC/C++ and Fortran compilers on Power and z/OS at IBM.&lt;/p>&lt;p>&lt;a href="mailto:kbarton@llvm.org">[Email]&lt;/a>&lt;/p>&lt;h3 id="a-namekristofkristof-beylsa">&lt;a name="kristof">Kristof Beyls&lt;/a>&lt;/h3>&lt;p>&lt;img src="https://blog.llvm.org/img/board-22/Kristof.jpg" alt="Kristof Beyls">&lt;/p>&lt;p>Kristof Beyls has worked on LLVM since about 2010, initially as part of tech leading the migration of Arm’s C/C++ toolchain to be based on LLVM technology. Since then, Kristof has worked on a variety of code generation projects using LLVM. He has contributed to LLVM in the areas of security mitigations, performance tuning, Arm backends, test-suite, LNT, etc.He has been helping with the organization of EuroLLVM meetings since the start; has been organizing the FOSDEM LLVM dev rooms for the past couple of years and has organized a few socials in Belgium. He has also been on the program committee for a few of the dev meetings. More recently, he works on progressing LLVM relicensing, getting LLVM office hours going and having an LLVM community calendar.Kristof is Senior Principal Engineer at Arm.&lt;/p>&lt;p>&lt;a href="https://twitter.com/kbeyls"> [Twitter]&lt;/a> &lt;a href="https://github.com/kbeyls">[GitHub]&lt;/a> &lt;a href="https://www.linkedin.com/in/kristof-beyls-b6371a1/">[LinkedIn]&lt;/a> &lt;a href="mailto:kristof.beyls@llvm.org">[Email]&lt;/a>&lt;/p>&lt;h3 id="a-namebeanzchris-bienemana">&lt;a name="beanz">Chris Bieneman&lt;/a>&lt;/h3>&lt;p>&lt;img src="https://blog.llvm.org/img/board-22/beanz.jpg" alt="Chris Bieneman">&lt;/p>&lt;p>Chris has been an LLVM contributor since 2013 with contributions up and down the monorepo. His work has ranged from the frontend to the backend, to debuggers, linkers, and JITs.&lt;/p>&lt;p>Chris has presented at several LLVM events and is passionate about community building. The LLVM project and community have been enormous influences in his life, and he is looking forward to the opportunity to work with the Foundation and community to bring that experience to more people around the world.&lt;/p>&lt;p>Chris is currently an engineer on the HLSL compiler team at Microsoft working on advancing graphics programming for Xboxand DirectX and bringing HLSL support into Clang.&lt;/p>&lt;p>&lt;a href="https://twitter.com/thegreatbeanz">[Twitter]&lt;/a> &lt;a href="https://github.com/llvm-beanz">[GitHub]&lt;/a> [&lt;a href="mailto:beanz@llvm.org">Email&lt;/a>&lt;/p>&lt;p>beanz on LLVM&amp;rsquo;s Discourse, Discord, and IRC.&lt;/p>&lt;h3 id="a-namemikemike-edwardsa">&lt;a name="mike">Mike Edwards&lt;/a>&lt;/h3>&lt;p>&lt;img src="https://blog.llvm.org/img/board-22/Mike.jpg" alt="Mike Edwards">&lt;/p>&lt;p>Mike got involved with the LLVM project back in 2014 by contributing to the infrastructure projects. He has helped with everything from CI to the transition to GitHub.&lt;/p>&lt;p>Mike has served as the LLVM Foundations Treasurer since 2018. Mike cares very much about the mission of the LLVM Foundation and credits many of his career opportunities as a direct result of being involved with the LLVM community. He is looking forward to helping to build opportunities for many others to benefit from programs the Foundation has to offer.&lt;a href="mailto:medwards@llvm.org">[Email]&lt;/a>&lt;/p>&lt;h3 id="a-namereidreid-klecknera">&lt;a name="reid">Reid Kleckner&lt;/a>&lt;/h3>&lt;p>&lt;img src="https://blog.llvm.org/img/board-22/Reid.jpg" alt="Reid Kleckner">&lt;/p>&lt;p>Reid Kleckner began contributing to LLVM in 2009 while working on Unladen Swallow, a JIT for Python. That project inspired him to go deeper in compilers. After a long detour involving the DynamoRIO and DrMemory projects, in 2013, Reid joined a team at Google working on Clang and MSVC compatibility. This project required making wide-ranging changes across the compiler: frontend parser changes, Microsoft C++ ABI features, fixes for Windows calling conventions, new IR features such as musttail, parts of the Windows exception handling representation, and parts of the CodeView/PDB debug info format support.&lt;/p>&lt;p>Aside from direct code contributions, Reid has given two talks at US LLVM developer meetings and served on the program committee once. He looks forward to improving the community experience for the next generation of LLVM contributors.Reid currently manages a team supporting C++ and LLVM at Google.&lt;/p>&lt;p>&lt;a href="https://twitter.com/reidkleckner">[Twitter]&lt;/a> &lt;a href="https://github.com/rnk">[GitHub]&lt;/a> &lt;a href="rnk@llvm.org">[Email]&lt;/a>&lt;/p>&lt;h3 id="a-nameantonanton-korobeynikova">&lt;a name="anton">Anton Korobeynikov&lt;/a>&lt;/h3>&lt;p>&lt;img src="https://blog.llvm.org/img/board-22/Anton.jpg" alt="Anton Korobeynikov">&lt;/p>&lt;p>Anton Korobeynikov began contributing to the LLVM project in 2006.Over the years, he has numerous technical contributions to differentareas including Windows support, ELF features, debug info, exceptionhandling, and backends such as ARM and x86.He was the original author of the MSP430 and original System Z backend.&lt;/p>&lt;p>In addition to his technical contributions, Anton has maintainedLLVM’s participation in Google Summer of Code by managingapplications, deadlines, and overall organization. He also supportsthe LLVM infrastructure, drove the Bugzilla to GtiHub migration andhas been on several program committees for the LLVM Developers’Meetings (both US and EuroLLVM).&lt;/p>&lt;p>Anton is currently an associate professor at the Saint PetersburgState University and has served on the LLVM Foundation board ofdirectors for the last 8 years.&lt;/p>&lt;p>&lt;a href="https://twitter.com/akorobeynikov">[Twitter]&lt;/a> &lt;a href="https://github.com/asl">[GitHub]&lt;/a> &lt;a href="https://www.linkedin.com/in/antonkorobeynikov/">[Linkedin]&lt;/a> &lt;a href="mailto:anton@korobeynikov.info">[Email]&lt;/a> &lt;a href="http://anton.korobeynikov.info">[Website]&lt;/a>&lt;/p>&lt;h3 id="a-namechrischris-lattnera">&lt;a name="chris">Chris Lattner&lt;/a>&lt;/h3>&lt;p>&lt;img src="https://blog.llvm.org/img/board-22/ChrisL.jpg" alt="Chris Lattner">&lt;/p>&lt;p>Chris Lattner cofounded the LLVM Compiler infrastructure project, the Clang compiler, the Swift programming language, the MLIR compiler infrastructure, the CIRCT project, and has contributed to many other commercial and open source projects at Apple, Tesla, Google and SiFive. He is currently Cofounder and CEO of Modular, which is building an innovating new developer platform for AI Software.&lt;/p>&lt;p>&lt;a href="https://twitter.com/clattner_llvm">[Twitter]&lt;/a> &lt;a href="https://github.com/lattner">[GitHub]&lt;/a> &lt;a href="https://www.linkedin.com/in/chris-lattner-5664498a/"> [LinkedIn]&lt;/a> &lt;a href="https://nondot.org/sabre/">[Website]&lt;/a> &lt;a href="mailto:clattner@llvm.org">[Email]&lt;/a>&lt;/p>&lt;h3 id="a-nametanyatanya-lattnera">&lt;a name="tanya">Tanya Lattner&lt;/a>&lt;/h3>&lt;p>&lt;img src="https://blog.llvm.org/img/board-22/Tanya.jpg" alt="Tanya Lattner">&lt;/p>&lt;p>Tanya Lattner has been involved in the LLVM project for over 20 years. She began as a graduate student who wrote her master&amp;rsquo;s thesis using LLVM, and continued on using and extending LLVM technologies at various jobs during her career as a compiler engineer.&lt;/p>&lt;p>Tanya is also a long time volunteer with the LLVM Project. She has organized LLVM Developers’ Meetings, workshops, was the release manager for several years, and adminstrates LLVM infrastructure.&lt;/p>&lt;p>With the support of the initial board of directors, Tanya created the LLVM Foundation, defined its charitable and education mission, and worked to get 501(c)(3) status. She is passionate about the LLVM Community and wants to help see it thrive and grow for years to come.&lt;/p>&lt;p>Tanya is the COO and President of the LLVM Foundation.&lt;/p>&lt;p>&lt;a href="https://twitter.com/tonic888"> [Twitter] &lt;/a> &lt;a href="https://github.com//tlattner"> [GitHub]&lt;/a> &lt;a href="https://www.linkedin.com/in/tanyalattner/"> [LinkedIn]&lt;/a> &lt;a href="mailto:tanyalattner@llvm.org"> [Email]&lt;/a>&lt;/p>&lt;h3 id="a-nameweiwei-wua">&lt;a name="wei">Wei Wu&lt;/a>&lt;/h3>&lt;p>&lt;img src="https://blog.llvm.org/img/board-22/Wei.png" alt="Wei Wu">&lt;/p>&lt;p>Wei Wu is the co-founder and director of the PLCT lab, ISCAS. Heformed an LLVM development team in the PLCT lab which is activelycontributing code to LLVM upstream (currently mainly RISC-V backendand MLIR framework). He is also serving the LLVM IWG as a volunteer,trying to improve the LLVM&amp;rsquo;s infrastructure.&lt;/p>&lt;p>He is the chairman of OSDT (including HelloGCC and HelloLLVM)community which was founded in 2007. OSDT is an open community aimingto promote the development of toolchains, language VMs,emulators/simulators and other tools for software developers. Heestablished the HelloLLVM community in China a few years ago,dedicated to attracting and cultivating new LLVM developers. HelloLLVMis now a sub-community of OSDT.&lt;/p>&lt;p>He is very passionate about teaching compiler techniques to Chineseengineers and amateurs. He often gives talks and lectures amongamateurs and college students in OSDT meetups. He also collaborateswith college teachers, providing LLVM related seminars and experimentcourses.&lt;/p>&lt;p>&lt;a href="mailto:wuwei@llvm.org"> [Email] &lt;/a>&lt;/p></description></item><item><title>Announcing the 2022 LLVM Developers' Meeting Program</title><link>https://blog.llvm.org/posts/2022-09-30-llvmdevmtgprogram/</link><pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2022-09-30-llvmdevmtgprogram/</guid><description>&lt;p>&lt;img src="https://blog.llvm.org/img/2022-LLVMDevMtgLogo.jpg" alt="2022 LLVM Dev Mtg Logo">&lt;/p>&lt;p>We had an amazing group of talk proposals submitted for the &lt;a href="https://llvm.swoogo.com/2022devmtg/2359289">2022 LLVM Developers' Meeting&lt;/a>. Thank you to all that submitted a talk proposal this year!&lt;/p>&lt;p>Here is the 2022 LLVM Developers' Meeting program:&lt;/p>&lt;p>&lt;strong>Keynotes:&lt;/strong>&lt;/p>&lt;ul>&lt;li>Paths towards unifying LLVM and MLIR - Nicolai Hähnle&lt;/li>&lt;li>Implementing Language Support for ABI-Stable Software Evolution in Swift and LLVM - Doug Gregor&lt;/li>&lt;/ul>&lt;p>&lt;strong>Technical Talks:&lt;/strong>&lt;/p>&lt;ul>&lt;li>Implementing the Unimplementable: Bringing HLSL&amp;rsquo;s Standard Library into Clang - Chris Bieneman&lt;/li>&lt;li>Heterogeneous Debug Metadata in LLVM - Scott Linder&lt;/li>&lt;li>Clang, Clang: Who&amp;rsquo;s there? WebAssembly!- Paulo Matos&lt;/li>&lt;li>MC/DC: Enabling easy-to-use safety-critical code coverage analysis with LLVM - Alan Phipps&lt;/li>&lt;li>What does it take to run LLVM Buildbots? - David Spickett&lt;/li>&lt;li>llvm-gitbom: Building Software Artifact Dependency Graphs for Vulnerability Detection - Bharathi Seshadri, Yongkui Han&lt;/li>&lt;li>CuPBoP: CUDA for Parallelized and Broad-range Processors - Ruobing Han&lt;/li>&lt;li>Uniformity Analysis for Irreducible CFGs - Sameer Sahasrabuddhe&lt;/li>&lt;li>Using Content-Addressable Storage in Clang for Caching Computations and Eliminating Redundancy - Steven Wu, Ben Langmuir&lt;/li>&lt;li>Direct GPU Compilation and Execution for Host Applications with OpenMP Parallelism - Shilei Tian, Joseph Huber&lt;/li>&lt;li>Linker Code Size Optimization for Native Mobile Applications - Gai Liu&lt;/li>&lt;li>Minotaur: A SIMD Oriented Superoptimizer - Zhengyang Liu&lt;/li>&lt;li>ML-based Hardware Cost Model for High-Level MLIR - Dibyendu Das, Sandya Mannarswamy&lt;/li>&lt;li>VAST: MLIR for program analysis of C/C++ - Henrich Lauko&lt;/li>&lt;li>MLIR for Functional Programming - Siddharth Bhat&lt;/li>&lt;li>SPIR-V Backend in LLVM: Upstream and Beyond - Michal Paszkowski, Alex Bezzubikov&lt;/li>&lt;li>IRDL: A Dialect for dialects - Mathieu Fehr, Théo Degioanni&lt;/li>&lt;li>Automated translation validation for an LLVM backend - Nader Boushehrinejad Moradi&lt;/li>&lt;li>llvm-dialects: bringing dialects to the LLVM IR substrate - Nicolai Hähnle&lt;/li>&lt;li>YARPGen: A Compiler Fuzzer for Loop Optimizations and Data-Parallel Languages - Vsevolod Livinskii&lt;/li>&lt;li>RISC-V Sign Extension Optimizations - Craig Topper&lt;/li>&lt;li>Execution Domain Transition: Binary and LLVM IR can run in conjunction - Jaeyong Ko&lt;/li>&lt;/ul>&lt;p>&lt;strong>Tutorials:&lt;/strong>&lt;/p>&lt;ul>&lt;li>Using LLVM&amp;rsquo;s libc - Sivachandra Reddy, Michael Jones, Tue Ly&lt;/li>&lt;li>How to implement a new JITLink backend in a week - Sunho Kim&lt;/li>&lt;/ul>&lt;p>&lt;strong>Panels (some speakers still to be announced):&lt;/strong>&lt;/p>&lt;ul>&lt;li>Machine Learning Guided Optimizations (MLGO) in LLVM&lt;/li>&lt;li>Static Analysis in Clang - Gabor Horvath, Artem Dergachev, Bruno Cardoso Lopes&lt;/li>&lt;li>High-level IRs for a C/C++ Optimizing Compiler - Bruno Lopes, Ivan Baev, Johannes Doerfert, Mehdi Amini&lt;/li>&lt;li>Panel discussion on “Best practices with toolchain release and maintenance” - Aditya Kumar&lt;/li>&lt;/ul>&lt;p>&lt;strong>Student Technical Talks:&lt;/strong>&lt;/p>&lt;ul>&lt;li>Merging Similar Control-Flow Regions in LLVM for Performance and Code Size Benefits - Charitha Saumya&lt;/li>&lt;li>Alive-mutate: a fuzzer that cooperates with Alive2 to find LLVM bugs - Yuyou Fan&lt;/li>&lt;li>Enabling Transformers to Understand Low-Level Programs - Zifan Guo, William S. Moses&lt;/li>&lt;li>LAGrad: Leveraging the MLIR Ecosystem for Efficient Differentiable Programming - Mai Jacob Peng&lt;/li>&lt;li>Scalable Loop Analysis - Vir Narula&lt;/li>&lt;/ul>&lt;p>&lt;strong>Quick Talks:&lt;/strong>&lt;/p>&lt;ul>&lt;li>LLVM Education Initiativei - Chris Bieneman, Kit Barton, Mike Edwards&lt;/li>&lt;li>Enabling AArch64 Instrumentation Support In BOLT - Elvina Yakubova&lt;/li>&lt;li>Approximating at Scale: How strtofloat in LLVM’s libc is faster - Michael Jones&lt;/li>&lt;li>MIR support in llvm-reduce - Matthew Arsenault&lt;/li>&lt;li>Interactive Crashlogs in LLDB - Med Ismail Bennani&lt;/li>&lt;li>clang-extract-api: Clang support for API information generation in JSON - Zixu Wang&lt;/li>&lt;li>Using modern CPU instructions to improve LLVM&amp;rsquo;s libc math library. - Tue Ly&lt;/li>&lt;li>Challenges Of Enabling Golang Binaries Optimization By BOLT - Vasily Leonenko, Vladislav Khmelevskyi&lt;/li>&lt;li>Inlining for Size - Kyungwoo Lee, Ellis Hoag, Nathan Lanza&lt;/li>&lt;li>Automatic indirect memory access instructions generation for pointer chasing patterns - Przemysław Ossowski&lt;/li>&lt;li>Link-Time Attributes for LTO: Incorporating linker knowledge into the LTO recompile - Todd Snider&lt;/li>&lt;li>Expecting the expected: Honoring user branch hints for code placement optimizations - Stan Kvasov, Vince Del Vecchio&lt;/li>&lt;li>CUDA-OMP — Or, Breaking the Vendor Lock - Johannes Doerfert, Joseph Huber&lt;/li>&lt;li>Thoughts on GPUs as First-Class Citizens - Johannes Doerfert, Shilei Tian, Joseph Huber&lt;/li>&lt;li>Building an End-to-End Toolchain for Fully Homomorphic Encryption with MLIR - Alexander Viand&lt;/li>&lt;/ul>&lt;p>&lt;strong>Lightning Talks:&lt;/strong>&lt;/p>&lt;ul>&lt;li>LLVM Office Hours: addressing LLVM engagement and contribution barriers - Kristof Beyls&lt;/li>&lt;li>Improved Fuzzing of Backend Code Generation in LLVM - Yuyang Rong&lt;/li>&lt;li>Interactive Programming for LLVM TableGen - David Spickett&lt;/li>&lt;li>Efficient JIT-based remote execution - Anubhab Ghosh&lt;/li>&lt;li>FFTc: An MLIR Dialect for Developing HPC Fast Fourier Transform Libraries - Yifei He&lt;/li>&lt;li>Recovering from Errors in Clang-Repl and Code Undo - Purva Chaudhari, Jun Zhang&lt;/li>&lt;li>10 commits towards GlobalISel for PowerPC - Kai Nacke, Amy Kwan&lt;/li>&lt;li>Nonstandard reductions with SPRAY - Jan Hueckelheim, Johannes Doerfert&lt;/li>&lt;li>Type Resugaring in Clang for Better Diagnostics and Beyond - Matheus Izvekov&lt;/li>&lt;li>Swift Bindings for LLVM - Egor Zhdan&lt;/li>&lt;li>Min-sized Function Coverage with IRPGO - Ellis Hoag, Kyungwoo Lee&lt;/li>&lt;li>High-Performance GPU-to-CPU Transpilation and Optimization via High-Level Parallel Constructs in Polygeist/MLIR - William S. Moses, Ivan R. Ivanov&lt;/li>&lt;li>Tools for checking and writing non-trivial DWARF programs - Chris Jackson&lt;/li>&lt;li>Analysis of RISC-V Vector Performance Using MCA Tools - Michael Maitland&lt;/li>&lt;li>Optimizing Clang with BOLT using CMake - Amir Ayupov&lt;/li>&lt;li>Exploring OpenMP target offloading for the GraphCore architecture - Jose M Monsalve Daiz&lt;/li>&lt;/ul>&lt;p>&lt;strong>Posters (more posters to be announced at a later date):&lt;/strong>&lt;/p>&lt;ul>&lt;li>Removal of Undef: Move Uninitialized Memory to Poison - John McIver&lt;/li>&lt;li>Optimizing Julia&amp;rsquo;s ORC JIT - Prem Chintalapudi&lt;/li>&lt;li>An LLVM-Based Compiler for Quantum-Classical Applications - Xin-Chuan Wu&lt;/li>&lt;li>Specializing Code to New Architectures via Dynamic Adaptive Recompilation - Quinn Pham, Dhanrajbir Singh Hira&lt;/li>&lt;li>LLFPTrax: Tracking ill-conditioned floating-point inputs using relative error amplification in LLVM - Tanmay Tirpankar&lt;/li>&lt;li>LLVM continuous upstream integration and testing - Jay Azurin, Keerthana Subramani&lt;/li>&lt;li>Automatic indirect memory access instructions generation for pointer chasing patterns - Adam Perdeusz&lt;/li>&lt;/ul>&lt;p>Thank you to the volunters on the Program Committee for all of their hard work and time spent reviewing proposals. A special thanks also goes out to this year&amp;rsquo;s chair - Anton Korobeynikov. Here is the complete 2022 LLVM Developers' Meeting Program Committee:&lt;/p>&lt;ul>&lt;li>Kristof Beyls&lt;/li>&lt;li>Andrey Bokhanko&lt;/li>&lt;li>Chelsea Cassanova&lt;/li>&lt;li>Johannes Doerfert&lt;/li>&lt;li>Florian Hahn&lt;/li>&lt;li>Petr Hosek&lt;/li>&lt;li>Min-Yih Hsu&lt;/li>&lt;li>Anton Korobeynikov (Chair)&lt;/li>&lt;li>Aditya Kumar&lt;/li>&lt;li>Hem Neema&lt;/li>&lt;li>Diego Novillo&lt;/li>&lt;li>Fangrui Song&lt;/li>&lt;li>J. Ryan Stinnett&lt;/li>&lt;li>Caroline Tice&lt;/li>&lt;li>Mircea Trofin&lt;/li>&lt;/ul>&lt;p>Registration closes on October 31st, so register today for the &lt;a href="https://llvm.swoogo.com/2022devmtg/2359289">2022 LLVM Developers' Meeting&lt;/a>.&lt;/p></description></item><item><title>Text formatting in C++ using libc++</title><link>https://blog.llvm.org/posts/2022-08-14-libc++-format/</link><pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2022-08-14-libc++-format/</guid><description>&lt;p>Historically formatting text in C++, using the standard library, has beenunpleasant. It is possible to get nice output with the stream operators, but itis very verbose due to the stream manipulators. The other option is using&lt;code>printf&lt;/code>, which is convenient but only supports a limited number of types andis not extendable. A non-standard option is using the&lt;a href="https://fmt.dev/latest/index.html">{fmt}&lt;/a> library. This article provides ashort introduction to the parts of this library that were standardized in C++20as &lt;code>std::format&lt;/code>, as well as the current implementation status in LLVM 15.&lt;/p>&lt;h2 id="what-is-stdformat">What is &lt;code>std::format&lt;/code>&lt;/h2>&lt;p>&lt;code>std::format&lt;/code> is a text formatting library using format strings similar toPython&amp;rsquo;s &lt;a href="https://docs.python.org/3/library/stdtypes.html#str.format">format&lt;/a>and extensible for user defined types.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;format&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>format(&lt;span style="color:#e6db74">&amp;#34;Hello {} in C++{}&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;std::format&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>);}&lt;/code>&lt;/pre>&lt;/div>&lt;p>Writes the following output:&lt;/p>&lt;pre tabindex="0">&lt;code>Hello std::format in C++20&lt;/code>&lt;/pre>&lt;p>The &lt;code>{}&lt;/code> indicates a replacement field like &lt;code>%&lt;/code> in &lt;code>printf&lt;/code>. With&lt;code>std::format&lt;/code> the argument types are known, so it is not required to specifythem in the replacement field.&lt;/p>&lt;p>The desired output format and the positional argument to use for eachreplacement field can also be specified.(For brevity, the following examples omit the required includes.)&lt;/p>&lt;p>Writes the first positional argument using different bases, a prefix, andzero padding to 8 columns.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>format(&lt;span style="color:#e6db74">&amp;#34;{0:#08b}, {0:#08o}, {0:08}, {0:#08x}&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">16&lt;/span>);}&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>0b010000, 00000020, 00000016, 0x000010&lt;/code>&lt;/pre>&lt;p>It is possible to use an upper case prefix and hexadecimal digits.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>format(&lt;span style="color:#e6db74">&amp;#34;{0:#08B}, {0:#08o}, {0:08}, {0:#08X}&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">15&lt;/span>);}&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>0B001111, 00000017, 00000015, 0X00000F&lt;/code>&lt;/pre>&lt;p>The alignment and fill character can be specified.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>format(&lt;span style="color:#e6db74">&amp;#34;{:#&amp;lt;8} {:*&amp;gt;8} {:-^5}&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Hello&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;!&amp;#39;&lt;/span>);}&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>Hello### ***world --!--&lt;/code>&lt;/pre>&lt;p>When printing tables it is nice to be able to specify the alignment and widthof the columns. However, formatting Unicode text can be especially tricky,since not every &lt;code>char&lt;/code> (or &lt;code>wchar_t&lt;/code>) is one &amp;ldquo;character&amp;rdquo;.&lt;/p>&lt;p>For example the letter Á, can be written in two ways:&lt;/p>&lt;ul>&lt;li>LATIN CAPITAL LETTER A WITH ACUTE&lt;/li>&lt;li>LATIN CAPITAL LETTER A + COMBINING ACUTE ACCENT&lt;/li>&lt;/ul>&lt;p>This combining of multiple &amp;ldquo;characters&amp;rdquo; is used in several scripts and inemojis. (This &amp;ldquo;combined multiple characters&amp;rdquo; is known as&lt;a href="https://www.unicode.org/reports/tr29/">extended grapheme clusters&lt;/a> inUnicode.) The library has implemented these rules so it will count both formsof Á as using one column in the output.&lt;/p>&lt;p>Another issue with text formatting is that not all every &amp;ldquo;character&amp;rdquo; has thesame column width. Based on the &amp;ldquo;character&amp;rdquo; the column width is estimated to beone or two columns.&lt;/p>&lt;p>Below is an example taken from the &lt;a href="https://wg21.link/p1868r2">paper&lt;/a> thatintroduced the width estimation algorithm in &lt;code>std::format&lt;/code>:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">input&lt;/span> { &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> text; &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> info;};&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { input inputs[] &lt;span style="color:#f92672">=&lt;/span> { {&lt;span style="color:#e6db74">&amp;#34;Text&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Description&amp;#34;&lt;/span>}, {&lt;span style="color:#e6db74">&amp;#34;-----&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;------------------------------------------------------------------------&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;--------------&amp;#34;&lt;/span>}, {&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\x41&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;U+0041 { LATIN CAPITAL LETTER A }&amp;#34;&lt;/span>}, {&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\xC3\x81&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;U+00C1 { LATIN CAPITAL LETTER A WITH ACUTE }&amp;#34;&lt;/span>}, {&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\x41\xCC\x81&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;U+0041 U+0301 { LATIN CAPITAL LETTER A } { COMBINING ACUTE ACCENT }&amp;#34;&lt;/span>}, {&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\xc4\xb2&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;U+0132 { LATIN CAPITAL LIGATURE IJ }&amp;#34;&lt;/span>}, &lt;span style="color:#75715e">// Ĳ&lt;/span>&lt;span style="color:#75715e">&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\xce\x94&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;U+0394 { GREEK CAPITAL LETTER DELTA }&amp;#34;&lt;/span>}, &lt;span style="color:#75715e">// Δ&lt;/span>&lt;span style="color:#75715e">&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\xd0\xa9&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;U+0429 { CYRILLIC CAPITAL LETTER SHCHA }&amp;#34;&lt;/span>}, &lt;span style="color:#75715e">// Щ&lt;/span>&lt;span style="color:#75715e">&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\xd7\x90&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;U+05D0 { HEBREW LETTER ALEF }&amp;#34;&lt;/span>}, &lt;span style="color:#75715e">// א&lt;/span>&lt;span style="color:#75715e">&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\xd8\xb4&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;U+0634 { ARABIC LETTER SHEEN }&amp;#34;&lt;/span>}, &lt;span style="color:#75715e">// ش&lt;/span>&lt;span style="color:#75715e">&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\xe3\x80\x89&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;U+3009 { RIGHT-POINTING ANGLE BRACKET }&amp;#34;&lt;/span>}, &lt;span style="color:#75715e">// 〉&lt;/span>&lt;span style="color:#75715e">&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\xe7\x95\x8c&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;U+754C { CJK Unified Ideograph-754C }&amp;#34;&lt;/span>}, &lt;span style="color:#75715e">// 界&lt;/span>&lt;span style="color:#75715e">&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\xf0\x9f\xa6\x84&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;U+1F921 { UNICORN FACE }&amp;#34;&lt;/span>}, &lt;span style="color:#75715e">// 🦄&lt;/span>&lt;span style="color:#75715e">&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\xf0\x9f\x91\xa8\xe2\x80\x8d\xf0\x9f\x91\xa9\xe2\x80\x8d&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\xf0\x9f\x91\xa7\xe2\x80\x8d\xf0\x9f\x91\xa6&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;U+1F468 U+200D U+1F469 U+200D U+1F467 U+200D U+1F466 &amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;{ Family: Man, Woman, Girl, Boy } &amp;#34;&lt;/span>} &lt;span style="color:#75715e">// 👨‍👩‍👧‍👦&lt;/span>&lt;span style="color:#75715e">&lt;/span> }; &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span> input: inputs) { std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>format(&lt;span style="color:#e6db74">&amp;#34;{:&amp;gt;5} | {}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, input.text, input.info); }}&lt;/code>&lt;/pre>&lt;/div>&lt;p>(Note the column width is intended to look good on a terminal. The author hasobserved differences in quality of the output depending on the browser used.)&lt;/p>&lt;pre tabindex="0">&lt;code> Text | Description----- | -------------------------------------------------------------------------------------- A | U+0041 { LATIN CAPITAL LETTER A } Á | U+00C1 { LATIN CAPITAL LETTER A WITH ACUTE } Á | U+0041 U+0301 { LATIN CAPITAL LETTER A } { COMBINING ACUTE ACCENT } Ĳ | U+0132 { LATIN CAPITAL LIGATURE IJ } Δ | U+0394 { GREEK CAPITAL LETTER DELTA } Щ | U+0429 { CYRILLIC CAPITAL LETTER SHCHA } א | U+05D0 { HEBREW LETTER ALEF } ش | U+0634 { ARABIC LETTER SHEEN } 〉 | U+3009 { RIGHT-POINTING ANGLE BRACKET } 界 | U+754C { CJK Unified Ideograph-754C } 🦄 | U+1F921 { UNICORN FACE } 👨‍👩‍👧‍👦 | U+1F468 U+200D U+1F469 U+200D U+1F467 U+200D U+1F466 { Family: Man, Woman, Girl, Boy }&lt;/code>&lt;/pre>&lt;p>Attempting to format a value as the wrong type (e.g. formatting a string as anumber) will result in a compilation error, instead of a runtime error with&lt;code>printf&lt;/code>. Most of the major compilers provide a warning to try to detectincorrect format specifiers in &lt;code>printf&lt;/code>, but this is not part of thespecification, and in particular embedded compilers often don&amp;rsquo;t provide thatwarning. In contrast, &lt;code>std::format&lt;/code> is &lt;em>specified&lt;/em> to produce a compilationerror, which is implemented in the library itself using C++20 &lt;code>consteval&lt;/code>functions.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>format(&lt;span style="color:#e6db74">&amp;#34;{0:#08B}, {0:#08o}, {0:08}, {0:#08X}&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;15&amp;#34;&lt;/span>);}&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler output starts with this error, followed by a lot of not too useful messages.&lt;/p>&lt;pre tabindex="0">&lt;code>error: call to consteval function 'std::basic_format_string&amp;lt;char, const char (&amp;amp;)[3]&amp;gt;::basic_format_string&amp;lt;char[37]&amp;gt;' is not a constant expression std::cout &amp;lt;&amp;lt; std::format(&amp;quot;{0:#08B}, {0:#08o}, {0:08}, {0:#08X}&amp;quot;, &amp;quot;15&amp;quot;);&lt;/code>&lt;/pre>&lt;p>In addition to outputting the formatted result to a string, it is also possible:&lt;/p>&lt;ul>&lt;li>to output the result to an arbitrary output iterator,&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>format_to( std&lt;span style="color:#f92672">::&lt;/span>ostream_iterator&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(std&lt;span style="color:#f92672">::&lt;/span>cout, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;Hello {} in C++{}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;std::format&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>);}&lt;/code>&lt;/pre>&lt;/div>&lt;ul>&lt;li>to determine the output size,&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>formatted_size(&lt;span style="color:#e6db74">&amp;#34;Hello {} in C++{}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;std::format&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>);}&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>27&lt;/code>&lt;/pre>&lt;ul>&lt;li>or limit the size of the output.&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>format_to( std&lt;span style="color:#f92672">::&lt;/span>ostream_iterator&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(std&lt;span style="color:#f92672">::&lt;/span>cout, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>), &lt;span style="color:#ae81ff">11&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Hello {} in C++{}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;std::format&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>);}&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>Hello std&lt;/code>&lt;/pre>&lt;p>An example of formatting user defined types is available in the standardlibrary. It has formatting support for the &lt;code>chrono&lt;/code> library. (This is notavailable in libc++ yet.) These formatters are quite complex. For other typesit is possible quickly create a formatter. For example for the following &lt;code>enum class&lt;/code>:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">color&lt;/span> { red, green, blue };&lt;/code>&lt;/pre>&lt;/div>&lt;p>Adding a formatter based on an existing formatter can be done like:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">std&lt;/span>&lt;span style="color:#f92672">::&lt;/span>formatter&lt;span style="color:#f92672">&amp;lt;&lt;/span>color&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>formatter&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&amp;gt;&lt;/span> { &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">constexpr&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> color_names[] &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;red&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;green&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;blue&amp;#34;&lt;/span>}; &lt;span style="color:#66d9ef">auto&lt;/span> &lt;span style="color:#a6e22e">format&lt;/span>(color c, &lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> ctx) &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">decltype&lt;/span>(ctx.out()) { &lt;span style="color:#66d9ef">using&lt;/span> base &lt;span style="color:#f92672">=&lt;/span> formatter&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&amp;gt;&lt;/span>; &lt;span style="color:#66d9ef">return&lt;/span> base&lt;span style="color:#f92672">::&lt;/span>format(color_names[&lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(c)], ctx); }};&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now all features of the &lt;code>const char*&lt;/code> formatter are available in the colorformatter:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>format(&lt;span style="color:#e6db74">&amp;#34;{:#&amp;lt;10}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">{:+^10}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">{:-&amp;gt;10}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, color&lt;span style="color:#f92672">::&lt;/span>red, color&lt;span style="color:#f92672">::&lt;/span>green, color&lt;span style="color:#f92672">::&lt;/span>blue);}&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>red#######++green+++------blue&lt;/code>&lt;/pre>&lt;p>More examples and details of the specification can be found in this&lt;a href="https://hackingcpp.com/cpp/libs/fmt.html">{fmt} cheet sheet&lt;/a>.&lt;/p>&lt;h2 id="the-status-in-llvm-15">The status in LLVM 15&lt;/h2>&lt;p>In LLVM 15 most of the basic text formatting is complete. All major papershave been implemented, but some defect reports are not implemented. The libc++team also wants to work on performance improvements and improvements to thecompile-time errors. Some of these improvements have already landed in &lt;code>main&lt;/code>and will be included in LLVM 16, while others are only planned.&lt;/p>&lt;p>Since the library is not entirely complete and the ABI may need to change (dueto planned improvements but also changes voted by the C++ Committee), it isshipped as an experimental feature in LLVM 15. To use the code in libc++ youneed to compile the code like:&lt;/p>&lt;pre tabindex="0">&lt;code>clang -std=c++20 -stdlib=libc++ -fexperimental-library -ofoo foo.cpp&lt;/code>&lt;/pre>&lt;p>Format support for &lt;code>chrono&lt;/code> is unavailable. Initial work has landed forLLVM 16, but none of it is available in LLVM 15. The &lt;code>chrono&lt;/code> libraryitself lacks support for time zones, leap seconds, and some of the less commonclocks. These need to be available before the formatting support for &lt;code>chrono&lt;/code>can be completed.&lt;/p>&lt;h2 id="formatting-improvements-in-c23">Formatting improvements in C++23&lt;/h2>&lt;p>In the examples the output is first formatted in a &lt;code>std::string&lt;/code> beforestreaming it to the output. To avoid the temporary &lt;code>std::string&lt;/code> it ispossible to use &lt;code>std::format_to&lt;/code>, but that doesn&amp;rsquo;t have an ergonomic syntax.In C++23 there will be &lt;code>std::print&lt;/code>.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>print(&lt;span style="color:#e6db74">&amp;#34;Hello {} in C++{}&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;std::format&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>);}&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>Hello std::format in C++20&lt;/code>&lt;/pre>&lt;p>There is little support for formatting containers. In C++23 it will becomepossible to format ranges and containers.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { std&lt;span style="color:#f92672">::&lt;/span>print(&lt;span style="color:#e6db74">&amp;#34;{::*^5}&amp;#34;&lt;/span>, std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>{&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>});}&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>[**1**, **2**, **3**]&lt;/code>&lt;/pre>&lt;p>Some progress on formatting ranges has been made, but the main focus in theshort term will be to finish C++20&amp;rsquo;s format implementation.&lt;/p>&lt;h2 id="closing-words">Closing words&lt;/h2>&lt;p>Starting with C++20, formatting text becomes a lot more pleasant and C++23 haseven more improvements lined up. This should provide long awaited functionalityin C++ and allow replacing several uses of &lt;code>&amp;lt;iostream&amp;gt;&lt;/code> by a more convenient,faster and safer alternative.&lt;/p>&lt;h2 id="acknowledgements">Acknowledgements&lt;/h2>&lt;p>Huge thanks to Victor Zverovich, the author of {fmt}. He has been heavilyinvolved in getting &lt;code>std::format&lt;/code> in the C++ Standard. He has aided reviewinglibc++&amp;rsquo;s implementation and his insights and comments have improved the qualityof the implementation.&lt;/p></description></item><item><title>August 2022 LLVM relicensing update &amp; further suggestions for help</title><link>https://blog.llvm.org/posts/2022-08-14-relicensing-update/</link><pubDate>Wed, 17 Aug 2022 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2022-08-14-relicensing-update/</guid><description>&lt;p>The last update on LLVM relicensing was &lt;a href="https://blog.llvm.org/posts/2021-11-18-relicensing-update/">done about 8 monthsago&lt;/a>. Since thenwe&amp;rsquo;ve made substantial progress, so I thought it&amp;rsquo;s worthwhile to share anotherupdate.&lt;/p>&lt;p>The TL;DR is:&lt;/p>&lt;ul>&lt;li>Out of the about 32 million LOC that were contributed under the old license,we&amp;rsquo;ve reduced the lines of code that aren&amp;rsquo;t relicensed yet from 6% to only2%.&lt;/li>&lt;li>8 months ago, we were still searching for ways to contact 808 individuals whocontributed to LLVM over the past 20 years. We managed to reduce that numberto 421 individuals now.&lt;/li>&lt;li>We&amp;rsquo;ve also reduced the number of companies or universities to get a relicensingagreement from from 133 to 122.&lt;/li>&lt;/ul>&lt;p>Read on to find out how we achieved that great progress and how you can helpwith getting us closer to our end goal of having LLVM fully relicensed.&lt;/p>&lt;p>First of all, a big thank you to everyone who responded to the call for help inthe &lt;a href="https://blog.llvm.org/posts/2021-11-18-relicensing-update/">November 2021 blogpost&lt;/a> and the &lt;a href="https://www.youtube.com/watch?v=aAFDfhD-jDs">2021LLVM dev meeting presentation&lt;/a>.This level of progress would not have been possible without your action!&lt;/p>&lt;p>Next to receiving more relicensing agreements, we also started exploring someof the tactics described in &lt;a href="https://discourse.llvm.org/t/board-meeting-minutes-may-2022/63628">the previousupdate&lt;/a>under section &amp;ldquo;the end game&amp;rdquo;, for the pieces of code that we end up notreceiving a relicensing agreement for, as described in the next sections.&lt;/p>&lt;h2 id="threshold-of-originality">Threshold of originality&lt;/h2>&lt;p>Remember that licenses exists because of copyright law &amp;ndash; the license is howthe copyright owners of the code in LLVM give rights to users and othercontributors to use their code in lots of useful and interesting ways.&lt;/p>&lt;p>This also means that if a piece of code is not protected by copyright law,there is no need for it to be covered by a license.&lt;/p>&lt;p>Some pieces of code are not covered by copyright law. For example, copyrightlaw contains a concept called &lt;a href="https://en.wikipedia.org/wiki/Threshold_of_originality">&amp;ldquo;Threshold oforiginality&amp;rdquo;&lt;/a>. It meansthat a work needs to be &amp;ldquo;sufficiently original&amp;rdquo; for it to be considered to becovered by copyright. There could be a lot of different interpretations intowhat it means for a code contribution to be sufficiently original for it to becovered by copyright. A threshold that is often used in open source projectsthat use &lt;a href="https://en.wikipedia.org/wiki/Contributor_License_Agreement">contributor license agreements(CLA)&lt;/a> is toassume that any contribution that&amp;rsquo;s 10 lines of code or less does not meet thethreshold of originality and therefore copyright does not apply. In &lt;a href="https://discourse.llvm.org/t/board-meeting-minutes-may-2022/63628">their May2022 boardmeeting&lt;/a>,the LLVM Foundation decided to make the same assumption for the relicensingproject: contributions of 10 lines of code or less are assumed to not becovered by copyright.Therefore, we don&amp;rsquo;t need relicensing agreements for those.&lt;/p>&lt;p>Furthermore, there are a few commits that don&amp;rsquo;t seem to meet the&amp;ldquo;threshold-of-originality&amp;rdquo; even though they&amp;rsquo;re changing/adding more than 10lines. We also consider those to not needing a relicensing agreement. Oneexample is &lt;a href="https://github.com/llvm/llvm-project/commit/cd13ef01a21e">thiscommit&lt;/a>, which onlyremoves the full stop at the end of a few sentences.&lt;/p>&lt;h2 id="code-no-longer-present-in-top-of-trunk">Code no longer present in Top-of-Trunk.&lt;/h2>&lt;p>We started exploring which of the not-yet-relicensed code is still in thecurrent top-of-trunk code base. Some big contributions that weren&amp;rsquo;t covered yetare no longer there, such as for example the Microblaze and PIC16 backends. Wemanually checked and marked commits contributing to just these backends as notneeding to be covered by relicensing agreements.&lt;/p>&lt;p>To help with finding more code that is no longer in the code base, I wrote asimple heuristic script that searches in current top-of-trunk if lines from aspecific commit can still be found in the code base. If for a given commit, noor very few lines can be found in current top-of-trunk, that&amp;rsquo;s a strongindication that that code is probably no longer there. That heuristic scriptindicates that for about 5% of the not-yet-relicensed commits, the code does nolonger seem to be present. I still need to find time to manually verify thecode in these commits is indeed no longer in the code base. This manualverification would be something that someone could easily help me with. Ifanyone reading this would like to volunteer for helping with that - please dolet me know!&lt;/p>&lt;h2 id="next-steps">Next steps&lt;/h2>&lt;p>In our quest to get nearer to 100% relicensing coverage, I believe thefollowing are the most impactful next steps to take:&lt;/p>&lt;ul>&lt;li>Continue accepting more relicensing agreements, from individuals and fromcorporations. An up-to-date list of who we still need to get agreements fromis published as a &lt;a href="https://docs.google.com/spreadsheets/d/18_0Hog_eSwES8lKwf7WJal3yBwwcYfvPu1yCfZnTcek/edit?usp=sharing">spreadsheet here&lt;/a>.&lt;ul>&lt;li>We found that it can help a lot when corporations can get a list of whichcommits they&amp;rsquo;re agreeing to relicense. If you&amp;rsquo;re progressing getting acorporation/company to sign, please do send an email to&lt;a href="mailto:license-questions@llvm.org">license-questions@llvm.org&lt;/a> asking forthe list of commits that the company may own copyright on.&lt;/li>&lt;/ul>&lt;/li>&lt;li>Go through the commits that look like they may no longer be in top-of-trunk,and verify that manually.&lt;/li>&lt;/ul>&lt;h2 id="how-can-you-help">How can you help?&lt;/h2>&lt;ul>&lt;li>&lt;p>You could check if you know any individual still listed in&lt;a href="https://docs.google.com/spreadsheets/d/18_0Hog_eSwES8lKwf7WJal3yBwwcYfvPu1yCfZnTcek/edit?usp=sharing">this up-to-date spreadsheet&lt;/a>.If you do know any of the people, please do reach out directly to them - I&amp;rsquo;moften the bottleneck when you share contact details with me and rely on me toreach out to them. If they do have any questions, I&amp;rsquo;m more than happy to tryand answer them.&lt;/p>&lt;/li>&lt;li>&lt;p>You could check if you know who the right people are to contact at any of theremaining companies/corporations and talk with them directly or share theircontact details with us at&lt;a href="mailto:license-questions@llvm.org">license-questions@llvm.org&lt;/a>. They are alsolisted in the &lt;a href="https://docs.google.com/spreadsheets/d/18_0Hog_eSwES8lKwf7WJal3yBwwcYfvPu1yCfZnTcek/edit?usp=sharing">samespreadsheet&lt;/a>,on the sheet starting with &amp;ldquo;Corporations&amp;rdquo;.&lt;/p>&lt;/li>&lt;li>&lt;p>If you&amp;rsquo;d be interested in helping to check if specific commits are stillpresent in the current code base, please do let me know at&lt;a href="mailto:license-questions@llvm.org">license-questions@llvm.org&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM security group and 2021 security transparency report</title><link>https://blog.llvm.org/posts/2022-01-22-security-group-transparency-reports/</link><pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2022-01-22-security-group-transparency-reports/</guid><description>&lt;p>Over the past few years, the LLVM project has seen the creation of a securitygroup, which aims to enable responsible disclosure and fixing ofsecurity-related issues affecting the LLVM project.&lt;/p>&lt;p>The &lt;a href="https://llvm.org/docs/Security.html">LLVM security group&lt;/a> was establishedon the 10th of July 2020 by the act of the &lt;a href="https://github.com/llvm/llvm-project/commit/7bf73bcf6d93">initialcommit&lt;/a> describingthe purpose of the group and the processes it follows. Many of the group&amp;rsquo;sprocesses were still not well-defined enough for the group to operate well.Over the course of 2021, the key processes were defined well enough to enablethe group to operate reasonably well:&lt;/p>&lt;ul>&lt;li>We defined details on how to report security issues, see &lt;a href="https://github.com/llvm/llvm-project/commit/c9dbaa4c86d2">this commit on20th of May 2021&lt;/a>.&lt;/li>&lt;li>We refined the nomination process for new group members, see &lt;a href="https://github.com/llvm/llvm-project/commit/4c98e9455aad">thiscommit on 30th of July2021&lt;/a>.&lt;/li>&lt;li>We wrote a first annual transparency report, which is published at&lt;a href="https://llvm.org/docs/SecurityTransparencyReports.html">https://llvm.org/docs/SecurityTransparencyReports.html&lt;/a>There is a copy of the 2021 transparency report below.&lt;/li>&lt;/ul>&lt;p>Over the course of 2021, we had 2 people leave the LLVM Security group and 4people join.&lt;/p>&lt;p>In 2021, the security group received 13 issue reports that were made publiclyvisible before 31st of December 2021. The security group judged 2 of thesereports to be security issues:&lt;/p>&lt;ul>&lt;li>&lt;a href="https://bugs.chromium.org/p/llvm/issues/detail?id=5">https://bugs.chromium.org/p/llvm/issues/detail?id=5&lt;/a>&lt;/li>&lt;li>&lt;a href="https://bugs.chromium.org/p/llvm/issues/detail?id=11">https://bugs.chromium.org/p/llvm/issues/detail?id=11&lt;/a>&lt;/li>&lt;/ul>&lt;p>Both issues were addressed with source changes: #5 in clangd/vscode-clangd, and#11 in llvm-project. No dedicated LLVM release was made for either.&lt;/p>&lt;p>We believe that with the publishing of the first annual transparency report,the security group now has implemented all necessary processes for the group tooperate as promised. The group&amp;rsquo;s processes can be improved further, and we doexpect further improvements to get implemented in 2022. Many of the potentialimprovements end up being discussed on the &lt;a href="https://llvm.org/docs/GettingInvolved.html#online-sync-ups">monthly public call on LLVM&amp;rsquo;ssecurity group&lt;/a>.&lt;/p></description></item><item><title>New passes in clang-tidy to detect (some) Trojan Source</title><link>https://blog.llvm.org/posts/2022-01-12-trojan-source/</link><pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2022-01-12-trojan-source/</guid><description>&lt;h1 id="trojan-source">Trojan Source&lt;/h1>&lt;p>The original &lt;a href="https://trojansource.codes/">Trojan Source paper&lt;/a> encompasses afamily of attacks that rely on Unicode properties to make code &lt;em>look&lt;/em> differentfrom how a compiler &lt;em>processes&lt;/em> it. For instance the following code taken fromthe paper:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdbool.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() { &lt;span style="color:#66d9ef">bool&lt;/span> isAdmin &lt;span style="color:#f92672">=&lt;/span> false; &lt;span style="color:#75715e">/*‮ } ⁦if (isAdmin)⁩ ⁦begin admins only */&lt;/span> printf(&lt;span style="color:#e6db74">&amp;#34;You are an admin.&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>); &lt;span style="color:#75715e">/* end admins only ‮ { ⁦*/&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>looks like there is a guard on &lt;code>isAdmin&lt;/code> while the compiler actually reads thefollowing byte stream&lt;/p>&lt;pre tabindex="0">&lt;code>/* &amp;lt;U+0x202E&amp;gt; } &amp;lt;U+0x2066&amp;gt; if (isAdmin) &amp;lt;U+0x2069&amp;gt; &amp;lt;U+0x2066&amp;gt; begin admins only */&lt;/code>&lt;/pre>&lt;p>This issue got submitted before the official release to the LLVM Security group,and while we agreed this was more of a display issue than an actualcompiler-related issue, we also agreed having a &lt;code>clang-tidy&lt;/code> check for eachflaws described in the paper could not hurt.&lt;/p>&lt;h1 id="using-clang-tidy">Using clang-tidy&lt;/h1>&lt;p>The tool named &lt;code>clang-tidy&lt;/code> can run a bunch of extra passes on a codebase,detecting coding convention issues, API misuses, security flaws etc. We havebeen adding three new checkers:&lt;/p>&lt;h2 id="detecting-misleading-bidirectional-characters">Detecting misleading bidirectional characters&lt;/h2>&lt;p>The new check &lt;code>misc-misleading-bidirectional&lt;/code> parses each comment and stringliteral from the codebase and looks for unterminated bidirectional sequence,i.e. sequence that leak past the end of comment or string literal, makingregular code being displayed right-to-left instead of the usual left-to-right.In the case of the example above we get a warning close to:&lt;/p>&lt;pre tabindex="0">&lt;code>5:3: warning: comment contains misleading bidirectional Unicode characters [misc-misleading-bidirectional]&lt;/code>&lt;/pre>&lt;h2 id="detecting-misleading-identifiers">Detecting misleading identifiers&lt;/h2>&lt;p>C++ allows for some Unicode codepoints within identifiers, including identifiersthat have a strong right-to-left direction, which can lead to misleadingstatements. For instance in the following,&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">א&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ג&lt;/span>;&lt;/code>&lt;/pre>&lt;/div>&lt;p>Are we assigining to &lt;code>א&lt;/code> or to &lt;code>ג&lt;/code>? We are actually doing the latter, andthat is confusing. The pass &lt;code>misc-misleading-identifier&lt;/code> detect thatconfiguration and outputs a warning similar to&lt;/p>&lt;pre tabindex="0">&lt;code>10:3: warning: identifier has right-to-left codepoints [misc-misleading-identifier]&lt;/code>&lt;/pre>&lt;h2 id="detecting-confusing-identifiers">Detecting confusing identifiers&lt;/h2>&lt;p>Who never received a spam using unicode characters that look alike asciicharacters to bypass some hypothetical anti-spam scanning? C like language donot escape the trend, and it is perfeclty valid and confusing to define&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">int&lt;/span> foo;&lt;/code>&lt;/pre>&lt;/div>&lt;p>at some point of the program, and&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">𝐟&lt;/span>oo;&lt;/code>&lt;/pre>&lt;/div>&lt;p>elsewhere. The &lt;code>misc-homoglyph&lt;/code> checker detects such confusable identifiers(a.k.a. &lt;em>homoglyph&lt;/em>) based on a list of&lt;a href="https://www.unicode.org/Public/security/latest/confusables.txt">confusables.txt&lt;/a>maintained by the Unicode consortium. In the case above, one would get a warningsimilar to&lt;/p>&lt;pre tabindex="0">&lt;code>7:5: warning: 𝐟oo is confusable with foo [misc-homoglyph]&lt;/code>&lt;/pre>&lt;h1 id="concluding-words">Concluding Words&lt;/h1>&lt;p>As described in this post, we chose to implement Trojan Source counter-measureas several &lt;code>clang-tidy&lt;/code> checkers. Doing so instead of implementing them as Clang warningis a trade-off on parse time.&lt;/p>&lt;p>The interested reader can discover the alternative GCC aproach in this&lt;a href="https://developers.redhat.com/articles/2022/01/12/prevent-trojan-source-attacks-gcc-12">dedicated blogpost&lt;/a>!&lt;/p></description></item><item><title>Improving LLVM Infrastructure - Part 1: Mailing lists</title><link>https://blog.llvm.org/posts/2022-01-07-moving-to-discourse/</link><pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2022-01-07-moving-to-discourse/</guid><description>&lt;p>When the LLVM Project was open sourced in 2003, it was a small project with a small community. The tools selected to support the project were chosen during a different time and a different situation.&lt;/p>&lt;p>Now, almost 18 years later, the project has grown tremendously and those infrastructure choices are not necessarily the right choices today. According to a recent &lt;a href="https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=LLVM-Record-Growth-2021">article&lt;/a>, the LLVM community experienced record growth in 2021 with 1400 contributors to the LLVM Project. This is incredible growth! While there is a very real cost to change, it is clear that we need to invest in modernizing these tools to support the current and further growth of LLVM.&lt;/p>&lt;p>Recently, the LLVM Project moved its source code repository and bug tracker to GitHub in an effort to grow the LLVM community and make contributing to the project easier. While these changes were neither quick or easy, the benefits to the project outweigh the time and efforts to make the move. The growth in contributors since the move to GitHub is just one metric showing the gains from the change.&lt;/p>&lt;p>This year, the LLVM Foundation, which provides the majority of the LLVM Project infrastructure, will be spearheading the effort to evaluate and identify improvements for the remaining tools and software the project utilizes. We will be looking at mailing lists, chat servers, code review tools, and other parts of our infrastructure. This is part 1 in our blog post series describing the upcoming changes (if any) to LLVM infrastructure.&lt;/p>&lt;p>&lt;strong>Project Communication - Mailing Lists&lt;/strong>&lt;/p>&lt;p>Mailman and IRC have been the primary means of communication for the LLVM Project for the last 18 years. As the project has grown, we added &lt;a href="http://lists.llvm.org">mailing lists&lt;/a> for subprojects like Clang, but the main list (llvm-dev) has remained unchanged. This list is meant to cover all of LLVM which includes everything from mid-level optimizations, to back-end optimizations, to the numerous LLVM backends. It has been the catchall for any topic not covered by another list. Due to the growth in LLVM and the size of the project, this list is very high traffic and requires a lot of work to filter messages that one may be interested in. It is increasingly clear that a mailing list may not be the best form of communication in the lack of features to make it easy to filter, respond and track topics of interest.&lt;/p>&lt;p>In 2019, LLVM started to experiment with &lt;a href="https://www.discourse.org">Discourse&lt;/a> as an alternative to its mailing lists. Discourse is an open source discussion platform built with an amazing list of modern features, such as the following:&lt;/p>&lt;ul>&lt;li>Fully supported Email interface - Discourse supports the ability to interact through email if you do not like to use the web or app interfaces.&lt;/li>&lt;li>Categories and subcategories - This breaks the LLVM project into smaller pieces and users can subscribe to topics that they care most about versus having to do their own filtering.&lt;/li>&lt;li>Single Account Sign-On - Users can use their existing GitHub account to use Discourse and get access to all categories.&lt;/li>&lt;li>Dynamic notifications - Immediately notifies users when they are tagged, get a new reply, or sends email when you are offline.&lt;/li>&lt;li>Simple - Discourse uses a flat forum where replies are dynamically loaded and flow down the page in a line.&lt;/li>&lt;li>Mobile support - App available for iOS and Android, but you can also just use the web interface.&lt;/li>&lt;li>Better Moderation - The community has the ability to self moderate through flagging and spreads the work across a larger group of moderators.&lt;/li>&lt;li>Enhanced spam blocking - Out of the box spam filtering that eliminates obvious spam before it gets to moderators.&lt;/li>&lt;li>Safety - It has an enhanced trust system that allows the community to build natural immunity from trolls, bad actors, and spammers, and also reinforces positive behavior through likes and badges.&lt;/li>&lt;/ul>&lt;p>The majority of the community was in favor of the move when the move to Discourse was discussed extensively on the LLVM mailing lists. This provides the features mentioned above in addition to a more modern communication. We did hear of one feature some would miss compared to Mailman: the ability to reply to someone directly through email. However, while it may not be ideal for some, we feel this is a worthwhile tradeoff to gain the other benefits, e.g. better safety for LLVM developers and users in general.&lt;/p>&lt;p>&lt;strong>Moving to Discourse&lt;/strong>&lt;/p>&lt;p>As a consequence of the above discussion, we are planning to move most mailing lists to Discourse. We are excited that it will bring many new features to help improve communication for existing contributors and users, and also make the project more accessible to newcomers as most are familiar with using forums such as Discourse.&lt;/p>&lt;p>However, while Discourse is a great solution for community discussions, it is not clear if it is a good place to host commit messages and post-commit review. Therefore, the commit lists won’t be part of the initial migration to Discourse - they will remain on mailing lists for now.&lt;/p>&lt;p>The plan to move to Discourse will involve the following:&lt;/p>&lt;ul>&lt;li>January 7-9 - Re-configure the existing LLVM Discourse to the new category/subcategory structure (see below)&lt;/li>&lt;li>January 10-20 (sometime during these 2 weeks) - The LLVM mailing list archives are migrated to Discourse and it is sanity checked by volunteers of the LLVM community. This sanity check can take a week or more.&lt;/li>&lt;li>Feb 1 - The mailing lists (except commits) are put into read only mode and all users must migrate to use Discourse.&lt;/li>&lt;li>Feb 1-4 (approx) - The final merge is done from Mailman to Discourse. &lt;strong>We encourage all LLVM community members to start using Discourse on Jan 10th to minimize any disruption once the mailing lists become read only and the final messages are merged to Discourse.&lt;/strong> However, please be assured that all mail will be merged to Discourse and you will be able to continue any threads started there once that is completed.&lt;/li>&lt;/ul>&lt;p>The mailman archives on the LLVM server may eventually be removed, but there is no final decision or deadline on this yet.&lt;/p>&lt;p>&lt;strong>Mapping from Mailing Lists to Discourse Categories&lt;/strong>&lt;/p>&lt;p>The existing LLVM Discourse will be modified to have the following categories/subcategories:&lt;/p>&lt;ul>&lt;li>&lt;p>Announcements&lt;/p>&lt;/li>&lt;li>&lt;p>Clang Frontend&lt;/p>&lt;ul>&lt;li>Using Clang&lt;/li>&lt;li>Building Clang&lt;/li>&lt;li>Static Analyzer&lt;/li>&lt;li>clangd&lt;/li>&lt;/ul>&lt;/li>&lt;li>&lt;p>Subprojects&lt;/p>&lt;ul>&lt;li>LLD Linker&lt;/li>&lt;li>Flang Fortran Frontend&lt;/li>&lt;li>LLDB Debugger&lt;/li>&lt;/ul>&lt;/li>&lt;li>&lt;p>Code Generation&lt;/p>&lt;ul>&lt;li>Common Infrastructure&lt;/li>&lt;li>AArch64&lt;/li>&lt;li>ARM&lt;/li>&lt;li>Mips&lt;/li>&lt;li>PowerPC&lt;/li>&lt;li>RISCV&lt;/li>&lt;li>WebAssembly&lt;/li>&lt;li>X86&lt;/li>&lt;li>Other&lt;/li>&lt;/ul>&lt;/li>&lt;li>&lt;p>IR &amp;amp; Optimizations&lt;/p>&lt;ul>&lt;li>Loop Optimizations&lt;/li>&lt;/ul>&lt;/li>&lt;li>&lt;p>Community&lt;/p>&lt;ul>&lt;li>Women in Compilers and Tools&lt;/li>&lt;li>Job Postings&lt;/li>&lt;li>US Developer Meeting&lt;/li>&lt;li>EuroLLVM&lt;/li>&lt;li>Google Summer of Code&lt;/li>&lt;li>Community.o&lt;/li>&lt;li>LLVM Foundation&lt;/li>&lt;/ul>&lt;/li>&lt;li>&lt;p>Project Infrastructure&lt;/p>&lt;ul>&lt;li>Release Testers&lt;/li>&lt;li>Website&lt;/li>&lt;li>Documentation&lt;/li>&lt;li>GitHub&lt;/li>&lt;li>Code Review&lt;/li>&lt;li>Discord&lt;/li>&lt;li>Mailing Lists and Forums&lt;/li>&lt;li>IRC&lt;/li>&lt;li>Infrastructure Working Group&lt;/li>&lt;li>Policies&lt;/li>&lt;li>LLVM Dev List Archives&lt;/li>&lt;/ul>&lt;/li>&lt;li>&lt;p>Runtimes&lt;/p>&lt;ul>&lt;li>C&lt;/li>&lt;li>C++&lt;/li>&lt;li>OpenCL&lt;/li>&lt;li>OpenMP&lt;/li>&lt;li>Sanitizers&lt;/li>&lt;/ul>&lt;/li>&lt;li>&lt;p>Incubator&lt;/p>&lt;ul>&lt;li>CIRCT&lt;/li>&lt;li>mlir-npcomp&lt;/li>&lt;/ul>&lt;/li>&lt;li>&lt;p>MLIR&lt;/p>&lt;ul>&lt;li>Announcements&lt;/li>&lt;li>Newsletter&lt;/li>&lt;li>TCP-WG&lt;/li>&lt;/ul>&lt;/li>&lt;/ul>&lt;p>&lt;strong>The Mailman archives will be mapped as follows:&lt;/strong>&lt;/p>&lt;table>&lt;thead>&lt;tr>&lt;th>Mailing lists&lt;/th>&lt;th>category in Discourse&lt;/th>&lt;/tr>&lt;/thead>&lt;tbody>&lt;tr>&lt;td>All-commits&lt;/td>&lt;td>no migration at the moment&lt;/td>&lt;/tr>&lt;tr>&lt;td>Bugs-admin&lt;/td>&lt;td>no migration at the moment&lt;/td>&lt;/tr>&lt;tr>&lt;td>cfe-commits&lt;/td>&lt;td>no migration at the moment&lt;/td>&lt;/tr>&lt;tr>&lt;td>cfe-dev&lt;/td>&lt;td>Clang Frontend&lt;/td>&lt;/tr>&lt;tr>&lt;td>cfe-users&lt;/td>&lt;td>Clang Frontend/Using Clang&lt;/td>&lt;/tr>&lt;tr>&lt;td>clangd-dev&lt;/td>&lt;td>Clang Frontend/clangd&lt;/td>&lt;/tr>&lt;tr>&lt;td>devmtg-organizers&lt;/td>&lt;td>Obsolete&lt;/td>&lt;/tr>&lt;tr>&lt;td>Docs&lt;/td>&lt;td>Obsolete&lt;/td>&lt;/tr>&lt;tr>&lt;td>eurollvm-organizers&lt;/td>&lt;td>Obsolete&lt;/td>&lt;/tr>&lt;tr>&lt;td>flang-commits&lt;/td>&lt;td>no migration at the moment&lt;/td>&lt;/tr>&lt;tr>&lt;td>flang-dev&lt;/td>&lt;td>Subprojects/Flang Fortran Frontend&lt;/td>&lt;/tr>&lt;tr>&lt;td>gsoc&lt;/td>&lt;td>Obsolete&lt;/td>&lt;/tr>&lt;tr>&lt;td>libc-commits&lt;/td>&lt;td>no migration at the moment&lt;/td>&lt;/tr>&lt;tr>&lt;td>libc-dev&lt;/td>&lt;td>Runtimes/C&lt;/td>&lt;/tr>&lt;tr>&lt;td>Libclc-dev&lt;/td>&lt;td>Runtimes/OpenCL&lt;/td>&lt;/tr>&lt;tr>&lt;td>libcxx-bugs&lt;/td>&lt;td>no migration at the moment&lt;/td>&lt;/tr>&lt;tr>&lt;td>libcxx-commits&lt;/td>&lt;td>no migration at the moment&lt;/td>&lt;/tr>&lt;tr>&lt;td>libcxx-dev&lt;/td>&lt;td>Runtimes/C++&lt;/td>&lt;/tr>&lt;tr>&lt;td>lldb-commits&lt;/td>&lt;td>no migration at the moment&lt;/td>&lt;/tr>&lt;tr>&lt;td>lldb-dev&lt;/td>&lt;td>Subprojects/lldb&lt;/td>&lt;/tr>&lt;tr>&lt;td>llvm-admin&lt;/td>&lt;td>no migration at the moment&lt;/td>&lt;/tr>&lt;tr>&lt;td>llvm-announce&lt;/td>&lt;td>Announce&lt;/td>&lt;/tr>&lt;tr>&lt;td>llvm-branch-commits&lt;/td>&lt;td>no migration at the moment&lt;/td>&lt;/tr>&lt;tr>&lt;td>llvm-bugs&lt;/td>&lt;td>no migration at the moment&lt;/td>&lt;/tr>&lt;tr>&lt;td>llvm-commits&lt;/td>&lt;td>no migration at the moment&lt;/td>&lt;/tr>&lt;tr>&lt;td>llvm-dev&lt;/td>&lt;td>Project Infrastructure/LLVM Dev List Archives&lt;/td>&lt;/tr>&lt;tr>&lt;td>llvm-devmeeting&lt;/td>&lt;td>Community/US Developer Meeting&lt;/td>&lt;/tr>&lt;tr>&lt;td>llvm-foundation&lt;/td>&lt;td>Community/LLVM Foundation&lt;/td>&lt;/tr>&lt;tr>&lt;td>Mlir-commits&lt;/td>&lt;td>no migration at the moment&lt;/td>&lt;/tr>&lt;tr>&lt;td>Openmp-commits&lt;/td>&lt;td>no migration at the moment&lt;/td>&lt;/tr>&lt;tr>&lt;td>Openmp-dev&lt;/td>&lt;td>Runtimes/OpenMP&lt;/td>&lt;/tr>&lt;tr>&lt;td>Parallel_libs-commits&lt;/td>&lt;td>no migration at the moment&lt;/td>&lt;/tr>&lt;tr>&lt;td>Parallel_libs-dev&lt;/td>&lt;td>Runtimes/C++&lt;/td>&lt;/tr>&lt;tr>&lt;td>Release-testers&lt;/td>&lt;td>Project Infrastructure/Release Testers&lt;/td>&lt;/tr>&lt;tr>&lt;td>Test-list&lt;/td>&lt;td>Obsolete&lt;/td>&lt;/tr>&lt;tr>&lt;td>vmkit-commits&lt;/td>&lt;td>Obsolete&lt;/td>&lt;/tr>&lt;tr>&lt;td>WiCT&lt;/td>&lt;td>Community/Women in Compilers and Tools&lt;/td>&lt;/tr>&lt;tr>&lt;td>www-scripts&lt;/td>&lt;td>Obsolete&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>&lt;p>For help with migrating to Discourse, please see the &lt;a href="https://llvm.org/docs/DiscourseMigrationGuide.html">User Guide&lt;/a> and discuss on the &lt;a href="https://llvm.discourse.group">LLVM Discourse forums&lt;/a>.&lt;/p></description></item><item><title>LLVM relicensing update &amp; call for help</title><link>https://blog.llvm.org/posts/2021-11-18-relicensing-update/</link><pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2021-11-18-relicensing-update/</guid><description>&lt;p>In this blog post, I&amp;rsquo;d like to summarize the main points I talked about in therelicensing update presentation at the 2021 LLVM Developer&amp;rsquo;s meeting.&lt;/p>&lt;p>The very short summary is that we are currently in the long tail phase ofcollecting relicensing agreements of past contributors. We already at the timeof this writing have more than 94% of older code relicensed. We hope to crowdsource getting through the long tail to get as close to 100% as possible.&lt;/p>&lt;h1 id="call-for-help">Call for help&lt;/h1>&lt;p>You can help by looking through &lt;a href="https://docs.google.com/spreadsheets/d/18_0Hog_eSwES8lKwf7WJal3yBwwcYfvPu1yCfZnTcek/edit?usp=sharing">the list of remaining individuals andcorporations we need to get agreementsfrom&lt;/a>,and reaching out to them, or letting us know at &lt;a href="mailto:license-questions@llvm.org">license-questions@llvm.org&lt;/a> howwe can reach out to them. Also, if you&amp;rsquo;d happen to have any other information that you think could help us, please do let us know at &lt;a href="mailto:license-questions@llvm.org">license-questions@llvm.org&lt;/a>.&lt;/p>&lt;p>More detailed guidance on how you can help are available at&lt;a href="https://foundation.llvm.org/docs/relicensing_long_tail">https://foundation.llvm.org/docs/relicensing_long_tail&lt;/a>.&lt;/p>&lt;p>In the rest of this blog post, I&amp;rsquo;m going to give a bit more historicalbackground and describe the current status in more detail.&lt;/p>&lt;h1 id="the-llvm-relicensing-effort-phases-over-time">The LLVM relicensing effort: phases over time&lt;/h1>&lt;p>The relicensing effort started some time ago. Let me first very briefly describethe various phases before going in more detail. In the years leading up to 2015,it became clear that there were some issues with the license LLVM had at thetime.&lt;/p>&lt;p>A different license was the answer to those issues. Between roughly 2015 and2017 the focus was on deciding what different license would be best suited.&lt;/p>&lt;p>Once it was decided what the new license was going to be, we started working ongetting all code to be covered by this new license. That includes gettingagreement from all copyright holders of existing code to share their pastcontributions under the new license. As you can see on the timeline, gettingthose agreements is the current focus of the relicensing effort.&lt;/p>&lt;p>Maybe we won&amp;rsquo;t be able to get an agreement for every single past contribution.In that case, we have a number of options to get to the point where we can claimthat all code in the LLVM project is covered by the new LLVM license. We callthis phase of relicensing &amp;ldquo;the end game&amp;rdquo;.&lt;/p>&lt;p>&lt;img src="https://blog.llvm.org/img/relicensing2021/timeline.png" alt="timeline">&lt;/p>&lt;h1 id="why-relicense">Why relicense?&lt;/h1>&lt;p>The old license consists of 3 components: the UIUC license that covered all thecode, the MIT license that additionally covered the code in run-time libraries,and a few sentences on granting patent rights in the developer policy.&lt;/p>&lt;p>This caused&lt;a href="https://lists.llvm.org/pipermail/llvm-dev/2015-October/091536.html">the following 3 issues&lt;/a>:&lt;/p>&lt;ol>&lt;li>&lt;p>Some were blocked from contributing because of the text in the patent sectionin the developer policy. The wording could be interpreted as requiring givingunnecessarily broad access to patent rights when contributing to LLVM. Thatmade it impossible for some companies to contribute.&lt;/p>&lt;/li>&lt;li>&lt;p>The run time libraries were dual licensed under the UIUC and MIT license; therest of the code only under the UIUC license. Therefore, we could not easilymove code to run time libraries from other parts. The reason run timelibraries were dual licensed was to enable linking to run time librarybinaries without requiring attribution to LLVM.&lt;/p>&lt;/li>&lt;li>&lt;p>The wording on patent rights in the developer policy was fuzzy and imprecise,leading to uncertainty over whether it did provide the intended protection.&lt;/p>&lt;/li>&lt;/ol>&lt;h1 id="a-new-license">A new license&lt;/h1>&lt;p>After exploring a range of options, it was decided that the best solution to solve these issues was to have all code licensed under the &lt;a href="https://foundation.llvm.org/relicensing/LICENSE.txt">Apache-2.0 with LLVM exception&lt;/a> license:&lt;/p>&lt;ul>&lt;li>&lt;p>Apache-2.0 contains well-understood patent granting which addresses the firstand third issue.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM exception is there for 2 reasons:&lt;/p>&lt;ul>&lt;li>&lt;p>It removes a potential incompatibility with using LLVM code in combinationwith GPLv2 code.&lt;/p>&lt;/li>&lt;li>&lt;p>It removes the requirement for developers using LLVM tools to tell the usersof the binaries they produce that those binaries may contain some codeoriginating from LLVM. Such a situation can easily arise when parts of theLLVM run-time libraries are linked in as part of the normal compilationprocess.&lt;/p>&lt;p>The LLVM exception enables the run-time libraries to be covered by the exactsame single license as the rest of the code base.&lt;/p>&lt;/li>&lt;/ul>&lt;/li>&lt;/ul>&lt;h1 id="getting-all-code-covered-by-the-new-license">Getting all code covered by the new license&lt;/h1>&lt;p>After a decision was made of what the new license should be, we started workingon having all code covered by it.&lt;/p>&lt;p>As a first step, we made sure that all new contributions were covered by the newlicense. This happened after the 8.0 release branch was created. The 100kcommits since are covered by the new license.&lt;/p>&lt;p>The remaining task is to also get the earlier contributions covered by the newlicense. This consists of about 300k commits totaling about 32 million lines ofcontributed code.&lt;/p>&lt;p>&lt;img src="https://blog.llvm.org/img/relicensing2021/getting_all_code_covered.png" alt="Getting all code covered">&lt;/p>&lt;p>What needs to be done to get those earlier contributions covered?&lt;/p>&lt;p>The reason we need a license in the first place is copyright. Most codecontributions are covered by copyright. Which means that the person or companyowning the copyright has a lot of decision power over what can legally be donewith that code. By covering the code with a license, it becomes clear whatothers are permitted to do with that code. If there isn&amp;rsquo;t a license associatedwith copyrighted code there isn&amp;rsquo;t all that much useful that others can do withit.&lt;/p>&lt;p>Basically, to get existing code to be covered by a new license, we need to findwho owns the copyright on it, and ask them to agree with offering theircopyrighted work under the new license.&lt;/p>&lt;p>The copyright owner can be either an individual, for example the person whowrote the code originally; or a company, for example a company that employed theperson who wrote the code.&lt;/p>&lt;h1 id="asking-agreement-from-copyright-owners">Asking agreement from copyright owners&lt;/h1>&lt;p>We started asking for their agreements. By examining the version control log ofthe 300k-ish commits we need to get agreements for, we found that about 2800different people or email addresses made a contribution.&lt;/p>&lt;p>We reached out to all of them and asked them two things. First, if anycorporation may own the copyright on any of their contributions. Secondly, ifthey agree with relicensing the contributions they copyright own personally.&lt;/p>&lt;p>So far, we&amp;rsquo;ve heard of about 220 unique corporations potentially copyrightowning some past contribution. We also started reaching out to those, but havenot asked every single one just yet.&lt;/p>&lt;h1 id="status-as-of-november-2021">Status as of November 2021&lt;/h1>&lt;p>So after 2.5 years since we started asking &amp;ndash; where are we with gettingagreements to relicense?&lt;/p>&lt;p>The chart below summarize the current status. It shows a treemap where eachrectangle represents the contributions made by one person. The size of eachrectangle represents how many lines of code the person contributed.&lt;/p>&lt;p>&lt;img src="https://blog.llvm.org/img/relicensing2021/relicensing-status-treemap.svg" alt="Treemap showing LLVM relicensing status">&lt;/p>&lt;p>When the rectangle is green, it means all their contributions are fully coveredby relicensing agreements.&lt;/p>&lt;p>When the rectangle is orange, it means we have not yet received such anagreement. When the rectangle is orange with green stars, it means somecontributions by that person are covered and others not. This can happen forexample when the person has worked for multiple companies over time and onlysome of those companies have agreed with the relicensing so far.&lt;/p>&lt;p>We already have over 94% of all contributed lines of code between 2001 and 2019covered by a licensing agreement. We only have a good 5% of lines of code to gostill.&lt;/p>&lt;p>As you can see, most of the missing agreements are with &amp;ldquo;long tail&amp;rdquo;contributors. By long tail contributors here we mean the many contributors whocontributed relatively fewer lines of code. We focussed on reaching out to thebigger contributors first. To reach out well to the long tail of contributors,we&amp;rsquo;re hoping to get help from the wider LLVM community.&lt;/p>&lt;h1 id="help-wanted">Help wanted!&lt;/h1>&lt;p>Please do consider helping us with reaching any of the people or corporations inthe long tail. Please have a look at &lt;a href="https://docs.google.com/spreadsheets/d/18_0Hog_eSwES8lKwf7WJal3yBwwcYfvPu1yCfZnTcek/edit?usp=sharing">the up-to-date list of people andcorporations&lt;/a>we can use help with getting in touch with.&lt;/p>&lt;p>You can find more detailed guidance on how you can help on the &lt;a href="https://foundation.llvm.org/docs/relicensing_long_tail/">LLVM foundationwebsite&amp;rsquo;s relicensing long tailpage&lt;/a>.&lt;/p>&lt;p>If you do think you could help us with reaching out to someone on the list, oryou may have some other information that could help us, please do let us know byemailing &lt;a href="mailto:license-questions@llvm.org">license-questions@llvm.org&lt;/a>.&lt;/p>&lt;h1 id="relicensing-end-game">Relicensing end game&lt;/h1>&lt;p>We are currently in the phase of getting as many relicensing agreements aspossible. We do expect that we may not be able to get absolutely 100% of allpast contributions covered by an agreement. What can we do to achieve currenttop-of-mainline to be fully covered by the new license?&lt;/p>&lt;p>We will need to decide on a contribution-by-contribution basis what the optionsavailable are to achieve that goal. We have at least the following options.&lt;/p>&lt;ul>&lt;li>&lt;p>We can check if copyright even applies to the particular contribution. Verysmall contributions may not be covered by copyright, and hence may not need alicense agreement.&lt;/p>&lt;/li>&lt;li>&lt;p>It may well be that code contributed a long time ago is no longer in the codebase.&lt;/p>&lt;/li>&lt;li>&lt;p>If copyright does apply and the code is still in the code base, we can removethe contribution. Depending on whether current contributors and users stillvalue the effect of that contribution, it may need to be reimplemented.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>apt.llvm.org - moving from physical server to the cloud</title><link>https://blog.llvm.org/posts/2021-11-02-apt.llvm.org-moving-from-physical-server-to-the-cloud/</link><pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2021-11-02-apt.llvm.org-moving-from-physical-server-to-the-cloud/</guid><description>&lt;p>In this blog post, I would like to explain how I migrated&lt;a href="https://apt.llvm.org">apt.llvm.org&lt;/a> from physical hardware hosted ina datacenter to the Google cloud. This has resulted in better securityand faster builds for LLVM Debian/Ubuntu nightly builds.&lt;/p>&lt;h1 id="previous-infrastructure">Previous infrastructure&lt;/h1>&lt;p>About 10 years ago, Nick Lewycky from Google offered to replace my mixof old and terrible servers with 16 blade servers in a chassis and acontrol server. Below are pictures of the front and back of theseservers, which have served us faithfully for 10 years:&lt;/p>&lt;hr>&lt;p>&lt;img src="https://blog.llvm.org/img/gcp/servers-front.png" alt="Old server - front"> &lt;img src="https://blog.llvm.org/img/gcp/servers-back.png" alt="Old server - back">&lt;/p>&lt;hr>&lt;p>The hosting was sponsored by &lt;a href="https://www.irill.org/">&lt;em>IRILL&lt;/em>&lt;/a>, atInria, next to Versailles.&lt;/p>&lt;p>This setup was running using a PXE install with preseed to set upeverything on the 16 blades.&lt;/p>&lt;p>While it served us very well for years, it is now holding us back.&lt;/p>&lt;ul>&lt;li>Some of the blades are dying;&lt;/li>&lt;li>Old hardware - it takes from 4 to 7 hours per build;&lt;/li>&lt;li>All blades are always on even if no build is executed;&lt;/li>&lt;li>Even if it happened rarely, I had to drive to the DC to fix somesystems.&lt;/li>&lt;/ul>&lt;h1 id="new-infrastructure">New infrastructure&lt;/h1>&lt;p>As part of the &lt;a href="https://openssf.org/">&lt;em>OpenSSF initiative&lt;/em>&lt;/a>, Google andthe Linux foundation offered a budget to migrate this service on GoogleCloud Platform (GCP).&lt;/p>&lt;p>As Jenkins has been working very well, I reused this approach andimported the previous configurations (available on&lt;a href="https://github.com/opencollab/llvm-jenkins.debian.net/tree/master/jobs">&lt;em>https://github.com/opencollab/llvm-jenkins.debian.net/tree/master/jobs&lt;/em>&lt;/a>).&lt;/p>&lt;p>I followed most of the tutorial provided on GCP, &lt;a href="https://cloud.google.com/architecture/using-jenkins-for-distributed-builds-on-compute-engine">&lt;em>Using Jenkins fordistributed builds on ComputeEngine&lt;/em>&lt;/a>.&lt;/p>&lt;p>The architecture is the following:&lt;/p>&lt;p>&lt;img src="https://blog.llvm.org/img/gcp/gcp-archi-infra.png" alt="The schema of the infra">&lt;/p>&lt;p>Similar to puppet or chef, Salt is the configuration management toolused to configure the various systems. A salt server configures both theJenkins controller and the reference node. This node is a preconfiguredVM with all the dependencies and tools to start the build. This node ishalted most of the time and only started when the image needs to beupdated.&lt;/p>&lt;p>For example, the list of Virtual Machines now usually looks like thefollowing screenshot:&lt;/p>&lt;p>&lt;img src="https://blog.llvm.org/img/gcp/gcp-list-server.png" alt="GCP - list of servers">&lt;/p>&lt;ul>&lt;li>5 build VMs - off after 5 minutes without activity&lt;/li>&lt;li>The template VM (off as it is only started to update the image)&lt;/li>&lt;li>The jenkins orchestrator&lt;/li>&lt;/ul>&lt;h2 id="build-servers">Build servers&lt;/h2>&lt;p>The controller is always on and starts/ends the build nodes.&lt;/p>&lt;p>The reference node is configured and updated using this script, based ongcloud, the Google cloud CLI:&lt;/p>&lt;p>&lt;a href="https://github.com/opencollab/llvm-jenkins.debian.net/blob/master/image-update.sh">&lt;em>https://github.com/opencollab/llvm-jenkins.debian.net/blob/master/image-update.sh&lt;/em>&lt;/a>&lt;/p>&lt;p>This script performs the following steps:&lt;/p>&lt;ul>&lt;li>starts the reference node and then ssh into it.&lt;/li>&lt;li>Perform the needed changes (ex: new chroot for a new distro version,new build hooks, etc).&lt;/li>&lt;li>Once the changes are performed.&lt;/li>&lt;/ul>&lt;p>Usually:&lt;/p>&lt;ul>&lt;li>Salt update&lt;/li>&lt;li>Refresh the chroots&lt;/li>&lt;li>&lt;em>git pull&lt;/em> llvm-project&lt;/li>&lt;li>Stops the VM&lt;/li>&lt;li>Creates a new image.&lt;/li>&lt;li>Archives the old image.&lt;/li>&lt;li>This image will be used by Jenkins to start new VMs.&lt;/li>&lt;/ul>&lt;p>The node image contains the various i386 and amd64 chroot for supportedDebian and Ubuntu installs. The LLVM repository is also checked out toavoid doing a long clone with many files on every VM startup.&lt;/p>&lt;p>Thanks to this, the jobs just need to perform a small &lt;em>git pull&lt;/em> insteadof a full clone.&lt;/p>&lt;p>&lt;img src="https://blog.llvm.org/img/gcp/gcp-image-node.png" alt="GCP - image node">&lt;/p>&lt;p>The size of this image is 6.67gb. This approach saves about 10 minutesof the build pipeline (skipping the creation of the chroot + fullclone).&lt;/p>&lt;p>This wasn&amp;rsquo;t easy. I had to iterate 25 times to have a proper imagesupporting all the use cases.&lt;/p>&lt;p>GCP provides a shared file system mechanism available as an NFS mountagecalled &lt;a href="https://cloud.google.com/filestore">&lt;em>Filestore&lt;/em>&lt;/a>. Each buildnode has access to it and will update the various repositories just likeif it was a local file system.&lt;/p>&lt;h2 id="benefits-and-cost">Benefits and cost&lt;/h2>&lt;p>The first benefit is security. This is based on the Google cloudinfrastructure, so it benefits from all their security work.&lt;/p>&lt;p>The fact that the VMs are always cycled and recreated from a clean imagewill also help. They are not directly accessible from the Internet (theyleverage cloud NAT to be able to download packages from the Internet),so it will be harder to attack.&lt;/p>&lt;p>An amd64 build now runs in parallel takes **about 50 minutes **insteadof almost 7 hours.&lt;/p>&lt;p>In terms of cost, depending on the activity, the daily cost varies from70 to 150 US$/day.&lt;/p>&lt;p>Now that the migration has been completed, it is now possible toconsider some builds leveraging PGO and LTO for faster binaries.&lt;/p>&lt;h2 id="thanks">Thanks&lt;/h2>&lt;p>Thanks to Laurent Vaylet from the GCP team for the help and patienceanswering my newbie questions, and also thanks to Google and the LinuxFoundation for the GCP credits and support.&lt;/p></description></item><item><title>Generating relocatable code for ARM processors</title><link>https://blog.llvm.org/posts/2021-10-01-generating-relocatable-code-for-arm-processors/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2021-10-01-generating-relocatable-code-for-arm-processors/</guid><description>&lt;h2 id="abstract">Abstract&lt;/h2>&lt;p>By upgrading the LLVM compiler, we solved the problem when neither LLVM nor the GCC could create the correct Position Independent Code for Cortex M controllers, with the code running in Flash memory rather than in RAM. Now the binary image of the program can be flashed to an arbitrary address and run from it, without being moved to another place.&lt;/p>&lt;p>Updating the microcontroller’s “firmware” is a dangerous process. Before, any hardware failure during the update could brick your device. Nowadays, devices usually have their own boot loader which lets you restart the update before your device’s functionality is lost. Until the update is not complete the device will not work. The fanciest way to update is to use two separate regions for the “firmware” – the main region and the reserve region. In the picture below, they are marked by red and blue accordingly. Initially, the red region is active, while the update will be loaded into the blue region. This way boot failure is not a big deal. The red region will still be running everything. And if the update is successful, the blue region will become active. The next update will be loaded into the red region, and so on. Each update will lead to this switch.&lt;/p>&lt;p>&lt;img src="https://habrastorage.org/webt/mg/po/wi/mgpowihvb5euptcm2vflo2nd-ua.png" alt="img1">&lt;/p>&lt;p>Unfortunately, with Cortex M systems such an approach cannot be used directly. The program is tied to absolute addresses and cannot be run in an arbitrary place. This article explains why that is the case and how we made the program relocatable by modifying the LLVM compiler.&lt;/p>&lt;h2 id="introduction">Introduction&lt;/h2>&lt;p>Someone who has read the documentation may say that compilers already have options to create relocatable code. In the case of LLVM it is -fropi, -frwpi and others. That is where we started our tests too. It turned out that these options were very convenient for the systems where the program was loaded entirely into RAM. In this case, both constants (which were located in the code) and variables (which were located in the data section) were located in the same big segment. This is why it could be easily moved within the RAM.&lt;/p>&lt;p>&lt;img src="https://habrastorage.org/webt/ll/xz/e2/llxze2mozfqk3xsf-2oaqzpvmdw.png" alt="img2">&lt;/p>&lt;p>For Cortex M controllers it was not that easy. Their code was located in a high-volume ROM while the data was stored in a low-volume RAM. In addition, those entities were located in different parts of the Flash/RAM.&lt;/p>&lt;p>&lt;img src="https://habrastorage.org/webt/5j/ot/po/5jotpomsjyrkaizkxtqlvlqq96i.png" alt="img3">&lt;/p>&lt;p>Use of these options led to either the data being shifted by the same offset as the program… But RAM was much smaller than ROM! Thus, data went out of the allowed bounds.&lt;/p>&lt;p>&lt;img src="https://habrastorage.org/webt/zm/bm/bu/zmbmbuj94znuhn1bbwgibvsdylk.png" alt="img4">&lt;/p>&lt;p>Or to a huge table of pointers to the code constants being created in RAM. The size of this table significantly raised the amount of used RAM. Therefore, sometimes the amount of RAM provided by Cortex M controllers was just not enough.&lt;/p>&lt;p>&lt;img src="https://habrastorage.org/webt/fn/xy/vk/fnxyvkhm4ffgl9lcwcn3aacmskm.png" alt="img5">&lt;/p>&lt;p>It became clear that for the target platform (Cortex M controllers) we had to make changes to the compiler.&lt;/p>&lt;h2 id="basic-principles">Basic Principles&lt;/h2>&lt;p>To keep things coherent, let’s start with the basics. In computers, data and code are located in the global memory. In the given architecture (just like with almost all other architectures) a linear address space is used, so the location of an object can be defined by a number. In order to perform a certain operation with a memory cell, the processor must know the address of this cell.&lt;/p>&lt;p>This is where things became complicated. Both maximum instruction and address sizes are 32 bits. Therefore, you could not just emplace 32-bit address into instruction – it had to have enough space for the instruction’s code. One of the solutions was to use relative addressing. At runtime, the program counter register contained the address of the current instruction. That was a full-size 32-bit register the contents of which was being controlled by the hardware. By reading it the program could know its own location in the Flash. There was enough space within the instruction for some offset, so a significant range of addresses around the current location became available. For example, if you needed to call a function that was located near the currently running function, the processor performed a jump with one instruction.&lt;/p>&lt;p>&lt;em>Here, function MyFunc is located near the call location:&lt;/em>&lt;/p>&lt;pre>&lt;code> bl MyFunc ... .type MyFunc,%functionMyFunc: ...&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://habrastorage.org/webt/rk/dd/kw/rkddkw3vysf1ogmjfleykgoflqs.png" alt="img6">&lt;/p>&lt;p>However, it was only a partial solution, because not all jumps were relative, some were absolute. There was a solution though. We put the absolute address into the Flash directly within the code, somewhere near the place where it was being used. Then in a similar fashion, we performed a PC-relative load of this address into a register and loaded the value itself relative to the register with the next command. A more advanced method was to use a movw, movt instruction pair. The target 32-bit address was cut into two halves which was loaded into the register in two steps. Although it meant using two commands, it led to saving extra addressing.&lt;/p>&lt;p>&lt;em>Loading the contents of global_result_data7 address into the r0 register:&lt;/em>&lt;/p>&lt;pre>&lt;code> movwr0, :lower16:global_result_data7 movtr0, :upper16:global_result_data7 ldrr0, [r0]&lt;/code>&lt;/pre>&lt;p>Let’s take a closer look at the register loading process, where the variable global_result_data7 had the address 0x12345678:&lt;/p>&lt;p>&lt;img src="https://habrastorage.org/webt/yz/b2/yt/yzb2ytpms1lpr4oghmrrpaelq5y.png" alt="img7">&lt;/p>&lt;p>Now, when we figured out how the processor operated with the addresses, it is time to explain where they come from. The Flash/RAM is (with some exceptions) uniform, which means that the function with the address 0x1000 may as well be located at the 0x2000, the only requirement is for the address to be known. The linker is responsible for address assignment. It receives all objects of the program as input and allocates space for them according to the attached configuration file. This way, every object gets its own address, and these addresses are written down to where the functions are being used. Moreover, it is worth noting that Flash/RAM does not have to start from the zero address, the starting address 0x08000000 is quite common as well. This value must be added to all global addresses.&lt;/p>&lt;h2 id="problem-definition">Problem Definition&lt;/h2>&lt;p>So, we had a binary image, suitable for loading into the device’s Flash/RAM. When we wrote it from the initial address defined at linking time and then ran it, the program worked. All data was located in the expected places, all the called addresses had the necessary functions, and so on. One may wonder, what if we had loaded the image from a different address? The first thing that comes to mind – everything would have fallen apart. The program would have accessed the cell value from the address 0x1000, but it would be actually located in a completely different place. However, let’s imagine a basic program consisting of only one instruction – infinite loop. Obviously, such a program was quite relocatable: and because such a short jump was performed PC-relatively, it automatically “adjusted” to its new location. Moreover, if all jumps/calls in the program were relative, it could be quite big and complex; at least all functions were called correctly. Everything was fine until the program tried to use a global address with a value that was offset relative to the expectations.&lt;/p>&lt;p>Now it is time to ask a question: was it an issue? What’s wrong with the program being tied to absolute addresses? What’s the benefit of a program that can run from an arbitrary address? One can argue that it is a good thing if it is cost-effective. Still it could have a much more specific use. For example, the device could receive a code snippet from the outside, which would expand the features of the already existing program, and load it as an addition to the current code. It would be very convenient if this code could work regardless of its location in the Flash. Lastly, there would be a possibility of a complete firmware update release. It also had to be located somewhere in the Flash and then given control of the device. Notably, we do not know where it ends up, so the ability to run from arbitrary addresses is a necessity.&lt;/p>&lt;p>Therefore, the task of achieving relocatable code is worth looking into. It should be noted that in serious systems it is solved by using virtual memory. Logical addresses used in the program are silently mapped to physical addresses, so there are no problems. However, it is a completely different technological level. We were focused on the Cortex-M, without the MMU module. This is why in our case we had to “adjust” the global addresses by adding a program’s memory offset value. Because all address calculations came down to offsets and the difference of pointers, no other changes were required.&lt;/p>&lt;p>It brought up a new task – to retrieve the program’s offset value in the Flash relative to its initial address that was defined at linking time. For example, one could use the following trick. Global addresses remained the same, while the PC value was different. You got the difference between a global address and a PC one during run from a “normal address” and “hardcoded” it into the program. When run from an offset address this difference was different, and calculating how much it had changed gave you the offset value. However, as it will be shown later, there is a more direct way to get the offset value, so for now, let’s just say that the offset value is known.&lt;/p>&lt;h2 id="implementation-initial-approach">Implementation (Initial Approach)&lt;/h2>&lt;p>So, the processor loaded the global address into the register. When you use assembler, you only have to insert a specific instruction right after it, which will add the offset value to the result.&lt;/p>&lt;p>&lt;em>DoOperation function receives the global address global_operation5, which is modified by a r9 register value:&lt;/em>&lt;/p>&lt;pre>&lt;code>movwr0, :lower16:global_operation5movtr0, :upper16:global_operation5addr0, r9blDoOperation&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://habrastorage.org/webt/1h/qd/tt/1hqdtt3aadhvapfrvw1ma4lwoi0.png" alt="img8">&lt;/p>&lt;p>To do this, we had to reserve the register for permanent storage of this value. Certainly, we could load it from RAM each time, but expected losses (ROM volume and processor cycles) were higher than if we were to lose one register. But what should we do if we coded in C? Obviously, the whole scheme only made sense when we did not have to modify the source code. It’s one thing to make some special manipulations here and there, but no major changes are allowed. Fortunately, the compiler could deal with the given task with only a minor modification.&lt;/p>&lt;p>The thing is, the compiler knows perfectly well what exactly it is doing. We used LLVM because we had extensive experience in modifying this compiler, so going forward we will discuss LLVM only. LLVM has a mechanism for separate address space which allows us to bind an attribute to a pointer, which defines data location. In our case, we assumed that only ROM content was moved, while RAM addresses stayed the same. In this case, we set a separate address space for constant global objects (functions, constant data, string literals – everything that went into the read-only memory).&lt;/p>&lt;p>&lt;em>Here we set a separate address space for constant data and map it to global objects:&lt;/em>&lt;/p>&lt;pre>&lt;code>llvm::Optional&amp;lt;LangAS&amp;gt; ARMTargetInfo::getConstantAddressSpace() const { return getLangASFromTargetAS(REL_ROM_AS);}LangAS getGlobalVarAddressSpace(CodeGenModule &amp;amp;CGM, const VarDecl *D) const override { if (D &amp;amp;&amp;amp; CGM.isTypeConstant(D-&amp;gt;getType(), false)) { auto ConstAS = CGM.getTarget().getConstantAddressSpace(); assert(ConstAS &amp;amp;&amp;amp; &amp;quot;No const AddressSpace&amp;quot;); return ConstAS.getValue(); } return TargetCodeGenInfo::getGlobalVarAddressSpace(CGM, D);}&lt;/code>&lt;/pre>&lt;p>This attribute “lived” inside the type during the whole compilation; during object address loading there was a way to recognize the ROM allocation and insert the instructions necessary for the offset.&lt;/p>&lt;h2 id="static-initialization-issue">Static Initialization Issue&lt;/h2>&lt;p>Unfortunately, there was a scenario that we could not process with the given method. We had a global pointer array, which was initialized with a mix of ROM and RAM addresses.&lt;/p>&lt;p>&lt;em>Array arr contains two addresses: for ROM and for RAM:&lt;/em>&lt;/p>&lt;pre>&lt;code> int ro; const int rw; const int *arr[] = { &amp;amp;ro, &amp;amp;rw };&lt;/code>&lt;/pre>&lt;p>This initialization was performed statically, which meant that the linker allocated Flash and filled it with numbers, which were represented as symbolic addresses.&lt;/p>&lt;p>&lt;em>Static initialization of array arr:&lt;/em>&lt;/p>&lt;pre>&lt;code>.typearr,%object.section.rodata,&amp;quot;a&amp;quot;,%progbitsarr:.long ro.long rw.size arr, 8&lt;/code>&lt;/pre>&lt;p>It did not know the future offset value yet, so it could not do anything. It shall be noted that linkers come in all shapes and sized, they can have various advanced features, but for that time, we stuck to simple binary images. So, we had an array of numbers. Still we could do nothing at runtime as well, because we did not know which addresses were from ROM and which were from RAM anymore. So, did our whole idea just go down the drain?&lt;/p>&lt;p>Essentially, there was a very costly but quite versatile solution. If we had known the RAM and ROM address ranges, we could have sent the whole addressing through a special function that, based on the address value, defined where it was from and modified it if necessary. However, the overhead expenses it required were enormous. In this case, the solution was purely theoretical, and obviously, unusable for real-world applications, apart from some individual cases.&lt;/p>&lt;h2 id="implementation-new-approach">Implementation (New Approach)&lt;/h2>&lt;p>We wished we had modified the addresses during the firmware loading. Of course, it required us to change the program for loading the image into the Flash, as well as to provide additional information about the image itself, but that idea actually sounded plausible. As was said above, the ability to run from any loading address came at a cost of a small increase in code size and slightly lower performance. If we had fixed all bottlenecks directly in the binary image, the relocatability could have been achieved without the aforementioned performance/efficiency losses. There were possible pitfalls, but the idea was worth trying out.&lt;/p>&lt;p>The first method was rough though a promising one. We wondered what if we had made two firmware variants be loaded from different addresses and compared afterwards. Only the addresses should have changed, so we would have seen all the places that needed modification. However, it turned out that there were many more differences than that. Some of them might have been disregarded as irrelevant to our task, but there were no guarantees that we would always be able to distinguish valid issues from artifacts. And in the end, the whole method itself sounded too naive for serious applications.&lt;/p>&lt;p>Taking into consideration the above, it was obvious that we had to change at least some addresses used for global pointers initialization. For simplicity, we supposed that during code generation an intermediate assembler file was created and that we had the ability to intervene with this process. A new idea emerged then. Each time the compiler used a global address for initialization, we could see which address space it used, and if it was from ROM, we could put a label before it.&lt;/p>&lt;p>&lt;em>We put markers before ROM address initialization.&lt;/em>&lt;/p>&lt;pre>&lt;code>mainMenu:Reloc2: .long mainMenuEntriesC .long mainMenuEntriesMReloc3: .long mainMenuEntriesC+8&lt;/code>&lt;/pre>&lt;p>At the end of the module, we added a section with a special name and put all those labels in it.&lt;/p>&lt;p>&lt;em>Labels are put into the reloc_patch section:&lt;/em>&lt;/p>&lt;pre>&lt;code>.section .reloc_patch,&amp;quot;aw&amp;quot;,%progbits.globl _Reloc_3877008883__Reloc_3877008883_: .long Reloc1 .long Reloc2 .long Reloc3&lt;/code>&lt;/pre>&lt;p>In the linker script, we defined this section as KEEP so it would remain intact, because, obviously, there were no uses of its data. Later, when the executable file was being linked, all the added sections were joined together and the labels got specific values corresponding to the binary image addresses. The key moment here is that those addresses were equal to the offsets in the output file. Therefore, we could locate the places that needed changes. One subtle aspect to be noted, if the initialized data was located in RAM, their initialization would be located in ROM with a known offset. Therefore, we needed two sections: one for ROM and one for RAM data. The first was processed as listed above, while for the addresses of the second section we had to subtract the initial RAM address and add the initialization block offset which was defined in the linker script file.&lt;/p>&lt;p>Then we wrote a small utility program that recovered our sections from the ELF representation and got the offset list for the global addresses.&lt;/p>&lt;p>It shall be noted that there is a simple way to get relocation tables using standard means, i.e. a linker creates sections in ELF when –q opcode is set. These tables contain all the data we retrieved using the described above method and can be used for our purposes as well. However, they are too big, while we aimed at less memory usage. Moreover, we would use only small bits of them; therefore, we would have to deal with a table relocation parsing issue. On the on hand, we would save efforts by leaving compiler as it is, on the other, it would bring up another problem. Thus, we decided in favor of the method described above.&lt;/p>&lt;h2 id="development-of-the-approach">Development of the Approach&lt;/h2>&lt;p>That was enough to modify the firmware at load time but we went even further. We defined a simple set of commands, like this one:&lt;/p>&lt;p>&lt;code>’D’ [qty] {data}&lt;/code> – write the following qty bytes from the input stream&lt;/p>&lt;p>&lt;code>’A’ [qty]&lt;/code> – interpret qty as addresses, add a specific value to them and print them to the output&lt;/p>&lt;p>&lt;em>Send four bytes to the output stream and correct two addresses:&lt;/em>&lt;/p>&lt;p>&lt;code>’D’ 0x4 0x62 0x54 0x86 0x12 ’A’ 0x2 0x00001000 0x00001008&lt;/code>&lt;/p>&lt;p>&lt;em>If the offset is 0x4000, the result would be like this (for clarity we do not decompose the numbers into bytes):&lt;/em>&lt;/p>&lt;p>&lt;code>0x62 0x54 0x86 0x12 0x00005000 0x00005008&lt;/code>&lt;/p>&lt;p>Then we turned the initial binary image into a stream of such commands. All data up until the first address that needed modification were skipped without changes, then followed the command that modified one or a couple of addresses, then some data again, and so on, until the end of the file. That way, the information for address correction was embedded into the binary image. On one hand, the resulting file was no longer firmware suitable for booting flashing. But then we were able to process it “on the fly” in streaming mode as we received it, using a small buffer. Thus, we had to modify the loader program a little to change the addresses according to the received commands rather than just writing the input stream into the board Flash/RAM. Moreover, we created an additional utility program that accepted such a file and a starting address as input and then created a firmware.&lt;/p>&lt;p>We went even further. As mentioned above, some addresses were “hardcoded” into the movw, movt instruction pairs. The compiler could tell which of them corresponded to ROM address loading, put labels there and make another section for them. Also, we added a command that chose two words from the stream, interpreted them as loading instruction pairs, retrieved the address, changed it, and then put it back in. Thus, the additional steps during runtime became unnecessary. Apart from that, we got the ability to modify the program at ease (for example, changing the version number, etc.).&lt;/p>&lt;p>This also allowed us to give the program the offset value if necessary. To do that, we created a function with a special name that wrote the constant value to a RAM cell. In code this function started with two movw, movt pairs – the first was to load RAM cell address and the second was for the constant itself.&lt;/p>&lt;p>&lt;em>Retrieving the offset in the RAM cell and r9 register:&lt;/em>&lt;/p>&lt;pre>&lt;code>int rel_code = 0;int set_rel_code() { rel_code = 0x12345678; return rel_code;}void __attribute__((section(&amp;quot;.text_init&amp;quot;))) Reset_Handler(void) { set_rel_code(); asm(“mov r9, r0”); ...}&lt;/code>&lt;/pre>&lt;p>We added another stream command that had not been added the offset to the value hardcoded in the load instruction pair, but it actually changed the value to the one being given. As a result, the function put the offset value itself into RAM, and after the function’s call this value was available. All in all, that opened quite a broad range of possibilities, so the additional difficulties look justified.&lt;/p>&lt;h2 id="current-limitations">Current Limitations&lt;/h2>&lt;p>Undoubtedly, the need to work with the intermediate assembler file is a flaw of the implementation. It can be neglected because it is hard to say what it exactly affects. Perhaps, we would get rid of it in the future versions by creating labels directly within the compiler’s internal representation. There is also nothing good in that service sections used for retrieving displacements of the binary image, actually take up memory space. However, we could give them fictional addresses where the Flash/RAM is absent as long as there are no errors during loading.&lt;/p>&lt;h2 id="conclusion">Conclusion&lt;/h2>&lt;p>The LLVM compiler was modified to generate binary code that could be tied to any address before loading to the flash memory without using the additional source code or development environment. All the necessary information is contained in the binary code.&lt;/p></description></item><item><title>Meet the LLVM Outreachy Interns!</title><link>https://blog.llvm.org/posts/2021-07-14-llvm-and-outreachy/</link><pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2021-07-14-llvm-and-outreachy/</guid><description>&lt;p>The LLVM Project is participating in the &lt;a href="https://www.outreachy.org">Outreachy&lt;/a> program for the first time. Two interns have been selected: Sushma Unnibhavi &amp;amp; Pooja Yadav.&lt;/p>&lt;p>Outreachy provides paid, remote internships with the goal of increasing diversity in open source. Outreachy interns work with mentors from open source communites on projects in programming, user experience, documentation, illustration, graphical design, data science, project marketing, user advocacy, or community event planning.&lt;/p>&lt;p>Pooja will be working with her mentor Kit Barton on her project to &lt;em>Create Documentation and Tutorials for the LLVM Global Instruction Selection Framework&lt;/em>. Sushma will be working with her mentor Anshil Gandhi on her project to &lt;em>Implement GlobalISel for the M68k backend in LLVM&lt;/em>. T&lt;/p>&lt;p>Thank you to the &lt;a href="https://foundation.llvm.org/docs/sponsors/">sponsors&lt;/a> of the &lt;a href="https://foundation.llvm.org">LLVM Foundation&lt;/a> as their support has made these internships possible. In addition, we would like to give a huge thank you to Kit and Anshil for mentoring!&lt;/p>&lt;p>We asked Sushma and Pooja a few questions about themselves and the project they are working on. Here are their answers:&lt;/p>&lt;p>&lt;strong>Sushma Unnibhavi&lt;/strong>&lt;/p>&lt;p>&lt;em>Can you tell us about yourself and your background?&lt;/em>&lt;/p>&lt;p>I am Sushma, a final year Information Science Engineering undergradfrom India. My hobbies include drawing, dancing and reading. I lovewriting code. I have been obsessed with the idea of using software tosolve practical problems. I love to dig into problems and solve themwith modern technology. I am constantly learning because I neversettle. I focus on making high-quality decisions and love meeting newpeople and hearing new perspectives. My specialities include learningnew skills and programming languages and problem-solving.&lt;/p>&lt;p>&lt;em>How did you hear about Outreachy and why did you apply?&lt;/em>&lt;/p>&lt;p>I first came to know about Outreachy from my brother and searched forit right away. I found out that Outreachy seeks interns who aretalented and have a zeal to learn while most of the other internshipssought for the experience. I have always wanted to contribute to opensource but never got proper guidance. Then I read the experiences ofprevious Outreachy interns which really motivated me. Many of themdidn’t have any prior experience and they were supported so much fromthe mentors that made them reach greater heights. This made methink…..If they can, why can’t I? Hence I decided to apply toOutreachy. The way I have seen myself grow by contributing to LLVM inthe one month time span of the contribution period is reallysurprising.&lt;/p>&lt;p>&lt;em>Which project will you be working on?&lt;/em>&lt;/p>&lt;p>I will be implementing GloballSel for M68k. I will be adding minimalsupport necessary to select a function that returns sum of two i32values. This includes some very naive and hardcoded argument/returnlowering as well as handling of copy and add instructions throughoutglobalisel pipeline. I will also be implementing lowering foroperations including add, sub, mul, div, comp, phi, load and store.&lt;/p>&lt;p>&lt;em>What are you most looking forward to during your internship?&lt;/em>&lt;/p>&lt;p>One thing I am looking forward to in this internship is a greatlearning experience. When I first started contributing to LLVM, Ithought I wouldn’t stand a chance because I had never worked on aproject with such a huge codebase and that too working on compilerswas a nightmare for me. Through this internship I want to let go ofthis fear and become more confident. I want to prove to myself thatwith hard work and consistency nothing is impossible.&lt;/p>&lt;p>&lt;strong>Pooja Yadav&lt;/strong>&lt;/p>&lt;p>&lt;em>Can you tell us about yourself and your background?&lt;/em>&lt;/p>&lt;p>Hi! I am Pooja Yadav from India. I am currently pursuing my undergraduate degree in Computer Science and Engineering at National Institute of Technology, Goa, India. I have been interested in computer science since high school and feel lucky to get the branch of my choice in one of the deemed universities in India for my Btech degree. I like badminton and skipping in sports and I was a national player in rope skipping at my high school. Sometimes, to relax myself I draw sketches and play with paints sometimes. It is really therapeutic.&lt;/p>&lt;p>I am also a supporter of equity and diversity in the tech field. I am the General Secretory of SPIE student chapter of our college and we have organised many events to support equity. diversity and inclusion.&lt;/p>&lt;p>&lt;em>How did you hear about Outreachy and why did you apply?&lt;/em>&lt;/p>&lt;p>I heard about Outreachy in my second year of college from one of my seniors who is also an Outreachy alum. So, I also thought about participating in it. Outreachy provides great opportunity to people subjected to systematic bias and underrepresented in the technical industry. This was what encouraged me to participate in it. I got introduced to the vast ocean of computer science field in my first year of college and It seemed so overwhelming to me. So, I thought Outreachy would be a good place to start and that is how I got introduced to open source. I tried for Outreachy internship last year also but my final application was not selected. However, I learned a lot of things and was determined to try this year as well. I met many amazing people during the contribution period. All mentors and participants were very friendly and it was always a pleasure to talk to them. Mentors were very patient to answer all my questions, even the dumbest one. Also, the projects were so exciting and I wanted to dive into one of them because I knew that would raise my learning curve to another level. And this year the LLVM project on which I would be working got my interest. So, I decided to contribute to it and luckily I got selected for it.&lt;/p>&lt;p>&lt;em>Which project will you be working on?&lt;/em>&lt;/p>&lt;p>The project on which I am working is &amp;lsquo;Create Documentation and Tutorials for the LLVM Global Instruction Selection Framework&amp;rsquo;. Working on it was quite adventurous during my contribution period and currently I am learning a lot of things. This project is about reading present documentation of GlobalISel and updating or making the required changes. Then make a good tutorial for GIobalISel which would help many contributors in future; beginners as well as professionals. For creating documentation and tutorials I have to understand everything about GlobalIsel. So I am learning along as I move ahead in my project.&lt;/p>&lt;p>&lt;em>What are you most looking forward to during your internship?&lt;/em>&lt;/p>&lt;p>I had never heard about LLVM IR before. When I first read about it I was intrigued by the idea of improving the performance of a compiler with one more intermediate representation i.e machine IR and how we can write a generalised IR for compilers so that we don&amp;rsquo;t need to do it from scratch for every backend. I have learnt many things while working on this project, which include other things apart from this project topic like the concept of compilers, git, open source contributing rules, interaction with other contributors, communication skills, etc.&lt;/p>&lt;p>I am looking forward to learning more about this project and contributing my best to it. I like to explore different fields and this is a great opportunity to observe what other contributors are doing and learn from their project as well.&lt;/p></description></item><item><title>Smaller debug info with constructor type homing</title><link>https://blog.llvm.org/posts/2021-04-05-constructor-homing-for-debug-info/</link><pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2021-04-05-constructor-homing-for-debug-info/</guid><description>&lt;h1 id="constructor-type-homing-for-debug-info">Constructor type homing for debug info&lt;/h1>&lt;h2 id="background">Background&lt;/h2>&lt;p>Class type information is a large contributor to debug info size. Clang already has a few optimizations to reduce the size of class type information based on the assumption that debug info can be spread out over multiple compilation units. So, instead of emitting class type info in every compilation unit that references a class, we only really have to emit it in one place. (For all the other references, emitting the much smaller forward declaration of the class is sufficient.) As an example, one of the existing optimizations is vtable homing, where the type info for a dynamic C++ class is only emitted when its vtable is emitted.&lt;/p>&lt;h2 id="constructor-type-homing">Constructor type homing&lt;/h2>&lt;p>Constructor homing is a similar optimization that applies to almost all classes with constructors. It emits type information for a class wherever its constructor definition is emitted. Unlike with vtable homing, the type info for a class could be emitted more than once, but it has a large impact on debug info because it applies to a large percentage of classes. If all of a class&amp;rsquo;s constructors are defined out of line, the class type information will only be emitted once. If there are constructors defined inline, the inline constructors, and therefore class type information, will be emitted in every compilation unit that calls a constructor.&lt;/p>&lt;p>Constructor homing assumes that if a user wants a class to have debug info, then that class was constructed somewhere in the program. This is a reasonable assumption to make, as classes viewed in the debugger probably exist in program memory, and any class that exists in memory must have been constructed.&lt;/p>&lt;p>Even though all classes have constructors, there are some types of classes that constructor homing doesn&amp;rsquo;t apply to: trivial classes, aggregate classes, and classes with constexpr constructors. It&amp;rsquo;s possible to create instances of these classes without emitting a constructor, so we can&amp;rsquo;t guarantee that the debug info will be emitted. However, these types of classes tend to be fairly small, so we would probably see less of an improvement from using constructor homing on them.&lt;/p>&lt;p>Constructor homing can be enabled with &lt;code>-Xclang -fuse-ctor-homing&lt;/code>. Eventually, the plan is to enable it by default in Clang so that it happens as part of &lt;code>-fno-standalone-debug&lt;/code>. In terms of Clang&amp;rsquo;s &lt;code>-debug-info-kind=&lt;/code> flags, constructor homing is implemented as &lt;code>-debug-info-kind=constructor&lt;/code>, one level below &lt;code>-debug-info-kind=limited&lt;/code>.&lt;/p>&lt;h2 id="size-improvements">Size improvements&lt;/h2>&lt;p>Emitting less class type info gives us a significant reduction in object file sizes. In a Chrome debug build on Linux (which uses split dwarf for debug info), .o and .dwo file sizes with constructor type homing are about 30% smaller (with a 20% overall reduction in build directory size). In a Clang debug build on Linux, .o file sizes are about 48% smaller (and the overall build directory is 38% smaller). On Windows, both Chrome and Clang had 37% smaller .obj files.&lt;/p>&lt;p>The smaller object file size also results in an improvement in link times and GDB load times. On Windows, linking Chrome with constructor homing is 6% faster, while linking Clang is 34% faster. On Linux there was no noticeable difference in link time in Chrome, but linking Clang is 25% faster.&lt;/p>&lt;p>Measured on my machine, without using &lt;code>--gdb-index&lt;/code>, the GDB load time for Clang is about 2m30s without constructor homing, and 1 minute with. If &lt;code>--gdb-index&lt;/code> is enabled, the GDB startup time is about a second regardless, and the binary size is about 30% smaller with constructor homing.&lt;/p>&lt;h2 id="potential-pitfalls">Potential pitfalls&lt;/h2>&lt;p>Ideally, constructor homing shouldn&amp;rsquo;t change the debug info that&amp;rsquo;s available when debugging, but there are some cases where it does. Even though this is undefined behavior in C++, it is possible to define a class with a non-trivial constructor and create an instance of it without calling the constructor (this is often done in C code, where there are no constructors):&lt;/p>&lt;pre tabindex="0">&lt;code>Foo *p = malloc(sizeof(Foo));p-&amp;gt;someField = 1;&lt;/code>&lt;/pre>&lt;p>The constructor for Foo is never called, so its debug info is never emitted.&lt;/p>&lt;p>After enabling constructor type homing in Chrome, we discovered that there are a few classes in libc++ that avoid calling the constructor, and for various reasons, that would be difficult to change. To ensure that they still have debug info, there&amp;rsquo;s a new attribute in Clang called &lt;code>[[standalone_debug]]&lt;/code>. If a class has the attribute it will have the same debug info as if it were built with -fstandalone-debug. This can be used to get debug info for classes that otherwise would have had their type info omitted with constructor homing (or with any of the other debug info optimizations).&lt;/p>&lt;p>I&amp;rsquo;ve also looked into whether there are other common cases where constructor homing omits debug info. Manually comparing the debug info available in a Clang build showed some missing types. There were a few classes that were not used anywhere. There were also one or two pseudo-namespace classes that only had static methods and were therefore never constructed. Looking at diffs of the debug info is somewhat difficult given how many object files and types there are (most of the missing types I saw were because the type wasn&amp;rsquo;t constructed in the particular binary or set of object files I compared), so there may have been other cases I missed.&lt;/p>&lt;h1 id="summary">Summary&lt;/h1>&lt;p>Constructor type homing is a new optimization that greatly reduces the size of debug info in object files. Currently it can be enabled with the cc1 flag &lt;code>-fuse-ctor-homing&lt;/code>, and the plan is to enable it by default as part of &lt;code>-fno-standalone-debug&lt;/code> in Clang. If you want to make your debug builds smaller, try adding &lt;code>-Xclang -fuse-ctor-homing&lt;/code> to your build and let us know how much object file size it saves.&lt;/p></description></item><item><title>Women in Compilers and Tools Meetup Series</title><link>https://blog.llvm.org/posts/2021-03-31-womenincompilerstoolsmeetup/</link><pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2021-03-31-womenincompilerstoolsmeetup/</guid><description>&lt;p>As today is the last day of Women&amp;rsquo;s History Month, it seems fitting to announce a new meetup series for Women in Compilers and Tools.&lt;/p>&lt;p>The &lt;a href="https://www.meetup.com/meetup-group-ifwtlvwd/">LLVM Women in Compilers and Tools Meetup Series&lt;/a> is a free virtual event held each month. It is a platform where all women (trans, non-binary, and cis) in various stages in their career, speak openly, discuss, and network with others. This series will feature talks, tutorials, mentoring events and regularly highlights individuals for their contributions to the compiler, programming languages, and tools field and offers continued discussions concluding each event.&lt;/p>&lt;p>This series is organized by &lt;a href="https://community-dot-o.llvm.org/groups/">The Women in Compilers and Tools&lt;/a> (WiCT) &lt;a href="https://community-dot-o.llvm.org/">Community.o&lt;/a> group. This working group is composed of volunteers in the &lt;a href="https://llvm.org">LLVM community&lt;/a> and supported by the &lt;a href="https://foundation.llvm.org">LLVM Foundation&lt;/a>.&lt;/p>&lt;p>In this series launch, we will be hearing from The Women in Compilers and Tools (WiCT) working group. This working group is composed of volunteers in the LLVM community who&amp;rsquo;ve put together this series. The WiCT working group will provide a Birds of a Feather style talk where attendees can learn more about the series and what to look forward to in the coming months! This will be a great opportunity to ask questions and network with LLVM community members and enthusiasts.&lt;/p>&lt;p>The &lt;a href="https://www.meetup.com/meetup-group-ifwtlvwd/events/277283914/">first meetup&lt;/a> will occur on Thursday, April 22, 2021 at 6pm PDT and feature the following members of the WiCT working group:&lt;/p>&lt;hr>&lt;p>&lt;strong>Anupama Chandrasekhar&lt;/strong>, &lt;em>NVIDIA&lt;/em>&lt;/p>&lt;p>Anupama is a Software Engineer at Nvidia working on graphics drivers, compilers, self driving cars and other cool technologies. Prior to this she was graphics software engineer at Intel working on the integrated GPU. Her prior work includes graphics/compute compiler development for GPUs, DX and Metal driver development and GPU performance. Her main interests are programming languages and compilers. She received her MS in Computer Science and Electrical Engineering from Pennsylvania State University and B.E in Electronics from Anna University, Chennai, India.&lt;/p>&lt;p>&lt;strong>&lt;a href="https://twitter.com/CyndyIshida">Cyndy Ishida&lt;/a>&lt;/strong>, &lt;em>Apple&lt;/em>&lt;/p>&lt;p>Cyndy Ishida has been a Compiler Engineer at Apple, Inc. since 2019 concentrating on library support with Clang tooling. Prior to working at Apple, she completed internships at Virtu Financial, Microsoft and Facebook related to C++ development. Cyndy is relatively new to the LLVM community and began her involvement by contributing Mach-O Support to TextAPI, which serves as a condensed textual representation of dynamic libraries from a linking perspective. She is additionally a Board Member for the LLVM Foundation and aided in launching Community.o, The Foundation’s Diversity &amp;amp; Inclusion initiative and co-organized The Community.o Summit.&lt;/p>&lt;p>&lt;strong>&lt;a href="https://twitter.com/tonic888">Tanya Lattner&lt;/a>&lt;/strong>, &lt;em>LLVM Foundation&lt;/em>&lt;/p>&lt;p>Tanya Lattner is the President and Chief Executive Officer of the LLVM Foundation, a nonprofit supporting the open source software project LLVM (llvm.org). As CEO, Tanya designs programs to support the LLVM project through educational events such as developers conferences and workshops, student support through travel grants, community outreach, and increasing diversity within the project through the Community.o Program.She has a Bachelors of Science in Electrical Engineering from the University of Portland and a Masters Degree in Computer Science from the University of Illinois Urbana-Champaign. Tanya has over 10 years experience as a software engineer primarily focusing on compilers and related tools. She also has 5 patents from her work on code obfuscation, which use compiler techniques to prevent tampering or reverse engineering by hackers.&lt;/p>&lt;p>&lt;strong>&lt;a href="https://twitter.com/jubitaneja">Jubi Taneja&lt;/a>&lt;/strong>, &lt;em>University of Utah&lt;/em>&lt;/p>&lt;p>Jubi Taneja is a PhD candidate at the University of Utah. She will graduate and go on to work full-time with the Machine Learning Compiler group at Microsoft Research starting in the summer of 2021. Her research broadly focuses on compiler optimizations, correctness, and static analysis, with the goal of helping compiler developers use formal methods. She started her learning of compilers at IIT Bombay as an undergraduate research fellow. She earned her B.E. with a Gold Medal from Punjabi University, India. She is a SIGPLAN Long-Term Mentor for international PL researchers since summer 2020. She has been mentoring high school and undergraduate students from India for the past 10 years.&lt;/p>&lt;hr>&lt;p>If you are interested in attending, please register &lt;a href="https://www.meetup.com/meetup-group-ifwtlvwd/events/277283914/">here&lt;/a>.&lt;/p></description></item><item><title>The New Pass Manager</title><link>https://blog.llvm.org/posts/2021-03-26-the-new-pass-manager/</link><pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2021-03-26-the-new-pass-manager/</guid><description>&lt;h1 id="llvms-new-pass-manager">LLVM&amp;rsquo;s New Pass Manager&lt;/h1>&lt;h2 id="what-is-a-pass-manager">What is a pass manager?&lt;/h2>&lt;p>A pass manager schedules transformation passes and analyses to be run on IR in a specific order. Passes can run on an entire module, a single function, or something more abstract such as a strongly connected component (SCC) in a call graph or a loop inside of a function. Scheduling can be simple, such as running a list of module passes, or running function passes on every function inside a module. Scheduling can also be more involved, such as making sure we visit SCCs in the call graph in the correct order.&lt;/p>&lt;p>A pass manager is also responsible for managing analysis results. Analyses (e.g. dominator tree) should be shared between passes whenever possible for efficiency reasons, since recomputing analyses can be expensive. To do so, the pass manager must cache results and recompute them when they are invalidated by transforms.&lt;/p>&lt;p>For testing purposes, we can add specific passes to a pass manager to test those passes. However, the typical use case is to run a predetermined pass pipeline. For example, &lt;code>clang -O2&lt;/code> runs a predetermined set of passes on the input IR.&lt;/p>&lt;h2 id="what-is-llvms-new-pass-manager">What is LLVM&amp;rsquo;s new pass manager?&lt;/h2>&lt;p>LLVM currently has two separate pass managers: the legacy pass manager (legacy PM) and the new pass manager (new PM). When referring to &amp;ldquo;legacy PM&amp;rdquo; and &amp;ldquo;new PM&amp;rdquo;, this includes all of the surrounding infrastructure, not just the entity that manages passes.&lt;/p>&lt;p>The legacy PM has been in use for a very long time and did its job fairly well. However, there were some missing features required for better optimization opportunities, most notably the ability to use function analysis results for arbitrary functions from the inliner. The specific motivating use case was that the inliner wanted to look at the profile data of callees recursively, especially in regards to deferred inlining where the inliner wants to look through simple &amp;ldquo;wrapper&amp;rdquo; functions. The legacy PM did not support retrieval of analyses for arbitrary functions in a CGSCC pass. A CGSCC pass runs on a specific strongly connected component (SCC) of the call graph. The pass manager makes sure we visit SCCs bottom-up so that callees are as optimized as possible when we get to their callers and callers have as precise information as possible. LLVM&amp;rsquo;s inliner is a CGSCC pass due to being a bottom-up inliner. This major limitation of the legacy PM, along with other warts, prompted the desire for a new pass manager.&lt;/p>&lt;p>Currently the new PM applies only to the middle-end optimization pipeline working with LLVM IR. The backend codegen pipeline still works only with the legacy PM, mostly because most codegen passes don&amp;rsquo;t work on LLVM IR, but rather machine IR (MIR), and nobody has yet put in the time to create the new PM infrastructure for MIR passes and to migrate all of the backends to use the new PM. Migrating to the new PM for the codegen pipeline likely won&amp;rsquo;t unlock performance gains since there are almost no interprocedural codegen passes. However, it would clean up a lot of technical debt.&lt;/p>&lt;h2 id="design">Design&lt;/h2>&lt;p>With the legacy PM, each pass declares which analyses it requires and preserves, and the pass manager schedules those analyses as passes to be run if they aren&amp;rsquo;t currently cached or have been invalidated. Declaring ahead of time which analyses a pass may need is unnecessary boilerplate, and a pass might not end up using all analyses in all cases.&lt;/p>&lt;p>The new PM takes a different approach of completely separating analyses and normal passes. Rather than having the pass manager take care of analyses, a separate analysis manager is in charge of computing, caching, and invalidating analyses. Passes can simply request an analysis from the analysis manager, allowing for lazily computing analyses. In order for a pass to communicate that analyses have been invalidated, it returns which analyses it has preserved. The pass manager tells the analysis manager to handle invalidated cached analyses. This results in less boilerplate and better separation of concerns between passes and analyses.&lt;/p>&lt;p>Since the legacy PM modelled analyses as passes to be scheduled and run, we can&amp;rsquo;t efficiently access analyses to arbitrary functions. For a function analysis, the corresponding analysis pass will only contain the info for the current function, which is created during the latest run of the analysis pass. We can manually create analyses for other functions, but they won&amp;rsquo;t be cached anywhere, leading to lots of redundant work and unacceptable compile time regressions. Since analyses are handled by an analysis manager in the new PM, the analysis manager can cache arbitrary analyses for arbitrary functions.&lt;/p>&lt;p>To support CGSCC analyses, we need a key to cache analyses. For things like functions and loops, we have persistent data structures for those to use as keys. However, the legacy CGSCC pass manager only stored the functions in the current SCC in memory and did not have a persistent call graph data structure to use as keys to cache analyses. So we need to keep the whole graph in memory to have something to use as a key. And if we have a persistent call graph, we need to make sure it is up to date if passes change its structure. To avoid too much redundant work regenerating a potentially large but sparse graph, we need to incrementally update the graph. This is the reason behind the complexity of the CGSCC pass manager in the new PM.&lt;/p>&lt;p>Within an SCC, a transform might break a call graph cycle and split the SCC. One issue with the legacy CGSCC infrastructure is that it simply stores all the functions in the current SCC in an array, then iterates through the functions in that order without ever revisiting functions. Consider the following SCC containing two functions.&lt;/p>&lt;pre tabindex="0">&lt;code>void foo() { bar();}void bar() { if (false) { foo(); }}&lt;/code>&lt;/pre>&lt;p>Say we first visit foo, then visit bar and remove the dead call.&lt;/p>&lt;pre tabindex="0">&lt;code>void foo() { bar();}void bar() {}&lt;/code>&lt;/pre>&lt;p>We now want to revisit foo since we have better information, most notably that foo is in its own SCC. The legacy CGSCC pass manager would simply move on to the next part of the call graph. So as part of the new PM&amp;rsquo;s incremental call graph update, if an SCC is split, we make sure to visit the newly split SCCs bottom-up. This may involve revisiting a function we have already visited, but that is intentional as to give passes a chance to observe more precise information.&lt;/p>&lt;p>When adding passes to the legacy pass manager, the nesting of different pass types is implicit. For example, adding function passes after a module pass implicitly creates a function pass manager over a contiguous list of function passes. This is fine in theory, although it can be a little confusing. And some pipelines want to run a CGSCC pass independently of a function pass that comes right after, rather than nesting the function pass into the CGSCC pass via a CGSCC pass manager. The new PM makes the nesting more explicit by only allowing pass managers to contain passes of the equivalent type. For example, a function pass manager can only contain function passes. To add a loop pass to a function pass manager, the loop pass must be wrapped in a loop-to-function adaptor to turn it into a function pass. The IR nesting in the new PM is module (-&amp;gt; CGSCC) -&amp;gt; function -&amp;gt; loop, where the CGSCC nesting is optional. Requiring the CGSCC nesting was considered to simplify things, but the extra runtime overhead of building the call graph and the extra code for proper nesting to run function passes was enough to make the CGSCC nesting optional.&lt;/p>&lt;p>The legacy pass manager relies on many global flags and registries. This is supported by macros generating functions and variables to initialize passes, and any users of the legacy pass manager must make sure to call a function to initialize these passes. But we need some way for a pass manager builder to be aware of all passes for testing purposes. The way the new PM does this is by having the pass manager builder include the definitions of all passes, then use a large mapping of pass IDs to pass constructors to create a function that parses a textual description of a pipeline and adds passes. Users of a pass manager builder can add plugins that register parsing callbacks to handle custom out-of-tree passes. Although there is a global list of functions, there is no mutable global state since each pass manager builder can parse pass pipelines without going through a global registry. Other options, like debugging the execution of a pass manager, are also specified via the constructor, and not through a global flag.&lt;/p>&lt;p>There has been a desire to parallelize LLVM passes for a long time. Although the pass manager infrastructure is not the only blocker, the legacy PM did have a couple of issues blocking parallelization.At the call graph level, only sibling SCCs can be parallelized. Creating SCCs on demand makes it hard to find sibling SCCs. The new PM&amp;rsquo;s computation of the entire call graph makes it easy to find sibling SCCs to parallelize SCC passes on.Module analyses can be computed from function passes in the legacy PM. Some passes only use analyses if they are cached, so parallelization can cause non-determinism since a module analysis may or may not exist based on other parallel pipelines. The new PM only allows function passes to access cached module analyses and does not allow running them. This has the downside of needing to make sure that certain higher-level analyses are present before running a lower-level pipeline, e.g. making sure GlobalsAA has been computed before running a function pipeline.&lt;/p>&lt;h2 id="making-the-new-pass-manager-the-default-pass-manager">Making the new pass manager the default pass manager&lt;/h2>&lt;p>Some major users of LLVM switched to using the new PM by default many years ago. There were some efforts upstream to make the new PM work for all use cases. For example, all Clang tests had been passing with the new PM for a while. However, a vast majority of LLVM tests were still only testing the legacy PM. &lt;code>opt&lt;/code>, the program typically used to test passes, had syntax to run passes using the legacy PM, &lt;code>opt -instcombine&lt;/code>, and syntax to run passes using the new PM, &lt;code>opt -passes=instcombine&lt;/code>. The vast majority of tests used the legacy PM syntax, so if the new PM were to be switched on by default, most LLVM tests wouldn&amp;rsquo;t be testing the new PM passes. (a good number of tests already manually ran against both)&lt;/p>&lt;p>To make tests using &lt;code>opt&lt;/code> run against the new PM, we can either manually make them run twice, once against the legacy PM and once against the new PM, or we can automatically translate &lt;code>opt -instcombine&lt;/code> to &lt;code>opt -passes=instcombine&lt;/code> when the new PM is on by default. Rather than update every test, an &lt;code>-enable-new-pm&lt;/code> option was added to &lt;code>opt&lt;/code>, which translates the legacy syntax to the new syntax.&lt;/p>&lt;p>With this new option, we started discovering what features the legacy PM had that existing users of the new PM weren&amp;rsquo;t concerned with. Turning this on locally of course initially caused many tests to fail. Many passes hadn&amp;rsquo;t yet been ported to the new PM and some &lt;code>opt&lt;/code> features didn&amp;rsquo;t work with the new PM. We ported passes and features that made sense to port to the new PM, and pinned tests using legacy PM features that didn&amp;rsquo;t make sense to port to the new PM.&lt;/p>&lt;p>Some of the more interesting issues with the new PM uncovered with &lt;code>-enable-new-pm&lt;/code>:&lt;/p>&lt;ul>&lt;li>The &lt;code>optnone&lt;/code> function attribute didn&amp;rsquo;t cause optional passes to be skipped. Using the existing pass instrumentation framework, which calls callbacks before and after running a pass, and also allows passes to be skipped, this was a very simple pass instrumentation. However, some passes must be run to preserve correctness, so we ended up marking some passes as required.&lt;/li>&lt;li>&lt;a href="https://llvm.org/docs/OptBisect.html">Opt-bisect&lt;/a> wasn&amp;rsquo;t supported in the new PM. It is used for bisecting which pass in a pipeline causes a miscompile by skipping passes after a certain point. This similarly was fairly easily implemented via pass instrumentation. This similarly always runs required passes.&lt;/li>&lt;li>Various target-specific tests were failing. Upon inspection, some passes that were expected to be run in something like the -O2 pipeline weren&amp;rsquo;t being run. Some backend targets add custom passes into the default pipelines. Some of these passes are required for correctness, such as passes to lower target-specific intrinsics. The legacy PM had a way for a &lt;code>TargetMachine&lt;/code> to inject passes into default pipelines via &lt;code>TargetMachine::adjustPassManager()&lt;/code>. A new PM equivalent was introduced and the target-specific passes in the optimization pipeline were ported to the new PM. This wasn&amp;rsquo;t previously an issue because existing users of the new PM were mostly concerned with x86, which didn&amp;rsquo;t use this feature in the legacy PM.&lt;/li>&lt;li>Some coroutine tests were asserting in the CGSCC infrastructure. It turns out that the new PM CGSCC infrastructure didn&amp;rsquo;t support extracting parts of a function into another (aka outlining) in a CGSCC pass. There were some initial failed attempts at hacks to work around this issue, which didn&amp;rsquo;t properly update the call graph and didn&amp;rsquo;t handle recursion from newly outlined functions. Finally we came up with a solution that fit into the existing CGSCC infrastructure and properly kept the call graph valid, although coroutine-specific call graph transformations had to be accomodated.&lt;/li>&lt;/ul>&lt;h2 id="improvements">Improvements&lt;/h2>&lt;p>Various projects/companies have already been using the new PM for performance reasons for many years. Separately, Chrome recently started using PGO and ThinLTO to make Chrome faster, each with noticeable performance wins. After the new PM was turned on by default in LLVM, Chrome followed suit and turned on the new PM, seeing 3-4% improvements in Speedometer 2.0 for Linux and Windows, on top of a 8-9MB size decrease. It&amp;rsquo;s likely that better usage of profile information as well as better handling of larger ThinLTO call graphs lead to these improvements.&lt;/p>&lt;p>However, smaller applications with tiny hotspots likely won&amp;rsquo;t see much benefit from the new PM since the improvements brought on by the new PM tend to be more relevant to large codebases.&lt;/p>&lt;p>Aside from user-facing improvements, this also helps LLVM&amp;rsquo;s code health by standardizing on one of the two pass managers for the optimization. While we can&amp;rsquo;t yet remove the legacy pass manager, we can start the deprecation of it, at least for the optimization pipeline. Then hopefully at some point we can start to remove parts of the optimization pipeline that are legacy PM-specific.&lt;/p>&lt;h2 id="whats-next">What&amp;rsquo;s next?&lt;/h2>&lt;p>To begin the process of removing the use of the legacy PM in the optimization pipeline, we need to make sure that anything using the legacy PM has an alternative using the new PM. Just to list a couple: bugpoint, the LLVM C API, GPU divergence analysis.&lt;/p>&lt;p>As mentioned before, the codegen pipeline still only works with the legacy PM. Although there has been work to start making the codegen pipeline work with the new PM, it is still very far from being usable. This is a great entry point into LLVM, please ask on llvm-dev for more information if you&amp;rsquo;re interested.&lt;/p></description></item><item><title>Cling -- Beyond Just Interpreting C++</title><link>https://blog.llvm.org/posts/2021-03-25-cling-beyond-just-interpreting-cpp/</link><pubDate>Thu, 25 Mar 2021 10:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2021-03-25-cling-beyond-just-interpreting-cpp/</guid><description>&lt;h1 id="interactive-c-with-cling">Interactive C++ with Cling&lt;/h1>&lt;p>In our previous blog post &lt;a href="https://blog.llvm.org/posts/2020-12-21-interactive-cpp-for-data-science/">&amp;ldquo;Interactive C++ for Data Science&amp;rdquo;&lt;/a>we described eval-style programming, interactive C++ in Notebooks and CUDA. Thispost will discuss some developed applications of Cling supportinginteroperability and extensibility. We aim to demonstrate template instantiationon demand; embedding Cling as a service; and showcase an extension enablingon-the-fly automatic differentiation.&lt;/p>&lt;h2 id="template-instantiation-on-demand">Template Instantiation on Demand&lt;/h2>&lt;p>Cling implements a facility called &lt;code>LookupHelper&lt;/code>, which takes C++ code andchecks if a declaration with that qualified name already exists. For instance:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">[cling] &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>include &lt;span style="color:#e6db74">&amp;#34;cling/Interpreter/Interpreter.h&amp;#34;&lt;/span>[cling] &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>include &lt;span style="color:#e6db74">&amp;#34;cling/Interpreter/LookupHelper.h&amp;#34;&lt;/span>[cling] &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>include &lt;span style="color:#e6db74">&amp;#34;clang/AST/Decl.h&amp;#34;&lt;/span>[cling] &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">S&lt;/span>{};[cling] cling&lt;span style="color:#f92672">::&lt;/span>LookupHelper&lt;span style="color:#f92672">&amp;amp;&lt;/span> LH &lt;span style="color:#f92672">=&lt;/span> gCling&lt;span style="color:#f92672">-&amp;gt;&lt;/span>getLookupHelper()(cling&lt;span style="color:#f92672">::&lt;/span>LookupHelper &lt;span style="color:#f92672">&amp;amp;&lt;/span>) &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#ae81ff">0x7fcba3c0bfc0&lt;/span>[cling] &lt;span style="color:#66d9ef">auto&lt;/span> D &lt;span style="color:#f92672">=&lt;/span> LH.findScope(&lt;span style="color:#e6db74">&amp;#34;std::vector&amp;lt;S&amp;gt;&amp;#34;&lt;/span>, cling&lt;span style="color:#f92672">::&lt;/span>LookupHelper&lt;span style="color:#f92672">::&lt;/span>DiagSetting&lt;span style="color:#f92672">::&lt;/span>NoDiagnostics)(&lt;span style="color:#66d9ef">const&lt;/span> clang&lt;span style="color:#f92672">::&lt;/span>Decl &lt;span style="color:#f92672">*&lt;/span>) &lt;span style="color:#ae81ff">0x1216bdcd8&lt;/span>[cling] D&lt;span style="color:#f92672">-&amp;gt;&lt;/span>getDeclKindName()(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;ClassTemplateSpecialization&amp;#34;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this particular case, &lt;code>findScope&lt;/code> instantiates the template and returns itsclang AST representation. Template instantiation on demand addresses the commonlibrary problem of template combinatorial explosion. Template instantiation ondemand and conversion of textual qualified C++ names into entity metainformation has proven to be a very powerful mechanism aiding data serializationand language interoperability.&lt;/p>&lt;h2 id="language-interop-on-demand">Language Interop on Demand&lt;/h2>&lt;p>An example is &lt;a href="https://cppyy.readthedocs.io/">cppyy&lt;/a>, which provides automaticPython bindings, at runtime, to C++ code through Cling. Python is itself adynamic language executed by an interpreter, thus making the interaction withC++ code more natural when intermediated by Cling. Examples include runtimetemplate instantiations, function (pointer) callbacks, cross-languageinheritance, automatic downcasting, and exception mapping. Many advanced C++features such as placement new, multiple virtual inheritance,variadic templates, etc., are naturally resolved by the LookupHelper.&lt;/p>&lt;p>cppyy achieves high performance through an all-lazy approach to runtime bindingsconstruction and specializations of common cases through runtime reflection.As such, it has a much lower call overhead than e.g. pybind11, and looping overa &lt;code>std::vector&lt;/code> through cppyy is faster than looping over a numpy array of thesame type. Taking it a step further, its implementation for PyPy, a fullycompatible Python interpreter sporting at &lt;a href="https://pypy.org">tracing JIT&lt;/a>, canin many cases provide native access to C++ code in PyPy&amp;rsquo;s JIT, includingoverload resolution and JIT hints that allow for aggressive optimizations.&lt;/p>&lt;p>Thanks to Cling&amp;rsquo;s runtime reflection, cppyy makes maintaining a large softwarestack simpler: except for cppyy&amp;rsquo;s own python-interpreter binding, it does nothave any compiled code that is Python-dependent. I.e., cppyy-based extensionmodules require no recompilation when switching Python versions (or even whenswitching between the CPython and PyPy interpreters, say).&lt;/p>&lt;p>The example below shows the tight integration of C++ and python; shows the tightback and forth communication of the template instantiation and thecross-inheritance overrides; and the runtime behaviors (everything happens atruntime, there is no compiled code here).&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> cppyycppyy&lt;span style="color:#f92672">.&lt;/span>cppdef(&lt;span style="color:#e6db74">r&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;\&lt;/span>&lt;span style="color:#e6db74">template&amp;lt;typename T&amp;gt; class Producer {&lt;/span>&lt;span style="color:#e6db74">private:&lt;/span>&lt;span style="color:#e6db74"> T m_value;&lt;/span>&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">protected:&lt;/span>&lt;span style="color:#e6db74"> virtual T produce_imp() = 0;&lt;/span>&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">public:&lt;/span>&lt;span style="color:#e6db74"> Producer(const T&amp;amp; value) : m_value(value) &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74"> virtual ~Producer() &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74"> T produce_total() { return m_value + produce_imp(); }&lt;/span>&lt;span style="color:#e6db74">};&lt;/span>&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">class Consumer {&lt;/span>&lt;span style="color:#e6db74">public:&lt;/span>&lt;span style="color:#e6db74"> template&amp;lt;typename T&amp;gt;&lt;/span>&lt;span style="color:#e6db74"> void consume(Producer&amp;lt;T&amp;gt;&amp;amp; p) {&lt;/span>&lt;span style="color:#e6db74"> std::cout &amp;lt;&amp;lt; &amp;#34;received: \&amp;#34;&amp;#34; &amp;lt;&amp;lt; p.produce_total() &amp;lt;&amp;lt; &amp;#34;\&amp;#34;\n&amp;#34;;&lt;/span>&lt;span style="color:#e6db74"> }&lt;/span>&lt;span style="color:#e6db74">};&amp;#34;&amp;#34;&amp;#34;&lt;/span>)&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">factory&lt;/span>(base_v, &lt;span style="color:#f92672">*&lt;/span>derived_v): &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">_F&lt;/span>(cppyy&lt;span style="color:#f92672">.&lt;/span>gbl&lt;span style="color:#f92672">.&lt;/span>Producer[type(base_v)]): &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, base_v, &lt;span style="color:#f92672">*&lt;/span>derived_v): super()&lt;span style="color:#f92672">.&lt;/span>__init__(base_v) self&lt;span style="color:#f92672">.&lt;/span>_values &lt;span style="color:#f92672">=&lt;/span> derived_v &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">produce_imp&lt;/span>(self): &lt;span style="color:#66d9ef">return&lt;/span> type(base_v)(sum(self&lt;span style="color:#f92672">.&lt;/span>_values)) &lt;span style="color:#66d9ef">return&lt;/span> _F(base_v, &lt;span style="color:#f92672">*&lt;/span>derived_v)consumer &lt;span style="color:#f92672">=&lt;/span> cppyy&lt;span style="color:#f92672">.&lt;/span>gbl&lt;span style="color:#f92672">.&lt;/span>Consumer()&lt;span style="color:#66d9ef">for&lt;/span> producer &lt;span style="color:#f92672">in&lt;/span> [factory(&lt;span style="color:#f92672">*&lt;/span>x) &lt;span style="color:#66d9ef">for&lt;/span> x &lt;span style="color:#f92672">in&lt;/span> \ ((&lt;span style="color:#e6db74">&amp;#34;hello &amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">42&lt;/span>), (&lt;span style="color:#ae81ff">3.&lt;/span>, &lt;span style="color:#ae81ff">0.14&lt;/span>, &lt;span style="color:#ae81ff">0.0015&lt;/span>))]: consumer&lt;span style="color:#f92672">.&lt;/span>consume(producer)&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">python3 cppyy_demo.pyreceived: &lt;span style="color:#e6db74">&amp;#34;hello 42&amp;#34;&lt;/span>received: &lt;span style="color:#e6db74">&amp;#34;3.1415&amp;#34;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the snippet we create python classes based on python arguments, which derivefrom a templated C++ class instantiated with a type. The python class providesthe implementation for a protected function that is called from a publicfunction, resulting in the expected return value, which is printed. We aim tohighlight:&lt;/p>&lt;ul>&lt;li>Python creates classes at runtime, as can Cling, even when they aredeclared in a module (the relevant classes are here created in a factorymethod);&lt;/li>&lt;li>Templated C++ classes can be instantiated on the fly from Python, by takingthe type of the argument (i.e. using introspection at runtime in Python) tocreate the C++ base class for the Python class.&lt;/li>&lt;li>Cross-language derivation is at runtime, with no support needed from the C++class, other than a virtual destructor and virtual methods;&lt;/li>&lt;li>C++ &amp;ldquo;protected&amp;rdquo; methods can be overridden in Python, even though Python hasno such concept and you can not actually call protected methods from boundC++ objects in Python;&lt;/li>&lt;li>It all works straight out of the box.&lt;/li>&lt;/ul>&lt;p>cppyy is used in several large code bases in physics, chemistry, mathematics,and biology. It is readily installable through[pip from PyPI] (&lt;a href="https://pypi.org/project/cppyy/">https://pypi.org/project/cppyy/&lt;/a>) and through&lt;a href="https://anaconda.org/conda-forge/cppyy">conda&lt;/a>.&lt;/p>&lt;p>Another example is Symmetry Integration Language (SIL), a D-baseddomain-specific language of functional flavor developed and used internally by&lt;a href="https://symmetryinvestments.com">Symmetry Investments&lt;/a>. One of the main goalsof SIL is to be easily interoperable with all sorts of languages and systems,and this is achieved through various plugins. To call C++ code, SIL uses aplugin called &lt;code>sil-cling&lt;/code>, which acts as a middle ground between SIL and Cling.However, sil-cling does not interact directly with Cling, but throughcppyy-backend, that is cppyy&amp;rsquo;s C/C++ wrapper around Cling that provides a stableC/C++ reflection API.&lt;/p>&lt;p>There are two core types that are exposed from sil-cling to SIL. One is&lt;code>CPPNamespace&lt;/code>, which exposes a C++ namespace and allows free function calling,access to namespace&amp;rsquo;s variables, and object instantiation for the classesdefined in that namespace. The other is &lt;code>ClingObj&lt;/code>, which is a proxy for a C++object, allowing construction, method calling and the manipulation of theobject&amp;rsquo;s data members. Given that cppyy represents C++ classes, structs andnamespaces as &amp;lsquo;scopes&amp;rsquo; and reflection information about any of these C++entities is obtained through its associated &amp;lsquo;scope&amp;rsquo; object, both wrapper typesexposed to SIL hold a reference to their associated scope object which isqueried whenever the wrapper types are used to call C++ code.&lt;/p>&lt;p>All the calls that are done from SIL through the two wrapper types have 3arguments: the wrapper object used, the name of the C++ function that needs tobe called, and (if needed) a sequence of arguments for that function. Once theoverload resolution and the argument conversion are done, sil-cling calls theappropriate cppyy function that will wrap the call and dispatch it to Cling forJIT compilation. At the moment, sil-cling can be used to call C++ libraries like&lt;code>Boost.Asio&lt;/code>, &lt;code>dlib&lt;/code> or &lt;code>Xapian&lt;/code>.&lt;/p>&lt;p>The example below creates a Boost Asio-based client-server application writtenin SIL using the sil-cling plugin. Server.sil contains the SIL code for theserver. It starts by including the relevant header files, using &lt;code>cppCompile&lt;/code>.The next step is to create wrapper objects for the namespaces that are needed,and this is done by calling cppNamespace with the names of the namespaces thatone needs to access. These CPPNamespace wrappers are used to instantiate classesthat are defined inside the C++ namespaces that they wrap. Using these wrappers,an endpoint, an acceptor socket (which listens for incoming connections) and anactive socket (which handles communication with the client) are created. Thenthe server waits for a connection and, once a client connects, it reads itsmessage and sends a reply.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-d" data-lang="d">&lt;span style="color:#75715e">// Server.sil&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">* &lt;/span>from silcling&lt;span style="color:#f92672">import&lt;/span> format from format&lt;span style="color:#a6e22e">cppCompile&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#include &amp;lt;boost/asio.hpp&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>cppCompile &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#include \&amp;#34;helper.hpp\&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#75715e">// CPPNamespace wrappers&lt;/span>&lt;span style="color:#75715e">&lt;/span>asio &lt;span style="color:#f92672">=&lt;/span> cppNamespace&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;boost::asio&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>tcp &lt;span style="color:#f92672">=&lt;/span> cppNamespace&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;boost::asio::ip::tcp&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>helpers &lt;span style="color:#f92672">=&lt;/span> cppNamespace&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;helpme&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#75715e">// Using namespace wrappers to instantiate classes - creates ClingObj(s)&lt;/span>&lt;span style="color:#75715e">&lt;/span>ioService &lt;span style="color:#f92672">=&lt;/span> asio&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">obj&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;io_service&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>endpoint &lt;span style="color:#f92672">=&lt;/span> tcp&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">obj&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;endpoint&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> tcp&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">v4&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#ae81ff">9999&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#75715e">// Acceptor socket - incoming connections&lt;/span>&lt;span style="color:#75715e">&lt;/span>acceptorSocket &lt;span style="color:#f92672">=&lt;/span> tcp&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">obj&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;acceptor&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> ioService&lt;span style="color:#f92672">,&lt;/span> endpoint&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#75715e">// Active socket - communication with client&lt;/span>&lt;span style="color:#75715e">&lt;/span>activeSocket &lt;span style="color:#f92672">=&lt;/span> tcp&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">obj&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;socket&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> ioService&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#75715e">// Waiting for connection and use the activeSocket to connect with the client&lt;/span>&lt;span style="color:#75715e">&lt;/span>helpers&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">accept&lt;/span>&lt;span style="color:#f92672">(&lt;/span>acceptorSocket&lt;span style="color:#f92672">,&lt;/span> activeSocket&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#75715e">// Waiting for message&lt;/span>&lt;span style="color:#75715e">&lt;/span>message &lt;span style="color:#f92672">=&lt;/span> helpers&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getData&lt;/span>&lt;span style="color:#f92672">(&lt;/span>activeSocket&lt;span style="color:#f92672">);&lt;/span>print&lt;span style="color:#f92672">(&lt;/span>format&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;[Server]: Received \&amp;#34;%s\&amp;#34; from client.&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> message&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getString&lt;/span>&lt;span style="color:#f92672">()))&lt;/span>&lt;span style="color:#75715e">// Send reply&lt;/span>&lt;span style="color:#75715e">&lt;/span>reply &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello \&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">~&lt;/span> message&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getString&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">~&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\&amp;#39;!&amp;#34;&lt;/span>helpers&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">sendData&lt;/span>&lt;span style="color:#f92672">(&lt;/span>activeSocket&lt;span style="color:#f92672">,&lt;/span> reply&lt;span style="color:#f92672">)&lt;/span>print&lt;span style="color:#f92672">(&lt;/span>format&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;[Server]: Sent \&amp;#34;%s\&amp;#34; to client.&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> reply&lt;span style="color:#f92672">))&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Client.sil contains the SIL code for the client. As the server, it includes therelevant headers, creates wrappers for the required namespaces and uses them tocreate an endpoint and a socket. Then the client connects to the server, sends amessage, and waits for the server&amp;rsquo;s reply. Once the reply arrives, the clientprints it to the screen.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-d" data-lang="d">&lt;span style="color:#75715e">// Client.sil&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">* &lt;/span>from silcling&lt;span style="color:#f92672">import&lt;/span> format from format&lt;span style="color:#a6e22e">cppCompile&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#include &amp;lt;boost/asio.hpp&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>cppCompile &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#include \&amp;#34;helper.hpp\&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>asio &lt;span style="color:#f92672">=&lt;/span> cppNamespace&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;boost::asio&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>tcp &lt;span style="color:#f92672">=&lt;/span> cppNamespace&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;boost::asio::ip::tcp&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>helpers &lt;span style="color:#f92672">=&lt;/span> cppNamespace&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;helpme&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#75715e">// Scope resolution operator &amp;lt;-&amp;gt; address::static_method() or address::static_member&lt;/span>&lt;span style="color:#75715e">&lt;/span>address &lt;span style="color:#f92672">=&lt;/span> classScope&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;boost::asio::ip::address&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>ioService &lt;span style="color:#f92672">=&lt;/span> asio&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">obj&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;io_service&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>endpoint &lt;span style="color:#f92672">=&lt;/span> tcp&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">obj&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;endpoint&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> address&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">from_string&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;127.0.0.1&amp;#34;&lt;/span>&lt;span style="color:#f92672">),&lt;/span> &lt;span style="color:#ae81ff">9999&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#75715e">// Creating socket&lt;/span>&lt;span style="color:#75715e">&lt;/span>client_socket &lt;span style="color:#f92672">=&lt;/span> tcp&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">obj&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;socket&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> ioService&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#75715e">// Connect&lt;/span>&lt;span style="color:#75715e">&lt;/span>client_socket&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">connect&lt;/span>&lt;span style="color:#f92672">(&lt;/span>endpoint&lt;span style="color:#f92672">)&lt;/span>message &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;demo&amp;#34;&lt;/span>helpers&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">sendData&lt;/span>&lt;span style="color:#f92672">(&lt;/span>client_socket&lt;span style="color:#f92672">,&lt;/span> message&lt;span style="color:#f92672">)&lt;/span>print&lt;span style="color:#f92672">(&lt;/span>format&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;[Client]: Sent \&amp;#34;%s\&amp;#34; to server.&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> message&lt;span style="color:#f92672">))&lt;/span>message &lt;span style="color:#f92672">=&lt;/span> helpers&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getData&lt;/span>&lt;span style="color:#f92672">(&lt;/span>client_socket&lt;span style="color:#f92672">);&lt;/span>print&lt;span style="color:#f92672">(&lt;/span>format&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;[Client]: Received \&amp;#34;%s\&amp;#34; from server.&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> message&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getString&lt;/span>&lt;span style="color:#f92672">()))&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#f92672">[&lt;/span>Client&lt;span style="color:#f92672">]&lt;/span>: Sent &lt;span style="color:#e6db74">&amp;#34;demo&amp;#34;&lt;/span> to server.&lt;span style="color:#f92672">[&lt;/span>Server&lt;span style="color:#f92672">]&lt;/span>: Received &lt;span style="color:#e6db74">&amp;#34;demo&amp;#34;&lt;/span> from client.&lt;span style="color:#f92672">[&lt;/span>Server&lt;span style="color:#f92672">]&lt;/span>: Sent &lt;span style="color:#e6db74">&amp;#34;Hello demo&amp;#34;&lt;/span> to client.&lt;span style="color:#f92672">[&lt;/span>Client&lt;span style="color:#f92672">]&lt;/span>: Received &lt;span style="color:#e6db74">&amp;#34;Hello demo&amp;#34;&lt;/span> from server.&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="interpretercompiler-as-a-service">Interpreter/Compiler as a Service&lt;/h2>&lt;p>The design of Cling, just like Clang, allows it to be used as a library. In thenext example we show how to incorporate libCling in a C++ program. Cling can beused on-demand, as a service, to compile, modify or describe C++ code. Theexample program shows several ways in which compiled and interpreted C++ caninteract:&lt;/p>&lt;ul>&lt;li>&lt;code>callCompiledFn&lt;/code> &amp;ndash; The cling-demo.cpp defines an in global variable,&lt;code>aGlobal&lt;/code>; a static float variable, &lt;code>anotherGlobal&lt;/code>; and its accessors. The&lt;code>interp&lt;/code> argument is an earlier created instance of the Cling interpreter.Just like in standard C++, it is sufficient to forward declare the compiledentities to the interpreter to be able to use them. Then, the executioninformation from the different calls to process is stored in a generic Cling&lt;code>Value&lt;/code> object which is used to exchange information between compiled andinterpreted code.&lt;/li>&lt;li>&lt;code>callInterpretedFn&lt;/code> &amp;ndash; Complementing &lt;code>callCompiledFn&lt;/code>, compiled code cancall an interpreted function by asking Cling to form a function pointer froma given mangled name. Then the call uses the standard C++ syntax.&lt;/li>&lt;li>&lt;code>modifyCompiledValue&lt;/code> &amp;ndash; Cling has full understanding of C++ and thus we cansupport complex low-level operations on stack-allocated memory. In theexample we ask the compiler for the memory address of the local variable locand ask the interpreter, at runtime, to square its value.&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">// cling-demo.cpp&lt;/span>&lt;span style="color:#75715e">// g++ ... cling-demo.cpp; ./cling-demo&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cling/Interpreter/Interpreter.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cling/Interpreter/Value.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cling/Utils/Casting.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sstream&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">/// Definitions of declarations injected also into cling.&lt;/span>&lt;span style="color:#75715e">/// NOTE: this could also stay in a header #included here and into cling, but&lt;/span>&lt;span style="color:#75715e">/// for the sake of simplicity we just redeclare them here.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> aGlobal &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>;&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> anotherGlobal &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3.141&lt;/span>;&lt;span style="color:#66d9ef">float&lt;/span> &lt;span style="color:#a6e22e">getAnotherGlobal&lt;/span>() { &lt;span style="color:#66d9ef">return&lt;/span> anotherGlobal; }&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setAnotherGlobal&lt;/span>(&lt;span style="color:#66d9ef">float&lt;/span> val) { anotherGlobal &lt;span style="color:#f92672">=&lt;/span> val; }&lt;span style="color:#75715e">///\brief Call compiled functions from the interpreter.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">callCompiledFn&lt;/span>(cling&lt;span style="color:#f92672">::&lt;/span>Interpreter&lt;span style="color:#f92672">&amp;amp;&lt;/span> interp) { &lt;span style="color:#75715e">// We could use a header, too...&lt;/span>&lt;span style="color:#75715e">&lt;/span> interp.declare(&lt;span style="color:#e6db74">&amp;#34;int aGlobal;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;float getAnotherGlobal();&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;void setAnotherGlobal(float val);&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>); cling&lt;span style="color:#f92672">::&lt;/span>Value res; &lt;span style="color:#75715e">// Will hold the result of the expression evaluation.&lt;/span>&lt;span style="color:#75715e">&lt;/span> interp.process(&lt;span style="color:#e6db74">&amp;#34;aGlobal;&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>res); std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;aGlobal is &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> res.getAs&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>; interp.process(&lt;span style="color:#e6db74">&amp;#34;getAnotherGlobal();&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>res); std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;getAnotherGlobal() returned &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> res.getAs&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">float&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>; setAnotherGlobal(&lt;span style="color:#ae81ff">1.&lt;/span>); &lt;span style="color:#75715e">// We modify the compiled value,&lt;/span>&lt;span style="color:#75715e">&lt;/span> interp.process(&lt;span style="color:#e6db74">&amp;#34;getAnotherGlobal();&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>res); &lt;span style="color:#75715e">// does the interpreter see it?&lt;/span>&lt;span style="color:#75715e">&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;getAnotherGlobal() returned &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> res.getAs&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">float&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>; &lt;span style="color:#75715e">// We modify using the interpreter, now the binary sees the new value.&lt;/span>&lt;span style="color:#75715e">&lt;/span> interp.process(&lt;span style="color:#e6db74">&amp;#34;setAnotherGlobal(7.777); getAnotherGlobal();&amp;#34;&lt;/span>); std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;getAnotherGlobal() returned &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> getAnotherGlobal() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>;}&lt;span style="color:#75715e">/// Call an interpreted function using its symbol address.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">callInterpretedFn&lt;/span>(cling&lt;span style="color:#f92672">::&lt;/span>Interpreter&lt;span style="color:#f92672">&amp;amp;&lt;/span> interp) { &lt;span style="color:#75715e">// Declare a function to the interpreter. Make it extern &amp;#34;C&amp;#34; to remove&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// mangling from the game.&lt;/span>&lt;span style="color:#75715e">&lt;/span> interp.declare(&lt;span style="color:#e6db74">&amp;#34;extern &lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">C&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> int plutification(int siss, int sat) &amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;{ return siss * sat; }&amp;#34;&lt;/span>); &lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span> addr &lt;span style="color:#f92672">=&lt;/span> interp.getAddressOfGlobal(&lt;span style="color:#e6db74">&amp;#34;plutification&amp;#34;&lt;/span>); &lt;span style="color:#66d9ef">using&lt;/span> func_t &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#66d9ef">int&lt;/span>); func_t&lt;span style="color:#f92672">*&lt;/span> pFunc &lt;span style="color:#f92672">=&lt;/span> cling&lt;span style="color:#f92672">::&lt;/span>utils&lt;span style="color:#f92672">::&lt;/span>VoidToFunctionPtr&lt;span style="color:#f92672">&amp;lt;&lt;/span>func_t&lt;span style="color:#f92672">*&amp;gt;&lt;/span>(addr); std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;7 * 8 = &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> pFunc(&lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>;}&lt;span style="color:#75715e">/// Pass a pointer into cling as a string.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">modifyCompiledValue&lt;/span>(cling&lt;span style="color:#f92672">::&lt;/span>Interpreter&lt;span style="color:#f92672">&amp;amp;&lt;/span> interp) { &lt;span style="color:#66d9ef">int&lt;/span> loc &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">17&lt;/span>; &lt;span style="color:#75715e">// The value that will be modified&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Update the value of loc by passing it to the interpreter.&lt;/span>&lt;span style="color:#75715e">&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>ostringstream sstr; &lt;span style="color:#75715e">// on Windows, to prefix the hexadecimal value of a pointer with &amp;#39;0x&amp;#39;,&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// one need to write: std::hex &amp;lt;&amp;lt; std::showbase &amp;lt;&amp;lt; (size_t)pointer&lt;/span>&lt;span style="color:#75715e">&lt;/span> sstr &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;int&amp;amp; ref = *(int*)&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>hex &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>showbase &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> (size_t)&lt;span style="color:#f92672">&amp;amp;&lt;/span>loc &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>; sstr &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ref = ref * ref;&amp;#34;&lt;/span>; interp.process(sstr.str()); std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;The square of 17 is &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> loc &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>;}&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span>&lt;span style="color:#f92672">*&lt;/span> argv) { &lt;span style="color:#75715e">// Create the Interpreter. LLVMDIR is provided as -D during compilation.&lt;/span>&lt;span style="color:#75715e">&lt;/span> cling&lt;span style="color:#f92672">::&lt;/span>Interpreter interp(argc, argv, LLVMDIR); callCompiledFn(interp); callInterpretedFn(interp); modifyCompiledValue(interp); &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">./cling-demoaGlobal is &lt;span style="color:#ae81ff">42&lt;/span>getAnotherGlobal&lt;span style="color:#f92672">()&lt;/span> returned 3.141getAnotherGlobal&lt;span style="color:#f92672">()&lt;/span> returned &lt;span style="color:#ae81ff">1&lt;/span>getAnotherGlobal&lt;span style="color:#f92672">()&lt;/span> returned 7.777&lt;span style="color:#ae81ff">7&lt;/span> * 8 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">56&lt;/span>The square of &lt;span style="color:#ae81ff">17&lt;/span> is &lt;span style="color:#ae81ff">289&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Crossing the compiled-interpreted boundary relies on the stability of Clang&amp;rsquo;simplementation of the host&amp;rsquo;s application binary interface (ABI). Over the yearsit has been very reliable for both Unix and Windows however, Cling is heavilyused to interact with GCC-compiled codebases and is sensitive to ABIincompatibilities between GCC and Clang with respect to the Itanium ABIspecification.&lt;/p>&lt;h2 id="extensions">Extensions&lt;/h2>&lt;p>Just like Clang, Cling can be extended by plugins. The next example demonstratesembedded use of Cling&amp;rsquo;s extension for automatic differentiation,&lt;a href="https://compiler-research.org/clad/">Clad&lt;/a>. Clad transforms the clang&amp;rsquo;s AST toproduce derivatives and gradients of mathematical functions. When creating theCling instance we specify -fplugin and the path to the plugin itself. Then wedefine a target function, pow2, and ask for its derivative with respect to itsfirst argument.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cling/Interpreter/Interpreter.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cling/Interpreter/Value.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">// Derivatives as a service.&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">gimme_pow2dx&lt;/span>(cling&lt;span style="color:#f92672">::&lt;/span>Interpreter &lt;span style="color:#f92672">&amp;amp;&lt;/span>interp) { &lt;span style="color:#75715e">// Definitions of declarations injected also into cling.&lt;/span>&lt;span style="color:#75715e">&lt;/span> interp.declare(&lt;span style="color:#e6db74">&amp;#34;double pow2(double x) { return x*x; }&amp;#34;&lt;/span>); interp.declare(&lt;span style="color:#e6db74">&amp;#34;#include &amp;lt;clad/Differentiator/Differentiator.h&amp;gt;&amp;#34;&lt;/span>); interp.declare(&lt;span style="color:#e6db74">&amp;#34;auto dfdx = clad::differentiate(pow2, 0);&amp;#34;&lt;/span>); cling&lt;span style="color:#f92672">::&lt;/span>Value res; &lt;span style="color:#75715e">// Will hold the evaluation result.&lt;/span>&lt;span style="color:#75715e">&lt;/span> interp.process(&lt;span style="color:#e6db74">&amp;#34;dfdx.getFunctionPtr();&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>res); &lt;span style="color:#66d9ef">using&lt;/span> func_t &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span>(&lt;span style="color:#66d9ef">double&lt;/span>); func_t&lt;span style="color:#f92672">*&lt;/span> pFunc &lt;span style="color:#f92672">=&lt;/span> res.getAs&lt;span style="color:#f92672">&amp;lt;&lt;/span>func_t&lt;span style="color:#f92672">*&amp;gt;&lt;/span>(); printf(&lt;span style="color:#e6db74">&amp;#34;dfdx at 1 = %f&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, pFunc(&lt;span style="color:#ae81ff">1&lt;/span>));}&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span>&lt;span style="color:#f92672">*&lt;/span> argv) { std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&amp;gt;&lt;/span> argvExt(argv, argv&lt;span style="color:#f92672">+&lt;/span>argc); argvExt.push_back(&lt;span style="color:#e6db74">&amp;#34;-fplugin=etc/cling/plugins/lib/clad.dylib&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// Create cling. LLVMDIR is provided as -D during compilation.&lt;/span>&lt;span style="color:#75715e">&lt;/span> cling&lt;span style="color:#f92672">::&lt;/span>Interpreter interp(argvExt.size(), &lt;span style="color:#f92672">&amp;amp;&lt;/span>argvExt[&lt;span style="color:#ae81ff">0&lt;/span>], LLVMDIR); gimme_pow2dx(interp); &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">./clad-demodfdx at 1 &lt;span style="color:#f92672">=&lt;/span> 2.000000&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="conclusion">Conclusion&lt;/h2>&lt;p>We have demonstrated Cling&amp;rsquo;s capabilities for template instantiation on demand;incorporating an interpreter in third-party code; and facilitating interpreterextension. The lazy template instantiation in an embedded interpreter provides aservice which is very suitable for interoperability with C++. Extending such aservice with domain-specific capabilities such as automatic differentiation canbe an key enabler for various science cases and for other broader communities.&lt;/p>&lt;h2 id="acknowledgements">Acknowledgements&lt;/h2>&lt;p>The author would like to thank Sylvain Corlay, Simeon Ehrig, David Lange,Chris Lattner, Javier Lopez Gomez, Wim Lavrijsen, Axel Naumann, Alexander Penev,Xavier Valls Pla, Richard Smith, Martin Vassilev, Ioana Ifrim who contributed tothis post.&lt;/p>&lt;p>You can find out more about our activities at&lt;a href="https://root.cern/cling/">https://root.cern/cling/&lt;/a> and&lt;a href="https://compiler-research.org">https://compiler-research.org&lt;/a>.&lt;/p></description></item><item><title>LLVM meets Code Property Graphs</title><link>https://blog.llvm.org/posts/2021-02-23-llvm-meets-code-property-graphs/</link><pubDate>Tue, 23 Feb 2021 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2021-02-23-llvm-meets-code-property-graphs/</guid><description>&lt;p>The code property graph (CPG) is a data structure designed to mine large codebases for instances of programming patterns via a domain-specific query language. It was first introduced in the proceedings of the IEEE Security and Privacy conference in 2014 (&lt;a href="https://ieeexplore.ieee.org/abstract/document/6956589">publication&lt;/a>, &lt;a href="https://www.sec.cs.tu-bs.de/pubs/2014-ieeesp.pdf">PDF&lt;/a>) in the context of vulnerability discovery in C system code and the Linux kernel in particular. The core ideas of the approach are the following:&lt;/p>&lt;ul>&lt;li>the CPG combines several program representations into one&lt;/li>&lt;li>the CPG is stored in a graph database&lt;/li>&lt;li>the graph database comes with a DSL allowing to traverse and query the CPG&lt;/li>&lt;/ul>&lt;p>Currently, the CPG infrastructure is supported by several tools:&lt;/p>&lt;ul>&lt;li>&lt;a href="https://ocular.shiftleft.io">Ocular&lt;/a> - a proprietary code analysis tool supporting Java, Scala, C#, Go, Python, and JavaScript languages&lt;/li>&lt;li>&lt;a href="https://joern.io">Joern&lt;/a> - an open-source counterpart of Ocular supporting C and C++&lt;/li>&lt;li>&lt;a href="https://plume-oss.github.io/plume-docs/">Plume&lt;/a> - an open-source tool supporting Java Bytecode&lt;/li>&lt;/ul>&lt;p>This article presents &lt;a href="https://www.shiftleft.io">ShiftLeft&lt;/a>&amp;rsquo;s open-source implementation of &lt;a href="https://github.com/ShiftLeftSecurity/llvm2cpg">llvm2cpg&lt;/a> - a standalone tool that brings LLVM Bitcode support to Joern.But before we dive into details, let us say few more words about CPG and Joern.&lt;/p>&lt;h1 id="code-property-graph">Code Property Graph&lt;/h1>&lt;p>The core idea of the CPG is that different classic program representations are merged into a property graph, a single data structure that holds information about the program&amp;rsquo;s syntax, control- and intra-procedural data-flow.&lt;/p>&lt;p>Graphically speaking, the following piece of code:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span>() { &lt;span style="color:#66d9ef">int&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> source(); &lt;span style="color:#66d9ef">if&lt;/span> (x &lt;span style="color:#f92672">&amp;lt;&lt;/span> MAX) { &lt;span style="color:#66d9ef">int&lt;/span> y &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> x; sink(y); }}&lt;/code>&lt;/pre>&lt;/div>&lt;p>combines these three different representations:&lt;/p>&lt;p>&lt;img src="https://blog.llvm.org/img/cpg/different-representations.png" alt="Different program representations">&lt;/p>&lt;p>into a single representation - Code Property Graph:&lt;/p>&lt;p>&lt;img src="https://blog.llvm.org/img/cpg/cpg.png" alt="Code Property Graph">&lt;/p>&lt;h1 id="joern">Joern&lt;/h1>&lt;p>The property graph is stored in a graph database and made accessible via a domain-specific language (DSL) to identify programming patterns based on a DSL for graph traversals. The query language allows a seamless transition between the original code representations, making it possible to combine aspects of the code from different views these representations offer.&lt;/p>&lt;p>One of the primary interfaces to the code property graphs is a tool called &lt;a href="https://joern.io">Joern&lt;/a>. It provides the mentioned DSL and allows to query the CPG to discover specific properties of a program.Here are some examples of the Joern&amp;rsquo;s DSL:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-scala" data-lang="scala">joern&lt;span style="color:#f92672">&amp;gt;&lt;/span> cpg&lt;span style="color:#f92672">.&lt;/span>typeDecl&lt;span style="color:#f92672">.&lt;/span>name&lt;span style="color:#f92672">.&lt;/span>p&lt;span style="color:#a6e22e">List&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">String&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#66d9ef">=&lt;/span> &lt;span style="color:#a6e22e">List&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ANY&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;int&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;void&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>joern&lt;span style="color:#f92672">&amp;gt;&lt;/span> cpg&lt;span style="color:#f92672">.&lt;/span>method&lt;span style="color:#f92672">.&lt;/span>name&lt;span style="color:#f92672">.&lt;/span>p&lt;span style="color:#a6e22e">List&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">String&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#66d9ef">=&lt;/span> &lt;span style="color:#a6e22e">List&lt;/span>&lt;span style="color:#f92672">(&lt;/span> &lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;lt;operator&amp;gt;.multiplication&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;source&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;lt;operator&amp;gt;.lessThan&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;lt;operator&amp;gt;.assignment&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;sink&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>joern&lt;span style="color:#f92672">&amp;gt;&lt;/span> cpg&lt;span style="color:#f92672">.&lt;/span>method&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>ast&lt;span style="color:#f92672">.&lt;/span>isControlStructure&lt;span style="color:#f92672">.&lt;/span>code&lt;span style="color:#f92672">.&lt;/span>p&lt;span style="color:#a6e22e">List&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">String&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#66d9ef">=&lt;/span> &lt;span style="color:#a6e22e">List&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;if (x &amp;lt; MAX)&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>joern&lt;span style="color:#f92672">&amp;gt;&lt;/span> cpg&lt;span style="color:#f92672">.&lt;/span>method&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>ast&lt;span style="color:#f92672">.&lt;/span>isCall&lt;span style="color:#f92672">.&lt;/span>map&lt;span style="color:#f92672">(&lt;/span>c &lt;span style="color:#66d9ef">=&amp;gt;&lt;/span> c&lt;span style="color:#f92672">.&lt;/span>file&lt;span style="color:#f92672">.&lt;/span>name&lt;span style="color:#f92672">.&lt;/span>head &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> c&lt;span style="color:#f92672">.&lt;/span>lineNumber&lt;span style="color:#f92672">.&lt;/span>get &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> c&lt;span style="color:#f92672">.&lt;/span>name &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> c&lt;span style="color:#f92672">.&lt;/span>code&lt;span style="color:#f92672">).&lt;/span>p&lt;span style="color:#a6e22e">List&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">String&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#66d9ef">=&lt;/span> &lt;span style="color:#a6e22e">List&lt;/span>&lt;span style="color:#f92672">(&lt;/span> &lt;span style="color:#e6db74">&amp;#34;main.c:2 &amp;lt;operator&amp;gt;.assignment: x = source()&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;main.c:2 source: source()&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;main.c:3 &amp;lt;operator&amp;gt;.lessThan: x &amp;lt; MAX&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;main.c:4 &amp;lt;operator&amp;gt;.assignment: y = 2 * x&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;main.c:4 &amp;lt;operator&amp;gt;.multiplication: 2 * x&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;main.c:5 sink: sink(y)&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Besides the DSL, Joern comes with a data-flow tracker enabling more sophisticated queries, such as &amp;ldquo;is there a user controlled malloc in the program?&amp;rdquo;&lt;/p>&lt;p>The DSL is much more powerful than in the example, but that is out of scope of this article. Please, refer to the &lt;a href="https://docs.joern.io/home">documentation&lt;/a> to learn more.&lt;/p>&lt;h1 id="llvm-and-cpg">LLVM and CPG&lt;/h1>&lt;p>This part is split into two smaller parts: the first one covers a few implementation details, the second one shows an example of how to use &lt;code>llvm2cpg&lt;/code>.If you are not interested in the implementation - scroll down :)&lt;/p>&lt;h2 id="implementation-details">Implementation Details&lt;/h2>&lt;p>When we decided to add LLVM support for CPG, one of the first questions was: how do we map bitcode representation onto CPG?&lt;/p>&lt;p>We took a simple approach - let&amp;rsquo;s pretend the SSA representation is just a flat source program. In other words, the following bitcode&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="color:#66d9ef">define&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> @sum(&lt;span style="color:#66d9ef">i32&lt;/span> %a, &lt;span style="color:#66d9ef">i32&lt;/span> %a) { %r = &lt;span style="color:#66d9ef">add&lt;/span> &lt;span style="color:#66d9ef">nsw&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> %a, %b &lt;span style="color:#66d9ef">ret&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> %r}&lt;/code>&lt;/pre>&lt;/div>&lt;p>can be seen as a C program:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">i32 &lt;span style="color:#a6e22e">sum&lt;/span>(i32 a, i32 b) { i32 r &lt;span style="color:#f92672">=&lt;/span> add(a, b); &lt;span style="color:#66d9ef">return&lt;/span> r;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>From the high-level perspective, the approach is simple, but there are some tiny details we had to overcome.&lt;/p>&lt;h3 id="instruction-semantics">Instruction semantics&lt;/h3>&lt;p>We can map some of the LLVM instructions back onto the internal CPG operations. Here are some examples:&lt;/p>&lt;ul>&lt;li>&lt;code>add&lt;/code>, &lt;code>fadd&lt;/code> -&amp;gt; &lt;code>&amp;lt;operator&amp;gt;.addition&lt;/code>&lt;/li>&lt;li>&lt;code>bitcast&lt;/code> -&amp;gt; &lt;code>&amp;lt;operator&amp;gt;.cast&lt;/code>&lt;/li>&lt;li>&lt;code>fcmp eq&lt;/code>, &lt;code>icmp eq&lt;/code> -&amp;gt; &lt;code>&amp;lt;operator&amp;gt;.equals&lt;/code>&lt;/li>&lt;li>&lt;code>urem&lt;/code>, &lt;code>srem&lt;/code>, &lt;code>frem&lt;/code> -&amp;gt; &lt;code>&amp;lt;operator&amp;gt;.modulo&lt;/code>&lt;/li>&lt;li>&lt;code>getelementptr&lt;/code> -&amp;gt; a combination of &lt;code>&amp;lt;operator&amp;gt;.pointerShift&lt;/code>, &lt;code>&amp;lt;operator&amp;gt;.indexAccess&lt;/code>, and &lt;code>&amp;lt;operator&amp;gt;.memberAccess&lt;/code> depending on the underlying types of the GEP operand&lt;/li>&lt;/ul>&lt;p>Most of these &lt;code>&amp;lt;operator&amp;gt;.*&lt;/code>s have special semantics, which plays a crucial role in the Joern and Ocular built-in data-flow trackers.&lt;/p>&lt;p>Unfortunately, not every LLVM instruction has a corresponding operator in the CPG. In those cases, we had to fall back to function calls.For example:&lt;/p>&lt;ul>&lt;li>&lt;code>select i1 %cond, i32 %v1, i32 %v3&lt;/code> turns into &lt;code>select(cond, v1, v2)&lt;/code>&lt;/li>&lt;li>&lt;code>atomicrmw add i32* %ptr, i32 1&lt;/code> turns into &lt;code>atomicrmwAdd(ptr, 1)&lt;/code> (same for any other &lt;code>atomicrmw&lt;/code> operator)&lt;/li>&lt;li>&lt;code>fneg float %val&lt;/code> turns into &lt;code>fneg(val)&lt;/code>&lt;/li>&lt;/ul>&lt;p>The only instruction we could not map to the CPG is the &lt;code>phi&lt;/code>: CPG doesn&amp;rsquo;t have a Phi node concept.We had to eliminate &lt;code>phi&lt;/code> instructions using &lt;code>reg2mem&lt;/code> machinery.&lt;/p>&lt;h3 id="redundancy">Redundancy&lt;/h3>&lt;p>For a small C program&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">sum&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> a, &lt;span style="color:#66d9ef">int&lt;/span> b) { &lt;span style="color:#66d9ef">return&lt;/span> a &lt;span style="color:#f92672">+&lt;/span> b;}&lt;/code>&lt;/pre>&lt;/div>&lt;p>Clang emits a lot of redundant instructions by default&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="color:#66d9ef">define&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> @sum(&lt;span style="color:#66d9ef">i32&lt;/span> %0, &lt;span style="color:#66d9ef">i32&lt;/span> %1) { %3 = &lt;span style="color:#66d9ef">alloca&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span>, &lt;span style="color:#66d9ef">align&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> %4 = &lt;span style="color:#66d9ef">alloca&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span>, &lt;span style="color:#66d9ef">align&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#66d9ef">store&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> %0, &lt;span style="color:#66d9ef">i32&lt;/span>* %3, &lt;span style="color:#66d9ef">align&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#66d9ef">store&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> %1, &lt;span style="color:#66d9ef">i32&lt;/span>* %4, &lt;span style="color:#66d9ef">align&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> %5 = &lt;span style="color:#66d9ef">load&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span>, &lt;span style="color:#66d9ef">i32&lt;/span>* %3, &lt;span style="color:#66d9ef">align&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> %6 = &lt;span style="color:#66d9ef">load&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span>, &lt;span style="color:#66d9ef">i32&lt;/span>* %4, &lt;span style="color:#66d9ef">align&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> %7 = &lt;span style="color:#66d9ef">add&lt;/span> &lt;span style="color:#66d9ef">nsw&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> %5, %6 &lt;span style="color:#66d9ef">ret&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> %7}&lt;/code>&lt;/pre>&lt;/div>&lt;p>instead of a more concise version&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="color:#66d9ef">define&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> @sum(&lt;span style="color:#66d9ef">i32&lt;/span> %0, &lt;span style="color:#66d9ef">i32&lt;/span> %1) { %3 = &lt;span style="color:#66d9ef">add&lt;/span> &lt;span style="color:#66d9ef">nsw&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> %1, %0 &lt;span style="color:#66d9ef">ret&lt;/span> &lt;span style="color:#66d9ef">i32&lt;/span> %3}&lt;/code>&lt;/pre>&lt;/div>&lt;p>In general, this is not a problem, but it adds more complexity for the data-flow tracker and needlessly increases the graph&amp;rsquo;s size.One of the considerations was to run optimizations before emitting CPG for the bitcode. Still, in the end, we decided to offload this work to an end-user: if you want fewer instructions, then apply the optimizations manually before emitting the CPG.&lt;/p>&lt;h3 id="type-equality">Type Equality&lt;/h3>&lt;p>The other issue is related to the way LLVM handles types. If two modules in the same context use the same struct with the same name, LLVM renames the other struct to prevent name collisions. For example&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="color:#75715e">; Module1&lt;/span>&lt;span style="color:#75715e">&lt;/span>%struct.Point = &lt;span style="color:#66d9ef">type&lt;/span> { &lt;span style="color:#66d9ef">i32&lt;/span>, &lt;span style="color:#66d9ef">i32&lt;/span> }&lt;/code>&lt;/pre>&lt;/div>&lt;p>and&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="color:#75715e">; Module 2&lt;/span>&lt;span style="color:#75715e">&lt;/span>%struct.Point = &lt;span style="color:#66d9ef">type&lt;/span> { &lt;span style="color:#66d9ef">i32&lt;/span>, &lt;span style="color:#66d9ef">i32&lt;/span> }&lt;/code>&lt;/pre>&lt;/div>&lt;p>when loaded into the same context yield two types&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-llvm" data-lang="llvm">%struct.Point = &lt;span style="color:#66d9ef">type&lt;/span> { &lt;span style="color:#66d9ef">i32&lt;/span>, &lt;span style="color:#66d9ef">i32&lt;/span> }%struct.Point.1 = &lt;span style="color:#66d9ef">type&lt;/span> { &lt;span style="color:#66d9ef">i32&lt;/span>, &lt;span style="color:#66d9ef">i32&lt;/span> }&lt;/code>&lt;/pre>&lt;/div>&lt;p>We wanted to deduplicate these types for a better user experience and only emit &lt;code>Point&lt;/code> in the final graph.&lt;/p>&lt;p>The obvious solution was to consider two structs with &amp;ldquo;similar&amp;rdquo; names and the same layout to be the same.However, we could not rely on the &lt;code>llvm::StructType::isLayoutIdentical&lt;/code> because, despite the name, it produces misleading results.&lt;/p>&lt;p>According to &lt;code>llvm::StructType::isLayoutIdentical&lt;/code> the structs &lt;code>Point&lt;/code> and &lt;code>Pair&lt;/code> have identical layout, but &lt;code>PointWrap&lt;/code> and &lt;code>PairWrap&lt;/code> are not.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="color:#75715e">; these two have identical layout&lt;/span>&lt;span style="color:#75715e">&lt;/span>%Point = &lt;span style="color:#66d9ef">type&lt;/span> { &lt;span style="color:#66d9ef">i32&lt;/span>, &lt;span style="color:#66d9ef">i32&lt;/span> }%Pair = &lt;span style="color:#66d9ef">type&lt;/span> { &lt;span style="color:#66d9ef">i32&lt;/span>, &lt;span style="color:#66d9ef">i32&lt;/span> }&lt;span style="color:#75715e">; these two DO NOT have identical layout&lt;/span>&lt;span style="color:#75715e">&lt;/span>%PointWrap = &lt;span style="color:#66d9ef">type&lt;/span> { %Point }%PairWrap = &lt;span style="color:#66d9ef">type&lt;/span> { %Pair }&lt;/code>&lt;/pre>&lt;/div>&lt;p>This happens because &lt;code>llvm::StructType::isLayoutIdentical&lt;/code> determines equality based on the pointers. That is, if all the struct elements are identical, then the layout identical.It also meant we could not use this approach to compare types from different LLVM contexts.We had to roll out our custom solution based on the &lt;a href="https://lowlevelbits.org/type-equality-in-llvm/">Tree Automata&lt;/a> to solve this issue.&lt;/p>&lt;hr>&lt;p>There are few more details, but the article is getting longer than it needs to be.So let&amp;rsquo;s look at how to use &lt;code>llvm2cpg&lt;/code> with Joern.&lt;/p>&lt;h2 id="example">Example&lt;/h2>&lt;p>Once you have &lt;a href="https://docs.joern.io/installation">Joern&lt;/a> and &lt;a href="http://github.com/ShiftLeftSecurity/llvm2cpg/releases/latest">llvm2cpg&lt;/a> installed the usage is straightforward:&lt;/p>&lt;ol>&lt;li>Convert a program into LLVM Bitcode&lt;/li>&lt;li>Emit CPG&lt;/li>&lt;li>Load the CPG into Joern and start the analysis&lt;/li>&lt;/ol>&lt;p>Here are the steps codified:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat main.cextern int MAX;extern int source&lt;span style="color:#f92672">()&lt;/span>;extern void sink&lt;span style="color:#f92672">(&lt;/span>int&lt;span style="color:#f92672">)&lt;/span>;void foo&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span> int x &lt;span style="color:#f92672">=&lt;/span> source&lt;span style="color:#f92672">()&lt;/span>; &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>x &amp;lt; MAX&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> int y &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> * x; sink&lt;span style="color:#f92672">(&lt;/span>y&lt;span style="color:#f92672">)&lt;/span>; &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#f92672">}&lt;/span>$ clang -S -emit-llvm -g -O1 main.c -o main.ll$ llvm2cpg -output&lt;span style="color:#f92672">=&lt;/span>/tmp/cpg.bin.zip main.ll&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you get the CPG saved at &lt;code>/tmp/cpg.bin.zip&lt;/code> which you can load into Joern and find if there is a flow from the &lt;code>source&lt;/code> function to the &lt;code>sink&lt;/code>:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ joernjoern&amp;gt; importCpg&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/tmp/cpg.bin.zip&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>joern&amp;gt; run.ossdataflowjoern&amp;gt; def source &lt;span style="color:#f92672">=&lt;/span> cpg.call&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;source&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>joern&amp;gt; def sink &lt;span style="color:#f92672">=&lt;/span> cpg.call&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;sink&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>.argumentjoern&amp;gt; sink.reachableByFlows&lt;span style="color:#f92672">(&lt;/span>source&lt;span style="color:#f92672">)&lt;/span>.pList&lt;span style="color:#f92672">[&lt;/span>String&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> List&lt;span style="color:#f92672">(&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;_____________________________________________________&lt;/span>&lt;span style="color:#e6db74">| tracked | lineNumber| method| file |&lt;/span>&lt;span style="color:#e6db74">|====================================================|&lt;/span>&lt;span style="color:#e6db74">| source | 5 | foo | main.c |&lt;/span>&lt;span style="color:#e6db74">| &amp;lt;operator&amp;gt;.assignment | 5 | foo | main.c |&lt;/span>&lt;span style="color:#e6db74">| &amp;lt;operator&amp;gt;.lessThan | 6 | foo | main.c |&lt;/span>&lt;span style="color:#e6db74">| &amp;lt;operator&amp;gt;.shiftLeft | 7 | foo | main.c |&lt;/span>&lt;span style="color:#e6db74">| &amp;lt;operator&amp;gt;.shiftLeft | 7 | foo | main.c |&lt;/span>&lt;span style="color:#e6db74">| &amp;lt;operator&amp;gt;.assignment | 7 | foo | main.c |&lt;/span>&lt;span style="color:#e6db74">| sink | 8 | foo | main.c |&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which indeed exists!&lt;/p>&lt;h1 id="conclusion">Conclusion&lt;/h1>&lt;p>To conclude, let us outline some of the advantages and constraints implied by LLVM Bitcode:&lt;/p>&lt;ul>&lt;li>the &amp;ldquo;surface&amp;rdquo; of the LLVM language is smaller than that of C and C++&lt;/li>&lt;li>many high-level details do not exist at the IR level&lt;/li>&lt;li>the program must be compiled, thus limiting the range of programs that one can analyze with Joern&lt;/li>&lt;/ul>&lt;p>&lt;a href="https://docs.joern.io/llvm2cpg/hello-llvm">Here&lt;/a> you can find more tutorials and information.&lt;/p>&lt;p>If you get any questions, feel free to ping &lt;a href="https://twitter.com/fabsx00">Fabs&lt;/a> or &lt;a href="https://twitter.com/1101_debian">Alex&lt;/a> on Twitter, or better come over to the &lt;a href="https://gitter.im/joern-code-analyzer/community">Joern chat&lt;/a>.&lt;/p></description></item><item><title>Introducing Community.o and the Community.o Summit</title><link>https://blog.llvm.org/posts/2021-02-10-community-dot-o/</link><pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2021-02-10-community-dot-o/</guid><description>&lt;p>&lt;img src="https://blog.llvm.org/img/community-dot-o-logo.png" alt="Community.o">&lt;/p>&lt;p>The LLVM Foundation is excited to announce &lt;a href="https://community-dot-o.llvm.org">Community.o&lt;/a>! This is a new face to the &lt;a href="https://foundation.llvm.org">LLVM Foundation’s&lt;/a> Diversity and Inclusion and Women in Compilers and Tools program. We’ve adopted a name to represent what this program hopes to accomplish which is to build a strong, healthy, and diverse open source community. We believe that this can only be achieved by including people from all backgrounds, genders, and experiences and by ensuring that everyone feels welcome, included, and empowered to contribute.&lt;/p>&lt;p>Why &lt;a href="https://community-dot-o.llvm.org">Community.o?&lt;/a> The name is inspired by the compilation model where object files link together for a final program, much like how folks from different backgrounds come together to make up llvm’s community and shared goal of inclusivity.&lt;/p>&lt;p>While our main focus is on the &lt;a href="https://llvm.org">LLVM community&lt;/a> and the field of compilers and tools, we want to collaborate with other open source communities and provide resources and exchange ideas.&lt;/p>&lt;p>Are you interested in learning more, getting involved with Community.o or joining a specific group such as Women in Compilers and Tools? Please see the &lt;a href="https://community-dot-o.llvm.org">Community.o website&lt;/a>.&lt;/p>&lt;p>&lt;img src="https://blog.llvm.org/img/SummitLogo.png" alt="Community.o Summit">&lt;/p>&lt;p>On March 8-10, we will host our first &lt;a href="https://llvm.swoogo.com/community-o-summit/">Community.o Summit&lt;/a>! This 3-day virtual event is an inclusive space for underrepresented groups and newcomers, anywhere in their career, interested in learning and contributing to compilers, tools, and programming languages. We’ll highlight members from different open source communities making incredible efforts to support a thriving environment. Summit attendees will enjoy interesting talks, panels, workshops, and have ample networking opportunities. Additionally, this summit will be engaging for anyone interested in increasing the diversity within the LLVM community or their related affiliations.&lt;/p>&lt;p>While the event is free, attendance is limited to provide the best experience for attendees and allow for better collaboration and networking. Please see the &lt;a href="https://llvm.swoogo.com/community-o-summit/">Community.o Summit&lt;/a> website for more information and to apply to attend by February 26, 2021.&lt;/p></description></item><item><title>Bringing Stack Clash Protection to Clang / X86 — the Open Source Way</title><link>https://blog.llvm.org/posts/2021-01-05-stack-clash-protection/</link><pubDate>Sat, 30 Jan 2021 10:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2021-01-05-stack-clash-protection/</guid><description>&lt;h1 id="context">Context&lt;/h1>&lt;p>Stack clash is an attack that dates back to 2017, when the Qualys Research Teamreleased an advisory with a &lt;a href="https://blog.qualys.com/vulnerabilities-research/2017/06/19/the-stack-clash">joint blog post&lt;/a>. It basicallyexploits large stack allocation (greater than &lt;code>PAGE_SIZE&lt;/code>) that can lead tostack read/write &lt;em>not&lt;/em> triggering the &lt;a href="https://lkml.org/lkml/2017/6/22/345">stack guard page&lt;/a> allocated by the LinuxKernel.&lt;/p>&lt;p>Shortly after the advisory got released, GCC provided a &lt;a href="https://gcc.gnu.org/legacy-ml/gcc-patches/2017-07/msg00556.html">countermeasure&lt;/a> activated by &lt;code>-fstack-clash-protection&lt;/code> thatbasically consists in splitting large allocation in chunks of &lt;code>PAGE_SIZE&lt;/code>,with a probe in each chunk to trigger the kernel stack guard page.&lt;/p>&lt;p>This has been a major security difference between GCC and Clang since then. Ithas even been identified as a blocker by Fedora to move from GCC to Clang as thecompiler for some projects that already made the move upstream, leading to &lt;a href="https://pagure.io/fesco/issue/2020">extramaintenance&lt;/a> for packagers.&lt;/p>&lt;p>Support for this flag &lt;a href="https://reviews.llvm.org/D68720">landed in Clang in 2020&lt;/a>,only for X86, SystemZ and PowerPC. Its implementation is a result of a fruitfulcollaboration between LLVM, Firefox and Rust developers.&lt;/p>&lt;p>Rust already had a countermeasure implemented in the form of a runtime call toperform the stack probing. With LLVM catching up, using a more lightweightapproach got &lt;a href="https://github.com/rust-lang/rust/pull/77885">investigated in Rust&lt;/a>.&lt;/p>&lt;h1 id="countermeasure-description">Countermeasure Description&lt;/h1>&lt;p>The Clang implementation for X86 is derived from the GCC implementation, with afew distinctions. The core ideas are:&lt;/p>&lt;ol>&lt;li>&lt;p>thanks to X86 calling convention, we get a free probe at each call site,which means that each function starts with a probed stack&lt;/p>&lt;/li>&lt;li>&lt;p>when probing the stack in the function prologue, we don&amp;rsquo;t probe the tail ofthe allocation. Stated otherwise, if the stack size is &lt;code>PAGE_SIZE + PAGE_SIZE/2&lt;/code>,we want to probe only once. This is important to limit the numberof probes: if the stack size is lower than &lt;code>PAGE_SIZE&lt;/code> no probe is needed&lt;/p>&lt;/li>&lt;li>&lt;p>because a signal can interrupt the execution flow any time, at no pointshould we have two stack allocations (lower than &lt;code>PAGE_SIZE&lt;/code>) without a probein between.&lt;/p>&lt;/li>&lt;/ol>&lt;p>The probing strategy for stack allocation varies based on the size of the stackallocation. If it&amp;rsquo;s smaller than &lt;code>PAGE_SIZE&lt;/code>, thanks to (2) no probing isneeding. If it&amp;rsquo;s below a small multiple of &lt;code>PAGE_SIZE&lt;/code>, then the probing loopcan be unrolled. Otherwise a probing loop alternates stack allocation of&lt;code>PAGE_SIZE&lt;/code> bytes and probe, starting with the allocation thanks to (1).&lt;/p>&lt;p>As side effect of (2) is that when performing a dynamic allocation, we need toprobe &lt;em>before&lt;/em> updating the stack, otherwise we got a hole in the protection.This probe cannot be done after the stack update, even with an offset, becauseof (3). Otherwise we end up with a bug as this one found in &lt;a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=97928">GCC&lt;/a>&lt;/p>&lt;p>The following scheme attempts to summarize the allocation and probinginteraction between static and dynamic allocations:&lt;/p>&lt;pre>&lt;code> + ----- &amp;lt;- ------------ &amp;lt;- ------------- &amp;lt;- ------------ + | |[free probe] -&amp;gt; [page alloc] -&amp;gt; [alloc probe] -&amp;gt; [tail alloc] + -&amp;gt; [dyn probe] -&amp;gt; [page alloc] -&amp;gt; [dyn probe] -&amp;gt; [tail alloc] + | | + &amp;lt;- ----------- &amp;lt;- ------------ &amp;lt;- ----------- &amp;lt;- ------------ +&lt;/code>&lt;/pre>&lt;h1 id="validation-with-firefox">Validation with Firefox&lt;/h1>&lt;p>Firefox provides an amazing test bench to evaluate the impact of compilerchanges. Indeed, with more than 12MLOC of C/C++ and 3MLOC of Rust built usingPGO/LTO and &lt;a href="https://blog.llvm.org/2019/09/closing-gap-cross-language-lto-between.html">XLTO&lt;/a>, most of the important cases are covered.&lt;/p>&lt;p>Moreover, Firefox being supported on a large set of operating system andarchitectures, it was a great way to test the Stack Clash protection on variousset of configurations.&lt;/p>&lt;p>The work is detailed in the &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1588710">bug 1588710&lt;/a>.&lt;/p>&lt;h2 id="functional-testing">Functional Testing&lt;/h2>&lt;p>To make sure that Firefox would perform as expected, we leveraged the huge testsuite to verify that the product would still work as expected with this option.&lt;/p>&lt;p>We used the &lt;a href="https://hacks.mozilla.org/2020/07/testing-firefox-more-efficiently-with-machine-learning/">&lt;code>try auto&lt;/code>&lt;/a>, a new command which will run the mostappropriate set of tests for such kind of changes during the development phase.Then, once the patch landed into Mozilla-central (Firefox nightly), the wholetest suite is executed, presenting about 29 days of machine time for about 9000tasks.&lt;/p>&lt;p>Thanks to this infrastructure, we have identified an &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1588710#c40">issue with&lt;code>alloca(0)&lt;/code>&lt;/a> generating buggy machine code.Fortunately, the &lt;a href="https://bugs.llvm.org/show_bug.cgi?id=47657">fix&lt;/a> was already in the trunk version of LLVM.We cherry-picked the fix in our custom Clang build which addressed our issue.&lt;/p>&lt;h2 id="performance-testing">Performance Testing&lt;/h2>&lt;p>Over the years, Mozilla has developed a few tools to evaluate performanceimpact of changes, from micro-benchmark to page loads. These tools have been keyto improve Firefox overall performances but also evaluate the impact of the &lt;a href="https://blog.mozilla.org/nfroyd/2018/05/29/when-implementation-monoculture-right-thing/">moveto Clang&lt;/a> on all platforms done a couple years ago.&lt;/p>&lt;p>The usual procedure to evaluate performances improvements/regressions is to:&lt;/p>&lt;ol>&lt;li>&lt;p>Run two builds with benchmarks. One without the patch, one with it.&lt;/p>&lt;/li>&lt;li>&lt;p>Leverage the tooling to rerun the benchmark (usually 5 to 20 times) to limitthe noise.&lt;/p>&lt;/li>&lt;li>&lt;p>Compare the various benchmark to see if significant regressions can beidentified.&lt;/p>&lt;/li>&lt;/ol>&lt;p>In the context of this project, we run the usual benchmarks sensitive to C++changes and we haven&amp;rsquo;t identified any &lt;a href="https://treeherder.mozilla.org/perfherder/comparesubtest?originalProject=try&amp;amp;newProject=try&amp;amp;newRevision=62108fa48bd15fe01f1a0f1ffab133af9b4207cc&amp;amp;originalSignature=1904137&amp;amp;newSignature=1904137&amp;amp;framework=10&amp;amp;originalRevision=a47c98b909b61035dae2e1e00883f2ade0fef129">regression&lt;/a> in term ofperformances.&lt;/p>&lt;h2 id="current-status">Current status&lt;/h2>&lt;p>Firefox nightly on Linux is now compiled with the stack-clash-option fromJanuary 8th 2021. We have not detected any regressions since it landed.If everything goes well, this change should ship with Firefox 86 (planned formid February 2021).&lt;/p>&lt;h1 id="validation-with-rust">Validation With Rust&lt;/h1>&lt;p>Rust has long supported the callback style of the LLVM &lt;code>probe-stack&lt;/code> attribute,using the function &lt;code>__rust_probestack&lt;/code> defined in its own compiler builtinslibrary. In Rust&amp;rsquo;s spirit of safety, this attribute is added to &lt;em>all&lt;/em> functions,letting LLVM sort out which actually need probing. However, forcing such a callinto every function with a large stack frame is not ideal for performance,especially for those cases that could use just a few unrolled probes inline.Furthermore, Rust only has this callback implemented for its Tier 1 (mostsupported) targets, namely i686 and x86_64, leaving other architectures withoutprotection so far. Therefore, letting LLVM generate inline stack probes isbeneficial both for the performance of avoiding a call and for the increasedarchitecture support.&lt;/p>&lt;p>Since the Rust compiler is written in Rust itself, with stack probing enabled bydefault, it makes a great functional test for any new code generation feature.The compiler is bootstrapped in stages, first building with a prior version,then rebuilding with the result of that first stage. Codegen issues are oftenrevealed if the compiler crashes during that rebuild, and experiments withinline stack probes were no different, leading to fixes in&lt;a href="https://reviews.llvm.org/D82867">D82867&lt;/a> and&lt;a href="https://reviews.llvm.org/D90216">D90216&lt;/a>. Both of these were simple errors thatwere not apparent in existing FileCheck tests, showing the importance ofactually executing generated code.&lt;/p>&lt;p>An &lt;a href="https://github.com/rust-lang/rust/issues/70143">issue&lt;/a> also led to the realization that there was a moregeneral bug impacting both GCC and LLVM implementation of&lt;code>-fstack-clash-protector&lt;/code>, leading to a new patch set on the LLVM side.Essentially, the observed behavior is the following:&lt;/p>&lt;p>Alignment requirements behave similarly to allocation with respect to the stack:they (may) make it grow. For instance the stack allocation for an &lt;code>char foo[4096] __attribute__((aligned(2048)));&lt;/code> is done through:&lt;/p>&lt;pre>&lt;code>and rsp, -2048sub rsp, 6024&lt;/code>&lt;/pre>&lt;p>Both &lt;code>and&lt;/code> and the &lt;code>sub&lt;/code> actually update the stack! To take that effect intoaccount, the LLVM patch considers the &lt;code>and rsp, -2048&lt;/code> as a &lt;code>sub rsp, 2048&lt;/code>when computing the probing distance, which means considering the worstcase scenario.&lt;/p>&lt;p>For future work on the Rust side, inline stack probes will replace&lt;code>__rust_probestack&lt;/code> on i686 and x86_64 soon in &lt;a href="https://github.com/rust-lang/rust/pull/77885">Rustpr77885&lt;/a>, and that will include&lt;a href="https://perf.rust-lang.org/">perf results&lt;/a> to monitor the effect. After that,additional architectures can be functionally tested and enabled for inline stackprobes as well, increasing the reach of Rust&amp;rsquo;s memory safety.&lt;/p>&lt;h1 id="validation-with-a-binary-tracer">Validation with a Binary Tracer&lt;/h1>&lt;p>None of the above validation validates the security aspect of the protection. Tohave more confidence on the actual probing scheme implementation, we implementeda binary tracer based on the (awesome) &lt;a href="https://github.com/QBDI/QBDI">QBDI&lt;/a>Dynamic Binary Instrumentation framework. This Proof Of Concept (POC) isavailable on GitHub:&lt;a href="https://github.com/serge-sans-paille/stack-clash-tracer">stack-clash-tracer&lt;/a>&lt;/p>&lt;p>This tool instruments all stack allocation and memory access of a runningbinary, logs them and checks that no stack allocation is greater than&lt;code>PAGE_SIZE&lt;/code> and that we get an actual probing between two allocations.&lt;/p>&lt;p>Here is a sample session that showcases large stack allocation issues:&lt;/p>&lt;pre>&lt;code>$ cat main.c#include &amp;lt;alloca.h&amp;gt;#include &amp;lt;string.h&amp;gt;int main(int argc, char**argv) { char buffer[5000]; strcpy(buffer, argv[0]); char* dynbuffer = alloca(argc * 1000); strcpy(dynbuffer, argv[0]); return buffer[argc] + dynbuffer[argc];}$ gcc main.c -o main$ LD_PRELOAD=./libstack_clash_tracer.so ./main 1[sct][error] stack allocation is too big (5024)$ LD_PRELOAD=./libstack_clash_tracer.so ./main 1 2 3 4 5[sct][error] stack allocation is too big (5024)[sct][error] stack allocation is too big (6016)&lt;/code>&lt;/pre>&lt;p>The same code, compiled with &lt;code>-fstack-clash-protection&lt;/code>, is safer (apart fromthe stupid use of &lt;code>strcpy&lt;/code>, that is)&lt;/p>&lt;pre>&lt;code>$ gcc main.c -fstack-clash-protection -o main$ LD_PRELOAD=./libstack_clash_tracer.so ./main 1$ LD_PRELOAD=./libstack_clash_tracer.so ./main 1 2 3 4 5&lt;/code>&lt;/pre>&lt;p>Small bonus of this compiler-independent approach: we can verify both GCC andClang implementation &lt;code>:-)&lt;/code>&lt;/p>&lt;pre>&lt;code>$ clang main.c -fstack-clash-protection -o main$ LD_PRELOAD=./libstack_clash_tracer.so ./main 1$ LD_PRELOAD=./libstack_clash_tracer.so ./main 1 2 3 4 5&lt;/code>&lt;/pre>&lt;p>To come back on the Firefox test case, before we landed the change, we couldsee:&lt;/p>&lt;pre>&lt;code>$ LD_PRELOAD=./libstack_clash_tracer.so firefox-bin[sct][error] stack allocation is too big (4168)&lt;/code>&lt;/pre>&lt;p>Once Firefox nightly shipped with stack clash protection, this warningdisappears.&lt;/p>&lt;h1 id="conclusion">Conclusion&lt;/h1>&lt;p>Aside from the technical aspects of the countermeasure, it is interesting tonote that its Clang implementation was derived from the GCC implementation, butled to an issue being reported in the GCC codebase. The Clang-generated code gotvalidated by Firefox People, tested by Rust people who reported several bugs,some impacting both Clang and GCC implementation, the circle is complete!&lt;/p>&lt;h1 id="references">References&lt;/h1></description></item><item><title>Interactive C++ for Data Science</title><link>https://blog.llvm.org/posts/2020-12-21-interactive-cpp-for-data-science/</link><pubDate>Sun, 20 Dec 2020 10:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2020-12-21-interactive-cpp-for-data-science/</guid><description>&lt;h1 id="interactive-c-for-data-science">Interactive C++ for Data Science&lt;/h1>&lt;p>In our previous blog post &lt;a href="https://blog.llvm.org/posts/2020-11-30-interactive-cpp-with-cling/">&amp;ldquo;Interactive C++ with Cling&amp;rdquo;&lt;/a>we mentioned that exploratory programming is an effective way to reduce thecomplexity of the problem. This post will discuss some applications of Clingdeveloped to support data science researchers. In particular, interactivelyprobing data and interfaces makes complex libraries and complex data moreaccessible to users. We aim to demonstrate some of Cling’s features at scale;Cling’s eval-style programming support; projects related to Cling; and showinteractive C++/CUDA.&lt;/p>&lt;h2 id="eval-style-programming">Eval-style programming&lt;/h2>&lt;p>A Cling instance can access itself through its runtime. The example creates a&lt;code>cling::Value&lt;/code> to store the execution result of the incremented variable &lt;code>i&lt;/code>.That mechanism can be used further to support dynamic scopes extending the namelookup at runtime.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">[cling]&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>include &lt;span style="color:#f92672">&amp;lt;&lt;/span>cling&lt;span style="color:#f92672">/&lt;/span>Interpreter&lt;span style="color:#f92672">/&lt;/span>Value.h&lt;span style="color:#f92672">&amp;gt;&lt;/span>[cling]&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>include &lt;span style="color:#f92672">&amp;lt;&lt;/span>cling&lt;span style="color:#f92672">/&lt;/span>Interpreter&lt;span style="color:#f92672">/&lt;/span>Interpreter.h&lt;span style="color:#f92672">&amp;gt;&lt;/span>[cling]&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;[cling]&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> cling&lt;span style="color:#f92672">::&lt;/span>Value V;[cling]&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> gCling&lt;span style="color:#f92672">-&amp;gt;&lt;/span>evaluate(&lt;span style="color:#e6db74">&amp;#34;++i&amp;#34;&lt;/span>, V);[cling]&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> i(&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#ae81ff">2&lt;/span>[cling]&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> V(cling&lt;span style="color:#f92672">::&lt;/span>Value &lt;span style="color:#f92672">&amp;amp;&lt;/span>) boxes [(&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#ae81ff">2&lt;/span>]&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>V&lt;/code> &amp;ldquo;boxes&amp;rdquo; the expression result providing extended lifetime if necessary.The &lt;code>cling::Value&lt;/code> can be used to communicate expression values from theinterpreter to compiled code.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">[cling]&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#f92672">++&lt;/span>i(&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#ae81ff">3&lt;/span>[cling]&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> V(cling&lt;span style="color:#f92672">::&lt;/span>Value &lt;span style="color:#f92672">&amp;amp;&lt;/span>) boxes [(&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#ae81ff">2&lt;/span>]&lt;/code>&lt;/pre>&lt;/div>&lt;p>This mechanism introduces a delayed until runtime evaluation which enables somefeatures increasing the dynamic look and feel of the C++ language.&lt;/p>&lt;h2 id="the-root-data-analysis-package">The ROOT data analysis package&lt;/h2>&lt;p>The main tool for storage, research and visualization of scientific data in thefield of high energy physics (HEP) is the specialized software package &lt;a href="https://root.cern">ROOT&lt;/a>.ROOT is a set of interconnected components that assist scientists from datastorage and research to their visualization when published in a scientificpaper. ROOT has played a significant role in scientific discoveries such asgravitational waves, the great cavity in the Pyramid of Cheops, the discovery ofthe Higgs boson by the Large Hadron Collider. For the last 5 years, Cling hashelped to analyze 1 EB physical data, serving as a basis for over 1000scientific publications, and supports software run across a distributed millionCPU core computing facility.&lt;/p>&lt;p>ROOT uses Cling as a reflection information service for data serialization. TheC++ objects are stored in a binary format, vertically. The content of a loadeddata file is made available to the users and C++ objects become a first classcitizen.&lt;/p>&lt;p>A central component of ROOT enabled by Cling is eval-style programming. We usethis in HEP to make it easy to inspect and use C++ objects stored by ROOT.Cling enables ROOT to inject available object names into the name lookup whena file is opened:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">[root] ntuple&lt;span style="color:#f92672">-&amp;gt;&lt;/span>GetTitle()error: use of undeclared identifier &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>ntuple&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>[root] TFile&lt;span style="color:#f92672">::&lt;/span>Open(&lt;span style="color:#e6db74">&amp;#34;tutorials/hsimple.root&amp;#34;&lt;/span>); ntuple&lt;span style="color:#f92672">-&amp;gt;&lt;/span>GetTitle() &lt;span style="color:#75715e">// #1&lt;/span>&lt;span style="color:#75715e">&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Demo ntuple&amp;#34;&lt;/span>[root] gFile&lt;span style="color:#f92672">-&amp;gt;&lt;/span>ls();TFile&lt;span style="color:#f92672">**&lt;/span> tutorials&lt;span style="color:#f92672">/&lt;/span>hsimple.root Demo ROOT file with histograms TFile&lt;span style="color:#f92672">*&lt;/span> tutorials&lt;span style="color:#f92672">/&lt;/span>hsimple.root Demo ROOT file with histograms OBJ: TH1F hpx This is the px distribution : &lt;span style="color:#ae81ff">0&lt;/span> at: &lt;span style="color:#ae81ff">0x7fadbb84e390&lt;/span> OBJ: TNtuple ntuple Demo ntuple : &lt;span style="color:#ae81ff">0&lt;/span> at: &lt;span style="color:#ae81ff">0x7fadbb93a890&lt;/span> KEY: TH1F hpx;&lt;span style="color:#ae81ff">1&lt;/span> This is the px distribution [...] KEY: TNtuple ntuple;&lt;span style="color:#ae81ff">1&lt;/span> Demo ntuple[root] hpx&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Draw()&lt;/code>&lt;/pre>&lt;/div>&lt;p>The ROOT framework injects additional names to the name lookup on two stages.First, it builds an invalid AST by marking the occurrence of ntuple (#1), thenit is transformed into&lt;code>gCling-&amp;gt;EvaluateT&amp;lt;/*return type*/void&amp;gt;(&amp;quot;ntuple-&amp;gt;GetTitle()&amp;quot;, /*context*/);&lt;/code>On the next stage, at runtime, ROOT opens the file, reads its preambule andinjects the names via the external name lookup facility in clang. Thetransformation becomes more complex if &lt;code>ntuple-&amp;gt;GetTitle()&lt;/code> takes arguments.&lt;/p>&lt;div style="max-width:600px; margin:0 auto;"> &lt;img src="https://blog.llvm.org/img/cling-2020-12-21-figure1.png">&lt;br /> &lt;!--- ![alt_text](/img/cling-2020-12-21-figure1.png "image_tooltip") ---> &lt;p align="center"> Figure 1. Interactive plot of the &lt;i>px&lt;/i> distribution read from a root file. &lt;/p>&lt;/div>&lt;h2 id="c-in-notebooks">C++ in Notebooks&lt;/h2>&lt;p>&lt;em>Section Author:&lt;/em> &lt;strong>Sylvain Corlay, QuantStack&lt;/strong>&lt;/p>&lt;p>The &lt;a href="https://jupyter-notebook.readthedocs.io/en/stable/notebook.html">Jupyter Notebook&lt;/a>technology allows users to create and share documents that contain live code,equations, visualizations and narrative text. It enables data scientists toeasily exchange ideas or collaborate by sharing their analyses in astraight-forward and reproducible way. Language agnosticism is a key designprinciple for the Jupyter project, and the Jupyter frontend communicates withthe kernel (the part of the infrastructure that runs the code) through awell-specified protocol. Kernels have been developed for dozens of programminglanguages, such as R, Julia, Python, Fortran (through the LLVM-based LFortranproject).&lt;/p>&lt;p>Jupyter&amp;rsquo;s official C++ kernel relies on &lt;a href="https://github.com/jupyter-xeus/xeus">Xeus&lt;/a>,a C++ implementation of the kernel protocol, and Cling. An advantage of using areference implementation for the kernel protocol is that a lot of features comefor free, such as rich mime type display, interactive widgets, auto-complete,and much more.&lt;/p>&lt;p>Rich mime-type rendering for user-defined types can be specified by providingan overload of &lt;code>mime_bundle_repr&lt;/code> for the said type, which is picked up byargument dependent lookup.&lt;/p>&lt;div style="max-width:600px; margin:0 auto;"> &lt;img src="https://blog.llvm.org/img/cling-2020-12-21-figure2.png">&lt;br /> &lt;!--- ![alt_text](/img/cling-2020-12-21-figure2.png "image_tooltip") ---> &lt;p align="center"> Figure 2. Inline rendering of images in JupyterLab for a user-defined image type. &lt;/p>&lt;/div>&lt;p>Possibilities with rich mime type rendering are endless, such as rich display ofdataframes with HTML tables, or even mime types that are rendered in thefront-end with JavaScript extensions.&lt;/p>&lt;p>An advanced example making use of rich rendering with Mathjax is the SymEnginesymbolic computing library.&lt;/p>&lt;div style="max-width:600px; margin:0 auto;"> &lt;img src="https://blog.llvm.org/img/cling-2020-12-21-figure3.png">&lt;br /> &lt;!--- ![alt_text](/img/cling-2020-12-21-figure3.png "image_tooltip") ---> &lt;p align="center"> Figure 3. Using rich mime type rendering in Jupyter with the Symengine package. &lt;/p>&lt;/div>&lt;p>Xeus-cling comes along with an implementation of the Jupyter widgets protocolwhich enables bidirectional communication with the backend.&lt;/p>&lt;div style="max-width:600px; margin:0 auto;"> &lt;img src="https://blog.llvm.org/img/cling-2020-12-21-figure4.gif">&lt;br /> &lt;!--- ![alt_text](/img/cling-2020-12-21-figure4.gif "image_tooltip") ---> &lt;p align="center"> Figure 4. Interactive widgets in the JupyterLab with the C++ kernel. &lt;/p>&lt;/div>&lt;p>More complex widget libraries have been enabled through this framework like&lt;a href="https://github.com/jupyter-xeus/xleaflet">xleaflet&lt;/a>.&lt;/p>&lt;div style="max-width:600px; margin:0 auto;"> &lt;img src="https://blog.llvm.org/img/cling-2020-12-21-figure5.gif">&lt;br /> &lt;!--- ![alt_text](/img/cling-2020-12-21-figure5.gif "image_tooltip") ---> &lt;p align="center"> Figure 5. Interactive GIS in C++ in JupyterLab with xleaflet. &lt;/p>&lt;/div>&lt;p>Other features include rich HTML help for the standard library and third-partypackages:&lt;/p>&lt;div style="max-width:600px; margin:0 auto;"> &lt;img src="https://blog.llvm.org/img/cling-2020-12-21-figure6.png">&lt;br /> &lt;!--- ![alt_text](/img/cling-2020-12-21-figure6.png "image_tooltip") ---> &lt;p align="center"> Figure 6. Accessing cppreference for std::vector from JupyterLab by typing `?std::vector`. &lt;/p>&lt;/div>&lt;p>The Xeus and Xeus-cling kernels were recently incorporated as subprojects toJupyter, and are governed by its code of conduct and general governance.&lt;/p>&lt;p>Planned future developments for the xeus-cling kernel include: adding supportfor the Jupyter console interface, through an implementation of the Jupyter&lt;code>is_complete&lt;/code> message, currently lacking; adding support for cling&amp;ldquo;dot commands&amp;rdquo; as Jupyter magics; and supporting the new debugger protocol thatwas recently added to the Jupyter kernel protocol, which will enable the use ofthe JupyterLab visual debugger with the C++ kernel.&lt;/p>&lt;p>Another tool that brings interactive plotting features to xeus-cling is xvega,which is at an early stage of development, produces vega charts that can bedisplayed in the notebook.&lt;/p>&lt;div style="max-width:600px; margin:0 auto;"> &lt;img src="https://blog.llvm.org/img/cling-2020-12-21-figure7.png">&lt;br /> &lt;!--- ![alt_text](/img/cling-2020-12-21-figure7.png "image_tooltip") ---> &lt;p align="center"> Figure 7. The xvega plotting library in the xeus-cling kernel. &lt;/p>&lt;/div>&lt;h2 id="cuda-c">CUDA C++&lt;/h2>&lt;p>&lt;em>Section Author:&lt;/em> &lt;strong>Simeon Ehrig, HZDR&lt;/strong>&lt;/p>&lt;p>The Cling CUDA extension brings the workflows of interactive C++ to GPUs withoutlosing performance and compatibility to existing software. To execute CUDA C++Code, Cling activates an extension in the compiler frontend to understand theCUDA C++ dialect and creates a second compiler instance that compiles the codefor the GPU.&lt;/p>&lt;div style="max-width:600px; margin:0 auto;"> &lt;img src="https://blog.llvm.org/img/cling-2020-12-21-figure8.png">&lt;br /> &lt;!--- ![alt_text](/img/cling-2020-12-21-figure8.png "image_tooltip") ---> &lt;p align="center"> Figure 8. CUDA/C++ information flow in Cling. &lt;/p>&lt;/div>&lt;p>Like the normal C++ mode, the CUDA C++ mode uses AST transformation to enableinteractive CUDA C++ or special features as the Cling print system. In contrastto the normal Cling compiler pipeline used for the host code, the devicecompiler pipeline does not use all the transformations of the host pipeline.Therefore, the device pipeline has some special transformation.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">[cling] &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>include &lt;span style="color:#f92672">&amp;lt;&lt;/span>iostream&lt;span style="color:#f92672">&amp;gt;&lt;/span>[cling] &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>include &lt;span style="color:#f92672">&amp;lt;&lt;/span>cublas_v2.h&lt;span style="color:#f92672">&amp;gt;&lt;/span>[cling] &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>pragma cling(load &lt;span style="color:#e6db74">&amp;#34;libcublas.so&amp;#34;&lt;/span>) &lt;span style="color:#75715e">// link a shared library&lt;/span>&lt;span style="color:#75715e">// set parameters&lt;/span>&lt;span style="color:#75715e">// allocate memory&lt;/span>&lt;span style="color:#75715e">// ...&lt;/span>&lt;span style="color:#75715e">&lt;/span>[cling] __global__ &lt;span style="color:#66d9ef">void&lt;/span> init(&lt;span style="color:#66d9ef">float&lt;/span> &lt;span style="color:#f92672">*&lt;/span>matrix, &lt;span style="color:#66d9ef">int&lt;/span> size){[cling] &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> blockIdx.x &lt;span style="color:#f92672">*&lt;/span> blockDim.x &lt;span style="color:#f92672">+&lt;/span> threadIdx.x;[cling] &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (x &lt;span style="color:#f92672">&amp;lt;&lt;/span> size)[cling] &lt;span style="color:#f92672">?&lt;/span> matrix[x] &lt;span style="color:#f92672">=&lt;/span> x;[cling] &lt;span style="color:#f92672">?&lt;/span> }[cling][cling] &lt;span style="color:#75715e">// launching a function direct in the global space&lt;/span>&lt;span style="color:#75715e">&lt;/span>[cling] init&lt;span style="color:#f92672">&amp;lt;&amp;lt;&amp;lt;&lt;/span>blocks, threads&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span>(d_A, dim&lt;span style="color:#f92672">*&lt;/span>dim);[cling] init&lt;span style="color:#f92672">&amp;lt;&amp;lt;&amp;lt;&lt;/span>blocks, threads&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span>(d_B, dim&lt;span style="color:#f92672">*&lt;/span>dim);[cling][cling] cublasSgemm(handle, CUBLAS_OP_N, CUBLAS_OP_N, dim, dim, dim, &lt;span style="color:#f92672">&amp;amp;&lt;/span>alpha, d_A, dim, d_B, dim, &lt;span style="color:#f92672">&amp;amp;&lt;/span>beta, d_C, dim);[cling] cublasGetVector(dim&lt;span style="color:#f92672">*&lt;/span>dim, &lt;span style="color:#66d9ef">sizeof&lt;/span>(h_C[&lt;span style="color:#ae81ff">0&lt;/span>]), d_C, &lt;span style="color:#ae81ff">1&lt;/span>, h_C, &lt;span style="color:#ae81ff">1&lt;/span>);[cling] cudaGetLastError()(cudaError_t) (cudaError&lt;span style="color:#f92672">::&lt;/span>cudaSuccess) &lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#ae81ff">0&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Like the normal C++ mode, the CUDA mode can be used in a Jupyter Notebook.&lt;/p>&lt;div style="max-width:600px; margin:0 auto;"> &lt;img src="https://blog.llvm.org/img/cling-2020-12-21-figure9.gif">&lt;br /> &lt;!--- ![alt_text](/img/cling-2020-12-21-figure9.gif "image_tooltip") ---> &lt;p align="center"> Figure 9. CUDA/C++ information flow in Cling. &lt;/p>&lt;/div>&lt;p>A special property of Cling in CUDA mode is that the Cling application becomes anormal CUDA application at the time of the first CUDA API call. This enables theCUDA SDK with Cling. For example, you can use the CUDA profiler&lt;code>nvprof ./cling -xcuda&lt;/code> to profile your interactive application.&lt;a href="https://hub.docker.com/r/sehrig/cling">This docker&lt;/a> container can be used toexperiment with Cling&amp;rsquo;s CUDA mode.&lt;/p>&lt;p>Planned future developments for the CUDA mode include: Supporting of thecomplete current CUDA API; Redefining CUDA Kernels; Supporting other GPU SDK&amp;rsquo;slike HIP (AMD) and SYCL (Intel).&lt;/p>&lt;h2 id="conclusion">Conclusion&lt;/h2>&lt;p>We see the use of Interactive C++ as an important tool to develop forresearchers in the data science community. Cling has enabled ROOT to be the&amp;ldquo;go to&amp;rdquo; data analysis tool in the field of High Energy Physics for everythingfrom efficient I/O to plotting and fitting. The interactive CUDA backend allowseasy integration of research workflows and simpler communication between C++ andCUDA. As Jupyter Notebooks have become a standard way for data analysts toexplore ideas, Xeus-cling ensures that great interactive C++ ingredients areavailable in every C++ notebook.&lt;/p>&lt;p>In the next blog post we will focus on Cling enabling features beyondinteractive C++, and in particular language interoperability.&lt;/p>&lt;h2 id="acknowledgements">Acknowledgements&lt;/h2>&lt;p>The author would like to thank Sylvain Corlay, Simeon Ehrig, David Lange,Chris Lattner, Javier Lopez Gomez, Wim Lavrijsen, Axel Naumann, Alexander Penev,Xavier Valls Pla, Richard Smith, Martin Vassilev, who contributed to this post.&lt;/p>&lt;p>You can find out more about our activities at&lt;a href="https://root.cern/cling/">https://root.cern/cling/&lt;/a> and&lt;a href="https://compiler-research.org">https://compiler-research.org&lt;/a>.&lt;/p></description></item><item><title>Interactive C++ with Cling</title><link>https://blog.llvm.org/posts/2020-11-30-interactive-cpp-with-cling/</link><pubDate>Mon, 30 Nov 2020 10:00:00 +0000</pubDate><guid>https://blog.llvm.org/posts/2020-11-30-interactive-cpp-with-cling/</guid><description>&lt;h1 id="interactive-c-with-cling">Interactive C++ with Cling&lt;/h1>&lt;p>The C++ programming language is used for many numerically intensive scientificapplications. A combination of performance and solid backward compatibility hasled to its use for many research software codes over the past 20 years. Despiteits power, C++ is often seen as difficult to learn and inconsistent with rapidapplication development. Exploration and prototyping is slowed down by the longedit-compile-run cycles during development.&lt;/p>&lt;p>&lt;a href="https://github.com/root-project/cling/">Cling&lt;/a> has emerged as a recognizedcapability that enables interactivity, dynamic interoperability and rapidprototyping capabilities to C++ developers. Cling supports the full C++ featureset including the use of templates, lambdas, and virtual inheritance. Cling isan interactive C++ interpreter, built on top of the Clang and &lt;a href="llvm.org">LLVM&lt;/a>compiler infrastructure. The interpreter enables interactive exploration andmakes the C++ language more welcoming for research.&lt;/p>&lt;p>The main tool for storage, research and visualization of scientific data in thefield of high energy physics (HEP) is the specialized software package&lt;a href="root.cern/">ROOT&lt;/a>. ROOT is a set of interconnected components that assistscientists from data storage and research to their visualization when publishedin a scientific paper. ROOT has played a significant role in scientificdiscoveries such as gravitational waves, the great cavity in the Pyramid ofCheops, the discovery of the Higgs boson by the Large Hadron Collider. For thelast 5 years, Cling has helped to analyze 1 EB physical data, serving as a basisfor over 1000 scientific publications, and supports software run across adistributed million CPU core computing facility.&lt;/p>&lt;p>Recently we started a project aiming to leverage our experience in interactiveC++, just-in-time compilation technology (JIT), dynamic optimizations, and largescale software development to greatly reduce the impedance mismatch between C++and Python. We will generalize Cling to offer a robust, sustainable andomnidisciplinary solution for C++ language interoperability.The scope of ourobjectives is to:&lt;/p>&lt;ul>&lt;li>advance the interpretative technology to provide a state-of-the-art C++execution environment,&lt;/li>&lt;li>enable functionality which can provide native-like, dynamic runtimeinteroperability between C++ and Python (and eventually other languages suchas Julia and Swift)&lt;/li>&lt;li>allow seamless utilization of heterogeneous hardware (such as hardwareaccelerators)&lt;/li>&lt;/ul>&lt;p>Project results will be integrated into the widely used tools LLVM, Clang andCling. The outcome of the proposed work is a platform which provides a C++compiler as a service (CaaS) for both rapid application development andcomputational performance.&lt;/p>&lt;p>The rest of this post intends to demonstrate the design and several features ofCling. Want to follow along? You can get cling from conda&lt;/p>&lt;pre tabindex="0">&lt;code>conda config --add channels conda-forgeconda install clingconda install llvmdev=5.0.0&lt;/code>&lt;/pre>&lt;p>or from docker-hub if you don&amp;rsquo;t already use conda:&lt;/p>&lt;pre tabindex="0">&lt;code>docker pull compilerresearch/clingdocker run -t -i compilerresearch/cling&lt;/code>&lt;/pre>&lt;p>Either way, type &amp;ldquo;cling&amp;rdquo; to start its interactive shell:&lt;/p>&lt;pre tabindex="0">&lt;code>cling****************** CLING ******************* Type C++ code and press enter to run it ** Type .q to exit ********************************************[cling]$[cling]$ #include &amp;quot;cling/Interpreter/Interpreter.h&amp;quot;[cling]$ gCling-&amp;gt;allowRedefinition(false)&lt;/code>&lt;/pre>&lt;p>We will explain the purpose for these commands, and other alternatives for usingcling in further parts of this post.&lt;/p>&lt;h1 id="interpreting-c">Interpreting C++&lt;/h1>&lt;p>Exploratory programming (or Rapid Application Development) is an effective wayto gain understanding of the requirements for a project; to reduce thecomplexity of the problem; and to provide an early validation of the systemdesign and implementation. In particular, interactively probing data andinterfaces makes complex libraries and complex data more accessible to users.It is important in data science, computational science and debugging. Itsignificantly reduces the time consumed by edit-run cycles during development.In practice, only few programming languages offer both a compiler and aninterpreter translating them into machine code, although whether a language isto be interpreted or compiled is a property of the implementation.&lt;/p>&lt;p>Languages which enable exploratory programming tend to have interpreters whichshorten the compile-link cycle; this generally has a noticeable cost inperformance. Language developers who acknowledge the use case of exploratoryprogramming may also put syntactic sugar, but that is mostly for convenience andterseness. The performance penalty is largely mitigated by using just-in-time(JIT) or ahead-of-time (AOT) compilation technology.&lt;/p>&lt;p>For the sake of this post series, interpreting C++ means enabling exploratoryprogramming for C++ while mitigating the performance cost with JIT compilation.Figure 1 shows an illustrative example of exploratory programming. It becomestrivial to orient the shape, choose size and color or compare to previoussettings. The invisible compile-link cycle aids interactive use which allowssome qualitatively different approaches to program development and enhancedproductivity.&lt;/p>&lt;div style="max-width:1095px; margin:0 auto;"> &lt;img src="https://blog.llvm.org/img/cling-2020-11-30-figure1.gif" style="max-width:90%;">&lt;br /> &lt;!--- ![alt_text](/img/cling-2020-11-30-figure1.gif "image_tooltip") ---> &lt;p align="center"> Figure 1. Interactive OpenGL Demo, adapted from [here](https://www.youtube.com/watch?v=eoIuqLNvzFs). &lt;/p>&lt;/div>&lt;h2 id="design-principles">Design principles&lt;/h2>&lt;p>Some of the design goals of cling include:&lt;/p>&lt;ul>&lt;li>Do not pay for what you do not use &amp;ndash; prioritize performance of processingcorrect code. For example, in order to provide error recovery do not penalizeusers typing syntactically and semantically correct C++; and interactive C++transformations are only done when necessary and can be disabled.&lt;/li>&lt;li>Reuse Clang &amp;amp; LLVM at (almost) any cost &amp;ndash; do not reinvent the wheel. If afeature is not available, then try finding a minimalistic way to implement itand propose it for a review to the LLVM community. Otherwise find the minimalpatch, even at the cost of misusing API, which satisfies the requirements.&lt;/li>&lt;li>Continuous feature delivery &amp;ndash; focus on a minimal feature, its integrationin the main use-case (ROOT), deployment in production, repeat.&lt;/li>&lt;li>Library design &amp;ndash; allow Cling to be used as a library from third partyframeworks.&lt;/li>&lt;li>Learn and evolve &amp;ndash; experiment with user experience. There is no formalspecification or consensus on overall user experience. Apply lessons learnedfrom the legacy from CINT.&lt;/li>&lt;/ul>&lt;h2 id="architecture">Architecture&lt;/h2>&lt;p>Cling accepts partial input and ensures that the compiler process keeps runningto act on code as it comes in. It includes an API providing access to theproperties of recently compiled chunks of code. Cling can apply customtransformations to each chunk before execution. Cling orchestrates the existingLLVM and Clang infrastructure following a data flow described in Figure 2.&lt;/p>&lt;div style="max-width:600px; margin:0 auto;"> &lt;img src="https://blog.llvm.org/img/cling-2020-11-30-figure2.svg">&lt;br /> &lt;!--- ![alt_text](/img/cling-2020-11-30-figure2.svg "image_tooltip") --->&lt;p align="center">Figure 2. Information flow in Cling&lt;/p>&lt;/div>In short:&lt;ol>&lt;li>The tool controls the input infrastructure by interactive prompt or by aninterface allowing the incremental processing of input (➀).&lt;/li>&lt;li>It sends the input to the underlying clang library for compilation (➁).&lt;/li>&lt;li>Clang compiles the input, possibly wrapped into a function, into an AST (➂).&lt;/li>&lt;li>When necessary the AST is further transformed in order to attach specificbehavior (➃).&lt;/li>&lt;/ol>&lt;p>For example, reporting execution results, or other interpreter-related features.Once the high-level AST representation is ready, it is sent for lowering to anLLVM-specific assembly format, the LLVM IR (➄). The LLVM IR is the input formatfor LLVM’s just-in-time compilation infrastructure. Cling instructs the JIT torun specified functions (➅), translating them into machine code (MC) targetingthe underlying device architecture (eg. Intel x86 or NVPTX) (➆,➇).&lt;/p>&lt;p>The C++ standard is developed towards compilers and does not cover interactiveuse well. Execution of statements on the global scope, reporting executionresults, and entity redefinitions are the three most important features when itcomes to user friendliness. Long running interpreter sessions are prone totyping errors and make flawless error recovery essential. More advanceduse-cases require extra flexibility at runtime and lookup rules extensionsaiding eval-style programming. Efficient watermark-based code removal isimportant when C++ is used as scripting language.&lt;/p>&lt;h2 id="execution-of-statements">Execution of statements&lt;/h2>&lt;p>Cling processes C++ incrementally. Incremental input consists of one or multipleC++ statements. C++ does not allow expressions in the global scope.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">[cling] &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>include &lt;span style="color:#f92672">&amp;lt;&lt;/span>vector&lt;span style="color:#f92672">&amp;gt;&lt;/span>[cling] &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>include &lt;span style="color:#f92672">&amp;lt;&lt;/span>iostream&lt;span style="color:#f92672">&amp;gt;&lt;/span>[cling] std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> v &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>,&lt;span style="color:#ae81ff">4&lt;/span>,&lt;span style="color:#ae81ff">5&lt;/span>}; v[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">++&lt;/span>;[cling] std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;v[0]=&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> v[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;v[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Instead, Cling moves each input into a unique wrapper function. Eg:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">__unique_1&lt;/span> () { std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> v &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>,&lt;span style="color:#ae81ff">4&lt;/span>,&lt;span style="color:#ae81ff">5&lt;/span>};v[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">++&lt;/span>;; } &lt;span style="color:#75715e">// #1&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">__unique_2&lt;/span> () { std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;v[0]=&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> v[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;; } &lt;span style="color:#75715e">// #2&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After the clang AST is built, cling detects that wrapper #1 contains adeclaration and moves the declaration&amp;rsquo;s AST node to the global scope, such that&lt;code>v&lt;/code> can be referenced by subsequent inputs. Wrapper #2 contains a statement andis executed as is. Internally to Cling, the example is transformed to:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> v &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>,&lt;span style="color:#ae81ff">4&lt;/span>,&lt;span style="color:#ae81ff">5&lt;/span>};&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">__unique_1&lt;/span> () { v[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">++&lt;/span>;; }&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">__unique_2&lt;/span> () { std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;v[0]=&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> v[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;; }&lt;/code>&lt;/pre>&lt;/div>&lt;p>Cling runs these wrappers after they are compiled to machine code.&lt;/p>&lt;h2 id="reporting-execution-results">Reporting execution results&lt;/h2>&lt;p>An integral part of interactivity is printing expression values. Typing &lt;code>printf&lt;/code>each time is laborious and does not naturally include object type information.Instead, omitting the semicolon of the last statement of the input tells Clingto report the expression result. When wrapping the input, Cling textuallyattaches a semicolon to the end of it. If an execution report is requested thecorresponding wrapper AST does not contain a &lt;em>NullStmt&lt;/em> (modelling extrasemicolons).&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">[cling] &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>include &lt;span style="color:#f92672">&amp;lt;&lt;/span>vector&lt;span style="color:#f92672">&amp;gt;&lt;/span>[cling] std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> v &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>,&lt;span style="color:#ae81ff">4&lt;/span>,&lt;span style="color:#ae81ff">5&lt;/span>} &lt;span style="color:#75715e">// Note the missing semicolon&lt;/span>&lt;span style="color:#75715e">&lt;/span>(std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>) { &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span> }&lt;/code>&lt;/pre>&lt;/div>&lt;p>A transformation injects extra code depending on the properties of theparticular entity such as if it is copyable, if it is a wrapper temporary or anarray. Cling can report information about non-copyable or temporary objects byproviding a ‘managed’ storage. The managed storage (&lt;em>cling::Value&lt;/em>) is also usedfor exchanging values between interpreted and compiled code in embedded setup.&lt;/p>&lt;h2 id="entity-redefinition">Entity Redefinition&lt;/h2>&lt;p>Name redefinition is an important scripting feature. It is also essential fornotebook-based C++ as each cell is a somewhat separate computation. C++ does notsupport redefinitions of entities.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#f92672">[&lt;/span>cling&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#75715e">#include &amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#f92672">[&lt;/span>cling&lt;span style="color:#f92672">]&lt;/span> std::string v&lt;span style="color:#f92672">(&lt;/span>std::string &amp;amp;&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">[&lt;/span>cling&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#75715e">#include &amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#f92672">[&lt;/span>cling&lt;span style="color:#f92672">]&lt;/span> std::vector&amp;lt;int&amp;gt; vinput_line_7:2:19: error: redefinition of &lt;span style="color:#e6db74">&amp;#39;v&amp;#39;&lt;/span> with a different type: &lt;span style="color:#e6db74">&amp;#39;std::vector&amp;lt;int&amp;gt;&amp;#39;&lt;/span> vs &lt;span style="color:#e6db74">&amp;#39;std::string&amp;#39;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>aka &lt;span style="color:#e6db74">&amp;#39;basic_string&amp;lt;char, char_traits&amp;lt;char&amp;gt;, allocator&amp;lt;char&amp;gt; &amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> std::vector&amp;lt;int&amp;gt; v ^input_line_4:2:14: note: previous definition is here std::string v ^&lt;/code>&lt;/pre>&lt;/div>&lt;p>Cling implements entity redefinition using inline namespaces and rewires clanglookup rules to give higher priority to more recent declarations. The fulldescription of this feature was published as a conference paper on CC 2020(&lt;a href="https://doi.org/10.1145/3377555.3377901">ACM conference on Compiler Construction&lt;/a>).We enable it by calling &lt;code>gCling-&amp;gt;allowRedefinition()&lt;/code>:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#f92672">[&lt;/span>cling&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#75715e">#include &amp;#34;cling/Interpreter/Interpreter.h&amp;#34;&lt;/span>&lt;span style="color:#f92672">[&lt;/span>cling&lt;span style="color:#f92672">]&lt;/span> gCling-&amp;gt;allowRedefinition&lt;span style="color:#f92672">()&lt;/span>&lt;span style="color:#f92672">[&lt;/span>cling&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#75715e">#include &amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#f92672">[&lt;/span>cling&lt;span style="color:#f92672">]&lt;/span> std::vector&amp;lt;int&amp;gt; v&lt;span style="color:#f92672">(&lt;/span>std::vector&amp;lt;int&amp;gt; &amp;amp;&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{}&lt;/span>&lt;span style="color:#f92672">[&lt;/span>cling&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#75715e">#include &amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#f92672">[&lt;/span>cling&lt;span style="color:#f92672">]&lt;/span> std::string v&lt;span style="color:#f92672">(&lt;/span>std::string &amp;amp;&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="invalid-code-error-recovery">Invalid Code. Error Recovery&lt;/h2>&lt;p>When used in interactive mode, invalid C++ does not terminate the session.Instead invalid code is discarded. The underlying clang process keeps theinvalid AST nodes in its internal data structures for better error diagnosticsand recovery, expecting the process will end shortly after issuing thediagnostics. This particular example is more challenging because it firstcontains both valid and invalid constructs. The error recovery should undo asignificant amount of changes in internal structures such as the name lookup andthe AST. Cling is used in many high-performance environments; usingcheckpointing is not a viable option as it introduces overhead for correct code.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#f92672">[&lt;/span>cling&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#75715e">#include &amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#f92672">[&lt;/span>cling&lt;span style="color:#f92672">]&lt;/span> std::vector&amp;lt;int&amp;gt; v; v&lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span>.error_here;input_line_4:2:26: error: member reference base type &lt;span style="color:#e6db74">&amp;#39;std::__1::__vector_base&amp;lt;int, std::__1::allocator&amp;lt;int&amp;gt; &amp;gt;::value_type&amp;#39;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>aka &lt;span style="color:#e6db74">&amp;#39;int&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> is not a structure or union std::vector&amp;lt;int&amp;gt; v; v&lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span>.error_here; ~~~~^~~~~~~~~~~&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to handle the example, Cling models the incremental input into a&lt;em>Transaction&lt;/em>. A transaction represents the delta of the changes of internaldata structures of Clang. Cling listens to events coming from various Clangcallbacks such as declaration creation, deserialization and macro definition.This information is sufficient to undo the changes and continue with a validstate. The implementation is very intricate and in many cases requires extrawork depending on the input declaration kinds.&lt;/p>&lt;p>Cling also protects against null pointer dereferences via a code transformation,avoiding a session crash.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#f92672">[&lt;/span>cling&lt;span style="color:#f92672">]&lt;/span> int *p &lt;span style="color:#f92672">=&lt;/span> nullptr; *pinput_line_3:2:21: warning: null passed to a callee that requires a non-null argument &lt;span style="color:#f92672">[&lt;/span>-Wnonnull&lt;span style="color:#f92672">]&lt;/span> int *p &lt;span style="color:#f92672">=&lt;/span> nullptr; *p ^&lt;span style="color:#f92672">[&lt;/span>cling&lt;span style="color:#f92672">]&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The implementation of error recovery and code unloading still has rough edgesand it is being improved constantly.&lt;/p>&lt;h2 id="code-removal">Code Removal&lt;/h2>&lt;p>Incremental, interactive C++ assumes long lived sessions where not only syntaxerror can happen but also semantic ones. That poses one level of extracomplexity if we want to re-execute the same code with minor adjustments.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">[cling] .L Adder.h &lt;span style="color:#75715e">// #1, similar to #include &amp;#34;Adder.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">&lt;/span>[cling] Add(&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#75715e">// int Add(int a, int b) {return a - b; }&lt;/span>&lt;span style="color:#75715e">&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#ae81ff">2&lt;/span>[cling] .U Adder.h &lt;span style="color:#75715e">// reverts the state prior to #1&lt;/span>&lt;span style="color:#75715e">&lt;/span>[cling] .L Adder.h[cling] Add(&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#75715e">// int Add(int a, int b) {return a + b; }&lt;/span>&lt;span style="color:#75715e">&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#ae81ff">4&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the example, we include a header file with the &lt;em>.L&lt;/em> meta command;&amp;ldquo;uninclude&amp;rdquo; it with &lt;em>.U&lt;/em> and “reinclude” it with &lt;em>.L&lt;/em> to re-read the modifiedfile. Unlike in the error recovery case, Cling cannot fence the machine codelowering infrastructure and needs to undo state changes in clang CodeGen and thellvm JIT and machine code infrastructure. The implementation of this featurerequires expertise in a big portion of the LLVM toolchain.&lt;/p>&lt;h1 id="conclusion">Conclusion&lt;/h1>&lt;p>Cling has been one of the systems enabling interactive C++ for more than a decade.Cling’s extensibility and fast prototyping features is of fundamental importancefor researchers in high-energy physics, and an enabler for many of thetechnologies that they rely on. Cling has several unique features tailored tothe challenges which come with incremental C++. Our work on interactive C++ isalways evolving. In the next blog post we will focus on interactive C++ for DataScience; Eval-Style Programming; Interactive CUDA; and C++ in notebooks.&lt;/p>&lt;p>You can find out more about our activities at&lt;a href="https://root.cern/cling/">https://root.cern/cling/&lt;/a> and&lt;a href="https://compiler-research.org">https://compiler-research.org&lt;/a>.&lt;/p>&lt;h1 id="acknowledgements">Acknowledgements&lt;/h1>&lt;p>The author would like to thank Sylvain Corlay, Simeon Ehrig, David Lange,Chris Lattner, Javier Lopez Gomez, Wim Lavrijsen, Axel Naumann, Alexander Penev,Xavier Valls Pla, Richard Smith, Martin Vassilev, who contributed to this post.&lt;/p></description></item><item><title>The 2020 Virtual LLVM Developers' Meeting Program</title><link>https://blog.llvm.org/posts/2020-08-23-llvmdevmtgprogram/</link><pubDate>Sun, 23 Aug 2020 17:00:06 -0700</pubDate><guid>https://blog.llvm.org/posts/2020-08-23-llvmdevmtgprogram/</guid><description>&lt;p>&lt;img src="https://blog.llvm.org/img/750x300-1.png" alt="2020 Virtual LLVM Developers' Meeting">&lt;/p>&lt;p>The LLVM Foundation is excited to announce the &lt;a href="https://llvm.org/devmtg/2020-09/">2020 Virtual LLVM Developers' Meeting&lt;/a> program! Registration will open this week.&lt;/p>&lt;p>&lt;strong>Keynote:&lt;/strong>&lt;/p>&lt;ul>&lt;li>Undef and Poison: Present and Future - &lt;em>J. Lee&lt;/em>&lt;/li>&lt;/ul>&lt;p>&lt;strong>Technical Talks:&lt;/strong>&lt;/p>&lt;ul>&lt;li>Clang &amp;amp; Linux: Asm Goto with Outputs - &lt;em>B. Wendling; N. Desaulniers&lt;/em>&lt;/li>&lt;li>LLVM Libc: Current Status, Challenges and Future Plans- &lt;em>S. Reddy; G. Chatelet; P. Asker; D. Finkelstein&lt;/em>&lt;/li>&lt;li>Branch Coverage: Squeezing more out of LLVM Source-based Code Coverage - &lt;em>A. Phipps&lt;/em>&lt;/li>&lt;li>Memory tagging in LLVM and Android - &lt;em>E. Stepanov; K. Serebryany; P. Collingbourne; M. Phillips&lt;/em>&lt;/li>&lt;li>Towards a representation of arbitrary alias graph in LLVM IR for Fortran code - &lt;em>K. Li; T. Islam&lt;/em>&lt;/li>&lt;li>Control-flow sensitive escape analysis in Falcon JIT - &lt;em>A. Pilipenko&lt;/em>&lt;/li>&lt;li>Extending Clang for checking compliance with automotive coding standards - &lt;em>M. Vujosevic Janicic&lt;/em>&lt;/li>&lt;li>An Update on Optimizing Multiple Exit Loops - &lt;em>P. Reames&lt;/em>&lt;/li>&lt;li>Code Size Compiler Optimizations and Techniques - &lt;em>A. Kumar&lt;/em>&lt;/li>&lt;li>Accelerate Matrix Multiplication Using the New POWER Outer Product Instructions- &lt;em>B. Saleil; J. Carvalho&lt;/em>&lt;/li>&lt;li>CIL : Common MLIR Dialect for C/C++ and Fortran- &lt;em>P. NR; V. M; Ranjith; Srihari&lt;/em>&lt;/li>&lt;li>Building compiler extension for LLVM 10.0.1 - &lt;em>S. Guelton&lt;/em>&lt;/li>&lt;li>LLVM-based mutation testing for C and C++ - &lt;em>A. Denisov; S. Pankevich&lt;/em>&lt;/li>&lt;li>Matrix Support in Clang and LLVM- &lt;em>F. Hahn&lt;/em>&lt;/li>&lt;li>Adding CUDA® Support to Cling: JIT Compile to GPUs - &lt;em>S. Ehrig&lt;/em>&lt;/li>&lt;li>The Present and Future of Interprocedural Optimization in LLVM - &lt;em>J. Doerfert; B. Homerding; S. Baziotis; S. Stipanovic; H. Ueno; K. Dinel; S. Okumura; L. Chen&lt;/em>&lt;/li>&lt;li>Pushing Back Lit&amp;rsquo;s Boundaries to Test Libc++ - &lt;em>L. Dionne&lt;/em>&lt;/li>&lt;li>Evolving “convergent”: Lessons from Control Flow in AMDGPU - &lt;em>N. Hähnle&lt;/em>&lt;/li>&lt;li>How to update debug info in compiler transformations - &lt;em>A. Prantl; V. Kumar&lt;/em>&lt;/li>&lt;li>Proposal for A Framework for More Effective Loop Optimizations - &lt;em>M. Kruse; H. Finkel&lt;/em>&lt;/li>&lt;li>Changing Everything With Clang Plugins: A Story About Syntax Extensions, Clang&amp;rsquo;s AST, and Quantum Computing = &lt;em>H. Finkel; A. Mccaskey&lt;/em>&lt;/li>&lt;li>(OpenMP) Parallelism-Aware Optimizations - &lt;em>J. Doerfert; S. Stipanovic; H. Mosquera; J. Chesterfield; G. Georgakoudis; J. Huber&lt;/em>&lt;/li>&lt;li>Checked C: Adding memory safety support to LLVM- &lt;em>M. Grang; K. Kjeer&lt;/em>&lt;/li>&lt;/ul>&lt;p>&lt;strong>Tutorials:&lt;/strong>&lt;/p>&lt;ul>&lt;li>Everything I know about debugging LLVM - &lt;em>N. Desaulniers&lt;/em>&lt;/li>&lt;li>LLVM in a Bare Metal Environment - &lt;em>H. Qadeer&lt;/em>&lt;/li>&lt;li>PGO: Add per-callsite counters - &lt;em>P. Kosov; Y. Sergey&lt;/em>&lt;/li>&lt;li>Understanding Changes made by a Pass in the Opt Pipeline. - &lt;em>J. Schmeiser&lt;/em>&lt;/li>&lt;li>Using clang-tidy for customized checkers and large scale source tree refactoring - &lt;em>V. Bridgers&lt;/em>&lt;/li>&lt;li>Finding Your Way Around the LLVM Dependence Analysis Zoo - &lt;em>S. Baziotis; S. Moll&lt;/em>&lt;/li>&lt;li>Using the clang static analyzer to find bugs - &lt;em>V. Bridgers&lt;/em>&lt;/li>&lt;li>A Deep Dive into the Interprocedural Optimization Infrastructure - &lt;em>J. Doerfert; B. Homerding; S. Baziotis; S. Stipanovic; H. Ueno; K. Dinel; S. Okumura; L. Chen&lt;/em>&lt;/li>&lt;li>MLIR Tutorial - &lt;em>M. Amini&lt;/em>&lt;/li>&lt;/ul>&lt;p>&lt;strong>Lightning Talks:&lt;/strong>&lt;/p>&lt;ul>&lt;li>Finding and Outlining Similarities in LLVM IR - &lt;em>A. Litteken&lt;/em>&lt;/li>&lt;li>A fast algorithm for global code motion of congruent instructions - &lt;em>A. Kumar; S. Pop&lt;/em>&lt;/li>&lt;li>From Implicit Pass Dependencies to Effectiveness Prediction - &lt;em>H. Ueno; J. Doerfert; E. Park; G. Georgakoudis; T. Jayatilaka; S. Badruswamy&lt;/em>&lt;/li>&lt;li>Using Clang as An Alternative C/C++ Frontend of The ROSE Source-to-Source Compiler - &lt;em>A. Wang; P. Lin; C. Liao; Y. Yan&lt;/em>&lt;/li>&lt;li>OpenACC support in Flang with a MLIR dialect - &lt;em>V. Clement; J. Vetter&lt;/em>&lt;/li>&lt;li>Fragmenting the DWARF to Enable Dead Debug Data Elimination - &lt;em>J. Henderson&lt;/em>&lt;/li>&lt;li>Source-based Code Coverage for Embedded Use Cases - &lt;em>A. Phipps; C. Addison&lt;/em>&lt;/li>&lt;li>pre-merge checks for LLVM - &lt;em>M. Goncharov; C. Kühnel&lt;/em>&lt;/li>&lt;li>Getting stack size just right on XCore - &lt;em>J. McCrea&lt;/em>&lt;/li>&lt;li>Compile Faster with the Program Repository and ccache - &lt;em>Y. Yi; P. Bowen-Huggett&lt;/em>&lt;/li>&lt;li>GWP-TSan: Zero-Cost Detection of Data Races in Production - &lt;em>M. Morehouse; K. Serebryany&lt;/em>&lt;/li>&lt;li>CompilerInvocation to -cc1 command line - &lt;em>D. Grumberg&lt;/em>&lt;/li>&lt;li>Outer-Loop Vectorization Legality Analysis for RV: One Step Closer to a Powerful Vectorizer for LLVM - &lt;em>S. Baziotis&lt;/em>&lt;/li>&lt;li>Flang Update - &lt;em>S. Scalpone&lt;/em>&lt;/li>&lt;li>Code Feature Analysis, Tracking, and Future Usage - &lt;em>T. Jayatilaka; J. Doerfert; G. Georgakoudis; E. Park; H. Ueno; S. Badruswamy&lt;/em>&lt;/li>&lt;li>Lowering XLA HLO using RISE - A Functional Pattern-based MLIR Dialect - &lt;em>M. Lücke; A. Smith; M. Steuwer&lt;/em>&lt;/li>&lt;li>SYCL for CUDA: An overview of implementing PI for CUDA - &lt;em>A. Johnston&lt;/em>&lt;/li>&lt;li>Extending LLDB to More Scripting Languages - &lt;em>J. Devlieghere&lt;/em>&lt;/li>&lt;li>Adding a Subtarget Support to LLVM in Five Minutes - &lt;em>E. Yakubova&lt;/em>&lt;/li>&lt;/ul>&lt;p>&lt;strong>Birds of a Feather:&lt;/strong>&lt;/p>&lt;ul>&lt;li>ClangBuiltLinux BoF - &lt;em>N. Desaulniers&lt;/em>&lt;/li>&lt;li>Loop Optimization BoF - &lt;em>M. Kruse; K. Barton&lt;/em>&lt;/li>&lt;li>LLVM Just-In-Time Compilers BoF - &lt;em>L. Hames&lt;/em>&lt;/li>&lt;li>Code Size Optimization - &lt;em>S. Bartell; V. Adve&lt;/em>&lt;/li>&lt;/ul>&lt;p>&lt;strong>Student Research Competition&lt;/strong>&lt;/p>&lt;ul>&lt;li>Enzyme: High-Performance Automatic Differentiation of LLVM - &lt;em>W. Moses; V. Churavy&lt;/em>&lt;/li>&lt;li>SPAM: Stateless Permutation of Application Memory with LLVM - &lt;em>M. Ziad; M. Arroyo; S. Sethumadhavan&lt;/em>&lt;/li>&lt;li>HPVM-FPGFA: Leveraging Compiler Optimizations for Hardware-Agnostic FPGA Programming - &lt;em>A. Ejjeh; K. Kanwar; M. Kotsifakou; V. Adve; R. Rutenbar&lt;/em>&lt;/li>&lt;li>Guided Linking: shrinking and speeding up dynamically linked code - &lt;em>S. Bartell; V. Adve&lt;/em>&lt;/li>&lt;li>ApproxTuner: A Compiler and Runtime System for Adaptive Approximations - &lt;em>H. Sharif; M. Kotsifakou; Y. Zhao; A. Kothari; B. Schreiber; E. Wang; Y. Sarita; N. Zhao; K. Joshi; V. Adve; S. Misailovic; S. Adve&lt;/em>&lt;/li>&lt;/ul>&lt;p>&lt;strong>Posters:&lt;/strong>&lt;/p>&lt;ul>&lt;li>CIRCT: MLIR for Hardware Design - &lt;em>S. Neuendorffer; C. Lattner; A. Wilson&lt;/em>&lt;/li>&lt;li>An Approach to Generate Correctly Rounded Math Libraries for New Floating Point Variants - &lt;em>J. Lim; M. Aanjaneya; J. Gustafson; S. Nagarakatte&lt;/em>&lt;/li>&lt;li>Compiling a Higher-Order Smart Contract Language to LLVM - &lt;em>V. Nagaraj; J. Johannsen; A. Trunov; G. Pirlea; A. Kumar; I. Sergey&lt;/em>&lt;/li>&lt;li>To -jInfinity &amp;amp; Beyond - &lt;em>W. Moses; K. Kwok; L. Sha&lt;/em>&lt;/li>&lt;li>llvm-diva – Debug Information Visual Analyzer - &lt;em>C. Enciso&lt;/em>&lt;/li>&lt;li>Quickly Finding RISC-V Code Quality Issues with Differential Analysis - &lt;em>L. Marques&lt;/em>&lt;/li>&lt;li>Error estimates of floating-point numbers and Jacobian matrix computation in Clad - &lt;em>V. Vassilev; A. Penev; R. Shakhov&lt;/em>&lt;/li>&lt;li>Data Dependency using MSSA: Analysis and Contrast - &lt;em>R. Sharma&lt;/em>&lt;/li>&lt;li>Connecting Clang to The ROSE Source-to-Source Compiler - &lt;em>A. Wang; P. Lin; C. Liao; Y. Yan&lt;/em>&lt;/li>&lt;li>Incremental Compilation Support in Clang - &lt;em>V. Vassilevv; D. Lange&lt;/em>&lt;/li>&lt;/ul></description></item><item><title>Announcing the new LLVM Foundation Board</title><link>https://blog.llvm.org/posts/2020-08-21-new-llvm-foundation-board/</link><pubDate>Fri, 21 Aug 2020 17:54:06 -0700</pubDate><guid>https://blog.llvm.org/posts/2020-08-21-new-llvm-foundation-board/</guid><description>&lt;p>The LLVM Foundation is pleased to announce its new Board of Directors, which includes:&lt;/p>&lt;ul>&lt;li>Kit Barton&lt;/li>&lt;li>Kristof Beyls&lt;/li>&lt;li>Mike Edwards (Treasurer)&lt;/li>&lt;li>Hal Finkel&lt;/li>&lt;li>Cyndy Ishida&lt;/li>&lt;li>Anton Korobeynikov&lt;/li>&lt;li>Tanya Lattner (President)&lt;/li>&lt;li>Chris Lattner&lt;/li>&lt;li>Tom Stellard (Secretary)&lt;/li>&lt;/ul>&lt;p>Three new members and six continuing members were elected to the nine person board. Thank you to retiring board members Chandler Carruth, Arnaud de Grandmaison, and John Regehr for all of their contributions to the board.&lt;/p>&lt;p>We were pleased to have many qualified applicants to the Board of Directors this year, which enabled us to make the board stronger than ever. Unfortunately, this also meant that we could not include everyone that we wanted to. Our goal was to create a balanced board of individuals from a wide range of backgrounds and locations, and to provide a voice to many groups within the LLVM community. This is always a challenge with such a large and vibrant community, and such a small board.&lt;/p>&lt;p>About the board of directors (listed alphabetically by last name):&lt;/p>&lt;p>&lt;strong>Kit Barton:&lt;/strong>&lt;/p>&lt;p>Kit Barton has been contributing to LLVM since 2015. His contributions have primarily been to the PowerPC backend and loop optimizations including the loop fusion pass. He has presented multiple technical talks, and tutorials at theLLVM Dev conferences over the last two years.&lt;/p>&lt;p>In addition to the contributions to LLVM, over the last two years Kit has driven the effort within IBM to migrate their proprietary C/C++ and Fortran compilers to leverage LLVM technology. He has also been involved in organizing the LLVM Meetups in Toronto as well as the Loop Optimization Working Group.&lt;/p>&lt;p>Kit is currently the technical lead for C/C++ and Fortran compilers on POWER and z/OS at IBM.&lt;/p>&lt;p>&lt;strong>Kristof Beyls:&lt;/strong>&lt;/p>&lt;p>Kristof Beyls has worked on LLVM since about 2010, initially as part of tech leading the migration of Arm&amp;rsquo;s C/C++ toolchain to be based on LLVM technology. Since then, Kristof has worked on a large number of code generation projects using LLVM. He has contributed to LLVM in the areas of security mitigations, performance tuning, Arm backends, test-suite, LNT, etc.&lt;/p>&lt;p>He has been helping with the organization of EuroLLVM meetings since the start; has been organizing the FOSDEM LLVM dev rooms for the past couple of years and has organized a few socials in Belgium. He has also been on the program committee for a few of the dev meetings.&lt;/p>&lt;p>Kristof is Senior Principal Engineer at Arm.&lt;/p>&lt;p>&lt;strong>Mike Edwards:&lt;/strong>&lt;/p>&lt;p>Mike Edwards has been involved with the LLVM Project since 2016 and has been most active behind the scenes working on infrastructure related issues. Mike joined the LLVM Foundation Board in 2018 and was elected Treasurer. Mike has used the past two years to help further the Foundations programs and support the many efforts of the Foundation to reach new users of LLVM technologies. Mike is looking forward to working with the new Board Members elected this year to help further the program development and outreach of the Foundation.&lt;/p>&lt;p>Mike is currently working as a Software Engineer at Apple, Inc. working on the Continuous Integration and Quality Engineering efforts for LLVM and Clang development.&lt;/p>&lt;p>&lt;strong>Hal Finkel:&lt;/strong>&lt;/p>&lt;p>Hal Finkel has been an active contributor to the LLVM project since 2011. He is the code owner for the PowerPC target, the alias-analysis infrastructure, and other components.&lt;/p>&lt;p>In addition to his numerous technical contributions, Hal has chaired the LLVM in HPC workshop, which is held in conjunction with Super Computing (SC), starting in 2014. This workshop provides a venue for the presentation of peer-reviewed HPC-related researching LLVM from both industry and academia. He has also been involved in organizing an LLVM-themed BoF session at SC and LLVM socials, in addition to organizing community technical calls for Flang and aliasing analysis.&lt;/p>&lt;p>Hal is Lead for Compiler Technology and Programming Languages at Argonne National Laboratory’s Leadership Computing Facility. His team at Argonne works on several LLVM-based projects. Hal also teaches a compilers course at the University of Chicago&amp;rsquo;s Masters Program in Computer Science.&lt;/p>&lt;p>&lt;strong>Cyndy Ishida:&lt;/strong>&lt;/p>&lt;p>Cyndy Ishida is relatively new to the LLVM community. She began her involvement by contributing Mach-O Support to TextAPI in the past year, which serves as a condensed textual representation of dynamic libraries from a static linking perspective.&lt;/p>&lt;p>In addition to open source contributions, Cyndy has participated in the program committee for the 2020 US LLVM Developers’ Meeting and in the 2019 US Women in Compilers and Tools Workshop. With a long standing admiration for the LLVM Project and Foundation, Cyndy is passionate about supporting and expanding the community. She is excited to use her position to aid in educational outreach efforts as a driver to grow the set of diverse developers that make up the open source community, and is focused on advocating for inclusivity in the LLVM project.&lt;/p>&lt;p>Cyndy is a Compiler Engineer at Apple, Inc. concentrating on enhancing library support with Clang tooling.&lt;/p>&lt;p>&lt;strong>Anton Korobeynikov:&lt;/strong>&lt;/p>&lt;p>Anton Korobeynikov has been an active contributor to the LLVM project since 2006. Over the years, he has numerous technical contributions to areas including Windows support, ELF features, debug info, exception handling, and backends such as ARM and x86. He was the original author of the MSP430 and original System Z backend.&lt;/p>&lt;p>In addition to his technical contributions, Anton has maintained LLVM’s participation in Google Summer of Code by managing applications, deadlines, and overall organization. He also supports the LLVM infrastructure and has been on numerous program committees for the LLVM Developers’ Meetings (both US and EuroLLVM).&lt;/p>&lt;p>Anton is currently an associate professor at the Saint Petersburg State University and has served on the LLVM Foundation board of directors for the last 6 years.&lt;/p>&lt;p>&lt;strong>Tanya Lattner:&lt;/strong>&lt;/p>&lt;p>Tanya Lattner has been involved in the LLVM project for over 16 years. She began as a graduate student who wrote her master&amp;rsquo;s thesis using LLVM, and continued on using and extending LLVM technologies at various jobs during her career as a compiler engineer.&lt;/p>&lt;p>Tanya has been organizing the US LLVM Developers’ meeting since 2008 and attended every developer meeting. She was the LLVM release manager for 3 years, moderates the LLVM mailing lists, and helps administer the LLVM infrastructure servers, mailing lists, bugzilla, etc. Tanya has also been on the program committee for the US LLVM Developers’ meeting (4 years) and the EuroLLVM Developers’ Meeting (1 year).&lt;/p>&lt;p>With the support of the initial board of directors, Tanya created the LLVM Foundation, defined its charitable and education mission, and worked to get 501(c)(3) status. She is passionate about the LLVM Community and wants to help see it thrive and grow for years to come.&lt;/p>&lt;p>Tanya is the Chief Operating Officer and has served as the President of the LLVM Foundation board for the last 6 years.&lt;/p>&lt;p>&lt;strong>Chris Lattner:&lt;/strong>&lt;/p>&lt;p>Chris Lattner is the founder of the LLVM project and has a lengthy history of technical contributions to the project over the years. He drove much of the early implementation, architecture, and design of LLVM, Clang, and MLIR. Chris actively participates in the LLVM Developers’ meeting, served on the LLVM Board of Directors for many years, and helps drive important discussions and policy decisions related to the LLVM project.&lt;/p>&lt;p>Outside of LLVM, Chris has served in a wide range of technical leadership positions at Apple, Tesla, Google, and SiFive. These have spanned domains including compiler infrastructure, developer tools in general, machine learning infrastructure, autonomous vehicles, and microprocessor design. More details are available in his resumé page.&lt;/p>&lt;p>&lt;strong>Tom Stellard:&lt;/strong>&lt;/p>&lt;p>Tom Stellard has been contributing to the LLVM project since 2012. He was the original author of the AMDGPU backend and was also an active contributor to libclc. He has been the LLVM project’s stable release manager since 2014.&lt;/p>&lt;p>Tom is currently a Software Engineer at Red Hat and is the technical lead for emerging toolchains including Clang/LLvm. He also maintains the LLVM packages for the Fedoraproject.&lt;/p></description></item><item><title>The New Clang _ExtInt Feature Provides Exact Bitwidth Integer Types</title><link>https://blog.llvm.org/2020/04/the-new-clang-extint-feature-provides.html</link><pubDate>Tue, 21 Apr 2020 17:13:00 +0000</pubDate><guid>https://blog.llvm.org/2020/04/the-new-clang-extint-feature-provides.html</guid><description>&lt;b>Author&lt;/b>: &lt;a href="mailto:erich.keane@intel.com" rel="nofollow">Erich Keane&lt;/a>, Compiler Frontend Engineer, Intel Corporation&lt;br />&lt;br />Earlier this month I finally committed a patch to implement the extended-integer type class, &lt;span style="font-family: monospace;">_ExtInt&lt;/span> after nearly two and a half years of design and implementation. These types allow developers to use custom width integers, such as a 13-bit signed integer. This patch is currently designed to track &lt;span style="font-family: monospace;">&lt;a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2472.pdf">N2472&lt;/a>&lt;/span>, a proposal being actively considered by the ISO WG14 C Language Committee. We feel that these types are going to be extremely useful to many downstream users of Clang, and provides a language interface for LLVM's extremely powerful integer type class.&lt;br />&lt;br />&lt;h3>Motivation&lt;/h3>LLVM-IR has the ability to represent integers with a bitwidth from 1 all the way to 16,777,215(&lt;span style="font-family: monospace;">(1&amp;lt;&amp;lt;24)-1&lt;/span>), however the C language is limited to just a few power-of-two sizes. Historically, these types have been sufficient for nearly all programming architectures, since power-of-two representation of integers is convenient and practical.&lt;br />&lt;br />Recently, Field-Programmable Gate Array (FPGA) tooling, called High Level Synthesis Compilers (HLS), has become practical and powerful enough to use a general purpose programming language for their generation. These tools take C or C++ code and produce a transistor layout to be used by the FPGA. However, once programmers gained experience in these tools, it was discovered that the standard C integer types are incredibly wasteful for two main reasons.&lt;br />&lt;br />First, a vast majority of the time programmers are not using the full width of their integer types. It is rare for someone to use all 16, 32, or 64 bits of their integer representation. On traditional CPUs this isn't much of a problem as the hardware is already in place, so having bits never set comes at zero cost. On the other hand, on FPGAs logic gates are an incredibly valuable resource, and HLS compilers should not be required to waste bits on large power of two integers when they only need a small subset of that! While the optimizer passes are capable of removing some of these widths, a vast majority of this hardware needs to be emitted.&lt;br />&lt;br />Second, the C language requires that integers smaller than &lt;span style="font-family: monospace;">int&lt;/span> are promoted to operations on the 'int' type. This further complicates hardware generation, as promotions to &lt;span style="font-family: monospace;">int&lt;/span> are expensive and tend to stick with the operation for an entire statement at a time. These promotions typically have semantic meaning, so simply omitting them isn't possible without changing the meaning of the source code. Even worse, the proliferation of &lt;span style="font-family: monospace;">auto&lt;/span> has resulted in user code results in the larger integer size being quite viral throughout a program.&lt;br />&lt;br />The result is massively larger FPGA/HLS programs than the programmer needed, and likely much larger than they intended. Worse, there was no way for the programmer express their intent in the cases where they do not need the full width of a standard integer type.&lt;br />&lt;br />&lt;h3> Using the&amp;nbsp;&lt;span style="font-family: monospace;">_ExtInt&lt;/span>&amp;nbsp;Language Feature&lt;/h3>The patch as accepted and committed into LLVM solves most of the above problems by providing the &lt;span style="font-family: monospace;">_ExtInt&lt;/span> class of types. These types translate directly into the corresponding LLVM-IR integer types. The &lt;span style="font-family: monospace;">_ExtInt&lt;/span> keyword is a type-specifier (like &lt;span style="font-family: monospace;">int&lt;/span>) that accepts a required integral constant expression parameter representing the number of bits to be used. More succinctly: &lt;span style="font-family: monospace;">_ExtInt(7)&lt;/span> is a signed integer type using 7 bits. Because it is a type-specifier, it can also be combined with &lt;span style="font-family: monospace;">signed&lt;/span> and &lt;span style="font-family: monospace;">unsigned&lt;/span> to change the signedness (and overflow behavior!) of the values. So "&lt;span style="font-family: monospace;">unsigned _ExtInt(9) foo;"&lt;/span> declares a variable &lt;span style="font-family: monospace;">foo&lt;/span> that is an unsigned integer type taking up 9 bits and represented as an &lt;span style="font-family: monospace;">i9&lt;/span> in LLVM-IR.&lt;br />&lt;br />The &lt;span style="font-family: monospace;">_ExtInt&lt;/span> types as implemented do not participate in any implicit conversions or integer promotions, so all math done on them happens at the appropriate bit-width. The WG14 paper proposes integer promotion to the largest of the types (that is, adding an &lt;span style="font-family: monospace;">_ExtInt(5)&lt;/span> and an &lt;span style="font-family: monospace;">_ExtInt(6)&lt;/span> would result in an &lt;span style="font-family: monospace;">_ExtInt(6)&lt;/span>), however the implementation does not permit that and &lt;span style="font-family: monospace;">_ExtInt(5) + _ExtInt(6)&lt;/span> would result in a compiler error. This was done so that in the event that WG14 changes the design of the paper, we will be able to implement it without breaking existing programs. In the meantime, this can be worked around with explicit casts: &lt;span style="font-family: monospace;">(_ExtInt(6))AnExtInt5 + AnExtInt6&lt;/span> or &lt;span style="font-family: monospace;">static_cast&amp;lt;ExtInt(6)&amp;gt;(AnExtInt5) + AnExtInt6.&lt;/span>&lt;br />&lt;br />Additionally, for C++, clang supports making the bitwidth parameter a dependent expression, so that the following is legal:&lt;br />&lt;span style="font-family: monospace;">template&amp;lt;size_t WidthA, size_t WidthB&amp;gt;&lt;br />&amp;nbsp; _ExtInt(WidthA + WidthB) lossless_mul(_ExtInt(WidthA) a, _ExtInt(WidthB) b) {&lt;br />&amp;nbsp;&amp;nbsp;return static_cast&amp;lt;&lt;/span>&lt;span style="font-family: monospace;">&lt;span style="font-family: monospace;">_ExtInt(WidthA + WidthB)&amp;gt;(a)&amp;nbsp;&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: monospace;">&lt;span style="font-family: monospace;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * static_cast&amp;lt;&lt;/span>&lt;/span>&lt;span style="font-family: monospace;">&lt;span style="font-family: monospace;">&lt;span style="font-family: monospace;">_ExtInt(WidthA + WidthB)&lt;/span>&lt;/span>&amp;gt;(b);&lt;br />}&amp;nbsp;&lt;/span>&lt;br />&lt;br />We anticipate that this ability and these types will result in some extremely useful pieces of code, including novel uses of 256 bit, 512 bit, or larger integers, plus uses of 8 and 16 bit integers for those who can't afford promotions. For example, one can now trivially implement an extended integer type struct that does all operations provably losslessly, that is, adding two 6 bit values would result in a 7 bit value.&lt;br />&lt;br />In order to be consistent with the C Language, expressions that include a standard type will still follow integral promotion and conversion rules. All types smaller than &lt;span style="font-family: monospace;">int&lt;/span> will be promoted, and the operation will then happen at the largest type.&amp;nbsp; This can be surprising in the case where you add a &lt;span style="font-family: monospace;">short&lt;/span> and an &lt;span style="font-family: monospace;">_ExtInt(15)&lt;/span>, where the result will be &lt;span style="font-family: monospace;">int&lt;/span>. However, this ends up being the most consistent with the C language specification.&lt;br />&lt;br />Additionally, when it comes to conversions, these types 'lose' to the C standard types of the same size or greater. So, an &lt;span style="font-family: monospace;">int&lt;/span> added to a &lt;span style="font-family: monospace;">_ExtInt(32)&lt;/span> will result in an &lt;span style="font-family: monospace;">int&lt;/span>. However, an &lt;span style="font-family: monospace;">int&lt;/span> and a &lt;span style="font-family: monospace;">_ExtInt(33)&lt;/span>will be the latter. This is necessary to preserve C integer semantics.&lt;br />&lt;h3>History&lt;/h3>As mentioned earlier, this feature has been a long time coming! In fact, this is likely the fourth implementation that was done along the way in order to get to this point. Additionally, this is far from over, we very much hope that upon acceptance of this by the WG14 Standards Committee that additional extensions and features will become available.&lt;br />&lt;br />I was approached to implement this feature in the Fall of 2017 by my company's FPGA group, which had the problems mentioned above. They had attempted a solution that used some clever parsing to make these look like templates, and implemented them extensively throughout the compiler. As I was concerned about the flexibility and usability of these types in the type and template system, we opted to implement these as a type-attribute under the controversially named Arbitrary Precision Int (spelled &lt;span style="font-family: monospace;">__ap_int&lt;/span>). This spelling was heavily influenced by the vector-types implementations in GCC and Clang.&lt;br />&lt;br />We then were able to wrap a set of typedefs (or dependent &lt;span style="font-family: monospace;">__ap_int&lt;/span> types) in a structure that provided exactly the C and C++ interface we wished to expose. As this was a then proprietary implementation, it was kept in our downstream implementation, where it received extensive testing and usage.&lt;br />&lt;br />Roughly a year later (and a little more than year ago from today!) I was authorized to contribute our implementation to the open source LLVM community! I decided to significantly refactor the implementation in order to better fit into the Clang type system, and uploaded it for &lt;a href="https://reviews.llvm.org/D73967">review&lt;/a>.This (now third!) implementation of this feature was proposed via RFC and code review at the same time.&lt;br />&lt;br />While the usefulness was immediately acknowledged, it was rejected by the Clang code owner for two reasons: First the spelling was considered unpalatable, and Second it was a pure extension without standardization. This began the nearly year-long effort to come up with a standards proposal that would better define and describe the feature as well as come up with a spelling that was more in line with the standard language.&lt;br />&lt;br />Thanks to the invaluable feedback and input from Richard Smith, my coworkers Melanie Blower, Tommy Hoffner, and myself were able to propose the spelling _ExtInt for standardization. Additionally, the feature again re-implemented at the beginning of this year and eventually accepted and committed!&lt;br />&lt;br />The standardization paper (&lt;span style="font-family: monospace;">&lt;a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2472.pdf">N2472&lt;/a>&lt;/span>) was presented at this Spring's WG14 ISO C Language Committee Meeting where it received near unanimous support. We expect to have an updated version of the paper with wording ready for the next WG14 meeting, where we hope it will receive sufficient support to be accepted into the language.&lt;br />&lt;h3>Future Extensions&lt;/h3>While the feautre as committed in Clang is incredibly useful, it can be taken further. There are a handful of future extensions that we wish to implement once guidance from WG14 has been given on their direction and implementation.&lt;br />&lt;br />First, we believe the special integer promotion/conversion rules, which omit automatic promotion to&amp;nbsp; &lt;span style="font-family: monospace;">int&lt;/span> and instead provide operations at the largest type are both incredibly useful and powerful. While we have received positive encouragement from WG14, we hope that the wording paper we provide will both clarify the mechanism and definition in a way that supports all common uses.&lt;br />&lt;br />Secondly, we would like to choose a printf/scanf specifier that permits specifying the type for the C language. This was the topic of the WG14 discussion, and also received strong encouragement. We intend to come up with a good representation, then implement this in major implementations.&lt;br />&lt;br />Finally, numerous people have suggested implementing a way of spelling literals of this type. This is important for two reasons: First, it allows using literals without casts in expressions in a way that doesn't run afoul of promotion rules. Second, it provides a way of spelling integer literals larger than &lt;span style="font-family: monospace;">&lt;span class="t-lines">UINTMAX_MAX&lt;/span>&lt;/span>, which can be useful for initializing the larger versions of these types. While the spelling is undecided, we intend something like: &lt;span style="font-family: monospace;">1234X&lt;/span> would result in an integer literal with the value &lt;span style="font-family: monospace;">1234&lt;/span> represented in an &lt;span style="font-family: monospace;">_ExtInt(11)&lt;/span>, which is the smallest type capable of storing this value. &lt;br />&lt;br />However, without the integer promotion/conversion rules above, this feature isn't nearly as useful. Additionally, we'd like to be consistent with whatever the C language committee chooses. As soon as we receive positive guidance on the spelling and syntax of this type, we look forward to providing an implementation.&lt;br />&lt;h3>Conclusion&lt;/h3>In closing, we encourage you to try using this and provide feedback to both myself, my proposal co-authors, and the C committee itself! We feel this is a really useful feature and would love to get as much user experience as possible. Feel free to contact myself and my co-authors with any questions or concerns!&lt;br />&lt;br />&lt;b>-&lt;/b>&lt;a href="mailto:erich.keane@intel.com" rel="nofollow">Erich Keane&lt;/a>, Intel Corporation</description></item><item><title>Deterministic builds with clang and lld</title><link>https://blog.llvm.org/2019/11/deterministic-builds-with-clang-and-lld.html</link><pubDate>Thu, 07 Nov 2019 12:34:00 +0000</pubDate><guid>https://blog.llvm.org/2019/11/deterministic-builds-with-clang-and-lld.html</guid><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on">Deterministic builds can lower continuous integration costs and give you more confidence in your build and test process. This post outlines what it means for a build to be deterministic, the advantages of deterministic builds, and how to achieve them using LLVM tools.&lt;br />&lt;h3 style="text-align: left;">What is a deterministic build, and its advantages&lt;/h3>A build is called &lt;i>deterministic &lt;/i>or &lt;i>reproducible &lt;/i>if running it twice produces exactly the same build outputs.&lt;br />&lt;br />There are several degrees of build determinism that are increasingly useful but increasingly difficult to achieve:&lt;br />&lt;br />&lt;ol style="text-align: left;">&lt;li>&lt;i>Basic &lt;/i>determinism: Doing a full build of the same source code in the same directory on the same machine produces exactly the same output every time, in the sense that a content hash of the final build artifacts and of all intermediate files does not change.&lt;/li>&lt;ul>&lt;li>Once you have this, if all your builders are configured the same way (OS version, toolchain, build path, checkout path, …), they can share build artifacts, for example by using distcc.&lt;/li>&lt;li>This also allows local caching of test suite results keyed by a hash of test binary and test input files.&lt;/li>&lt;li>Illustrative example: &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">./build src out ; mv out out.old ; ./build src out ; diff -r out out.old&lt;/span>&lt;/li>&lt;/ul>&lt;li>&lt;i>Incremental &lt;/i>basic determinism: Like basic determinism, but the output binaries also don’t change in partial rebuilds. In build systems that track file modification times to decide when to rebuild, this means for example that updating the modification time on a C++ source file (without doing any actual changes) and rebuilding will produce the same output as a full build.&lt;/li>&lt;ul>&lt;li>This allows having build bots that don’t do full builds each time, while still allowing caching of compile artifacts and test results.&lt;/li>&lt;li>Illustrative example: &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">./build src out ; cp -r out out.old ; touch src/foo.c ; ./build src out ; diff -r out out.old&lt;/span>&lt;/li>&lt;/ul>&lt;li>&lt;i>Local &lt;/i>determinism: Like incremental basic determinism, but builds are also independent of the name of the build directory. Builds of the same source code on the same machine produce exactly the same output every time, independent of the location of the source checkout directory or the build directory.&lt;/li>&lt;ul>&lt;li>This allows machines to have several build directories at different locations but still share compile and test caches.&lt;/li>&lt;li>Illustrative example:&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"> cp -r src src2 ; ./build src out ; ./build src2 out2 ; diff -r out out2&lt;/span>&lt;/li>&lt;/ul>&lt;li>&lt;i>Universal &lt;/i>determinism: Like 3, but builds are also independent of the machine the build runs on. Everybody that checks out the project at a given revision into any directory and builds it following the build instructions ends up with exactly the same bits in the build output.&lt;/li>&lt;ul>&lt;li>Since exact local OS and locally installed packages no longer matter, this allows devs to share compile and test caches with bots, without having to use difficult-to-setup containers.&lt;/li>&lt;li>It also allows easy verification of builds done by others to make sure output binaries haven’t been tampered with.&lt;/li>&lt;li>Illustrative example: &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">./build src out ; ssh remote ./build src out &amp;amp;&amp;amp; scp remote:out out2 ; diff -r out out2&lt;/span>&lt;/li>&lt;/ul>&lt;/ol>&lt;h3 style="text-align: left;">Plan of attack&lt;/h3>To make sure that a deterministic build stays deterministic, you should set up a builder that verifies that your build is deterministic. Even if your build isn’t deterministic yet, you can set up a bot that verifies that some parts of your build are deterministic and then expand the checks over time.&lt;br />&lt;br />For example, you could have a bot that does a full build in a fixed build directory, then moves the build artifacts out of the way, and does another full build, and once your compiles have basic determinism, add a step that checks that object files between the two builds directories are the same. You could even add incremental checking for specific subdirectories or build targets while you work towards full basic determinism.&lt;br />&lt;br />Once your links are deterministic, check that binaries are identical as well. Once all your build steps are deterministic, compare all files in the two build directories.&lt;br />&lt;br />Once your build has incremental determinism, do an incremental build for the first build and a full build for the second build. Once your build has local determinism, do the two builds at different build paths.&lt;br />&lt;h4>Getting to basic determinism&lt;/h4>Basic determinism needs tools (compiler, linker, etc) that are deterministic. Tools internally must not output things in hash table order, multi-threaded programs must not write output in the order threads finish, etc. All of LLVM’s tools have deterministic outputs when run with the right flags but not necessarily by default.&lt;br />&lt;br />The C standard defines the predefined macros &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">__TIME__&lt;/span> and &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">__DATE__&lt;/span> that expand to the time a source file is compiled. Several compilers, including clang, also define the non-standard &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">__TIMESTAMP__&lt;/span>. This is inherently nondeterministic. You should not use these macros, and you can use &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-Wdate-time&lt;/span> to make the compiler emit a warning when they are used.&lt;br />&lt;br />If they are used in third-party code you don’t control, you can use&lt;span style="background-color: #fff2cc;"> &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-Wno-builtin-macro-redefined -D__DATE__= -D__TIME__= -D__TIMESTAMP__=&lt;/span>&lt;/span> to make them expand to nothing.&lt;br />&lt;br />When targeting Windows, clang and clang-cl by default also embed the current time in a timestamp field in the output .obj file, because Microsoft’s link.exe in &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">/incremental&lt;/span> mode silently mislinks files if that field isn’t set correctly. If you don’t use link.exe’s &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">/incremental&lt;/span> flag, or if you link with lld-link, you should pass &lt;span style="background-color: #fff2cc; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">/Brepro&lt;/span> to clang-cl to make it not write the current timestamp into its output.&lt;br />&lt;br />Both link.exe and lld-link also write the current timestamp into output .dll or .exe files. To make them instead write a hash of the binary into this field, you can pass &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">/Brepro&lt;/span> to the linker as well. However, some tools, such as Windows 7’s app compatibility database, try to interpret that field as an actual timestamp and can get confused if it’s set to a hash of the binary. For this case, lld-link also offers a &lt;span style="background-color: #fff2cc; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">/timestamp:&lt;/span> flag that you can give an explicit timestamp that’s written into the output. You could use this to for example write the time of the commit the code is built at instead of the current time to make it deterministic. (But see the footnote on embedding commit hashes below.)&lt;br />&lt;br />Visual Studio’s assemblers ml.exe and ml64.exe also insist on writing the current time into their output. In situations like this, where you can’t easily fix the tool to write the right output in the first place, you need to write wrappers that fix up the file after the fact. As an example, &lt;a href="https://cs.chromium.org/chromium/src/build/toolchain/win/ml.py" style="background-color: #fff2cc;">ml.py&lt;/a> is the wrapper the Chromium project uses to make ml’s output deterministic.&lt;br />&lt;br />macOS’s libtool and ld64 also insist on writing timestamps into their outputs. You can set the environment variable &lt;span style="background-color: #fff2cc; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">ZERO_AR_DATE&lt;/span> to 1 in a wrapper to make their output deterministic, but that confuses lldb of older Xcode versions.&lt;br />&lt;br />Gcc sometimes uses random numbers in certain symbol mangling situations. Clang does not do this, so there’s no need to pass &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-frandom-seed&lt;/span> to clang.&lt;br />&lt;br />It’s a good idea to make your build independent of environment variables as much as possible, so that accidental local changes in the environment don’t affect the build output. You should pass &lt;span style="background-color: #fff2cc; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">/X&lt;/span> to clang-cl to make it ignore &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">%INCLUDE%&lt;/span> and explicitly pass system include directories via the &lt;span style="background-color: #fff2cc; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-imsvc&lt;/span> switch instead. Likewise, very new lld-link versions (LLVM 10 and newer, at the time of this writing still unreleased) understand the flag &lt;span style="background-color: #fff2cc;">&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">/lldignoreenv&lt;/span>&lt;/span> flag, which makes lld-link ignore the &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">%LIB%&lt;/span> environment variable; explicitly pass system library directories via &lt;span style="background-color: #fff2cc;">&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">/libpath:&lt;/span>&lt;/span>.&lt;br />&lt;br />&lt;b>Footnote on embedding git hashes into the binary&lt;/b>&lt;br />It might be tempting to embed the git commit hash or svn revision that a binary was built at into the binary’s --version output, or use the revision as a cache key to invalidate on-disk caches when the version changes.&lt;br />&lt;br />This doesn’t affect your build’s determinism, but it does affect the hit rate if you’re using deterministic builds to cache test run results. If your binary embeds the current commit, it is guaranteed to change on every single commit, and you won’t be able to cache test results across commits. Even commits that just fix typos in comments, add non-code documentation, or that only affect code used by some but not all of your binaries will change every binary.&lt;br />&lt;br />For cache invalidation, consider using something finer-grained, such as only the latest commit of the directory containing the cache handling code, or the hash of all source files containing the cache handling code.&lt;br />&lt;br />For --version output, if your build is fully deterministic, the hash of the binary itself (and its dynamic library dependencies) can serve as a stable version identifier. You can keep a map of binary hash to all commit hashes that produce that binary somewhere.&lt;br />&lt;br />Windows only: For the same reason, just using the timestamp of the latest commit as a /timestamp: might not be the best option. Rounding the timestamp of the latest commit to 6h (or similar) granularity is a possible approach for not having the timestamp change the binary on every commit, while still keeping the timestamp close to reality. For production builds, the symbol server key for binaries is a (executable size, timestamp) pair, so here having fairly granular timestamps is important to not map binaries from consecutive commits to the same symbol server key. Depending on how often you push production binaries to your symbol servers, you might want to use the timestamp of the latest commit as &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">/timestamp:&lt;/span> for official builds, or you might want to round to finer granularity than you do on dev builds.&lt;br />&lt;h4 style="text-align: left;">Getting to incremental determinism&lt;/h4>Having deterministic incremental builds mostly requires having correct incremental builds, meaning that if a file is changed and the build reruns, everything that uses this file needs to be rebuilt.&lt;br />&lt;br />This is very build system dependent, so this post can’t say much about it.&lt;br />&lt;br />In general, every build step needs to correctly declare all the inputs it depends on.&lt;br />&lt;br />Some tools, such as Visual Studio’s link.exe in &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">/incremental&lt;/span> mode, by design write a different output every time. Don’t use inherently incrementally non-deterministic tools like that if you care about build determinism.&lt;br />&lt;br />The build should not depend on environment variables, since build systems usually don’t model dependencies on environment variables.&lt;br />&lt;h4 style="text-align: left;">Getting to local determinism&lt;/h4>Making build outputs independent of the names of the checkout or build directory means that build outputs must not contain absolute paths, or relative paths that contain the name of either directory.&lt;br />&lt;br />A possible way to arrange for that is to put all build directories into the checkout directory. For example, if your code is at path/to/src, then you could have “out” in your .gitignore and build directories at path/to/src/out/debug, path/to/src/out/release, and so on. The relative path from each build artifact to the source is with “../../” followed by the path of the source file in the source directory, which is identical for each build directory.&lt;br />&lt;br />The C standard defines the predefined macro &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">__FILE__&lt;/span> that expands to the name of the current source file. Clang expands this to an absolute path if it is invoked with an absolute path (`clang -c /absolute/path/to/my/file.cc`), and to a relative path if it is invoked with a relative path (`clang ../../path/to/my/file.cc`). To make your build locally deterministic, &lt;span style="background-color: #fff2cc;">pass relative paths to your .cc files to clang&lt;/span>.&lt;br />&lt;br />By default, clang will internally use absolute paths to refer to compiler-internal headers. Pass &lt;span style="background-color: #fff2cc;">&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-no-canonical-prefixes&lt;/span>&lt;/span> to make clang use relative paths for these internal files.&lt;br />&lt;br />Passing relative paths to clang makes clang expand &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">__FILE__&lt;/span> to a relative path, but paths in debug information are still absolute by default. Pass &lt;span style="background-color: #fff2cc; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-fdebug-compilation-dir .&lt;/span> to make paths in debug information relative to the build directory. (Before LLVM 9, this is an internal clang flag that must be used as `&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-Xclang -fdebug-compilation-dir -Xclang .&lt;/span>`) When using clang’s integrated assembler (the default), &lt;span style="background-color: #fff2cc; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-Wa,-fdebug-compilation-dir,.&lt;/span> will do the same for object files created from assembly input. (For ml.exe / ml64.exe, see the script linked to from the “Basic determinism” section above.)&lt;br />&lt;br />Using this means that debuggers won’t automatically find the source code belonging to your binary. At the moment, there’s no way to tell debuggers to resolve relative paths relative to the location of the binary (&lt;a href="http://dwarfstd.org/ShowIssue.php?issue=171130.2">DWARF proposal&lt;/a>, &lt;a href="https://gnutoolchain-gerrit.osci.io/r/c/binutils-gdb/+/402">gdb patch&lt;/a>). See the end of this section for how to configure common debuggers to work correctly.&lt;br />&lt;br />There are a few flags that try to make compilers produce relative paths in outputs even if the filename passed to the compiler is absolute (&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-fdebug-prefix-map&lt;/span>, &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-ffile-prefix-map&lt;/span>, &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-fmacro-prefix-map&lt;/span>). &lt;span style="background-color: #fff2cc;">Do not use these flags&lt;/span>.&lt;br />&lt;ul style="text-align: left;">&lt;li>They work by adding lhs=rhs replacement patterns, and the lhs must be an absolute path to remove the absolute path from the output. That means that while they make the compile output path-independent, they make the compile command itself path-dependent, which hinders distributed compile caching. With &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-grecord-gcc-switches&lt;/span> or &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-frecord-gcc-switches&lt;/span> the compile command is embedded in debug info or even the object file itself, so in that case the flags even break local determinism. (Both &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-grecord-gcc-switches&lt;/span> and &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-frecord-gcc-switches&lt;/span> default to false in clang.)&lt;/li>&lt;li>They don’t affect the paths in dwo files when using fission; passing relative paths to the compiler is the only way to make these paths relative.&lt;/li>&lt;/ul>On Windows, it’s very unusual to have PDBs with relative paths. You can pass &lt;span style="background-color: #fff2cc; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">/pdbsourcepath:X:\fake\prefix&lt;/span> to lld-link to make it resolve all relative paths in object files against a fixed absolute path to make sure your final PDBs contain absolute paths. Since the absolute path is against a fixed prefix, this doesn’t impair determinism. With this, both binaries and PDBs created by clang-cl and lld-link will be fully deterministic and build path independent.&lt;br />&lt;br />Also on Windows, the linker by default puts the absolute path the to the generated PDB file in the output binary. Pass &lt;span style="background-color: #fff2cc; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">/pdbaltpath:%_PDB%&lt;/span> when you pass &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">/debug&lt;/span> to make the linker write a relative path to the generated PDB file instead. If you have custom build steps that extract PDB names from binaries, you have to make sure these scripts work with relative paths. Microsoft’s tools (debuggers, ETW) work fine with this set in most situations, and you can add a symbol search path in the cases where they don’t (when the binaries are copied before being run).&lt;br />&lt;br />&lt;b>Getting debuggers to work well with locally deterministic builds&lt;/b>&lt;br />At the moment, no debugger offers an option to resolve relative paths in debug info against the directory the debugged binary is in.&lt;br />&lt;br />Some debuggers (gdb, lldb) do try to resolve relative paths against the cwd, so a simple way to make debugging work is to cd into your build directory before debugging.&lt;br />&lt;br />If you don’t want to require devs to cd into the build directory for debugging to work, you have to do debugger-specific configuration tweaks.&lt;br />&lt;br />To make sure devs don’t miss this, you could have your custom init script set an env var and query if it’s set early during your test binary startup, and exit with a message like “Add `source /path/to/your/project/gdbinit` to your ~/.gdbinit” if the environment variable isn’t set.&lt;br />&lt;br />&lt;i>gdb&lt;/i>&lt;br />`dir path/to/build/dir` tells gdb what directory to resolve relative paths against.&lt;br />&lt;br />`show debug-file-directory` prints the list of directories gdb looks in for dwo files. Query that, append `:path/to/build/dir`, and call `set debug-file-directory` to add your build dir to that search path.&lt;br />&lt;br />For an example, see &lt;a href="https://chromium.googlesource.com/chromium/src/+/master/tools/gdb/gdbinit#78">Chromium’s gdbinit&lt;/a> (which also does a few other unrelated things).&lt;br />&lt;br />&lt;i>lldb&lt;/i>&lt;br />`settings set target.source-map ../.. /absolute/path/to/build/dir` can map the “../..” prefix that all .cc files will refer to when using the setup described above with an absolute path. This requires Xcode 10.3 or newer; the lldb shipping with Xcode 10.1 has problems with this setup.&lt;br />&lt;br />For an example, see &lt;a href="https://chromium.googlesource.com/chromium/src/+/master/tools/lldb/lldbinit.py">Chromium’s lldbinit&lt;/a>.&lt;br />&lt;br />&lt;i>Visual Studio’s debugger and windbg&lt;/i>&lt;br />If you use the setup described above,&amp;nbsp; &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">/PDBSourcePath:X:\fake\prefix&lt;/span> will combine with the “..\..\my\file.cc” relative paths to make your code appear at “X:\my\file.cc”. To make Windows debuggers find them, you have two options:&lt;br />&lt;ol style="text-align: left;">&lt;li>Run `subst X: C:\src\real\root` in cmd.exe before launching the debuggers to create a virtual drive that maps X: to the actual source location. Both windbg and Visual Studio will load code over X: this way.&lt;/li>&lt;li>Add “C:\src\real\root” to each debugger’s source search path.&lt;/li>&lt;ul>&lt;li>&lt;a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/source-window#source-path">Windbg&lt;/a>: Run `.srcpath+ C:\src\real\root`. You can also set this via the _NT_SOURCE_PATH&amp;nbsp; environment variable, or via&amp;nbsp; File-&amp;gt;Source File Path (Ctrl+P). Or pass `-srcpath C:\src\real\root` when launching windbg from the command line.&lt;/li>&lt;li>Visual Studio: The IDE has a &lt;a href="https://docs.microsoft.com/en-us/visualstudio/debugger/debug-source-files-common-properties-solution-property-pages-dialog-box?view=vs-2019">“Debug Source Files” property&lt;/a>. Add C:\src\real\root to “Directories containing source code” to Project-&amp;gt;Properties (Alt+F7)-&amp;gt;Common Properties-&amp;gt;Debug Source Files-&amp;gt;Directories containing source code.&lt;/li>&lt;/ul>&lt;/ol>Alternatively, you could pass the absolute path to the actual build directory to &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">/PDBSourcePath:&lt;/span>&amp;nbsp;instead of something like “X:\fake\prefix”. That way, all PDBs have “correct” absolute paths in them, while your compile steps are still path-independent and can share a cache across machines. However, since executables contain a reference to the PDB hash, none of your binaries will be path-independent. This setup doesn’t require any debugger configuration, but it doesn’t allow your builds to be locally deterministic.&lt;br />&lt;h4 style="text-align: left;">Getting to universal determinism&lt;/h4>By now, your build output is deterministic as long as everyone uses the same compiler, and linker binaries, and as long as everyone uses the version of the SDK and system libraries.&lt;br />&lt;br />Making your build independent of that requires making sure that everyone automatically uses the same compiler, linker, and SDK.&lt;br />&lt;br />This might seem like a lot of work, but in addition to build determinism this work also gives you cross builds (where you can e.g. build the Linux version of your product on a Windows host).&lt;br />&lt;br />It also versions the compiler, linker, and SDK used within your code, which means you will be able to update all your bots and devs to new versions automatically (and if an update causes issues, it’s easy to revert it).&lt;br />&lt;br />You need to store the currently-used compiler, linker, and SDK versions in a file in your source control repository, and from some kind of hook that runs after pulling the newest version of the source, download compiler, linker, and SDK of the right version from some kind of cloud storage service.&lt;br />&lt;br />You then need to modify your build files to use &lt;span style="background-color: #fff2cc; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">--sysroot&lt;/span> (Linux), &lt;span style="background-color: #fff2cc; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-isysroot&lt;/span> (macOS), &lt;span style="background-color: #fff2cc;">&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-imsvc&lt;/span>&lt;/span> (Windows) to use these hermetic SDKs for builds. They need to be somewhere below your source root to not regress build directory name invariance.&lt;br />&lt;br />You also want to make sure your build doesn’t depend on environment variables, as already mentioned in the “Getting to incremental determinism”, since environments between different machines can be very different and difficult to control.&lt;br />&lt;br />Build steps shouldn’t embed the hostname of the current machine or the logged-in user name in the build output, or similar.&lt;br />&lt;h4 style="text-align: left;">Summary&lt;/h4>This post explained what deterministic builds are, how build determinism spans a spectrum (local, fixed-build-dir-path-only to fully host-OS-independent) instead of just being binary, and how you can use LLVM’s tools to make your build deterministic. It also touched on techniques you can use to make your test caches more effective.&lt;br />&lt;br />&lt;i>Thanks to Elly Fong-Jones for helping edit and structure this post, and to Adrian McCarthy, Bob Haarman, Bruce Dawson, Dirk Pranke, Fumitoshi Ukai, Hans Wennborg, Kai Naschinski, Reid Kleckner, Rui Ueyama, and Takuto Ikuta for reading drafts and suggesting improvements.&lt;/i>&lt;/div></description></item><item><title>Closing the gap: cross-language LTO between Rust and C/C++</title><link>https://blog.llvm.org/2019/09/closing-gap-cross-language-lto-between.html</link><pubDate>Thu, 19 Sep 2019 05:15:00 +0000</pubDate><guid>https://blog.llvm.org/2019/09/closing-gap-cross-language-lto-between.html</guid><description>Link time optimization (LTO) is LLVM's way of implementing whole-program optimization. &lt;i>Cross-language&lt;/i> LTO is a new feature in the Rust compiler that enables LLVM's link time optimization to be performed across a mixed C/C++/Rust codebase. It is also a feature that beautifully combines two respective strengths of the Rust programming language and the LLVM compiler platform:&lt;br />&lt;ul>&lt;li style="text-indent: 0;">Rust, with its lack of a language runtime and its low-level reach, has an almost unique ability to seamlessly integrate with an existing C/C++ codebase, and&lt;/li>&lt;li style="text-indent: 0;">LLVM, as a language agnostic foundation, provides a common ground where the source language a particular piece of code was written in does not matter anymore.&lt;/li>&lt;/ul>So, what does cross-language LTO do? There are two answers to that:&lt;br />&lt;ul>&lt;li style="text-indent: 0;">From a technical perspective it allows for codebases to be optimized without regard for implementation language boundaries, making it possible for important optimizations, such as function inlining, to be performed across individual compilation units even if, for example, one of the compilation units is written in Rust while the other is written in C++.&lt;/li>&lt;li style="text-indent: 0;">From a psychological perspective, which arguably is just as important, it helps to alleviate the nagging feeling of inefficiency that many performance conscious developers might have when working on a piece of software that jumps back and forth a lot between functions implemented in different source languages.&lt;/li>&lt;/ul>Because Firefox is a large, performance sensitive codebase with substantial parts written in Rust, cross-language LTO has been a long-time favorite wish list item among Firefox developers. As a consequence, we at Mozilla's Low Level Tools team took it upon ourselves to implement it in the Rust compiler.&lt;br />&lt;br />To explain how cross-language LTO works it is useful to take a step back and review how traditional compilation and "regular" link time optimization work in the LLVM world.&lt;br />&lt;br />&lt;br />&lt;h3>Background - A bird's eye view of the LLVM compilation pipeline&lt;/h3>Clang and the Rust compiler both follow a similar compilation workflow which, to some degree, is prescribed by LLVM:&lt;br />&lt;ol>&lt;li style="text-indent: 0;">The compiler front-end generates an LLVM bitcode module (&lt;code>.bc&lt;/code>) for each compilation unit. In C and C++ each source file will result in a single compilation unit. In Rust each crate is translated into at least one compilation unit.&lt;br />&lt;pre>&lt;code style="background-color: #e7e7e7; display: block;">&lt;br /> .c --clang--&amp;gt; .bc&lt;br />&lt;br /> .c --clang--&amp;gt; .bc&lt;br />&lt;br />&lt;br /> .rs --+&lt;br /> |&lt;br /> .rs --+--rustc--&amp;gt; .bc&lt;br /> |&lt;br /> .rs --+&lt;br />&lt;br />&lt;/code>&lt;/pre>&lt;/li>&lt;li style="text-indent: 0;">In the next step, LLVM's optimization pipeline will optimize each LLVM module in isolation: &lt;pre>&lt;code style="background-color: #e7e7e7; display: block;">&lt;br /> .c --clang--&amp;gt; .bc --LLVM--&amp;gt; .bc (opt)&lt;br />&lt;br /> .c --clang--&amp;gt; .bc --LLVM--&amp;gt; .bc (opt)&lt;br />&lt;br />&lt;br /> .rs --+&lt;br /> |&lt;br /> .rs --+--rustc--&amp;gt; .bc --LLVM--&amp;gt; .bc (opt)&lt;br /> |&lt;br /> .rs --+&lt;br />&lt;br />&lt;/code>&lt;/pre>&lt;/li>&lt;li style="text-indent: 0;">LLVM then lowers each module into machine code so that we get one object file per module: &lt;pre>&lt;code style="background-color: #e7e7e7; display: block;">&lt;br /> .c --clang--&amp;gt; .bc --LLVM--&amp;gt; .bc (opt) --LLVM--&amp;gt; .o&lt;br />&lt;br /> .c --clang--&amp;gt; .bc --LLVM--&amp;gt; .bc (opt) --LLVM--&amp;gt; .o&lt;br />&lt;br />&lt;br /> .rs --+&lt;br /> |&lt;br /> .rs --+--rustc--&amp;gt; .bc --LLVM--&amp;gt; .bc (opt) --LLVM--&amp;gt; .o&lt;br /> |&lt;br /> .rs --+&lt;br />&lt;br />&lt;/code>&lt;/pre>&lt;/li>&lt;li style="text-indent: 0;">Finally, the linker will take the set of object files and link them together into a binary: &lt;pre>&lt;code style="background-color: #e7e7e7; display: block;">&lt;br /> .c --clang--&amp;gt; .bc --LLVM--&amp;gt; .bc (opt) --LLVM--&amp;gt; .o ------+&lt;br /> |&lt;br /> .c --clang--&amp;gt; .bc --LLVM--&amp;gt; .bc (opt) --LLVM--&amp;gt; .o ------+&lt;br /> |&lt;br /> +--ld--&amp;gt; bin&lt;br /> .rs --+ |&lt;br /> | |&lt;br /> .rs --+--rustc--&amp;gt; .bc --LLVM--&amp;gt; .bc (opt) --LLVM--&amp;gt; .o --+&lt;br /> |&lt;br /> .rs --+&lt;br />&lt;br />&lt;/code>&lt;/pre>&lt;/li>&lt;/ol>This is the regular compilation workflow if no kind of LTO is involved. As you can see, each compilation unit is optimized in isolation. The optimizer does not know the definition of functions inside of other compilation units and thus cannot inline them or make other kinds of decisions based on what they actually do. To enable inlining and optimizations to happen across compilation unit boundaries, LLVM supports link time optimization.&lt;br />&lt;br />&lt;br />&lt;h3>Link time optimization in LLVM&lt;/h3>The basic principle behind LTO is that some of LLVM's optimization passes are pushed back to the linking stage. Why the linking stage? Because that is the point in the pipeline where the entire program (i.e. the whole set of compilation units) is available at once and thus optimizations across compilation unit boundaries become possible. Performing LLVM work at the linking stage is facilitated via a &lt;a href="http://llvm.org/docs/GoldPlugin.html">plugin&lt;/a> to the linker.&lt;br />&lt;br />Here is how LTO is concretely implemented:&lt;br />&lt;ul>&lt;li style="text-indent: 0;">the compiler translates each compilation unit into LLVM bitcode (i.e. it skips lowering to machine code),&lt;br />&amp;nbsp;&lt;/li>&lt;li style="text-indent: 0;">the linker, via the LLVM linker plugin, knows how to read LLVM bitcode modules like regular object files, and&lt;br />&amp;nbsp;&lt;/li>&lt;li style="text-indent: 0;">the linker, again via the LLVM linker plugin, merges all bitcode modules it encounters and then runs LLVM optimization passes before doing the actual linking.&lt;/li>&lt;/ul>With these capabilities in place a new compilation workflow with LTO enabled for C++ code looks like this: &lt;br />&lt;pre>&lt;code style="background-color: #e7e7e7; display: block;">&lt;br /> .c --clang--&amp;gt; .bc --LLVM--&amp;gt; .bc (opt) ------------------+ - - +&lt;br /> | |&lt;br /> .c --clang--&amp;gt; .bc --LLVM--&amp;gt; .bc (opt) ------------------+ - - +&lt;br /> | |&lt;br /> +-ld+LLVM--&amp;gt; bin&lt;br /> .rs --+ |&lt;br /> | |&lt;br /> .rs --+--rustc--&amp;gt; .bc --LLVM--&amp;gt; .bc (opt) --LLVM--&amp;gt; .o -+&lt;br /> |&lt;br /> .rs --+&lt;br />&lt;br />&lt;/code>&lt;/pre>As you can see our Rust code is still compiled to a regular object file. Therefore, the Rust code is opaque to the optimization taking place at link time. Yet, looking at the diagram it seems like that shouldn't be too hard to change, right?&lt;br />&lt;br />&lt;br />&lt;h3>Cross-language link time optimization&lt;/h3>Implementing cross-language LTO is conceptually simple because the feature is built on the shoulders of giants. Since the Rust compiler uses LLVM all the important building blocks are readily available. The final diagram looks very much as you would expect, with &lt;code>rustc&lt;/code> emitting optimized LLVM bitcode and the LLVM linker plugin incorporating that into the LTO process with the rest of the modules: &lt;br />&lt;pre>&lt;code style="background-color: #e7e7e7; display: block;">&lt;br /> .c --clang--&amp;gt; .bc --LLVM--&amp;gt; .bc (opt) ---------+&lt;br /> |&lt;br /> .c --clang--&amp;gt; .bc --LLVM--&amp;gt; .bc (opt) ---------+&lt;br /> |&lt;br /> +-ld+LLVM--&amp;gt; bin&lt;br /> .rs --+ |&lt;br /> | |&lt;br /> .rs --+--rustc--&amp;gt; .bc --LLVM--&amp;gt; .bc (opt) -----+&lt;br /> |&lt;br /> .rs --+&lt;br />&lt;br />&lt;/code>&lt;/pre>Nonetheless, achieving a production-ready implementation still turned out to be a significant time investment. After figuring out how everything fits together, the main challenge was to get the Rust compiler to produce LLVM bitcode that was compatible with both the bitcode that Clang produces and with what the linker plugin would accept. Some of the issues we ran into where:&lt;br />&lt;ul>&lt;li style="text-indent: 0;">The Rust compiler and Clang are both based on LLVM but they might be using different versions of LLVM. This was further complicated by the fact that Rust's LLVM version often does not match a specific LLVM release, but can be an arbitrary revision from LLVM's repository. We learned that all LLVM versions involved really have to be a close match in order for things to work out. The Rust compiler's documentation now offers a &lt;a href="https://doc.rust-lang.org/rustc/linker-plugin-lto.html#toolchain-compatibility">compatibility table&lt;/a> for the various versions of Rust and Clang.&lt;br />&amp;nbsp;&lt;/li>&lt;li style="text-indent: 0;">The Rust compiler by default performs a special form of LTO, called &lt;a href="https://clang.llvm.org/docs/ThinLTO.html">ThinLTO&lt;/a>, on all compilation units of the same crate before passing them on to the linker. We quickly learned, however, that the LLVM linker plugin crashes with a segmentation fault when trying to perform another round of ThinLTO on a module that had already gone through the process. No problem, we thought and instructed the Rust compiler to disable its own ThinLTO pass when compiling for the cross-language case and indeed everything was fine -- until the segmentation faults mysteriously returned a few weeks later even though ThinLTO was still disabled.&lt;br />&lt;br />We noticed that the problem only occurred in a specific, presumably innocent setting: again two passes of LTO needed to happen, this time the first was a &lt;a href="https://www.llvm.org/docs/LinkTimeOptimization.html">regular LTO&lt;/a> pass within &lt;code>rustc&lt;/code> and the output of that would then be fed into ThinLTO within the linker plugin. This setup, although computationally expensive, was desirable because it produced faster code and allowed for better dead-code elimination on the Rust side. And in theory it should have worked just fine. Yet somehow &lt;code>rustc&lt;/code> produced symbol names that had apparently gone through ThinLTO's mangling even though we checked time and again that ThinLTO was disabled for Rust. We were beginning to seriously question our understanding of LLVM's inner workings as the problem persisted while we slowly ran out of ideas on how to debug this further.&lt;br />&lt;br />You can picture the proverbial lightbulb appearing over our heads when we figured out that Rust's pre-compiled standard library would still have ThinLTO enabled, no matter the compiler settings we were using for our tests. The standard library, including its LLVM bitcode representation, is compiled as part of Rust's binary distribution so it is always compiled with the settings from Rust's build servers. Our local full LTO pass within &lt;code>rustc&lt;/code> would then pull this troublesome bitcode into the output module which in turn would make the linker plugin crash again. Since then ThinLTO is &lt;a href="https://github.com/rust-lang/rust/pull/55264">turned off&lt;/a> for &lt;code>libstd&lt;/code> by default.&lt;br />&amp;nbsp;&lt;/li>&lt;li style="text-indent: 0;">After the above fixes, we succeeded in compiling the entirety of Firefox with cross-language LTO enabled. Unfortunately, we discovered that no actual cross-language optimizations were happening. Both Clang and &lt;code>rustc&lt;/code> were producing LLVM bitcode and LLD produced functioning Firefox binaries, but when looking at the machine code, not even trivial functions were being inlined across language boundaries. After days of debugging (and unfortunately without being aware of &lt;a href="http://llvm.org/docs/Remarks.html">LLVM's optimization remarks&lt;/a> at the time) it turned out that Clang was emitting a &lt;code>target-cpu&lt;/code> attribute on all functions while &lt;code>rustc&lt;/code> didn't, which made LLVM reject inlining opportunities.&lt;br />&lt;br />In order to prevent the feature from silently regressing for similar reasons in the future we put quite a bit of effort into extending the Rust compiler's testing framework and CI. It is now able to compile and run a compatible version of Clang and uses that to perform end-to-end tests of cross-language LTO, making sure that small functions will indeed get inlined across language boundaries.&lt;/li>&lt;/ul>This list could still go on for a while, with each additional target platform holding new surprises to be dealt with. We had to progress carefully by putting in regression tests at every step in order to keep the many moving parts in check. At this point, however, we feel confident in the underlying implementation, with Firefox providing a large, complex, multi-platform test case where things have been working well for several months now.&lt;br />&lt;br />&lt;br />&lt;h3>Using cross-language LTO: a minimal example&lt;/h3>The exact build tool invocations differ depending on whether it is &lt;code>rustc&lt;/code> or Clang performing the final linking step, and whether Rust code is compiled via Cargo or via &lt;code>rustc&lt;/code> directly. Rust's &lt;a href="https://doc.rust-lang.org/rustc/linker-plugin-lto.html">compiler documentation&lt;/a> describes the various cases. The simplest of them, where &lt;code>rustc&lt;/code> directly produces a static library and Clang does the linking, looks as follows: &lt;br />&lt;pre>&lt;code style="background-color: #e7e7e7; display: block;">&lt;br /> # Compile the Rust static library, called "xyz"&lt;br /> rustc --crate-type=staticlib -O -C linker-plugin-lto -o libxyz.a lib.rs&lt;br />&lt;br /> # Compile the C code with "-flto"&lt;br /> clang -flto -c -O2 main.c&lt;br />&lt;br /> # Link everything&lt;br /> clang -flto -O2 main.o -L . -lxyz&lt;br />&lt;br />&lt;/code>&lt;/pre>The &lt;code>-C linker-plugin-lto&lt;/code> option instructs the Rust compiler to emit LLVM bitcode which then can be used for both "full" and "thin" LTO. Getting things set up for the first time can be quite cumbersome because, as already mentioned, all compilers and the linker involved must be compatible versions. In theory, most major linkers will work; in practice LLD seems to be the most reliable one on Linux, with Gold in second place and the BFD linker needing to be at least version 2.32. On Windows and macOS the only linkers properly tested are LLD and &lt;code>ld64&lt;/code> respectively. For &lt;code>ld64&lt;/code> Firefox uses a patched version because the LLVM bitcode that &lt;code>rustc&lt;/code> produces likes to trigger a &lt;a href="https://github.com/froydnj/ld64-aliases-bug">pre-existing issue&lt;/a> this linker has with ThinLTO.&lt;br />&lt;br />&lt;br />&lt;h3>Conclusion&lt;/h3>Cross-language LTO has been enabled for Firefox release builds on Windows, macOS, and Linux for several months at this point and we at Mozilla's Low Level Tools team are pleased with how it turned out. While we still &lt;a href="https://github.com/rust-lang/rust/issues/60059">need to work&lt;/a> on making the initial setup of the feature easier, it already enabled removing duplicated logic from Rust components in Firefox because now code can simply call into the equivalent C++ implementation and rely on those calls to be inlined. Having cross-language LTO in place and continuously tested will definitely lower the psychological bar for implementing new components in Rust, even if they are tightly integrated with existing C++ code.&lt;br />&lt;br />Cross-language LTO is available in the Rust compiler since version 1.34 and works together with Clang 8. Feel free to give it a try and report any problems in the Rust &lt;a href="https://github.com/rust-lang/rust/issues">bug tracker&lt;/a>.&lt;br />&lt;br />&lt;br />&lt;h3>Acknowledgments&lt;/h3>I'd like to thank my Low Level Tools team colleagues David Major, Eric Rahm, and Nathan Froyd for their invaluable help and encouragement, and I'd like to thank Alex Crichton for his tireless reviews on the Rust side.</description></item><item><title>Announcing the program for the 2019 LLVM Developers' Meeting - Bay Area</title><link>https://blog.llvm.org/2019/09/announcing-program-for-2019-llvm.html</link><pubDate>Wed, 04 Sep 2019 07:16:00 +0000</pubDate><guid>https://blog.llvm.org/2019/09/announcing-program-for-2019-llvm.html</guid><description>Announcing the program for the &lt;a href="http://llvm.org/devmtg/2019-10/">2019 LLVM Developers' Meeting&lt;/a> in San Jose, CA! This program is the largest we have ever had and has over 11 tutorials, 29 technical talks, 24 lightning talks, 2 panels, 3 birds of a feather, 14 posters, and 4 SRC talks. Be sure to &lt;a href="https://www.eventbrite.com/e/2019-llvm-developers-meeting-bay-area-tickets-63481303287">register&lt;/a>&amp;nbsp;to attend this event and hear some of these great talks.&lt;br />&lt;br />&lt;b>Keynotes&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#keynote1">Generating Optimized Code with GlobalISel&amp;nbsp;&lt;/a>- Volkan Keles, Daniel Sanders&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#keynote2">Even Better C++ Performance and Productivity: Enhancing Clang to Support Just-in-Time Compilation of Templates&lt;/a>- Hal Finkel&lt;/li>&lt;/ul>&lt;b>Technical Talks&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech1">Using LLVM's portable SIMD with Zig&amp;nbsp;&lt;/a>- Shawn Landden&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech2">Code-Generation for the Arm M-profile Vector Extension&amp;nbsp;&lt;/a>- Sjoerd Meijer&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech3">Alive2: Verifying Existing Optimizations&amp;nbsp;&lt;/a>- Nuno Lopes&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech4">The clang constexpr interpreter&amp;nbsp;&lt;/a>- Nandor Licker&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech5">Souper-Charging Peepholes with Target Machine Info&amp;nbsp;&lt;/a>- Min-Yih Hsu&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech6">Transitioning the Networking Software Toolchain to Clang/LLVM&amp;nbsp;&lt;/a>- Ivan Baev, Jeremy Stenglein, Bharathi Seshadri&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech7">Link Time Optimization For Swift&amp;nbsp;&lt;/a>- Jin Lin&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech8">Hot Cold Splitting Optimization Pass In LLVM&amp;nbsp;&lt;/a>- Aditya Kumar&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech9">Making UB hurt less: security mitigations through automatic variable initialization&amp;nbsp;&lt;/a>- JF Bastien&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech10">Propeller: Profile Guided Large Scale Performance Enhancing Relinker&amp;nbsp;&lt;/a>- Sriraman Tallam&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech11">From C++ for OpenCL to C++ for accelerator devices&amp;nbsp;&lt;/a>- Anastasia Stulova&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech12">LLVM-Canon: Shooting for Clear Diffs&amp;nbsp;&lt;/a>- Michal Paszkowski&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech13">Better C++ debugging using Clang Modules in LLDB&amp;nbsp;&lt;/a>- Raphael Isemann&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech14">Ownership SSA and Semantic SIL&amp;nbsp;&lt;/a>- Michael Gottesman&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech15">arm64e: An ABI for Pointer Authentication&amp;nbsp;&lt;/a>- Ahmed Bougacha, John McCall&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech16">Porting by a 1000 Patches: Bringing Swift to Windows&amp;nbsp;&lt;/a>- Saleem Abdulrasool&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech17">The Penultimate Challange: Constructing bug reports in the Clang Static Analyzer&amp;nbsp;&lt;/a>- KristÃ³f Umann&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech18">Address Spaces in LLVM&amp;nbsp;&lt;/a>- Matt Arsenault&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech19">An MLIR Dialect for High-Level Optimization of Fortran&amp;nbsp;&lt;/a>- Eric Schweitz&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech20">Loop-transformation #pragmas in the front-end&amp;nbsp;&lt;/a>- Michael Kruse&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech21">Optimizing builds on Windows: some practical considerations&amp;nbsp;&lt;/a>- Alexandre Ganea&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech22">LLVM-Reduce for testcase reduction&amp;nbsp;&lt;/a>- Diego TreviÃ±o Ferrer&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech23">Memoro: Scaling an LLVM-based Heap profiler&amp;nbsp;&lt;/a>- Thierry Treyer&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech24">The Attributor: A Versatile Inter-procedural Fixpoint Iteration Framework&amp;nbsp;&lt;/a>- Johannes Doerfert&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech25">LLVM Tutorials: How to write Beginner-Friendly, Inclusive Tutorials&amp;nbsp;&lt;/a>- Meike BaumgÃ¤rtner&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tech26">Maturing an LLVM backend: Lessons learned from the RISC-V target&amp;nbsp;&lt;/a>- Alex Bradbury&lt;/li>&lt;/ul>&lt;b>Tutorials&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tut1">Getting Started With LLVM: Basics&amp;nbsp;&lt;/a>- Jessica Paquette, Florian Hahn&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tut2">ASTImporter: Merging Clang ASTs&amp;nbsp;&lt;/a>- GÃ¡bor MÃ¡rton&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tut3">Developing the Clang Static Analyzer&amp;nbsp;&lt;/a>- Artem Dergachev&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tut4">Writing an LLVM Pass: 101&amp;nbsp;&lt;/a>- Andrzej Warzynski&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tut5">Writing Loop Optimizations in LLVM&amp;nbsp;&lt;/a>- Kit Barton, Ettore Tiotto, Hal Finkel, Michael Kruse, Johannes Doerfert&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tut6">The Attributor: A Versatile Inter-procedural Fixpoint Iteration Framework&amp;nbsp;&lt;/a>- Johannes Doerfert&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tut7">Getting Started with the LLVM Testing Infrastructure&amp;nbsp;&lt;/a>- Brian Homerding, Michael Kruse&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tut8">An overview of Clang&amp;nbsp;&lt;/a>- Sven Van Haastregt, Anastasia Stulova&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tut9">An overview of LLVM&amp;nbsp;&lt;/a>- Eric Christopher, Sanjoy Das, Johannes Doerfert&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tut10">How to Contribute to LLVM&amp;nbsp;&lt;/a>- Chris Bieneman, Kit Barton&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#tut11">My First Clang Warning&amp;nbsp;&lt;/a>- Dmitri Gribenko, Meike Baumgartner&lt;/li>&lt;/ul>&lt;b>Student Research Competition&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#src1">Cross-Translation Unit Optimization via Annotated Headers&amp;nbsp;&lt;/a>- William S. Moses&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#src2">Quantifying Dataflow Analysis with Gradients in LLVM&amp;nbsp;&lt;/a>- Abhishek Shah&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#src1">Floating Point Consistency in the Wild: A practical evaluation of how compiler optimizations affect high performance floating point code&amp;nbsp;&lt;/a>- Jack J Garzella&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#src1">Static Analysis of OpenMP Data Mapping for Target Offloading&amp;nbsp;&lt;/a>- Prithayan Barua&lt;/li>&lt;/ul>&lt;b>Panels&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#pan1">Panel: Inter-procedural Optimization (IPO)&amp;nbsp;&lt;/a>- Teresa Johnson, Philip Reames, Chandler Carruth, Johannes Doerfert&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#pan2">The Loop Optimization Working Group&amp;nbsp;&lt;/a>- Kit Barton, Michael Kruse, TBD&lt;/li>&lt;/ul>&lt;b>Birds of a Feather&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#bof1">LLDB&amp;nbsp;&lt;/a>- Jonas Devlieghere&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#bof2">Towards Better Code Generator Design and Unification for a Stack Machine&amp;nbsp;&lt;/a>- Leonid Kholodov, Dmitry Borisenkov&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#bof3">Debug Info&amp;nbsp;&lt;/a>- Adrian Prantl&lt;/li>&lt;/ul>&lt;b>Lightning Talks&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit1">GWP-ASan: Zero-Cost Detection of MEmory Safety Bugs in Production&amp;nbsp;&lt;/a>- Matt Morehouse&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit2">When 3 Memory Models Arenâ€™t Enough â€“ OpenVMS on x86&amp;nbsp;&lt;/a>- John Reagan&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit3">FileCheck: learning arithmetic&amp;nbsp;&lt;/a>- Thomas Preud'homme&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit4">-Wall Found Programming Errors and Engineering Effort to Enable Across a Large Codebase&amp;nbsp;&lt;/a>- Aditya Kumar&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit5">Handling 1000s of OpenCL builtin functions in Clang&amp;nbsp;&lt;/a>- Sven van Haastregt&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit6">NEC SX-Aurora as a Scalable Vector Playground&amp;nbsp;&lt;/a>- Kazuhisa Ishizaka&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit7">Implementing Machine Code Optimizations for RISC-V&amp;nbsp;&lt;/a>- Lewis Revill&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit8">Optimization Remarks Update&amp;nbsp;&lt;/a>- Francis Visoiu Mistrih&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit9">Supporting Regular and Thin LTO with a Single LTO Bitcode Format&amp;nbsp;&lt;/a>- Matthew Voss&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit10">Transitioning Appleâ€™s Downstream llvm-project Repositories to the Monorepo&amp;nbsp;&lt;/a>- Alex Lorenz&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit11">A Unified Debug Server For Deeply Embedded Systems and LLDB&amp;nbsp;&lt;/a>- Simon Cook&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit12">State of LLDB and Deeply Embedded RISC-V&amp;nbsp;&lt;/a>- Simon Cook&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit13">Supporting a Vendor ABI Variant in Clang&amp;nbsp;&lt;/a>- Paul Robinson&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit14">Speculative Compilation in ORC JIT&amp;nbsp;&lt;/a>- Praveen Velliengiri&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit15">Optimization Remarks for Human Beings&amp;nbsp;&lt;/a>- William Bundy&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit16">Improving the Optimized Debugging Experience&amp;nbsp;&lt;/a>- Orlando Cazalet-Hyams&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit17">Improving your TableGen Descriptions&amp;nbsp;&lt;/a>- Javed Absar&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit18">Loom: Weaving Instrumentation for Program Analysis&amp;nbsp;&lt;/a>- Brian Kidney&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit19">Clang Interface Stubs: Syntax Directed Stub Library Generation.&amp;nbsp;&lt;/a>- Puyan Lotfi&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit20">Flang Update&amp;nbsp;&lt;/a>- Steve Scalpone&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit21">Lowering tale: Supporting 64 bit pointers in RISCV 32 bit LLVM backend&amp;nbsp;&lt;/a>- Reshabh Sharma&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit22">Virtual Function Elimination in LLVM&amp;nbsp;&lt;/a>- Oliver Stannard&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit23">Making a Language Cross Platform: Libraries and Tooling&amp;nbsp;&lt;/a>- Gwen Mittertreiner&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit24">Grafter - A use case to implement an embedded DSL in C++ and perform source to source traversal fusion transformation using Clang&amp;nbsp;&lt;/a>- Laith Sakka&lt;/li>&lt;/ul>&lt;b>Posters&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#post1">TON Labs Backend for TON Blockchain&amp;nbsp;&lt;/a>- Dmitry Borisenkov, Dmitry Shtukenberg, Leonid Kholodov&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#post2">LLVM Build Times Using a Program Repository&amp;nbsp;&lt;/a>- Rusell Gallop, Phil Camp&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#post3">RISC-V Bit Manipulation Support in the Clang/LLVM Toolchain&amp;nbsp;&lt;/a>- Scott Egerton, Paolo Savini&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#post4">Attributor, a Framework for Interprocedural Information Deduction&amp;nbsp;&lt;/a>- Johannes Doerfert, Hideto Ueno, Stefan Stipanovic&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#post6">Overflows Be Gone: Checked C for Memory Safety&amp;nbsp;&lt;/a>- Mandeep Singh Grang&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#src1">Cross-Translation Unit Optimization via Annotated Headers&amp;nbsp;&lt;/a>- William S. Moses&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#src2">Quantifying Dataflow Analysis with Gradients in LLVM&amp;nbsp;&lt;/a>- Abhishek Shah&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#src3">Floating Point Consistency in the Wild: A practical evaluation of how compiler optimizations affect high performance floating point code&amp;nbsp;&lt;/a>- Jack J Garzella&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#src4">Static Analysis of OpenMP Data Mapping for Target Offloading&amp;nbsp;&lt;/a>- Prithayan Barua&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit6">NEC SX-Aurora as a Scalable Vector Playground&amp;nbsp;&lt;/a>- Kazuhisa Ishizaka&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit11">A Unified Debug Server For Deeply Embedded Systems and LLDB&amp;nbsp;&lt;/a>- Simon Cook&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit14">Speculative Compilation in ORC JIT&amp;nbsp;&lt;/a>- Praveen Velliengiri&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit18">Loom: Weaving Instrumentation for Program Analysis&amp;nbsp;&lt;/a>- Brian Kidney&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-10/talk-abstracts.html#lit21">Lowering tale: Supporting 64 bit pointers in RISCV 32 bit LLVM backend&amp;nbsp;&lt;/a>- Reshabh Sharma&lt;/li>&lt;/ul>&lt;div>&lt;br />&lt;/div>&lt;div>&lt;br />&lt;/div></description></item><item><title>The LLVM Project is Moving to GitHub</title><link>https://blog.llvm.org/2019/08/the-llvm-project-is-moving-to-github.html</link><pubDate>Thu, 01 Aug 2019 16:17:00 +0000</pubDate><guid>https://blog.llvm.org/2019/08/the-llvm-project-is-moving-to-github.html</guid><description>&lt;h2 dir="ltr" style="line-height: 1.38; margin-bottom: 6pt; margin-top: 18pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 16pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">The LLVM Project is Moving to GitHub&lt;/span>&lt;/h2>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">After several years of discussion and planning, the LLVM project is getting ready to complete the migration of its source code from SVN to GitHub!&amp;nbsp; At last year’s developer meeting, many interested community members convened at a series of round tables to lay out a plan to completely migrate LLVM source code from SVN to GitHub by the 2019 U.S. Developer’s Meeting.&amp;nbsp; We have made great progress over the last nine months and are on track to complete the migration on October 21, 2019.&lt;/span>&lt;/div>&lt;b id="docs-internal-guid-f32f98d3-7fff-9e07-9f74-3d7b965098f0" style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-family: -webkit-standard; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">As part of the migration to GitHub we are maintaining the ‘monorepo’ layout which currently exists in SVN.&amp;nbsp; This means that there will be a single git repository with one top-level directory for each LLVM sub-project.&amp;nbsp; This will be a change for those of you who are already using git and &lt;/span>&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;">accessing the code via the official sub-project git mirrors (e.g. &lt;/span>&lt;a href="https://git.llvm.org/git/llvm.git" style="text-decoration: none;">&lt;span style="-webkit-text-decoration-skip: none; color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">https://git.llvm.org/git/llvm.git&lt;/span>&lt;/a>&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;">) where each sub-project has its own repository.&lt;/span>&lt;/div>&lt;b style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-family: -webkit-standard; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">One of the first questions people ask when they hear about the GitHub plans is: Will the project start using GitHub pull requests and issues?&amp;nbsp; And the answer to that for now is: no. The current transition plan focuses on migrating only the source code. We will continue to use &lt;/span>&lt;a href="https://reviews.llvm.org/" style="text-decoration: none;">&lt;span style="-webkit-text-decoration-skip: none; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">Phabricator&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> for code reviews, and &lt;/span>&lt;a href="http://bugs.llvm.org/" style="text-decoration: none;">&lt;span style="-webkit-text-decoration-skip: none; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">bugzilla&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> for issue tracking after the migration is complete.&amp;nbsp; We have not ruled out using pull requests and issues at some point in the future, but these are discussions we still need to have as a community.&lt;/span>&lt;/div>&lt;b style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-family: -webkit-standard; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">The most important takeaway from this post, though, is that if you consume the LLVM source code in any way, you need to take action now to migrate your workflows.&amp;nbsp; If you manage any continuous integration or other systems that need read-only access to the LLVM source code, you should begin pulling from the official &lt;/span>&lt;a href="https://github.com/llvm/llvm-project" style="text-decoration: none;">&lt;span style="-webkit-text-decoration-skip: none; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">GitHub&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> repository instead of SVN or the current sub-project mirrors.&amp;nbsp; If you are a developer that needs to commit code, please use the &lt;/span>&lt;a href="https://llvm.org/docs/GettingStarted.html#for-developers-to-commit-changes-from-git" style="text-decoration: none;">&lt;span style="-webkit-text-decoration-skip: none; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">git-llvm&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> script for committing changes.&lt;/span>&lt;/div>&lt;b style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-family: -webkit-standard; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">We have created a &lt;/span>&lt;a href="http://llvm.org/GitHubMigrationStatus.html" style="text-decoration: none;">&lt;span style="-webkit-text-decoration-skip: none; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">status&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> page, if you want to track the current progress of the migration.&amp;nbsp; We will be posting updates to this page as we get closer to the completion date.&amp;nbsp; If you run into issues of any kind with GitHub you can file a bug in &lt;/span>&lt;a href="http://bugs.llvm.org/" style="text-decoration: none;">&lt;span style="-webkit-text-decoration-skip: none; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">bugzilla&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> and mark it as a blocker of the github tracking &lt;/span>&lt;a href="https://llvm.org/PR39393" style="text-decoration: none;">&lt;span style="-webkit-text-decoration-skip: none; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">bug&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">.&lt;/span>&lt;/div>&lt;b style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-family: -webkit-standard; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">This entire process has been a large community effort.&amp;nbsp; Many many people have put in time discussing, planning, and implementing all the steps required to make this happen.&amp;nbsp; Thank you to everyone who has been involved and let’s keep working to make this migration a success.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Blog post by Tom Stellard.&lt;/span>&lt;/div>&lt;br class="Apple-interchange-newline" /></description></item><item><title>LLVM and Google Season of Docs</title><link>https://blog.llvm.org/2019/05/llvm-and-google-season-of-docs.html</link><pubDate>Fri, 24 May 2019 11:09:00 +0000</pubDate><guid>https://blog.llvm.org/2019/05/llvm-and-google-season-of-docs.html</guid><description>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">The LLVM Project is pleased to announce that we have been selected to participate in Google’s Season of Docs! &lt;/span>&lt;/div>&lt;b id="docs-internal-guid-586dda0c-7fff-4151-4408-35b41e7affdd" style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-family: -webkit-standard; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Our project idea list may be found here:&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;a href="http://llvm.org/SeasonOfDocs.html">http://llvm.org/SeasonOfDocs.html&lt;/a>&lt;/span>&lt;/div>&lt;b style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-family: -webkit-standard; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">From now until May 29th, technical writers are encouraged to review the proposed project ideas and to ask any questions you have on our &lt;/span>&lt;span style="-webkit-text-decoration-skip: none; background-color: transparent; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; vertical-align: baseline; white-space: pre-wrap;">gsdocs@llvm.org&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> mailing list. Other documentation ideas are allowed, but we can not guarantee that a mentor will be found for the project. You are encouraged to discuss new ideas on the mailing list prior to submitting your technical writer application, in order to start the process of finding a mentor.&lt;/span>&lt;/div>&lt;b style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-family: -webkit-standard; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">When submitting your application for an LLVM documentation project, please consider the following:&lt;/span>&lt;/div>&lt;b style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-family: -webkit-standard; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;">&lt;br />&lt;/b>&lt;ul style="margin-bottom: 0pt; margin-top: 0pt;">&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline; white-space: pre;">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Include Prior Experience:&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> Do you have prior technical writing experience? We want to see this! Considering including links to prior documentation or attachments of documentation you have written. If you can’t include a link to the actual documentation, please describe in detail what you wrote, who the audience was, and any other important information that can help us gauge your prior experience. Please also include any experience with Sphinx or other documentation generation tools.&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline; white-space: pre;">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Take your time writing the proposal:&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> We will be looking closely at your application to see how well it is written. Take the time to proofread and know who your audience is.&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline; white-space: pre;">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Propose your plan for our documentation project:&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> We have given a rough idea of what changes or topics we envision for the documentation, but this is just a start. We expect you to take the idea and expand or modify it as you see fit. Review our existing documentation and see how it would compliment or replace other pieces. Optionally include an overview or document design or layout plan in your application.&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 700; list-style-type: disc; text-decoration: none; vertical-align: baseline; white-space: pre;">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Become familiar with our project: &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant-caps: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">We don’t expect you to become a compiler expert, but we do expect you read up on our project to learn a bit about LLVM. &lt;/span>&lt;/div>&lt;/li>&lt;/ul>&lt;br />&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;">We look forward to working with some fabulous technical writers and improving our documentation. Again, please email &lt;/span>&lt;span style="-webkit-text-decoration-skip: none; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;">gsdocs@llvm.org&lt;/span>&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"> with your questions.&lt;/span></description></item><item><title>LLVM Numerics Blog</title><link>https://blog.llvm.org/2019/03/llvm-numerics-blog.html</link><pubDate>Fri, 15 Mar 2019 15:47:00 +0000</pubDate><guid>https://blog.llvm.org/2019/03/llvm-numerics-blog.html</guid><description>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">Keywords: Numerics, Clang, LLVM-IR, :&amp;nbsp;2019 LLVM Developers' Meeting,&amp;nbsp;LLVMDevMtg.&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal; min-height: 13px;">&lt;span style="font-kerning: none;">&lt;/span>&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">The goal of this blog post is to start a discussion about numerics in LLVM –&amp;nbsp;where we are, recent work and things that remain to be done.&amp;nbsp; There will be an informal discussion on numerics at the 2019 EuroLLVM conference next month. One purpose of this blog post is to refresh everyone's memory on where we are on the topic of numerics to restart the discussion.&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal; min-height: 13px;">&lt;span style="font-kerning: none;">&lt;/span>&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">In the last year or two there has been a push to allow fine-grained decisions on which optimizations are legitimate for any given piece of IR.&amp;nbsp; In earlier days there were two main modes of operation: fast-math and precise-math.&amp;nbsp; When operating under the rules of precise-math, defined by IEEE-754, a significant number of potential optimizations on sequences of arithmetic instructions are not allowed because they could lead to violations of the standard. &amp;nbsp;&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal; min-height: 13px;">&lt;span style="font-kerning: none;">&lt;/span>&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">For example:&amp;nbsp;&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal; min-height: 13px;">&lt;span style="font-kerning: none;">&lt;/span>&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">The Reassociation optimization pass is generally not allowed under precise code generation as it can change the order of operations altering the creation of NaN and Inf values propagated at the expression level as well as altering precision. &amp;nbsp;&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal; min-height: 13px;">&lt;span style="font-kerning: none;">&lt;/span>&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">Precise code generation is often overly restrictive, so an alternative fast-math mode is commonly used where all possible optimizations are allowed, acknowledging that this impacts the precision of results and possibly IEEE compliant behavior as well.&amp;nbsp; In LLVM, this can be enabled by setting the unsafe-math flag at the module level, or passing the -funsafe-math-optimizations to clang which then sets flags on the IR it generates.&amp;nbsp; Within this context the compiler often generates shorter sequences of instructions to compute results, and depending on the context this may be acceptable.&amp;nbsp; Fast-math is often used in computations where loss of precision is acceptable.&amp;nbsp; For example when computing the color of a pixel, even relatively low precision is likely to far exceed the perception abilities of the eye, making shorter instruction sequences an attractive trade-off.&amp;nbsp; In long-running simulations of physical events however loss of precision can mean that the simulation drifts from reality making the trade-off unacceptable.&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal; min-height: 13px;">&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal; min-height: 13px;">&lt;span style="-webkit-text-stroke-width: initial;">Several years ago LLVM IR instructions gained the ability of being annotated with flags that can drive optimizations with more granularity than an all-or-nothing decision at the module level.&lt;/span>&lt;span style="-webkit-text-stroke-width: initial;">&amp;nbsp; &lt;/span>&lt;span style="-webkit-text-stroke-width: initial;">The IR flags in question are:&lt;/span>&lt;span style="-webkit-text-stroke-width: initial;">&amp;nbsp;&lt;/span>&lt;span style="font-kerning: none;">&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal; min-height: 13px;">&lt;span style="font-kerning: none;">&lt;/span>&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">&lt;b>nnan, ninf, nsz, arcp, contract, afn, reassoc, nsw, nuw, exact&lt;/b>. &amp;nbsp;&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal; min-height: 13px;">&lt;span style="font-kerning: none;">&lt;/span>&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">Their exact meaning is described in the &lt;a href="https://llvm.org/docs/LangRef.html#fast-math-flags%22%3ELLVM%20Language%20Reference%20Manual%3C/a%3E">&lt;span style="-webkit-font-kerning: none;">LLVM Language Reference Manual&lt;/span>&lt;/a>. &amp;nbsp; When all the flags are are &lt;b>enabled&lt;/b>, we get the current fast-math behavior.&amp;nbsp; When these flags are &lt;b>disabled&lt;/b>, we get precise math behavior.&amp;nbsp; There are also several options available between these two models that may be attractive to some applications.&amp;nbsp; In the past year several members of the LLVM community worked on making IR optimizations passes aware of these flags.&amp;nbsp; When the unsafe-math module flag is not set these optimization passes will work by examining individual flags, allowing fine-grained selection of the optimizations that can be enabled on specific instruction sequences.&amp;nbsp; This allows vendors/implementors to mix fast and precise computations in the same module, aggressively optimizing some instruction sequences but not others.&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal; min-height: 13px;">&lt;span style="font-kerning: none;">&lt;/span>&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">We now have good coverage of IR passes in the LLVM codebase, in particular in the following areas:&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">* Intrinsic and libcall management&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">* Instruction Combining and Simplification&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">* Instruction definition&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">* SDNode definition&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">* GlobalIsel Combining and code generation&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">* Selection DAG code generation&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">* DAG Combining&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">* Machine Instruction definition&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">* IR Builders (SDNode, Instruction, MachineInstr)&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">* CSE tracking&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">* Reassociation&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">* Bitcode&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal; min-height: 13px;">&lt;span style="font-kerning: none;">&lt;/span>&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">There are still some areas that need to be reworked for modularity, including vendor specific back-end passes. &amp;nbsp;&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal; min-height: 13px;">&lt;span style="font-kerning: none;">&lt;/span>&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none;">The following are some of the contributions mentioned above from the last 2 years of open source development:&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal; min-height: 10px;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">&lt;/span>&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 114); -webkit-text-stroke-width: initial; color: #000072; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D45781">https://reviews.llvm.org/D45781&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : MachineInst support mapping SDNode fast math flags for support in Back End code generation&lt;/span>&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgba(0, 0, 0, 0.85098); color: black; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgba(0, 0, 0, 0.85098); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-family: Helvetica; font-stretch: normal; font-variant-ligatures: no-common-ligatures; line-height: normal; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D46322">https://reviews.llvm.org/D46322&lt;/a>&lt;/span>&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(0, 0, 0); font-family: Helvetica; font-stretch: normal; font-variant-ligatures: no-common-ligatures; line-height: normal;"> :&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> [SelectionDAG] propagate 'afn' and 'reassoc' from IR fast-math-flags&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 114); -webkit-text-stroke-width: initial; color: #000072; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D45710">https://reviews.llvm.org/D45710&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : Fast Math Flag mapping into SDNode&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgba(0, 0, 0, 0.85098); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-family: Helvetica; font-stretch: normal; font-variant-ligatures: no-common-ligatures; line-height: normal; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D46854">https://reviews.llvm.org/D46854&lt;/a>&lt;/span>&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(0, 0, 0); font-family: Helvetica; font-stretch: normal; font-variant-ligatures: no-common-ligatures; line-height: normal;"> : &lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">[DAG] propagate FMF for all FPMathOperators&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 114); -webkit-text-stroke-width: initial; color: #000072; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D48180">https://reviews.llvm.org/D48180&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : updating isNegatibleForFree and GetNegatedExpression with fmf for fadd&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D48057:">https://reviews.llvm.org/D48057:&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> easing the constraint for isNegatibleForFree and GetNegatedExpression&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D47954">https://reviews.llvm.org/D47954&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : Utilize new SDNode flag functionality to expand current support for fdiv&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D47918">https://reviews.llvm.org/D47918&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : Utilize new SDNode flag functionality to expand current support for fma&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D47909">https://reviews.llvm.org/D47909&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : Utilize new SDNode flag functionality to expand current support for fadd&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D47910">https://reviews.llvm.org/D47910&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : Utilize new SDNode flag functionality to expand current support for fsub&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D47911">https://reviews.llvm.org/D47911&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : Utilize new SDNode flag functionality to expand current support for fmul&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D48289">https://reviews.llvm.org/D48289&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : refactor of visitFADD for AllowNewConst cases&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D47388">https://reviews.llvm.org/D47388&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : propagate fast math flags via IR on fma and sub expressions&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D47389">https://reviews.llvm.org/D47389&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : guard fneg with fmf sub flags&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D47026">https://reviews.llvm.org/D47026&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : fold FP binops with undef operands to NaN&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D47749">https://reviews.llvm.org/D47749&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : guard fsqrt with fmf sub flags&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D46447">https://reviews.llvm.org/D46447&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : Mapping SDNode flags to MachineInstr flags&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(53, 134, 255); -webkit-text-stroke-width: initial; color: #3586ff; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/rL334970">rL334970: [NFC] make MIFlag accessor functions consistant with usage model&lt;/a>&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(53, 134, 255); -webkit-text-stroke-width: initial; color: #3586ff; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/rL338604">rL338604: [NFC] small addendum to r334242, FMF propagation&lt;/a>&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D50195">https://reviews.llvm.org/D50195&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : extend folding fsub/fadd to fneg for FMF&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/rL339197">https://reviews.llvm.org/rL339197&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [NFC] adding tests for Y - (X + Y) --&amp;gt; -X&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D50417">https://reviews.llvm.org/D50417&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [InstCombine] fold fneg into constant operand of fmul/fdiv&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/rL339357">https://reviews.llvm.org/rL339357&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : extend folding fsub/fadd to fneg for FMF&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D50996">https://reviews.llvm.org/D50996&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : extend binop folds for selects to include true and false binops flag intersection&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/rL339938">https://reviews.llvm.org/rL339938&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : add a missed case for binary op FMF propagation under select folds&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D51145">https://reviews.llvm.org/D51145&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : Guard FMF context by excluding some FP operators from FPMathOperator&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/rL341138">https://reviews.llvm.org/rL341138&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : adding initial intersect test for Node to Instruction association&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/rL341565">https://reviews.llvm.org/rL341565&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : in preparation for adding nsw, nuw and exact as flags to MI&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(53, 134, 255); -webkit-text-stroke-width: initial; color: #3586ff; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D51738">https://reviews.llvm.org/D51738&lt;/a>&lt;/span>&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(0, 0, 0); color: black; font-variant-ligatures: no-common-ligatures;"> : add IR flags to MI&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D52006">https://reviews.llvm.org/D52006&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : Copy utilities updated and added for MI flags&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/rL342598">https://reviews.llvm.org/rL342598&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : add new flags to a DebugInfo lit test&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D53874">https://reviews.llvm.org/D53874&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [InstSimplify] fold 'fcmp nnan oge X, 0.0' when X is not negative&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D55668">https://reviews.llvm.org/D55668&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : Add FMF management to common fp intrinsics in GlobalIsel&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/rL352396">https://reviews.llvm.org/rL352396&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [NFC] TLI query with default(on) behavior wrt DAG combines for fmin/fmax target…&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/rL316753">https://reviews.llvm.org/rL316753&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> (Fold fma (fneg x), K, y -&amp;gt; fma x, -K, y)&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D57630">https://reviews.llvm.org/D57630&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : Move IR flag handling directly into builder calls for cases translated from Instructions in GlobalIsel&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/rL332756">https://reviews.llvm.org/rL332756&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : adding baseline fp fold tests for unsafe on and off&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/rL334035">https://reviews.llvm.org/rL334035&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : NFC: adding baseline fneg case for fmf&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/rL325832">https://reviews.llvm.org/rL325832&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [InstrTypes] add frem and fneg with FMF creators&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D41342">https://reviews.llvm.org/D41342&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [InstCombine] Missed optimization in math expression: simplify calls exp functions&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D52087">https://reviews.llvm.org/D52087&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [IRBuilder] Fixup CreateIntrinsic to allow specifying Types to Mangle.&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D52075">https://reviews.llvm.org/D52075&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [InstCombine] Support (sub (sext x), (sext y)) --&amp;gt; (sext (sub x, y)) and (sub (zext x), (zext y)) --&amp;gt; (zext (sub x, y))&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/rL338059">https://reviews.llvm.org/rL338059&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [InstCombine] fold udiv with common factor from muls with nuw&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">Commit: e0ab896a84be9e7beb59874b30f3ac51ba14d025 : [InstCombine] allow more fmul folds with ‘reassoc'&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">Commit: 3e5c120fbac7bdd4b0ff0a3252344ce66d5633f9 : [InstCombine] distribute fmul over fadd/fsub&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D37427">https://reviews.llvm.org/D37427&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [InstCombine] canonicalize fcmp ord/uno with constants to null constant&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D40130">https://reviews.llvm.org/D40130&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [InstSimplify] fold and/or of fcmp ord/uno when operand is known nnan&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D40150">https://reviews.llvm.org/D40150&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [LibCallSimplifier] fix pow(x, 0.5) -&amp;gt; sqrt() transforms&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D39642">https://reviews.llvm.org/D39642&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [ValueTracking] readnone is a requirement for converting sqrt to llvm.sqrt; nnan is not&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D39304">https://reviews.llvm.org/D39304&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [IR] redefine 'reassoc' fast-math-flag and add 'trans' fast-math-flag&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D41333">https://reviews.llvm.org/D41333&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [ValueTracking] ignore FP signed-zero when detecting a casted-to-integer fmin/fmax pattern&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D5584">https://reviews.llvm.org/D5584&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : Optimize square root squared (PR21126)&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D42385">https://reviews.llvm.org/D42385&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [InstSimplify] (X * Y) / Y --&amp;gt; X for relaxed floating-point ops&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D43160">https://reviews.llvm.org/D43160&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [InstSimplify] allow exp/log simplifications with only 'reassoc’ FMF&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D43398">https://reviews.llvm.org/D43398&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [InstCombine] allow fdiv folds with less than fully 'fast’ ops&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D44308">https://reviews.llvm.org/D44308&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [ConstantFold] fp_binop AnyConstant, undef --&amp;gt; NaN&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D43765">https://reviews.llvm.org/D43765&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [InstSimplify] loosen FMF for sqrt(X) * sqrt(X) --&amp;gt; X&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D44521">https://reviews.llvm.org/D44521&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [InstSimplify] fp_binop X, NaN --&amp;gt; NaN&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D47202">https://reviews.llvm.org/D47202&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [CodeGen] use nsw negation for abs&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D48085">https://reviews.llvm.org/D48085&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [DAGCombiner] restrict (float)((int) f) --&amp;gt; ftrunc with no-signed-zeros&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D48401">https://reviews.llvm.org/D48401&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [InstCombine] fold vector select of binops with constant ops to 1 binop (PR37806)&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D39669">https://reviews.llvm.org/D39669&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : DAG: Preserve nuw when reassociating adds&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D39417">https://reviews.llvm.org/D39417&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : InstCombine: Preserve nuw when reassociating nuw ops&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D51753">https://reviews.llvm.org/D51753&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [DAGCombiner] try to convert pow(x, 1/3) to cbrt(x)&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(53, 134, 255); color: #3586ff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D51630">https://reviews.llvm.org/D51630&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [DAGCombiner] try to convert pow(x, 0.25) to sqrt(sqrt(x))&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(17, 141, 255); color: #118dff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D53650">https://reviews.llvm.org/D53650&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [FPEnv] Last BinaryOperator::isFNeg(...) to m_FNeg(...) changes&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(17, 141, 255); color: #118dff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D54001">https://reviews.llvm.org/D54001&lt;/a>&lt;/span>&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(17, 141, 255); color: #118dff; font-variant-ligatures: no-common-ligatures;"> &lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">: [ValueTracking] determine sign of 0.0 from select when matching min/max FP&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(17, 141, 255); color: #118dff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://reviews.llvm.org/D51942">https://reviews.llvm.org/D51942&lt;/a>&lt;/span>&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(17, 141, 255); color: #118dff; font-variant-ligatures: no-common-ligatures;"> &lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">: [InstCombine] Fold (C/x)&amp;gt;0 into x&amp;gt;0 if possible&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(17, 141, 255); color: #118dff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="https://llvm.org/svn/llvm-project/llvm/trunk@348016">https://llvm.org/svn/llvm-project/llvm/trunk@348016&lt;/a>&lt;/span>&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(17, 141, 255); color: #118dff; font-variant-ligatures: no-common-ligatures;"> : &lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">[SelectionDAG] fold FP binops with 2 undef operands to undef&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(17, 141, 255); -webkit-text-stroke-width: initial; color: #118dff; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=346242">http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=346242&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> :&lt;/span>&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(0, 0, 0); color: black; font-variant-ligatures: no-common-ligatures;"> propagate fast-math-flags when folding fcmp+fpext, part 2&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(17, 141, 255); -webkit-text-stroke-width: initial; color: #118dff; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=346240">http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=346240&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> &lt;/span>&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(0, 0, 0); color: black; font-variant-ligatures: no-common-ligatures;">: propagate fast-math-flags when folding fcmp+fpext&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(17, 141, 255); color: #118dff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=346238">http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=346238&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> : [InstCombine] propagate fast-math-flags when folding fcmp+fneg, part 2&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(17, 141, 255); -webkit-text-stroke-width: initial; color: #118dff; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=346169">http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=346169&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> &lt;/span>&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(0, 0, 0); color: black; font-variant-ligatures: no-common-ligatures;">: [InstSimplify] fold select (fcmp X, Y), X, Y&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(17, 141, 255); -webkit-text-stroke-width: initial; color: #118dff; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=346234">http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=346234&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> &lt;/span>&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(0, 0, 0); color: black; font-variant-ligatures: no-common-ligatures;">: propagate fast-math-flags when folding fcmp+fneg&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(17, 141, 255); -webkit-text-stroke-width: initial; color: #118dff; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=346147">http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=346147&lt;/a>&lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;"> &lt;/span>&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(0, 0, 0); color: black; font-variant-ligatures: no-common-ligatures;">: [InstCombine] canonicalize -0.0 to +0.0 in fcmp&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(17, 141, 255); color: #118dff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=346143">http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=346143&lt;/a>&lt;/span>&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(17, 141, 255); color: #118dff; font-variant-ligatures: no-common-ligatures;"> &lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">: [InstCombine] loosen FP 0.0 constraint for fcmp+select substitution&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(17, 141, 255); -webkit-text-stroke-width: initial; color: #118dff; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=345734">http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=345734&lt;/a>&lt;/span>&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(0, 0, 0); color: black; font-variant-ligatures: no-common-ligatures;"> : [InstCombine] refactor fabs+fcmp fold; NFC&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(17, 141, 255); color: #118dff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=345728">http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=345728&lt;/a>&lt;/span>&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(17, 141, 255); color: #118dff; font-variant-ligatures: no-common-ligatures;"> &lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">: [InstSimplify] fold 'fcmp nnan ult X, 0.0' when X is not negative&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal;">&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(17, 141, 255); color: #118dff; font-variant-ligatures: no-common-ligatures; text-decoration: underline;">&lt;a href="http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=345727">http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=345727&lt;/a>&lt;/span>&lt;span style="-webkit-font-kerning: none; -webkit-text-stroke-color: rgb(17, 141, 255); color: #118dff; font-variant-ligatures: no-common-ligatures;"> &lt;/span>&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">: [InstCombine] add assertion that InstSimplify has folded a fabs+fcmp; NFC&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal; min-height: 10px;">&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal; min-height: 10px;">&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">While multiple people have been working on finer-grained control over fast-math optimizations and other relaxed numerics modes, there has also been some initial progress on adding support for &lt;i>more&lt;/i> constrained numerics models. There has been considerable progress towards adding and enabling constrained floating-point intrinsics to capture FENV_ACCESS ON and similar semantic models.&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal; min-height: 13px;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">&lt;/span>&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">These experimental constrained intrinsics prohibit certain transforms that are not safe if the default floating-point environment is not in effect. Historically, LLVM has in practice basically “split the difference” with regard to such transforms; they haven’t been explicitly disallowed, as LLVM doesn’t model the floating-point environment, but they have been disabled when they caused trouble for tests or software projects. The absence of a formal model for licensing these transforms constrains our ability to enable them. Bringing language and backend support for constrained intrinsics across the finish line will allow us to include transforms that we disable as a matter of practicality today, and allow us to give developers an easy escape valve (in the form of FENV_ACCESS ON and similar language controls) when they need more precise control, rather than an ad-hoc set of flags to pass to the driver.&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal; min-height: 13px;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">&lt;/span>&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">We should discuss these new intrinsics to make sure that they can capture the right models for all the languages that LLVM supports.&lt;/span>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal; min-height: 10px;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">&lt;/span>&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 9px; font-stretch: normal; line-height: normal; min-height: 10px;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">&lt;/span>&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">Here are some possible discussion items:&lt;/span>&lt;/div>&lt;br />&lt;ul>&lt;li style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal; margin: 0px;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">Should specialization be applied at the call level for edges in a call graph where the caller has special context to extend into the callee wrt to flags?&lt;/span>&lt;/li>&lt;li style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal; margin: 0px;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">Should the inliner apply something similar to calls that meet inlining criteria?&lt;/span>&lt;/li>&lt;li style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal; margin: 0px;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">What other part(s) of the compiler could make use of IR flags that are currently not covered?&lt;/span>&lt;/li>&lt;li style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Menlo; font-size: 11px; font-stretch: normal; line-height: normal; margin: 0px;">&lt;span style="font-kerning: none; font-variant-ligatures: no-common-ligatures;">What work needs to be done regarding code debt wrt current areas of implementation.&lt;/span>&lt;/li>&lt;/ul></description></item><item><title>FOSDEM 2019 LLVM developer room report</title><link>https://blog.llvm.org/2019/03/fosdem-2019-llvm-developer-room-report.html</link><pubDate>Thu, 07 Mar 2019 02:33:00 +0000</pubDate><guid>https://blog.llvm.org/2019/03/fosdem-2019-llvm-developer-room-report.html</guid><description>&lt;h2 class="" lang="en-AU" style="color: #2e75b5; font-family: Calibri; font-size: 14pt; margin: 0in; text-size-adjust: auto;">&lt;br />&lt;/h2>&lt;div class="" lang="en-AU" style="caret-color: rgb(0, 0, 0); margin: 0in; text-size-adjust: auto;">&lt;span style="font-family: Verdana, sans-serif;">As well as at the LLVM developer meetings, the LLVM community is also present at a number of other events. One of those is FOSDEM, which has had a dedicated LLVM track since 2014.&lt;/span>&lt;/div>&lt;div class="" style="caret-color: rgb(0, 0, 0); margin: 0in; text-size-adjust: auto;">&lt;span style="font-family: Verdana, sans-serif;">Earlier this February, the LLVM dev room was back for the 6th time.&lt;/span>&lt;/div>&lt;div class="" lang="en-AU" style="caret-color: rgb(0, 0, 0); margin: 0in; text-size-adjust: auto;">&lt;span style="font-family: Verdana, sans-serif;">&lt;br />&lt;/span>&lt;/div>&lt;div class="" style="caret-color: rgb(0, 0, 0); margin: 0in; text-size-adjust: auto;">&lt;span style="font-family: Verdana, sans-serif;">&lt;a class="" href="https://fosdem.org/2019/">FOSDEM&lt;/a>&lt;span class="Apple-converted-space">&amp;nbsp;&lt;/span>is one of the largest open source conferences, attracting over 8000 developers attending over 30 parallel tracks, occupying almost all space of the ULB university campus in Brussels.&lt;/span>&lt;/div>&lt;div class="" lang="en-AU" style="caret-color: rgb(0, 0, 0); margin: 0in; text-size-adjust: auto;">&lt;br />&lt;/div>&lt;div class="" style="caret-color: rgb(0, 0, 0); margin: 0in; text-size-adjust: auto;">&lt;span style="font-family: Verdana, sans-serif;">In comparison to the LLVM developer meetings, this dev room offers more of an opportunity to meet up with developers from a very wide range of open source projects.&lt;/span>&lt;/div>&lt;div class="" lang="en-AU" style="caret-color: rgb(0, 0, 0); margin: 0in; text-size-adjust: auto;">&lt;br />&lt;/div>&lt;div class="" style="caret-color: rgb(0, 0, 0); margin: 0in; text-size-adjust: auto;">&lt;span style="font-family: Verdana, sans-serif;">As in previous years, the&lt;span class="Apple-converted-space">&amp;nbsp;&lt;/span>&lt;a class="" href="https://fosdem.org/2019/schedule/track/llvm/">LLVM dev room program&lt;/a>&lt;span class="Apple-converted-space">&amp;nbsp;&lt;/span>consisted of presentations with a varied target audience, ranging from LLVM developers to LLVM users, including people not yet using LLVM but interested in discovering what can be done with it.&lt;span class="Apple-converted-space">&amp;nbsp;&lt;/span>&lt;/span>&lt;/div>&lt;div class="" style="caret-color: rgb(0, 0, 0); margin: 0in; text-size-adjust: auto;">&lt;span style="font-family: Verdana, sans-serif;">On the day itself, the room was completely packed for most presentations, often with people waiting outside to be able to enter for the next presentation.&lt;/span>&lt;/div>&lt;div class="" style="caret-color: rgb(0, 0, 0); margin: 0in; text-size-adjust: auto;">&lt;span style="font-family: Verdana, sans-serif;">Slides and videos of the presentations are available via the links below&lt;/span>&lt;/div>&lt;div class="" lang="en-AU" style="caret-color: rgb(0, 0, 0); font-size: 11pt; margin: 0in; text-size-adjust: auto;">&lt;br />&lt;/div>&lt;ul class="" style="caret-color: rgb(0, 0, 0); direction: ltr; margin-bottom: 0in; margin-left: 0.75in; margin-top: 0in; text-size-adjust: auto; unicode-bidi: embed;" type="circle">&lt;li class="" style="margin-bottom: 0px; margin-top: 0px; vertical-align: middle;">&lt;span style="font-family: Verdana, sans-serif;">&lt;a class="" href="https://fosdem.org/2019/schedule/event/llvm_irgen/">&lt;span class="" lang="en-US">Roll your own compiler with LLVM&lt;/span>&lt;/a>&lt;span class="" lang="en-AU">&lt;span class="Apple-converted-space">&amp;nbsp;&lt;/span>(Kai Nacke)&lt;/span>&lt;/span>&lt;/li>&lt;li class="" style="margin-bottom: 0px; margin-top: 0px; vertical-align: middle;">&lt;span style="font-family: Verdana, sans-serif;">&lt;a class="" href="https://fosdem.org/2019/schedule/event/llvm_bpf_rewriting/">&lt;span class="" lang="en-US">Rewriting Pointer Dereferences in bcc with Clang&lt;/span>&lt;/a>&lt;span class="" lang="en-AU">&lt;span class="Apple-converted-space">&amp;nbsp;&lt;/span>(Paul Chaignon)&lt;/span>&lt;/span>&lt;/li>&lt;li class="" style="margin-bottom: 0px; margin-top: 0px; vertical-align: middle;">&lt;span style="font-family: Verdana, sans-serif;">&lt;a class="" href="https://fosdem.org/2019/schedule/event/llvm_building/">&lt;span class="" lang="en-US">Building an LLVM-based tool&lt;/span>&lt;/a>&lt;span class="" lang="en-AU">&lt;span class="Apple-converted-space">&amp;nbsp;&lt;/span>(Alex Denisov)&lt;/span>&lt;/span>&lt;/li>&lt;li class="" style="margin-bottom: 0px; margin-top: 0px; vertical-align: middle;">&lt;span style="font-family: Verdana, sans-serif;">&lt;a class="" href="https://fosdem.org/2019/schedule/event/llvm_debug/">&lt;span class="" lang="en-US">Debug info in optimized code - how far can we go?&lt;/span>&lt;/a>&lt;span class="" lang="en-AU">&lt;span class="Apple-converted-space">&amp;nbsp;&lt;/span>(Nikola Prica, Djordje Todorovic)&lt;/span>&lt;/span>&lt;/li>&lt;li class="" style="margin-bottom: 0px; margin-top: 0px; vertical-align: middle;">&lt;span style="font-family: Verdana, sans-serif;">&lt;a class="" href="https://fosdem.org/2019/schedule/event/llvm_tablegen/">&lt;span class="" lang="en-US">Lessons in TableGen&lt;/span>&lt;/a>&lt;span class="" lang="en-AU">&lt;span class="Apple-converted-space">&amp;nbsp;&lt;/span>(Nicolai Hähnle)&lt;/span>&lt;/span>&lt;/li>&lt;li class="" style="margin-bottom: 0px; margin-top: 0px; vertical-align: middle;">&lt;span style="font-family: Verdana, sans-serif;">&lt;a class="" href="https://fosdem.org/2019/schedule/event/llvm_apollo/">&lt;span class="" lang="en-US">LLVM for the Apollo Guidance Computer&lt;/span>&lt;/a>&lt;span class="" lang="en-AU">&lt;span class="Apple-converted-space">&amp;nbsp;&lt;/span>(Lewis Revill)&lt;/span>&lt;/span>&lt;/li>&lt;li class="" style="margin-bottom: 0px; margin-top: 0px; vertical-align: middle;">&lt;span style="font-family: Verdana, sans-serif;">&lt;a class="" href="https://fosdem.org/2019/schedule/event/llvm_mix/">&lt;span class="" lang="en-US">llvm.mix&lt;/span>&lt;/a>&lt;span class="" lang="en-AU">&amp;nbsp;&lt;/span>&lt;a class="" href="https://fosdem.org/2019/schedule/event/llvm_mix/">&lt;span class="" lang="en-US" style="font-style: italic;">Multi-stage compiler-assisted specializer generator built on LLVM&lt;/span>&lt;/a>&lt;span class="" lang="en-AU">&lt;span class="Apple-converted-space">&amp;nbsp;&lt;/span>( Eugene Sharygin)&lt;/span>&lt;/span>&lt;/li>&lt;li class="" style="margin-bottom: 0px; margin-top: 0px; vertical-align: middle;">&lt;span style="font-family: Verdana, sans-serif;">&lt;a class="" href="https://fosdem.org/2019/schedule/event/llvm_smt_csa/">&lt;span class="" lang="en-US">SMT-Based Refutation of Spurious Bug Reports in the Clang Static Analyzer&lt;/span>&lt;/a>&lt;span class="" lang="en-AU">&lt;span class="Apple-converted-space">&amp;nbsp;&lt;/span>(Mikhail Gadelha)&lt;/span>&lt;/span>&lt;/li>&lt;li class="" style="margin-bottom: 0px; margin-top: 0px; vertical-align: middle;">&lt;span style="font-family: Verdana, sans-serif;">&lt;a class="" href="https://fosdem.org/2019/schedule/event/llvm_lld/">&lt;span class="" lang="en-US">What makes LLD so fast?&lt;/span>&lt;/a>&lt;span class="" lang="en-AU">&lt;span class="Apple-converted-space">&amp;nbsp;&lt;/span>(Peter Smith)&lt;/span>&lt;/span>&lt;/li>&lt;li class="" style="margin-bottom: 0px; margin-top: 0px; vertical-align: middle;">&lt;span style="font-family: Verdana, sans-serif;">&lt;a class="" href="https://fosdem.org/2019/schedule/event/llvm_kernel/">&lt;span class="" lang="en-US">Compiling the Linux kernel with LLVM tools&lt;/span>&lt;/a>&lt;span class="" lang="en-AU">&lt;span class="Apple-converted-space">&amp;nbsp;&lt;/span>(Nick Desaulniers and Bill Wendling)&lt;/span>&lt;/span>&lt;/li>&lt;li class="" style="margin-bottom: 0px; margin-top: 0px; vertical-align: middle;">&lt;span style="font-family: Verdana, sans-serif;">&lt;a class="" href="https://fosdem.org/2019/schedule/event/llvm_bisect/">&lt;span class="" lang="en-US">It was working yesterday! Investigating regressions with llvmlab bisect&lt;/span>&lt;/a>&lt;span class="" lang="en-AU">&lt;span class="Apple-converted-space">&amp;nbsp;&lt;/span>(Leandro Nunes)&lt;/span>&lt;/span>&lt;/li>&lt;/ul>&lt;div class="" lang="en-AU" style="caret-color: rgb(0, 0, 0); margin: 0in; text-size-adjust: auto;">&lt;br />&lt;/div>&lt;div class="" style="caret-color: rgb(0, 0, 0); margin: 0in; text-size-adjust: auto;">&lt;span style="font-family: Verdana, sans-serif;">Finally, I want to express my gratitude to the LLVM Foundation, which sponsored travel expenses for a few presenters who couldn't otherwise have made it to the conference.&lt;/span>&lt;/div></description></item><item><title>EuroLLVM'19 developers' meeting program</title><link>https://blog.llvm.org/2019/02/eurollvm19-developers-meeting-program.html</link><pubDate>Mon, 11 Feb 2019 09:49:00 +0000</pubDate><guid>https://blog.llvm.org/2019/02/eurollvm19-developers-meeting-program.html</guid><description>The LLVM Foundation is excited to announce the program for the EuroLLVM'19 developers' meeting (April 8 - 9 in Brussels / Belgium) !&lt;br />&lt;br />&lt;b>Keynote&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Keynote_1"> MLIR: Multi-Level Intermediate Representation for Compiler Infrastructure&lt;/a>&amp;nbsp;&lt;i>&lt;i>Tatiana Shpeisman (Google), Chris Lattner (Google)&lt;/i>&lt;/i>&lt;/li>&lt;/ul>&lt;b>Technical talks&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_1"> Switching a Linux distribution's main toolchains to LLVM/Clang&lt;/a> &lt;i>Bernhard Rosenkränzer (Linaro, OpenMandriva, LinDev)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_2"> Just compile it: High-level programming on the GPU with Julia&lt;/a> &lt;i>Tim Besard (Ghent University)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_3"> The Future of AST Matcher-based Refactoring&lt;/a> &lt;i>Stephen Kelly&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_4"> A compiler approach to Cyber-Security&lt;/a> &lt;i>François de Ferrière (STMicroelectronics)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_5"> Compiler Optimizations for (OpenMP) Target Offloading to GPUs&lt;/a> &lt;i>Johannes Doerfert (Argonne National Laboratory), Hal Finkel (Argonne National Laboratory)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_6"> Handling massive concurrency: Development of a programming model for GPU and CPU&lt;/a> &lt;i>Matthias Liedtke (SAP)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_7"> Automated GPU Kernel Fusion with XLA&lt;/a> &lt;i>Thomas Joerg (Google)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_8"> The Helium Haskell compiler and its new LLVM backend&lt;/a> &lt;i>Ivo Gabe de Wolff (University of Utrecht)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_9"> Testing and Qualification of Optimizing Compilers for Functional Safety&lt;/a>&amp;nbsp;&lt;i>José Luis March Cabrelles&amp;nbsp;(Solid Sands)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_10"> Improving Debug Information in LLVM to Recover Optimized-out Function Parameters&lt;/a> &lt;i>Nikola Prica (RT-RK), Djordje Todorovic (RT-RK), Ananthakrishna Sowda (CISCO), Ivan Baev (CISCO)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_11"> LLVM IR in GraalVM: Multi-Level, Polyglot Debugging with Sulong&lt;/a> &lt;i>Jacob Kreindl (Johannes Kepler University Linz)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_12"> LLDB Reproducers&lt;/a> &lt;i>Jonas Devlieghere (Apple)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_13"> Sulong: An experience report of using the "other end" of LLVM in GraalVM.&lt;/a> &lt;i>Roland Schatz (Oracle Labs), Josef Eisl (Oracle Labs)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_14"> SYCL compiler: zero-cost abstraction and type safety for heterogeneous computing&lt;/a> &lt;i>Andrew Savonichev (Intel)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_15"> Handling all Facebook requests with JITed C++ code&lt;/a> &lt;i>Huapeng Zhou (Facebook), Yuhan Guo (Facebook)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_16"> clang-scan-deps: Fast dependency scanning for explicit modules&lt;/a> &lt;i>Alex Lorenz (Apple), Michael Spencer (Apple)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_17"> Clang tools for implementing cryptographic protocols like OTRv4&lt;/a> &lt;i>Sofia Celi (Centro de Autonomia Digital)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_18"> Implementing the C++ Core Guidelines'; Lifetime Safety Profile in Clang&lt;/a> &lt;i>Gabor Horvath (Eotvos Lorand University), Matthias Gehre (Silexica GmbH), Herb Sutter (Microsoft)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_19"> Changes to the C++ standard library for C++20&lt;/a> &lt;i>Marshall Clow (CppAlliance)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_20"> Adventures with RISC-V Vectors and LLVM&lt;/a> &lt;i>Robin Kruppe (TU Darmstadt), Roger Espasa (Esperanto Technologies)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_21"> A Tale of Two ABIs: ILP32 on AArch64&lt;/a> &lt;i>Tim Northover (Apple)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_22"> LLVM Numerics Improvements&lt;/a> &lt;i>Michael Berg (Apple), Steve Canon (Apple)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_23"> DOE Proxy Apps: Compiler Performance Analysis and Optimistic Annotation Exploration&lt;/a> &lt;i>Brian Homerding (Argonne National Laboratory), Johannes Doerfert (Argonne National Laboratory)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Talk_24"> Loop Fusion, Loop Distribution and their Place in the Loop Optimization Pipeline&lt;/a> &lt;i>Kit Barton (IBM), Johannes Doerfert (Argonne National Lab), Hal Finkel (Argonne National Lab), Michael Kruse (Argonne National Lab)&lt;/i>&lt;/li>&lt;/ul>&lt;b>Tutorials&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Tutorial_1"> Tutorial: Building a Compiler with MLIR&lt;/a> &lt;i>Amini Mehdi (Google), Jacques Pienaar (Google), Nicolas Vasilache (Google)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Tutorial_2"> Building an LLVM-based tool: lessons learned&lt;/a> &lt;i>Alex Denisov&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Tutorial_3"> LLVM IR Tutorial - Phis, GEPs and other things, oh my!&lt;/a> &lt;i>Vince Bridgers (Intel Corporation), Felipe de Azevedo Piovezan (Intel Corporation)&lt;/i>&lt;/li>&lt;/ul>&lt;b>Student Research Competition&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#SRC_1"> Safely Optimizing Casts between Pointers and Integers&lt;/a> &lt;i>Juneyoung Lee (Seoul National University, Korea), Chung-Kil Hur (Seoul National University, Korea), Ralf Jung (MPI-SWS, Germany), Zhengyang Liu (University of Utah, USA), John Regehr (University of Utah, USA), Nuno P. Lopes (Microsoft Research, UK)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#SRC_2"> An alternative OpenMP Backend for Polly&lt;/a> &lt;i>Michael Halkenhäuser (TU Darmstadt)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#SRC_3"> Implementing SPMD control flow in LLVM using reconverging CFGs&lt;/a> &lt;i>Fabian Wahlster (Technische Universität München), Nicolai Hähnle (Advanced Micro Devices)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#SRC_4"> Function Merging by Sequence Alignment&lt;/a> &lt;i>Rodrigo Rocha (University of Edinburgh), Pavlos Petoumenos (University of Edinburgh), Zheng Wang (Lancaster University), Murray Cole (University of Edinburgh), Hugh Leather (University of Edinburgh)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#SRC_5"> Compilation and optimization with security annotations&lt;/a> &lt;i>Son Tuan Vu (LIP6), Karine Heydemann (LIP6), Arnaud de Grandmaison (ARM), Albert Cohen (Google)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#SRC_6"> Adding support for C++ contracts to Clang&lt;/a> &lt;i>Javier López-Gómez (University Carlos III of Madrid), J. Daniel García (University Carlos III of Madrid)&lt;/i>&lt;/li>&lt;/ul>&lt;b>Lightning talks&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#LightningTalk_1"> LLVM IR Timing Predictions: Fast Explorations via lli&lt;/a> &lt;i>Alessandro Cornaglia (FZI - Research Center for Information Technology)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#LightningTalk_2">Simple Outer-Loop-Vectorization == LoopUnroll-And-Jam + SLP&lt;/a> &lt;i>Dibyendu Das (AMD)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#LightningTalk_3"> Clacc 2019: An Update on OpenACC Support for Clang and LLVM&lt;/a> &lt;i>Joel E. Denny (Oak Ridge National Laboratory), Seyong Lee (Oak Ridge National Laboratory), Jeffrey S. Vetter (Oak Ridge National Laboratory)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#LightningTalk_4"> Targeting a statically compiled program repository with LLVM&lt;/a> &lt;i>Phil Camp (SN Systems (Sony Interactive Entertainment)), Russell Gallop (SN Systems (Sony Interactive Entertainment))&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#LightningTalk_5"> Does the win32 clang compiler executable really need to be over 21MB in size?&lt;/a> &lt;i>Russell Gallop (SN Systems), Greg Bedwell (SN Systems)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#LightningTalk_6"> Resolving the almost decade old checker dependency issue in the Clang Static Analyzer&lt;/a> &lt;i>Kristóf Umann (Ericsson Hungary, Eötvös Loránd University)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#LightningTalk_7"> Adopting LLVM Binary Utilities in Toolchains&lt;/a> &lt;i>Jordan Rupprecht (Google)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#LightningTalk_8"> Multiplication and Division in the Range-Based Constraint Manager&lt;/a> &lt;i>Ádám Balogh (Ericsson Hungary Ltd.)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#LightningTalk_9"> Statistics Based Checkers in the Clang Static Analyzer&lt;/a> &lt;i>Ádám Balogh (Ericsson Hungary Ltd.)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#LightningTalk_10"> Flang Update&lt;/a> &lt;i>Steve Scalpone (NVIDA / PGI / Flang)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#LightningTalk_11"> Swinging Modulo Scheduling together with Register Allocation&lt;/a> &lt;i>Lama Saba (Intel)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#LightningTalk_12"> LLVM for the Apollo Guidance Computer&lt;/a> &lt;i>Lewis Revill (University of Bath)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#LightningTalk_13"> Catch dangling inner pointers with the Clang Static Analyzer&lt;/a> &lt;i>Réka Kovács (Eötvös Loränd University)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#LightningTalk_14"> Cross translation unit test case reduction&lt;/a> &lt;i>Réka Kovács (Eötvös Loränd University)&lt;/i>&lt;/li>&lt;/ul>&lt;b>BoFs&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#BoF_1"> RFC: Towards Vector Predication in LLVM IR&lt;/a> &lt;i>Simon Moll (Saarland University), Sebastian Hack (Saarland University)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#BoF_2"> IPO --- Where are we, where do we want to go?&lt;/a> &lt;i>Johannes Doerfert (Argonne National Laboratory), Kit Barton (IBM Toronto Lab)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#BoF_3"> LLVM binutils&lt;/a> &lt;i>James Henderson (SN Systems (Sony Interactive Entertainment)), Jordan Rupprecht (Google)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#BoF_4"> RFC: Reference OpenCL Runtime library for LLVM&lt;/a> &lt;i>Andrew Savonichev (Intel),&amp;nbsp;Alexey Sachkov (Intel)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#BoF_5"> LLVM Interface Stability Guarantees BoF&lt;/a> &lt;i>Stephen Kelly&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#BoF_6"> Clang Static Analyzer BoF&lt;/a> &lt;i>Devin Coughlin (Apple), Gabor Horvath (Eotvos Lorand University)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#BoF_7"> LLVM Numerics Improvements&lt;/a> &lt;i>Michael Berg (Apple),&amp;nbsp;Steve Canon (Apple)&lt;/i>&lt;/li>&lt;/ul>&lt;b>Posters&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_1"> Clava: C/C++ source-to-source from CMake using LARA&lt;/a> &lt;i>João Bispo (FEUP/INESCTEC)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_2"> Safely Optimizing Casts between Pointers and Integers&lt;/a> &lt;i>Juneyoung Lee (Seoul National University, Korea), Chung-Kil Hur (Seoul National University, Korea), Ralf Jung (MPI-SWS, Germany), Zhengyang Liu (University of Utah, USA), John Regehr (University of Utah, USA), Nuno P. Lopes (Microsoft Research, UK)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_3"> Scalar Evolution Canon: Click! Canonicalize SCEV and validate it by Z3 SMT solver!&lt;/a> &lt;i>Lin-Ya Yu (Xilinx), Alexandre Isoard (Xilinx)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_4"> Splendid GVN: Partial Redundancy Elimination for Algebraic Simplification&lt;/a> &lt;i>Li-An Her (National Tsing Hua University), Jenq-Kuen Lee (National Tsing Hua University)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_5"> An alternative OpenMP Backend for Polly&lt;/a> &lt;i>Michael Halkenhäuser (TU Darmstadt)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_6"> Does the win32 clang compiler executable really need to be over 21MB in size?&lt;/a> &lt;i>Russell Gallop (SN Systems), G Bedwell (SN Systems)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_7"> Enabling Multi- and Cross-Language Verification with LLVM&lt;/a> &lt;i>Zvonimir Rakamaric (University of Utah)&lt;/i>&lt;/li>&lt;li>&lt;i>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_8">Instruction Tracing and dynamic codegen analysis to identify unique llvm performance issues.&lt;/a> &lt;i>Biplob (IBM)&lt;/i>&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_9"> Handling all Facebook requests with JITed C++ code&lt;/a> &lt;i>Huapeng Zhou (Facebook), Yuhan Guo (Facebook)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_10"> Implementing SPMD control flow in LLVM using reconverging CFGs&lt;/a> &lt;i>Fabian Wahlster (Technische Universität München), Nicolai Hähnle (Advanced Micro Devices)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_11"> LLVM for the Apollo Guidance Computer&lt;/a> &lt;i>Lewis Revill (University of Bath)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_12"> LLVM Miner: Text Analytics based Static Knowledge Extractor&lt;/a> &lt;i>Hameeza Ahmed (NED University of Engineering and Technology), Muhammad Ali Ismail (NED University of Engineering and Technology)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_13"> Function Merging by Sequence Alignment&lt;/a> &lt;i>Rodrigo Rocha (University of Edinburgh), Pavlos Petoumenos (University of Edinburgh), Zheng Wang (Lancaster University), Murray Cole (University of Edinburgh), Hugh Leather (University of Edinburgh)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_14"> Compilation and optimization with security annotations&lt;/a> &lt;i>Son Tuan Vu (LIP6), Karine Heydemann (LIP6), Arnaud de Grandmaison (ARM), Albert Cohen (Google)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_15"> Cross translation unit test case reduction&lt;/a> &lt;i>Réka Kovács (Eötvös Loränd University)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_16"> Leveraging Polyhedral Compilation in Chapel Compiler&lt;/a> &lt;i>Sahil Yerawar (IIT Hyderabad), Siddharth Bhat (IIIT Hyderabad), Michael Ferguson (Cray Inc.), Philip Pfaffe (Karlsruhe Institute of Technology), Ramakrishna Upadrasta (IIT Hyderabad)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_17"> LLVM on AVR - textual IR as a powerful tool for making "impossible" compilers&lt;/a> &lt;i>Carl Peto (Swift for Arduino/Petosoft)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_18"> Vectorizing Add/Sub Expressions with SLP&lt;/a> &lt;i>Vasileios Porpodas (Intel Corporation, USA), Rodrigo C. O. Rocha (University of Edinburgh, UK), Evgueni Brevnov (Intel Corporation, USA), Luís F. W. Góes (PUC Minas, Brazil), Timothy Mattson (Intel Corporation, USA)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_19"> Adding support for C++ contracts to Clang&lt;/a> &lt;i>Javier López-Gómez (University Carlos III of Madrid), J. Daniel García (University Carlos III of Madrid)&lt;/i>&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2019-04/talks.html#Poster_20"> Optimizing Nondeterminacy: Exploiting Race Conditions in Parallel Programs&lt;/a> &lt;i>William S. Moses (MIT CSAIL)&lt;/i>&lt;/li>&lt;/ul>&lt;div>&lt;div>If you are interested in any of this talks, you should&amp;nbsp;&lt;a href="https://www.eventbrite.com/e/eurollvm19-developers-meeting-brussels-belgium-tickets-53016346319" target="_blank">register&lt;/a>&amp;nbsp;to attend the EuroLLVM'19. Tickets are limited !&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>More information about the EuroLLVM'19 is available&amp;nbsp;&lt;a href="https://llvm.org/devmtg/2019-04/" target="_blank">here&lt;/a>.&amp;nbsp;&lt;/div>&lt;/div></description></item><item><title>30% faster Windows builds with clang-cl and the new /Zc:dllexportInlines- flag</title><link>https://blog.llvm.org/2018/11/30-faster-windows-builds-with-clang-cl_14.html</link><pubDate>Wed, 14 Nov 2018 04:49:00 +0000</pubDate><guid>https://blog.llvm.org/2018/11/30-faster-windows-builds-with-clang-cl_14.html</guid><description>&lt;h2>Background&lt;/h2> &lt;p>In the course of adding Microsoft Visual C++ (MSVC) compatible Windows support to Clang, we worked hard to make sure the &lt;a href="https://docs.microsoft.com/en-us/cpp/cpp/dllexport-dllimport?view=vs-2017">dllexport and dllimport declspecs&lt;/a> are handled the same way by Clang as by MSVC.&lt;/p> &lt;p>dllexport and dllimport are used to specify what functions and variables should be externally accessible ("exported") from the currently compiled Dynamic-Link Library (DLL), or should be accessed ("imported") from another DLL. In the class declaration below, &lt;code>S::foo()&lt;/code> will be exported when building a DLL:&lt;/p> &lt;pre style="text-indent:0">&lt;br />struct __declspec(dllexport) S {&lt;br /> void foo() {}&lt;br />};&lt;br />&lt;/pre> &lt;p>and code using that DLL would typically see a declaration like this:&lt;/p> &lt;pre style="text-indent:0">&lt;br />struct __declspec(dllimport) S {&lt;br /> void foo() {}&lt;br />};&lt;br />&lt;/pre> &lt;p>to indicate that the function is defined in and should be accessed from another DLL.&lt;/p> &lt;p>Often the same declaration is used along with a &lt;a href="https://chromium.googlesource.com/chromium/src/+/72.0.3608.5/base/base_export.h">preprocessor macro&lt;/a> to flip between dllexport and dllimport, depending on whether a DLL is being built or consumed.&lt;/p> &lt;p>The basic idea of dllexport and dllimport is simple, but the semantics get more complicated as they interact with more facets of the C++ language: templates, inheritance, different kinds of instantiation, redeclarations with different declspecs, and so on. Sometimes the semantics are surprising, but by now we think clang-cl gets most of them right. And as the old maxim goes, once you know the rules well, you can start tactfully breaking them.&lt;/p> &lt;p>One issue with dllexport is that for inline functions such as &lt;code>S::foo()&lt;/code> above, the compiler must emit the definition &lt;em>even if it's not used in the translation unit&lt;/em>. That's because the DLL must export it, and the compiler cannot know if any other translation unit will provide a definition.&lt;/p> &lt;p>This is very inefficient. A dllexported class with inline members in a header file will cause definitions of those members to be emitted in &lt;em>every translation unit that includes the header&lt;/em>, directly or indirectly. And as we know, C++ source files often end up including a lot of headers. This behaviour is also different from non-Windows systems, where inline function definitions are not emitted unless they're used, even in shared objects and dynamic libraries.&lt;/p> &lt;h2>/Zc:dllexportInlines-&lt;/h2> &lt;p>To address this problem, clang-cl recently gained a new command-line flag, &lt;a href="https://clang.llvm.org/docs/UsersManual.html#the-zc-dllexportinlines-option">/Zc:dllexportInlines-&lt;/a> (MSVC uses the /Zc: prefix for &lt;a href="https://docs.microsoft.com/en-us/cpp/build/reference/zc-conformance?view=vs-2017">language conformance options&lt;/a>). The basic idea is simple: since the definition of an inline function is available along with its declaration, it's not necessary to import or export it from a DLL &amp;mdash; the inline definition can be used directly. The effect of the flag is to not apply class-level dllexport/dllimport declspecs to inline member functions. In the two examples above, it means &lt;code>S::foo()&lt;/code> would not be dllexported or dllimported, even though the &lt;code>S&lt;/code> class is declared as such.&lt;/p> &lt;p>This is very similar to the &lt;a href="https://gcc.gnu.org/onlinedocs/gcc/C_002b_002b-Dialect-Options.html#index-fvisibility-inlines-hidden">-fvisibility-inlines-hidden&lt;/a> Clang and GCC flag used on non-Windows. For C++ projects with many inline functions, it can significantly reduce the set of exported functions, and thereby the symbol table and file size of the shared object or dynamic library, as well as program load time.&lt;/p> &lt;p>On Windows however, the main benefit is not having to emit the unused inline function definitions. This means the compiler has to do much less work, and reduces object file size which in turn reduces the work for the linker. For Chrome, we &lt;a href="https://groups.google.com/a/chromium.org/d/msg/chromium-dev/xYVt4PFeObA/tc7CE3ojBgAJ">saw 30&amp;nbsp;% faster full builds&lt;/a>, 30&amp;nbsp;% shorter link times for blink_core.dll, and 40&amp;nbsp;% smaller total .obj file size.&lt;/p> &lt;p>The reduction in .obj file size, combined with the enormous reduction in .lib files allowed by previously switching linkers to lld-link which uses thin archives, means that a typical Chrome build directory is now 60&amp;nbsp;% smaller than it would have been just a year ago.&lt;/p> &lt;p>(Some of the same benefit can be had without this flag if the dllexport inline function comes from a pre-compiled header (PCH) file. In that case, the definition will be emitted in the object file when building the PCH, and so is not emitted elsewhere unless it's used.)&lt;/p> &lt;h2>Compatibility&lt;/h2> &lt;p>Using /Zc:dllexportInlines- is "half ABI incompatible". If it's used to build a DLL, inline members will no longer be exported, so any code using the DLL must use the same flag to not dllimport those members. However, the reverse scenario generally works: a DLL compiled without the flag (such as a system DLL built with MSVC) can be referenced from code that uses the flag, meaning that the referencing code will use the inline definitions instead of importing them from the DLL.&lt;/p> &lt;p>Like -fvisibility-inlines-hidden, /Zc:dllexportInlines- breaks the C++ language guarantee that (even an inline) function has a unique address within the program. When using these flags, an inline function will have a different address when used inside the library and outside.&lt;/p> &lt;p>Also, these flags can lead to link errors when inline functions, which would normally be dllimported, refer to internal symbols of a DLL:&lt;/p> &lt;pre style="text-indent:0">&lt;br />void internal();&lt;br />&lt;br />struct __declspec(dllimport) S {&lt;br /> void foo() { internal(); }&lt;br />}&lt;br />&lt;/pre> &lt;p>Normally, references to &lt;code>S::foo()&lt;/code> would use the definition in the DLL, which also contains the definition of &lt;code>internal()&lt;/code>, but when using /Zc:dllexportInlines-, the inline definition of &lt;code>S::foo()&lt;/code> is used directly, resulting in a link error since no definition of &lt;code>internal()&lt;/code> can be found.&lt;/p> &lt;p>Even worse, if there is an inline definition of &lt;code>internal()&lt;/code> containing a static local variable, the program will now refer to a different instance of that variable than in the DLL:&lt;/p> &lt;pre style="text-indent:0">&lt;br />inline int internal() { static int x; return x++; }&lt;br />&lt;br />struct __declspec(dllimport) S {&lt;br /> int foo() { return internal(); }&lt;br />}&lt;br />&lt;/pre> &lt;p>This could lead to very subtle bugs. However, since Chrome already uses -fvisibility-inlines-hidden, which has the same potential problem, we believe this is not a common issue.&lt;/p> &lt;h2>Summary&lt;/h2> &lt;p>/Zc:dllexportInlines- is like -fvisibility-inlines-hidden for DLLs and significantly reduces build times. We're excited that using Clang on Windows allows us to benefit from new features like this.&lt;/p> &lt;h2>More information&lt;/h2> &lt;p>For more information, see the &lt;a href="https://clang.llvm.org/docs/UsersManual.html#the-zc-dllexportinlines-option">User's Manual for /Zc:dllexportInlines-&lt;/a>.&lt;/p> &lt;p>The flag was added in Clang &lt;a href="https://llvm.org/r346069">r346069&lt;/a>, which will be part of the Clang 8 release expected in March 2019. It's also available in the &lt;a href="https://llvm.org/builds/">Windows Snapshot Build&lt;/a>.&lt;/p> &lt;h2>Acknowledgements&lt;/h2> &lt;p>/Zc:dllexportInlines- was implemented by Takuto Ikuta based on a prototype by Nico Weber.&lt;/p></description></item><item><title>Integration of libc++ and OpenMP packages into llvm-toolchain</title><link>https://blog.llvm.org/2018/09/integration-of-libc-and-openmp-packages.html</link><pubDate>Tue, 25 Sep 2018 08:29:00 +0000</pubDate><guid>https://blog.llvm.org/2018/09/integration-of-libc-and-openmp-packages.html</guid><description>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">A bit more than a year ago, we gave an &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">&lt;a href="http://blog.llvm.org/2017/03/some-news-about-aptllvmorg.html">update about recent changes in apt.llvm.org&lt;/a>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;">. Since then, we noticed an important increase of the usage of the service. Just last month, we saw more than 16.5TB of data being transferred from our CDN.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;">Thanks to the Google Summer of Code 2018, and after number of requests, we decided to focus our energy to bring new great projects from the LLVM ecosystems into &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;">&lt;a href="https://apt.llvm.org/">apt.llvm.org&lt;/a>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">.&lt;/span>&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;span id="docs-internal-guid-122fa429-7fff-ce8f-2a09-9dec6700e675">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">Starting from version 7, libc++, libc++abi and OpenMP packages are available into the llvm-toolchain packages. This means that, just like clang, lldb or lldb, libc++, libc++abi and OpenMP packages are also built, tested and shipped on &lt;/span>&lt;span style="color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">&lt;a href="https://apt.llvm.org/" style="text-decoration-line: none;">https://apt.llvm.org/&lt;/a>.&lt;/span>&lt;/span>&lt;br />&lt;span id="docs-internal-guid-5eac656f-7fff-93be-d6ed-7d2759a4535e">&lt;/span>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;">The integration focuses to preserve the current usage of these libraries. The newly merged packages have adopted the llvm-toolchain versioning:&lt;/span>&lt;br />&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;">&lt;br />&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;">&lt;span id="docs-internal-guid-5d62e05f-7fff-e14d-0c50-31e965f5c0d6">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">libc++ packages&lt;/span>&lt;/span>&lt;/span>&lt;br />&lt;ul>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot;;">&lt;span style="white-space: pre-wrap;">&lt;span id="docs-internal-guid-b2f8be4b-7fff-5604-f87a-ca25bdd97e18">&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;">libc++1-7&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/li>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot;;">&lt;span style="white-space: pre-wrap;">&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;">&lt;span id="docs-internal-guid-a2a333d7-7fff-a25c-c5d4-c34505b88129">&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;">libc++-7-dev&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/li>&lt;/ul>&lt;span id="docs-internal-guid-8c605b61-7fff-f726-ba8c-401b50835ca0">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">libc++abi packages&lt;/span>&lt;/span>&lt;br />&lt;ul>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot;;">&lt;span style="white-space: pre-wrap;">&lt;span id="docs-internal-guid-5203ff86-7fff-3c38-ae3c-d32665fb8d4f">&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;">libc++abi1-7&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/li>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot;;">&lt;span style="white-space: pre-wrap;">&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;">&lt;span id="docs-internal-guid-01426d62-7fff-5f1a-cd17-1acb65241ae3">&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;">libc++abi-7-dev&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/li>&lt;/ul>&lt;span id="docs-internal-guid-1fc28e61-7fff-dbb6-6749-53b176e0e0c2">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">OpenMP packages&lt;/span>&lt;/span>&lt;br />&lt;ul>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot;;">&lt;span style="white-space: pre-wrap;">&lt;span id="docs-internal-guid-751b304c-7fff-24c0-953a-ce4405deaa52">&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;">libomp5-7&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/li>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot;;">&lt;span style="white-space: pre-wrap;">&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;">libomp-7-dev&lt;/span>&lt;/span>&lt;/span>&lt;/li>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot;;">&lt;span style="font-size: 14.6667px; white-space: pre-wrap;">libomp-7-doc&lt;/span>&lt;/span>&lt;/li>&lt;/ul>&lt;span id="docs-internal-guid-f84eaf02-7fff-be43-d8bc-ef510609f3ec">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">This packages are built twice a day for trunk. For version 7, only when new changes happen in the SVN branches.&lt;/span>&lt;/span>&lt;br />&lt;ul>&lt;/ul>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-6e74fc9d-7fff-cec8-f74a-6df8706a7ae4">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 18pt; vertical-align: baseline; white-space: pre-wrap;">Integration of libc++* packages&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 18pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-15524f01-7fff-4e4d-6d8c-fd387bece6d7">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">Both libc++ and libc++abi packages are built at same time using the clang built during the process. The existing libc++ and libc++abi packages present in Debian and Ubuntu repositories will not be affected (they will be removed at some point). Newly integrated libcxx* packages are not co-installable with them.&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-bd64100d-7fff-666c-9f29-447f5b5aeeed">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">Symlinks have been provided from the original locations to keep the library usage same.&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-24d86f69-7fff-c583-0732-85c34f57d446">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">Example: &amp;nbsp;/usr/lib/x86_64-linux-gnu/libc++.so.1.0 -&amp;gt; /usr/lib/llvm-7/lib/libc++.so.1.0&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-fb4b60c7-7fff-effa-85f3-1015ebd8d620">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">The usage of the libc++ remains super easy:&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-69f2fbb0-7fff-1c39-5670-241e4b0edeca">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">Usage:&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-41ab907b-7fff-b51e-e5c5-ad61a6b30e0e">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: italic; vertical-align: baseline; white-space: pre-wrap;">$ clang++-7 -std=c++11 -stdlib=libc++ foo.cpp&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-4a953a8c-7fff-df5d-3ca4-76fb11306a80">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: italic; vertical-align: baseline; white-space: pre-wrap;">$ ldd ./a.out|grep libc++&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-1250612e-7fff-12f8-98af-a07f6cd562c2">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;&amp;nbsp;libc++.so.1 =&amp;gt; /usr/lib/x86_64-linux-gnu/libc++.so.1 (0x00007f62a1a90000)&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-34da2a2e-7fff-468f-8ba4-a7698b29b122">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;&amp;nbsp;libc++abi.so.1 =&amp;gt; /usr/lib/x86_64-linux-gnu/libc++abi.so.1 (0x00007f62a1a59000)&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: italic; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-748944dd-7fff-ce84-8030-ee68a48bb092">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">In order to test new developments in libc++, we are also building the experimental features.&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-19d4819b-7fff-4051-782c-67508a15655c">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">For example, the following command will work out of the box:&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-fb08eaae-7fff-720e-a5af-22d36fba7424">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: italic; vertical-align: baseline; white-space: pre-wrap;">$ clang++-7 -std=c++17 -stdlib=libc++ foo.cpp -lc++experimental -lc++fs&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: italic; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-189f4079-7fff-ff2d-1d55-9d039dd77300">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 18pt; vertical-align: baseline; white-space: pre-wrap;">Integration of OpenMP packages&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 18pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-eb46ad43-7fff-9868-f854-63a93e6d99f0">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">While &lt;/span>&lt;a href="https://tracker.debian.org/pkg/openmprtl" style="text-decoration-line: none;">&lt;span style="color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">OpenMP packages&lt;/span>&lt;/a>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"> have been present in the Debian and Ubuntu archives for a &lt;/span>&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; white-space: pre-wrap;">while, only a single version of the package was available.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-9615f4a3-7fff-ff5b-0c6f-94b18cd14d29">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">For now, the newly integrated packages creates a symlink from /usr/lib/libomp.so.5 to &lt;/span>&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; white-space: pre-wrap;">/usr/lib/llvm-7/lib/libomp.so.5 keeping the current usage same and making them non &lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; white-space: pre-wrap;">co-installable.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-53e9cb01-7fff-af4a-9532-eec2ef84fb7c">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">It can be used with clang through -fopenmp flag:&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-af3fc453-7fff-d096-505f-993de08734d7">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: italic; vertical-align: baseline; white-space: pre-wrap;">$ clang -fopenmp foo.c&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: italic; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-d6542b60-7fff-0347-0d01-5941ce41f7f0">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">The dependency packages providing the default libc++* and OpenMP package are also &lt;/span>&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; white-space: pre-wrap;">integrated in llvm-defaults. This means that the following command will install all these &lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; white-space: pre-wrap;">new packages at the current version:&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-96addc9b-7fff-9794-ff0a-f10371dbe598">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: italic; vertical-align: baseline; white-space: pre-wrap;">$ apt-get install libc++-dev libc++abi-dev libomp-dev&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: italic; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-ce21e6ca-7fff-17b3-6faf-72c098452ee1">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 18pt; vertical-align: baseline; white-space: pre-wrap;">LLVM 7 =&amp;gt; 8 transition&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 18pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-3748f10e-7fff-b3e6-b274-446c48e29b82">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">In parallel of the libc++ and OpenMP work,&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;a href="https://apt.llvm.org/" style="text-decoration-line: none;">&lt;span style="color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">https://apt.llvm.org/&lt;/span>&lt;/a>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"> has been updated to &lt;/span>&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; white-space: pre-wrap;">reflect the branching of 7 from the trunk branches.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-f4abea1c-7fff-0b37-1c28-fdfc88b7f96a">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">Therefore, we have currently on the platform:&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;br />&lt;div dir="ltr" style="margin-left: 0pt;">&lt;table style="border-collapse: collapse; border: none;">&lt;colgroup>&lt;col width="134">&lt;/col>&lt;col width="115">&lt;/col>&lt;/colgroup>&lt;tbody>&lt;tr style="height: 0pt;">&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">Stable&lt;/span>&lt;/div>&lt;/td>&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">6.0&lt;/span>&lt;/div>&lt;/td>&lt;/tr>&lt;tr style="height: 0pt;">&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">Qualification&lt;/span>&lt;/div>&lt;/td>&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">7&lt;/span>&lt;/div>&lt;/td>&lt;/tr>&lt;tr style="height: 0pt;">&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">Development&lt;/span>&lt;/div>&lt;/td>&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">8&lt;/span>&lt;/div>&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>&lt;/div>&lt;span id="docs-internal-guid-5114ceee-7fff-3202-7f38-9d2f6b85a583">&lt;/span>&lt;br />&lt;div dir="ltr" style="margin-left: 0pt;">&lt;span id="docs-internal-guid-5114ceee-7fff-3202-7f38-9d2f6b85a583">&lt;br />&lt;/span>&lt;/div>&lt;span id="docs-internal-guid-5114ceee-7fff-3202-7f38-9d2f6b85a583">&lt;/span>&lt;div dir="ltr" style="margin-left: 0pt;">&lt;span id="docs-internal-guid-5114ceee-7fff-3202-7f38-9d2f6b85a583">&lt;span id="docs-internal-guid-9ecfb81b-7fff-8d17-16a6-2ef58b127a62">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">Please note that, from version 7, the packages and libraries are called 7 (and not 7.0). &lt;/span>&lt;/span>&lt;/span>&lt;/div>&lt;span id="docs-internal-guid-5114ceee-7fff-3202-7f38-9d2f6b85a583">&lt;div dir="ltr" style="margin-left: 0pt;">&lt;span id="docs-internal-guid-1132935b-7fff-32e1-97a7-d44a2a905231">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">For the rational and implementation, see &lt;/span>&lt;a href="https://reviews.llvm.org/D41869" style="text-decoration-line: none;">&lt;span style="color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">https://reviews.llvm.org/D41869&lt;/span>&lt;/a>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"> &amp;amp; &lt;/span>&lt;/span>&lt;a href="https://reviews.llvm.org/D41808" style="text-decoration-line: none;">&lt;span style="color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">https://reviews.llvm.org/D41808&lt;/span>&lt;/a>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">.&lt;/span>&lt;/div>&lt;div dir="ltr" style="margin-left: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="margin-left: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">&lt;span id="docs-internal-guid-6fd5cf19-7fff-c3b2-d621-4ff2acb322e3">&lt;span style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;">Stable packages of LLVM toolchain are already officially available &lt;/span>&lt;a href="https://tracker.debian.org/pkg/llvm-toolchain-7" style="text-decoration-line: none;">&lt;span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">in Debian Buster&lt;/span>&lt;/a>&lt;span style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"> and &lt;/span>&lt;/span>&lt;/span>&lt;a href="https://launchpad.net/ubuntu/+source/llvm-toolchain-7" style="text-decoration-line: none;">&lt;span style="color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">in Ubuntu Cosmic&lt;/span>&lt;/a>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">.&lt;/span>&lt;/div>&lt;div dir="ltr" style="margin-left: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="margin-left: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">&lt;span id="docs-internal-guid-ce9e25ae-7fff-21e3-e2d0-f76cb2b89eb8">&lt;span style="font-size: 18pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;">Cosmic support&lt;/span>&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="margin-left: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-size: 18pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;">&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="margin-left: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">In order to make sure that the LLVM toolchain does not have too many regressions with &lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; white-space: pre-wrap;">this new version, we also support the next Ubuntu version, 18.10, aka Cosmic.&lt;/span>&lt;/div>&lt;div dir="ltr" style="margin-left: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="margin-left: 0pt;">&lt;span id="docs-internal-guid-71e97040-7fff-c2c7-d12e-eaa86bc7029b">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 18pt; vertical-align: baseline; white-space: pre-wrap;">A Note on coinstallability&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="margin-left: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 18pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="margin-left: 0pt;">&lt;span id="docs-internal-guid-e630a53f-7fff-1ab7-5997-e54f23fcb0ba">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">We tried to make them coinstallable, in the resulting packages we had no control over &lt;/span>&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">the libraries used during the runtime. This could lead to many &lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">unforeseen&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"> issues. &lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; white-space: pre-wrap;">Keeping these in mind we settled to keep them conflicting with other versions.&lt;/span>&lt;/div>&lt;div dir="ltr" style="margin-left: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="margin-left: 0pt;">&lt;span id="docs-internal-guid-506e92b8-7fff-29fc-37ab-1bba4513c609">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 18pt; vertical-align: baseline; white-space: pre-wrap;">Future work&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="margin-left: 0pt;">&lt;ul>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot;;">&lt;span style="font-size: 24px; white-space: pre-wrap;">&lt;span id="docs-internal-guid-433e97e7-7fff-6294-c143-0f184de8e97b">&lt;span style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;">Code coverage build fails for newly integrated packages&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/li>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot;;">&lt;span style="font-size: 24px; white-space: pre-wrap;">&lt;span style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;">&lt;span id="docs-internal-guid-bff3d48d-7fff-a432-738f-a5b778da69b7">&lt;span style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;">Move to a 2 phases build to generate clang binary using clang&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/li>&lt;/ul>&lt;div>&lt;span style="font-family: &amp;quot;arial&amp;quot;;">&lt;span style="white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 16px; white-space: pre-wrap;">Sources of the project are available on the gitlab instance of Debian: &lt;a href="https://salsa.debian.org/pkg-llvm-team/llvm-toolchain/tree/7">https://salsa.debian.org/pkg-llvm-team/llvm-toolchain/tree/7&lt;/a> &lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;arial&amp;quot;;">&lt;span style="white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;arial&amp;quot;;">&lt;span style="white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span id="docs-internal-guid-41151c85-7fff-d340-dce6-f45dc408e1c6">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">Reshabh Sharma &amp;amp; Sylvestre Ledru&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;/div>&lt;div dir="ltr" style="margin-left: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 14pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="margin-left: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 14pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;/span>&lt;/div></description></item><item><title>Announcing the new LLVM Foundation Board of Directors</title><link>https://blog.llvm.org/2018/09/announcing-new-llvm-foundation-board-of.html</link><pubDate>Tue, 18 Sep 2018 09:00:00 +0000</pubDate><guid>https://blog.llvm.org/2018/09/announcing-new-llvm-foundation-board-of.html</guid><description>&lt;p>The &lt;a href="http://llvm.org/foundation/">LLVM Foundation&lt;/a> is pleased to announce its new Board of Directors:&lt;/p> &lt;br>Chandler Carruth &lt;br>Mike Edwards (Treasurer) &lt;br>Hal Finkel &lt;br>Arnaud de Grandmaison &lt;br>Anton Korobeynikov &lt;br>Tanya Lattner (President) &lt;br>Chris Lattner &lt;br>John Regehr (Secretary) &lt;br>Tom Stellard &lt;p>Two new members and seven continuing members were elected to the nine person board. &lt;/p> &lt;p>We want to thank David Kipping for his 2 terms on the board. David has been actively involved with the LLVM Developer Meetings and was the treasurer for the past 4 years. The treasurer is a time demanding position in that he supports the day to day operation of the foundation, balancing the books, and generates monthly treasurer reports. &lt;/p> &lt;p>We also want to thank all the applicants to the board. When voting on new board members, we took into consideration all contributions (past and present) and current involvement in the LLVM community. We also tried to create a balanced board of individuals from a wide range of backgrounds and locations to provide a voice to as many groups within the LLVM community. Given this criteria and strong applicants, we increased the board from 8 members to 9.&lt;/p> &lt;p>About the board of directors (listed alphabetically by last name):&lt;/p> &lt;br>&lt;b>Chandler Carruth:&lt;/b>&lt;p>Chandler Carruth has been an active contributor to LLVM since 2007. Over the years, he has has worked on LLVM’s memory model and atomics, Clang’s C++ support, GCC-compatible driver, initial profile-aware code layout optimization pass, pass manager, IPO infrastructure, and much more. He is the current code owner of inlining and SSA formation.&lt;/p> &lt;p>In addition to his numerous technical contributions, Chandler has led Google’s LLVM efforts since 2010 and shepherded a number of new efforts that have positively and significantly impacted the LLVM project. These new efforts include things such as adding C++ modules to Clang, adding address and other sanitizers to Clang/LLVM, making Clang compatible with MSVC and available to the Windows C++ developer community, and much more. &lt;/p>&lt;p>Chandler works at Google Inc. as a technical lead for their C++ developer platform and has served on the LLVM Foundation board of directors for the last 4 years. &lt;/p> &lt;b>Mike Edwards:&lt;/b>&lt;p>Mike Edwards is a relative newcomer to the LLVM community, beginning his involvement just a few years ago while working for Sony Playstation. Finding the LLVM community to be an incredibly amazing and welcoming group of people, Mike knew he had to find a way to contribute. Mike’s previous work in DevOps led him to get involved in helping to work on the llvm.org infrastructure. Last year, with the help of the Board and several community members, Mike was able to get the llvm.org infrastructure moved onto a modern compute platform at Amazon Web Services. Mike is one of the maintainers of our llvm.org infrastructure. &lt;/p>&lt;p>Mike is currently working as a Software Engineer at Apple, Inc. working on the Continuous Integration and Quality Engineering efforts for LLVM and Clang development. &lt;/p> &lt;b>Hal Finkel:&lt;/b>&lt;p>Hal Finkel has been an active contributor to the LLVM project since 2011. He is the code owner for the PowerPC target, the alias-analysis infrastructure, and other components. &lt;/p>&lt;p>In addition to his numerous technical contributions, Hal has chaired the LLVM in HPC workshop, which is held in conjunction with Super Computing (SC), for the last five years. This workshop provides a venue for the presentation of peer-reviewed HPC-related researching LLVM from both industry and academia. He has also been involved in organizing an LLVM-themed BoF session at SC and LLVM socials in Austin. &lt;/p>&lt;p>Hal is Lead for Compiler Technology and Programming Languages at Argonne National Laboratory’s Leadership Computing Facility. &lt;/p> &lt;b>Arnaud de Grandmaison:&lt;/b>&lt;p>Arnaud de Grandmaison has been hacking on LLVM projects since 2008. In addition to his open source contributions, he has worked for many years on private out-of-tree LLVM-based projects at Parrot, DiBcom, or Arm. He has also been a leader in the European LLVM community by organizing the EuroLLVM Developers’ meeting, Paris socials, and chaired or participated in numerous program committees for the LLVM Developers’ Meetings and other LLVM related conferences. &lt;/p>&lt;p>Arnaud has attended numerous LLVM Developers’ meetings and volunteered as moderator or presented as well. He also moderates several LLVM mailing lists. Arnaud is also very involved in community wide discussions and decisions such as re-licensing and code of conduct. &lt;/p>&lt;p>Arnaud is a Senior Principal Engineer at Arm. &lt;/p> &lt;b>Anton Korobeynikov:&lt;/b>&lt;p>Anton Korobeynikov has been an active contributor to the LLVM project since 2006. Over the years, he has numerous technical contributions to areas including Windows support, ELF features, debug info, exception handling, and backends such as ARM and x86. He was the original author of the MSP430 and original System Z backend. &lt;/p>&lt;p>In addition to his technical contributions, Anton has maintained LLVM’s participation in Google Summer of Code by managing applications, deadlines, and overall organization. He also supports the LLVM infrastructure and has been on numerous program committees for the LLVM Developers’ Meetings (both US and EuroLLVM). &lt;/p>&lt;p>Anton is currently an associate professor at the Saint Petersburg State University and has served on the LLVM Foundation board of directors for the last 4 years. &lt;/p> &lt;b>Tanya Lattner:&lt;/b>&lt;p>Tanya Lattner has been involved in the LLVM project for over 14 years. She began as a graduate student who wrote her master's thesis using LLVM, and continued on using and extending LLVM technologies at various jobs during her career as a compiler engineer. &lt;/p>&lt;p>Tanya has been organizing the US LLVM Developers’ meeting since 2008 and attended every developer meeting. She was the LLVM release manager for 3 years, moderates the LLVM mailing lists, and helps administer the LLVM infrastructure servers, mailing lists, bugzilla, etc. Tanya has also been on the program committee for the US LLVM Developers’ meeting (4+ years) and the EuroLLVM Developers’ Meeting. &lt;/p>&lt;p>With the support of the initial board of directors, Tanya created the LLVM Foundation, defined its charitable and education mission, and worked to get 501(c)(3) status. &lt;/p>&lt;p>Tanya is the Chief Operating Officer and has served as the President of the LLVM Foundation board for the last 4 years. &lt;/p> &lt;b>Chris Lattner:&lt;/b>&lt;p>Chris Lattner is well known as the founder for the LLVM project and has a lengthy history of technical contributions to the project over the years. He drove much of the early implementation, architecture, and design of LLVM and Clang. &lt;/p>&lt;p>Chris has attended every LLVM Developers’ meeting, and presented at many of them. He helped drive the conception and incorporation of the LLVM Foundation, and has served as its secretary. Chris also grants commit access to the LLVM Project, moderates mailing lists, moderates and edits the LLVM blog, and drives important non-technical discussions and policy decisions related to the LLVM project. &lt;/p>&lt;p>Chris manages a team building machine learning infrastructure at Google and has served on the LLVM Foundation board of directors for the last 4 years. &lt;/p> &lt;b>John Regehr:&lt;/b>&lt;p>John Regehr has been involved in LLVM for a number of years. As a professor of computer science at the University of Utah, his research specializes in compiler correctness and undefined behavior. He is well known within the LLVM community for the hundreds of bug reports his group has reported to LLVM/Clang. &lt;/p>&lt;p>John was a project lead for IOC, a Clang based integer overflow checker that eventually became the basis for the integer parts of UBSan. He was also the primary developer of C-Reduce which utilizes Clang as a library and is often used as a test case reducer for compiler issues. &lt;/p>&lt;p>In addition to his technical contributions, John has served on several LLVM-related program committees. He also has a widely read blog about LLVM and other compiler-related issues (Embedded in Academia). &lt;/p> &lt;b>Tom Stellard:&lt;/b>&lt;p>Tom Stellard has been contributing to the LLVM project since 2012. He was the original author of the AMDGPU backend and was also an active contributor to libclc. He has been the LLVM project’s stable release manager since 2014. &lt;/p>&lt;p>Tom is currently a Software Engineer at Red Hat and is the technical lead for emerging toolchains including Clang/LLvm. He also maintains the LLVM packages for the Fedora project.&lt;/p></description></item><item><title>Announcing the program for the 2018 LLVM Developers' Meeting Bay Area</title><link>https://blog.llvm.org/2018/08/announcing-program-for-2018-llvm.html</link><pubDate>Fri, 31 Aug 2018 16:29:00 +0000</pubDate><guid>https://blog.llvm.org/2018/08/announcing-program-for-2018-llvm.html</guid><description>The LLVM Foundation is excited to announce the program for the &lt;a href="https://llvm.org/devmtg/2018-10/">2018 LLVM Developers' Meeting&lt;/a> in San Jose, CA on October 17 &amp;amp; 18. &lt;br />As a reminder, ticket prices for the event will increase on September 17th. &lt;a href="https://www.eventbrite.com/e/2018-llvm-developers-meeting-bay-area-tickets-47003409463">Purchase your tickets today&lt;/a>! &lt;br />&lt;b>Technical Talks&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk1">Lessons Learned Implementing Common Lisp with LLVM over Six Years&lt;/a> - Christian Schafmeister&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk2">Porting Function merging pass to thinlto&lt;/a> - Aditya Kumar&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk3">Build Impact of Explicit and C++ Standard Modules&lt;/a> - David Blaikie&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk4">Profile Guided Code Layout in LLVM and LLD&lt;/a> - Michael Spencer&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk5">Developer Toolchain for the Nintendo Switch&lt;/a> - Bob Campbell, Jeff Sirois&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk6">Methods for Maintaining OpenMP Semantics without Being Overly Conservative&lt;/a> - Jin Lin, Ernesto Su, Xinmin Tian&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk7">Understanding the performance of code using LLVM's Machine Code Analyzer (llvm-mca)&lt;/a> - Andrea Di Biagio, Matt Davis&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk8">Art Class for Dragons: Supporting GPU compilation without metadata hacks!&lt;/a> - Neil Hickey&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk9">Implementing an OpenCL compiler for CPU in LLVM&lt;/a> - Evgeniy Tyurin&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk10">Working with Standalone Builds of LLVM sub-projects&lt;/a> - Tom Stellard&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk11">Loop Transformations in LLVM: The Good, the Bad, and the Ugly&lt;/a> - Michael Kruse, Hal Finkel&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk12">Efficiently Implementing Runtime Metadata with LLVM&lt;/a> - Joe Groff, Doug Gregor&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk13">Coroutine Representations and ABIs in LLVM&lt;/a> - John McCall&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk14">Glow: LLVM-based machine learning compiler&lt;/a> - Nadav Rotem, Jakob Olesen&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk15">Graph Program Extraction and Device Partitioning in Swift for TensorFlow&lt;/a> - Mingsheng Hong, Chris Lattner&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk16">Memory Tagging, how it improves C++ memory safety, and what does it mean for compiler optimizations&lt;/a> - Kostya Serebryany, Evgenii Stepanov, Vlad Tsyrklevich&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk17">Improving code reuse in clang tools with clangmetatool&lt;/a> - Daniel Ruoso&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk18">Sound Devirtualization in LLVM&lt;/a> - Piotr Padlewski, Krzysztof Pszeniczny&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk24">Extending the SLP vectorizer to support variable vector widths&lt;/a> - Vasileios Porpodas, Rodrigo C. O. Rocha, Luís F. W. Góes&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk19">Revisiting Loop Fusion, and its place in the loop transformation framework.&lt;/a> - Johannes Doerfert, Kit Barton, Hal Finkel, Michael Kruse&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk20">Optimizing Indirections, using abstractions without remorse.&lt;/a> - Johannes Doerfert, Hal Finkel&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk21">Outer Loop Vectorization in LLVM: Current Status and Future Plans&lt;/a> - Florian Hahn, Satish Guggilla, Diego Caballero&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk22">Stories from RV: The LLVM vectorization ecosystem&lt;/a> - Simon Moll, Matthias Kurtenacker, Sebastian Hack&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#talk23">Faster, Stronger C++ Analysis with the Clang Static Analyzer&lt;/a> - George Karpenkov, Artem Dergachev&lt;/li>&lt;/ul>&lt;b>Tutorials&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://www.blogger.com/llvm.org/talk-abstracts.html#tutorial1">Updating ORC JIT for Concurrency&lt;/a> - Lang Hames, Breckin Loggins&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#tutorial2">Register Allocation: More than Coloring&lt;/a> - Matthias Braun&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#tutorial3">How to use LLVM to optimize your parallel programs&lt;/a> - William S. Moses&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#tutorial4">LLVM backend development by example (RISC-V)&lt;/a> - Alex Bradbury&lt;/li>&lt;/ul>&lt;b>Birds of a Feather&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#bof1">Debug Info BoF&lt;/a> - Vedant Kumar, Adrian Prantl&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#bof0">Lifecycle of LLVM bug reports&lt;/a> - Kristof Beyls, Paul Robinson&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#bof2">GlobalISel Design and Development&lt;/a> - Amara Emerson&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#bof3">Migrating to C++14, and beyond!&lt;/a> - JF Bastien&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#bof4">Ideal versus Reality: Optimal Parallelism and Offloading Support in LLVM&lt;/a> - Xinmin Tian, Hal Finkel, TB Schardl, Johannes Doerfert, Vikram Adve&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#bof5">Implementing the parallel STL in libc++&lt;/a> - Louis Dionne&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#bof6">Clang Static Analyzer BoF&lt;/a> - Devin Coughlin&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#bof7">LLVM Foundation BoF&lt;/a> - LLVM Foundation Board of Directors&lt;/li>&lt;/ul>&lt;b>Lightning Talks&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt1">Automatic Differentiation in C/C++ Using Clang Plugin Infrastructure&lt;/a> - Vassil Vassilev, Aleksandr Efremov&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt2">More efficient LLVM devs: 1000x faster build file generation, -j1000 builds, and O(1) test execution&lt;/a> - Nico Weber&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt3">Heap-to-Stack Conversion&lt;/a> - Hal Finkel&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt4">TWINS - This Workflow is Not Scrum: Adapting Agile for Open Source Interaction&lt;/a> - Joshua Magee&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt5">Mutating the clang AST from Plugins&lt;/a> - Andrei Homescu, Per Larsen&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt6">atJIT: an online, feedback-directed optimizer for C++&lt;/a> - Kavon Farvardin, Hal Finkel, Michael Kruse, John Reppy&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt7">Repurposing GCC Regression for LLVM Based Tool Chains&lt;/a> - Jeremy Bennett, Simon Cook, Ed Jones&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt8">ThinLTO Summaries in JIT Compilation&lt;/a> - Stefan Gränitz&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt9">Refuting False Bugs in the Clang Static Analyzer using SMT Solvers&lt;/a> - Mikhail R. Gadelha&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt0">What’s New In Outlining&lt;/a> - Jessica Paquette&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt10">DWARF v5 Highlights - Why You Care&lt;/a> - Paul Robinson, Pavel Labath, Wolfgang Pieb&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt11">Using TAPI to Understand APIs and Speed Up Builds&lt;/a> - Steven Wu, Juergen Ributzka&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt12">Hardware Interference Size&lt;/a> - JF Bastien&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt13">Dex: efficient symbol index for Clangd&lt;/a> - Kirill Bobyrev, Eric Liu, Sam McCall, Ilya Biryukov&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt14">Flang Update&lt;/a> - Steve Scalpone&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt15">clang-doc: an elegant generator for more civilized documentation&lt;/a> - Julie Hockett&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt16">Code Coverage with CPU Performance Monitoring Unit&lt;/a> - Ivan Baev, Bharathi Seshadri, Stefan Pejic&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt17">VecClone Pass: Function Vectorization via LoopVectorizer&lt;/a> - Matt Masten, Evgeniy Tyurin, Konstantina Mitropoulou&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt18">ISL Memory Management Using Clang Static Analyzer&lt;/a> - Malhar Thakkar, Ramakrishna Upadrasta&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt19">Eliminating always_inline in libc++: a journey of visibility and linkage&lt;/a> - Louis Dionne&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#lt20">Error Handling in Libraries: A Case Study&lt;/a> - James Henderson&lt;/li>&lt;/ul>&lt;b>Posters&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#poster0">Gaining fine-grain control over pass management&lt;/a> - serge guelton, adrien guinet, pierrick brunet, juan manuel martinez, béatrice creusillet&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#poster1">Integration of OpenMP, libcxx and libcxxabi packages into LLVM toolchain&lt;/a> - Reshabh Sharma&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#poster2">Improving Debug Information in LLVM to Recover Optimized-out Function Parameters&lt;/a> - Ananthakrishna Sowda, Djordje Todorovic, Nikola Prica, Ivan Baev&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#poster3">Automatic Compression for LLVM RISC-V&lt;/a> - Sameer AbuAsal, Ana Pazos&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#poster4">Guaranteeing the Correctness of LLVM RISC-V Machine Code with Fuzzing&lt;/a> - Jocelyn Wei, Ana Pazos, Mandeep Singh Grang&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#poster5">NEC SX-Aurora - A Scalable Vector Architecture&lt;/a> - Kazuhisa Ishizaka, Kazushi Marukawa, Erich Focht, Simon Moll, Matthias Kurtenacker, Sebastian Hack&lt;/li>&lt;li>&lt;a href="https://llvm.org/devmtg/2018-10/talk-abstracts.html#poster8">Extending Clang Static Analyzer to enable Cross Translation Unit Analysis&lt;/a> - Varun Subramanian&lt;/li>&lt;li>&lt;a href="https://llvm.org/llvm-dev/2018-10/talk-abstracts.html#poster9">Leveraging Polyhedral Compilation in Chapel Compiler&lt;/a> - Siddharth Bhat, Michael Ferguson, Philip Pfaffe, Sahil Yerawar&lt;/li>&lt;/ul></description></item><item><title>2018 LLVM Foundation's Women in Compilers and Tools Workshop</title><link>https://blog.llvm.org/2018/08/2018-llvm-foundations-women-in.html</link><pubDate>Thu, 23 Aug 2018 22:41:00 +0000</pubDate><guid>https://blog.llvm.org/2018/08/2018-llvm-foundations-women-in.html</guid><description>&lt;span id="docs-internal-guid-dd2b8ffe-7fff-6023-32ca-55732f828bdd">&lt;/span>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-dd2b8ffe-7fff-6023-32ca-55732f828bdd">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: ">The LLVM Foundation is excited to announce our first half day Women in Compilers and Tools Workshop held the day before the &lt;/span>&lt;a href="http://llvm.org/devmtg/2018-10/" style="text-decoration: none;">&lt;span style="color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; text-decoration: underline; vertical-align: baseline; ">2018 LLVM Developers’ Meeting - Bay Area&lt;/span>&lt;/a>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; ">. The workshop will be held at the &lt;/span>&lt;a href="https://www.fairmont.com/san-jose/" style="text-decoration: none;">&lt;span style="color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; text-decoration: underline; vertical-align: baseline; ">Fairmont Hotel&lt;/span>&lt;/a>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline;"> on October 16th from 1:00-6:30PM and includes a cocktail reception.&lt;/span>&lt;/span>&lt;br />&lt;span id="docs-internal-guid-a42b87be-7fff-7c26-c9f8-3f49d14afe8b">&lt;/span>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;">This event aims to connect women in the field of compilers and tools and provide them with ideas and techniques to overcome barriers or enhance their careers. It also is open to anyone (not just women) who are interested in increasing diversity within the LLVM community, their workplace or university. &lt;/span>&lt;br />&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; ">Registration for the event will open on Monday, August 27th at 9:00AM PDT. Attendance is limited to 100 attendees and tickets will be priced at $50 (students $25). Please see the &lt;/span>&lt;a href="https://www.eventbrite.com/e/2018-llvm-foundations-women-in-compilers-and-tools-workshop-tickets-49442812784" style="text-decoration: none;">&lt;span style="-webkit-text-decoration-skip: none; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; ">EventBrite registration page&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; "> for details.&lt;/span>&lt;/div>&lt;b id="docs-internal-guid-3233e733-7fff-870b-0004-336c58e3aca6" style="font-weight: normal;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; ">The workshop will consist of 3 topics described below:&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;ol> &lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; list-style-type: decimal; text-decoration: none; vertical-align: baseline; white-space:">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;">Inner Critic: How to Deal with Your Imposter Syndrome&lt;/span>&lt;/div>&lt;/li>&lt;/ol> &lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; ">&lt;span class="Apple-tab-span" style="white-space:"> &lt;/span>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;">Presented by &lt;/span>&lt;a href="https://www.womencatalysts.com/" style="text-decoration: none;">&lt;span style="-webkit-text-decoration-skip: none; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; ">Women Catalysts&lt;/span>&lt;/a>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; ">You're smart. People really like you. And yet, you can't shake the feeling that maybe you don't really deserve your success. Or that someone else can do what you do better...and what if your boss can see it too? You are not alone: it's called the Imposter Syndrome. Believe it or not, the most confident and successful people often fear that&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; "> they are actually inadequate. The great Maya Angelou once said, "I have written 11 books, but each time I think, 'Uh-oh, they're going to find out now. I've run a game on everybody, and they're going to find me out.’" But it doesn't have to be that way. In this workshop, you'll learn to identify the voice of your Imposter Syndrome and develop with strategies for dealing with your inner critics.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;ol start="2" style="margin-bottom: 0pt; margin-top: 0pt;">&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; list-style-type: decimal; text-decoration: none; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;">Present! A Techie's Guide to Public Speaking&lt;/span>&lt;/div>&lt;/li>&lt;/ol>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;">Presented by &lt;/span>&lt;a href="https://karencatlin.com/" style="text-decoration: none;">&lt;span style="-webkit-text-decoration-skip: none; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline;">Karen Catlin&lt;/span>&lt;/a>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; ">To grow your career, you know what you need to do: improve your public speaking skills.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; ">Public speaking provides the visibility and professional credibility that helps you score the next big opportunity. But even more important is the fact that it transforms the way you communicate. Improved confidence and the ability to convey messages clearly will impact your relationships with your managers, coworkers, customers, industry peers, and even potential new hires.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; ">In this presentation, Karen Catlin will cover the importance of speaking at conferences and events, along with strategies to get started. She'll share some favorite tips from the book she co-authored with Poornima Vijayashanker, "Present! A Techie's Guide to Public Speaking." And she'll tell some embarrassing stories that are just too good to keep to herself. &lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;">About Karen: After spending 25 years building software products, Karen Catlin is now an advocate for women in the tech industry. She’s a leadership coach, a keynote and TEDx speaker, and co-author of "Present! A Techie’s Guide to Public Speaking.” &lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; ">Formerly, Karen was a vice president of engineering at Macromedia and Adobe.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;">Karen holds a computer science degree from Brown University and serves as an advisor to Brown's Computer Science Diversity Initiative. She’s also on the Advisory Boards for The Women’s CLUB of Silicon Valley and WEST (Women Entering &amp;amp; Staying in Technology). &lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;ol start="3" style="margin-bottom: 0pt; margin-top: 0pt;">&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; list-style-type: decimal; text-decoration: none; vertical-align: baseline; ">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline;"> Update on Women in Compilers &amp;amp; Tools Program&lt;/span>&lt;/div>&lt;/li>&lt;/ol>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; ">&lt;span class="Apple-tab-span" style="white-space:"> &lt;/span>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;">Presented by &lt;/span>Tanya Lattner&lt;/div> &lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; ">&lt;span class="Apple-tab-span""> &lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; ">Over the past year we have hosted panels and BoFs on women in compilers and tools. We now need to take many of the items discussed during the events and put them into action. We will discuss some key areas and potentially break into smaller groups to determine action plans and steps to move forward.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; ">&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; ">FAQ:&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; ">Do I need to attend the LLVM Developers’ Meeting to attend this event?&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; ">&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; ">This is an independent event which is open to anyone. &amp;nbsp;&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; ">Is this a women only event?&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; ">&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; ">Anyone is welcome to attend that values diversity within the field of compiler and tools. &amp;nbsp;These topics can relate to anyone, not just women, and our mission is to improve inclusion and diversity in general. &lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; =">Is there a financial hardship discount?&lt;/span>&lt;/div>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; ">&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; ">We have discounted the tickets for all attendees but please reach out to the organizer and we will decide on a case by case basis.&lt;/span>&lt;/div>&lt;div>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; ">&lt;br />&lt;/span>&lt;/div>&lt;/div>&lt;/div></description></item><item><title>DragonFFI: FFI/JIT for the C language using Clang/LLVM</title><link>https://blog.llvm.org/2018/03/dragonffi-ffijit-for-c-language-using.html</link><pubDate>Tue, 13 Mar 2018 07:45:00 +0000</pubDate><guid>https://blog.llvm.org/2018/03/dragonffi-ffijit-for-c-language-using.html</guid><description>&lt;style type="text/css"> pre.address { margin-bottom: 0 ; margin-top: 0 ; font: inherit } li { text-indent: 0; } pre.code .ln { color: grey; } /* line numbers */ pre.code, code { text-indent: 0; background-color: #eeeeee } pre.code .comment, code .comment { color: #5C6576 } pre.code .keyword, code .keyword { color: #3B0D06; font-weight: bold } pre.code .literal.string, code .literal.string { color: #0C5404 } pre.code .name.builtin, code .name.builtin { color: #352B84 } pre.code .deleted, code .deleted { background-color: #DEB0A1} pre.code .inserted, code .inserted { background-color: #A3D289} span.classifier { font-family: sans-serif ; font-style: oblique } span.classifier-delimiter { font-family: sans-serif ; font-weight: bold } span.interpreted { font-family: sans-serif } span.option { white-space: nowrap } span.pre { white-space: pre } span.problematic { color: red } span.section-subtitle { /* font-size relative to parent (h1..h6 element) */ font-size: 80% } &lt;/style> &lt;br />&lt;h3>Introduction&lt;/h3>A &lt;a href="https://en.wikipedia.org/wiki/Foreign_function_interface" target="_blank">foreign function interface&lt;/a> is "a mechanism by which a program written in one programming language can call routines or make use of services written in another".&lt;br />In the case of DragonFFI, we expose a library that allows calling C functions and using C structures from any languages. Basically, we want to be able to do this, let's say in Python:&lt;br />&lt;pre class="code python literal-block">&lt;span class="keyword namespace">import&lt;/span> &lt;span class="name namespace">pydffi&lt;/span>&lt;br />&lt;span class="name">CU&lt;/span> &lt;span class="operator">=&lt;/span> &lt;span class="name">pydffi&lt;/span>&lt;span class="operator">.&lt;/span>&lt;span class="name">FFI&lt;/span>&lt;span class="punctuation">()&lt;/span>&lt;span class="operator">.&lt;/span>&lt;span class="name">cdef&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="literal string double">"int puts(const char* s);"&lt;/span>&lt;span class="punctuation">);&lt;/span>&lt;br />&lt;span class="name">CU&lt;/span>&lt;span class="operator">.&lt;/span>&lt;span class="name">funcs&lt;/span>&lt;span class="operator">.&lt;/span>&lt;span class="name">puts&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="literal string double">"hello world!"&lt;/span>&lt;span class="punctuation">)&lt;/span>&lt;br />&lt;/pre>or, in a more advanced way, for instance to use &lt;a href="https://www.libarchive.org/">libarchive&lt;/a> directly from Python:&lt;br />&lt;pre class="code python literal-block">&lt;span class="keyword namespace">import&lt;/span> &lt;span class="name namespace">pydffi&lt;/span>&lt;br />&lt;span class="name">pydffi&lt;/span>&lt;span class="operator">.&lt;/span>&lt;span class="name">dlopen&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="literal string double">"/path/to/libarchive.so"&lt;/span>&lt;span class="punctuation">)&lt;/span>&lt;br />&lt;span class="name">CU&lt;/span> &lt;span class="operator">=&lt;/span> &lt;span class="name">pydffi&lt;/span>&lt;span class="operator">.&lt;/span>&lt;span class="name">FFI&lt;/span>&lt;span class="punctuation">()&lt;/span>&lt;span class="operator">.&lt;/span>&lt;span class="name">cdef&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="literal string double">"#include &amp;lt;archive.h&amp;gt;"&lt;/span>&lt;span class="punctuation">)&lt;/span>&lt;br />&lt;span class="name">a&lt;/span> &lt;span class="operator">=&lt;/span> &lt;span class="name">funcs&lt;/span>&lt;span class="operator">.&lt;/span>&lt;span class="name">archive_read_new&lt;/span>&lt;span class="punctuation">()&lt;/span>&lt;br />&lt;span class="keyword">assert&lt;/span> &lt;span class="name">a&lt;/span>&lt;br />&lt;span class="operator">...&lt;/span>&lt;br />&lt;/pre>This blog post presents related works, their drawbacks, then how Clang/LLVM is used to circumvent these drawbacks, the inner working of DragonFFI and further ideas.&lt;br />The code of the project is available on GitHub: &lt;a href="https://github.com/aguinet/dragonffi">https://github.com/aguinet/dragonffi&lt;/a>. Python 2/3 wheels are available for Linux/OSX x86/x64. Python 3.6 wheels are available for Windows x64. On all these architectures, just use:&lt;br />&lt;pre class="code bash literal-block">$ pip install pydffi&lt;br />&lt;/pre>and play with it :)&lt;br />&lt;br />See below for more information.&lt;br />&lt;br />&lt;h3>Related work&lt;/h3>&lt;tt class="docutils literal">libffi&lt;/tt> is the reference library that provides a FFI for the C language. &lt;tt class="docutils literal">cffi&lt;/tt>&amp;nbsp;is a Python binding around this library that also uses &lt;tt class="docutils literal">PyCParser&lt;/tt>to be able to easily declare interfaces and types. Both these libraries have limitations, among them:&lt;br />&lt;ul class="simple">&lt;li>&lt;tt class="docutils literal">libffi&lt;/tt> does not support the Microsoft x64 ABI under Linux x64. It isn't that trivial to add a new ABI (hand-written ABI, get the ABI right, ...), while a lot of effort have already been put into compilers to get these ABIs right.&lt;/li>&lt;li>&lt;tt class="docutils literal">PyCParser&lt;/tt> only supports a very limited subset of C (no includes, function attributes, ...).&lt;/li>&lt;/ul>Moreover, in 2014, Jordan Rose and John McCall from Apple made a &lt;a href="https://llvm.org/devmtg/2014-10/Slides/Skip%20the%20FFI.pdf">talk&lt;/a> at the LLVM developer meeting of San José about how Clang can be used for C interoperability. This talk also shows various ABI issues, and has been a source of inspiration for DragonFFI at the beginning.&lt;br />&lt;br />Somehow related, Sean Callanan, who worked on &lt;tt class="docutils literal">lldb&lt;/tt>, gave a &lt;a href="http://llvm.org/devmtg/2017-10/#talk5">talk&lt;/a> in 2017 at the LLVM developer meeting of San José on how we could use parts of Clang/LLVM to implement some kind of &lt;tt class="docutils literal">eval()&lt;/tt> for C++. What can be learned from this talk is that debuggers like &lt;tt class="docutils literal">lldb&lt;/tt>&amp;nbsp;must also be able to call an arbitrary C function, and uses debug information among other things to solve it (what we also do, see below :)).&lt;br />&lt;br />DragonFFI is based on Clang/LLVM, and thanks to that it is able to get around these issues:&lt;br />&lt;ul class="simple">&lt;li>it uses Clang to parse header files, allowing direct usage of a C library headers without adaptation;&lt;/li>&lt;li>it support as many calling conventions and function attributes as Clang/LLVM do;&lt;/li>&lt;li>as a bonus, Clang and LLVM allows on-the-fly compilation of C functions, without relying on the presence of a compiler on the system (you still need the headers of the system's libc thought, or MSVCRT headers under Windows);&lt;/li>&lt;li>and this is a good way to have fun with Clang and LLVM! :)&lt;/li>&lt;/ul>Let's dive in!&lt;br />&lt;h3>Creating an FFI library for C&lt;/h3>&lt;h4>Supporting C ABIs&lt;/h4>A C function is always compiled for a given C ABI. The C ABI isn't defined per the official C standards, and is system/architecture-dependent. Lots of things are defined by these ABIs, and it can be quite error prone to implement.&lt;br />&lt;br />To see how ABIs can become complex, let's compile this C code:&lt;br />&lt;br />&lt;pre class="code c literal-block">&lt;span class="keyword">typedef&lt;/span> &lt;span class="keyword">struct&lt;/span> &lt;span class="punctuation">{&lt;/span>&lt;br /> &lt;span class="keyword type">short&lt;/span> &lt;span class="name">a&lt;/span>&lt;span class="punctuation">;&lt;/span>&lt;br /> &lt;span class="keyword type">int&lt;/span> &lt;span class="name">b&lt;/span>&lt;span class="punctuation">;&lt;/span>&lt;br />&lt;span class="punctuation">}&lt;/span> &lt;span class="name">A&lt;/span>&lt;span class="punctuation">;&lt;/span>&lt;br />&lt;br />&lt;span class="keyword type">void&lt;/span> &lt;span class="name function">print_A&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="name">A&lt;/span> &lt;span class="name">s&lt;/span>&lt;span class="punctuation">)&lt;/span> &lt;span class="punctuation">{&lt;/span>&lt;br /> &lt;span class="name">printf&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="literal string">"%d %d&lt;/span>&lt;span class="literal string escape">\n&lt;/span>&lt;span class="literal string">"&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name">s&lt;/span>&lt;span class="punctuation">.&lt;/span>&lt;span class="name">a&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name">s&lt;/span>&lt;span class="punctuation">.&lt;/span>&lt;span class="name">b&lt;/span>&lt;span class="punctuation">);&lt;/span>&lt;br />&lt;span class="punctuation">}&lt;/span>&lt;br />&lt;/pre>&lt;br />Compiled for Linux x64, it gives this LLVM IR:&lt;br />&lt;pre class="code llvm literal-block">&lt;span class="keyword">&lt;br />&lt;/span>&lt;/pre>&lt;pre class="code llvm literal-block">&lt;span class="keyword">target&lt;/span> &lt;span class="keyword">datalayout&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="literal string">"e-m:e-i64:64-f80:128-n8:16:32:64-S128"&lt;/span>&lt;br />&lt;span class="keyword">target&lt;/span> &lt;span class="keyword">triple&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="literal string">"x86_64-pc-linux-gnu"&lt;/span>&lt;br />&lt;br />&lt;span class="name variable global">@.str&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="keyword">private&lt;/span> &lt;span class="keyword">unnamed_addr&lt;/span> &lt;span class="keyword">constant&lt;/span> &lt;span class="punctuation">[&lt;/span>&lt;span class="literal number">7&lt;/span> &lt;span class="keyword">x&lt;/span> &lt;span class="keyword">i8&lt;/span>&lt;span class="punctuation">]&lt;/span> &lt;span class="keyword">c&lt;/span>&lt;span class="literal string">"%d %d\0A\00"&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="keyword">align&lt;/span> &lt;span class="literal number">1&lt;/span>&lt;br />&lt;br />&lt;span class="keyword">define&lt;/span> &lt;span class="keyword type">void&lt;/span> &lt;span class="name variable global">@print_A&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="keyword">i64&lt;/span>&lt;span class="punctuation">)&lt;/span> &lt;span class="keyword">local_unnamed_addr&lt;/span> &lt;span class="punctuation">{&lt;/span>&lt;br /> &lt;span class="name variable anonymous">%2&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="keyword">trunc&lt;/span> &lt;span class="keyword">i64&lt;/span> &lt;span class="name variable anonymous">%0&lt;/span> &lt;span class="keyword">to&lt;/span> &lt;span class="keyword">i32&lt;/span>&lt;br /> &lt;span class="name variable anonymous">%3&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="keyword">lshr&lt;/span> &lt;span class="keyword">i64&lt;/span> &lt;span class="name variable anonymous">%0&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="literal number">32&lt;/span>&lt;br /> &lt;span class="name variable anonymous">%4&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="keyword">trunc&lt;/span> &lt;span class="keyword">i64&lt;/span> &lt;span class="name variable anonymous">%3&lt;/span> &lt;span class="keyword">to&lt;/span> &lt;span class="keyword">i32&lt;/span>&lt;br /> &lt;span class="name variable anonymous">%5&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="keyword">shl&lt;/span> &lt;span class="keyword">i32&lt;/span> &lt;span class="name variable anonymous">%2&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="literal number">16&lt;/span>&lt;br /> &lt;span class="name variable anonymous">%6&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="keyword">ashr&lt;/span> &lt;span class="keyword">exact&lt;/span> &lt;span class="keyword">i32&lt;/span> &lt;span class="name variable anonymous">%5&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="literal number">16&lt;/span>&lt;br /> &lt;span class="name variable anonymous">%7&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="keyword">tail&lt;/span> &lt;span class="keyword">call&lt;/span> &lt;span class="keyword">i32&lt;/span> &lt;span class="punctuation">(&lt;/span>&lt;span class="keyword">i8&lt;/span>&lt;span class="punctuation">*,&lt;/span> &lt;span class="punctuation">...)&lt;/span> &lt;span class="name variable global">@printf&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="keyword">i8&lt;/span>&lt;span class="punctuation">*&lt;/span> &lt;span class="keyword">getelementptr&lt;/span> &lt;span class="keyword">inbounds&lt;/span> &lt;span class="punctuation">([&lt;/span>&lt;span class="literal number">7&lt;/span> &lt;span class="keyword">x&lt;/span> &lt;span class="keyword">i8&lt;/span>&lt;span class="punctuation">],&lt;/span> &lt;span class="punctuation">[&lt;/span>&lt;span class="literal number">7&lt;/span> &lt;span class="keyword">x&lt;/span> &lt;span class="keyword">i8&lt;/span>&lt;span class="punctuation">]*&lt;/span> &lt;span class="name variable global">@.str&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="keyword">i64&lt;/span> &lt;span class="literal number">0&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="keyword">i64&lt;/span> &lt;span class="literal number">0&lt;/span>&lt;span class="punctuation">),&lt;/span> &lt;span class="keyword">i32&lt;/span> &lt;span class="name variable anonymous">%6&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="keyword">i32&lt;/span> &lt;span class="name variable anonymous">%4&lt;/span>&lt;span class="punctuation">)&lt;/span>&lt;br /> &lt;span class="keyword">ret&lt;/span> &lt;span class="keyword type">void&lt;/span>&lt;br />&lt;span class="punctuation">}&lt;/span>&lt;br />&lt;/pre>&lt;br />What happens here is what is called &lt;i>structure coercion&lt;/i>. To optimize some function calls, some ABIs pass structure values through registers. For instance, an &lt;tt class="docutils literal">&lt;span class="pre">llvm::ArrayRef&lt;/span>&lt;/tt> object, which is basically a structure with a pointer and a size (see &lt;a href="https://github.com/llvm-mirror/llvm/blob/release_60/include/llvm/ADT/ArrayRef.h#L51">https://github.com/llvm-mirror/llvm/blob/release_60/include/llvm/ADT/ArrayRef.h#L51&lt;/a>), is passed through registers (though this optimization isn't guaranteed by any standard).&lt;br />&lt;br />It is important to understand that ABIs are complex things to implement and we don't want to redo this whole work by ourselves, particularly when LLVM/Clang already know how.&lt;br />&lt;h4>Finding the right type abstraction&lt;/h4>We want to list every types that is used in a parsed C file. To achieve that goal, various information are needed, among which:&lt;br />&lt;ul class="simple">&lt;li>the function types, and their calling convention&lt;/li>&lt;li>for structures: field offsets and names&lt;/li>&lt;li>for union/enums: field names (and values)&lt;/li>&lt;/ul>On one hand, we have seen in the previous section that the LLVM IR is too Low Level (as in &lt;b>Low Level&lt;/b> Virtual Machine) for this. On the other hand, Clang's AST is too high level. Indeed, let's print the Clang AST of the code above:&lt;br />&lt;pre class="code bash literal-block">&lt;span class="operator">[&lt;/span>...&lt;span class="operator">]&lt;/span>&lt;br />&lt;span class="punctuation">|&lt;/span>-RecordDecl 0x5561d7f9fc20 &amp;lt;a.c:1:9, line:4:1&amp;gt; line:1:9 struct definition&lt;br />&lt;span class="punctuation">|&lt;/span> &lt;span class="punctuation">|&lt;/span>-FieldDecl 0x5561d7ff4750 &amp;lt;line:2:3, col:9&amp;gt; col:9 referenced a &lt;span class="literal string single">'short'&lt;/span>&lt;br />&lt;span class="punctuation">|&lt;/span> &lt;span class="literal string backtick">`&lt;/span>-FieldDecl 0x5561d7ff47b0 &amp;lt;line:3:3, col:7&amp;gt; col:7 referenced b &lt;span class="literal string single">'int'&lt;/span>&lt;br />&lt;/pre>We can see that there is no information about the structure layout (padding, ...). There's also no information about the size of standard C types. As all of this depends on the backend used, it is not surprising that these informations are not present in the AST.&lt;br />&lt;br />The right abstraction appears to be the LLVM metadata produced by Clang to emit DWARF or PDB structures. They provide structure fields offset/name, various basic type descriptions, and function calling conventions. Exactly what we need! For the example above, this gives (at the LLVM IR level, with some inline comments):&lt;br />&lt;br />&lt;pre class="code llvm literal-block">&lt;span class="keyword">target&lt;/span> &lt;span class="keyword">triple&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="literal string">"x86_64-pc-linux-gnu"&lt;/span>&lt;br />&lt;span class="name variable">%struct.A&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="keyword">type&lt;/span> &lt;span class="punctuation">{&lt;/span> &lt;span class="keyword">i16&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="keyword">i32&lt;/span> &lt;span class="punctuation">}&lt;/span>&lt;br />&lt;span class="name variable global">@.str&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="keyword">private&lt;/span> &lt;span class="keyword">unnamed_addr&lt;/span> &lt;span class="keyword">constant&lt;/span> &lt;span class="punctuation">[&lt;/span>&lt;span class="literal number">7&lt;/span> &lt;span class="keyword">x&lt;/span> &lt;span class="keyword">i8&lt;/span>&lt;span class="punctuation">]&lt;/span> &lt;span class="keyword">c&lt;/span>&lt;span class="literal string">"%d %d\0A\00"&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="keyword">align&lt;/span> &lt;span class="literal number">1&lt;/span>&lt;br />&lt;br />&lt;span class="keyword">define&lt;/span> &lt;span class="keyword type">void&lt;/span> &lt;span class="name variable global">@print_A&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="keyword">i64&lt;/span>&lt;span class="punctuation">)&lt;/span> &lt;span class="keyword">local_unnamed_addr&lt;/span> &lt;span class="name variable">!dbg&lt;/span> &lt;span class="name variable anonymous">!7&lt;/span> &lt;span class="punctuation">{&lt;/span>&lt;br /> &lt;span class="name variable anonymous">%2&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="keyword">trunc&lt;/span> &lt;span class="keyword">i64&lt;/span> &lt;span class="name variable anonymous">%0&lt;/span> &lt;span class="keyword">to&lt;/span> &lt;span class="keyword">i32&lt;/span>&lt;br /> &lt;span class="name variable anonymous">%3&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="keyword">lshr&lt;/span> &lt;span class="keyword">i64&lt;/span> &lt;span class="name variable anonymous">%0&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="literal number">32&lt;/span>&lt;br /> &lt;span class="name variable anonymous">%4&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="keyword">trunc&lt;/span> &lt;span class="keyword">i64&lt;/span> &lt;span class="name variable anonymous">%3&lt;/span> &lt;span class="keyword">to&lt;/span> &lt;span class="keyword">i32&lt;/span>&lt;br /> &lt;span class="keyword">tail&lt;/span> &lt;span class="keyword">call&lt;/span> &lt;span class="keyword type">void&lt;/span> &lt;span class="name variable global">@llvm.dbg.value&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="keyword type">metadata&lt;/span> &lt;span class="keyword">i32&lt;/span> &lt;span class="name variable anonymous">%4&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="keyword">i64&lt;/span> &lt;span class="literal number">0&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="keyword type">metadata&lt;/span> &lt;span class="name variable anonymous">!18&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="keyword type">metadata&lt;/span> &lt;span class="name variable anonymous">!19&lt;/span>&lt;span class="punctuation">),&lt;/span> &lt;span class="name variable">!dbg&lt;/span> &lt;span class="name variable anonymous">!20&lt;/span>&lt;br /> &lt;span class="keyword">tail&lt;/span> &lt;span class="keyword">call&lt;/span> &lt;span class="keyword type">void&lt;/span> &lt;span class="name variable global">@llvm.dbg.declare&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="keyword type">metadata&lt;/span> &lt;span class="name variable">%struct.A&lt;/span>&lt;span class="punctuation">*&lt;/span> &lt;span class="keyword">undef&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="keyword type">metadata&lt;/span> &lt;span class="name variable anonymous">!18&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="keyword type">metadata&lt;/span> &lt;span class="name variable anonymous">!21&lt;/span>&lt;span class="punctuation">),&lt;/span> &lt;span class="name variable">!dbg&lt;/span> &lt;span class="name variable anonymous">!20&lt;/span>&lt;br /> &lt;span class="name variable anonymous">%5&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="keyword">shl&lt;/span> &lt;span class="keyword">i32&lt;/span> &lt;span class="name variable anonymous">%2&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="literal number">16&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name variable">!dbg&lt;/span> &lt;span class="name variable anonymous">!22&lt;/span>&lt;br /> &lt;span class="name variable anonymous">%6&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="keyword">ashr&lt;/span> &lt;span class="keyword">exact&lt;/span> &lt;span class="keyword">i32&lt;/span> &lt;span class="name variable anonymous">%5&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="literal number">16&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name variable">!dbg&lt;/span> &lt;span class="name variable anonymous">!22&lt;/span>&lt;br /> &lt;span class="name variable anonymous">%7&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="keyword">tail&lt;/span> &lt;span class="keyword">call&lt;/span> &lt;span class="keyword">i32&lt;/span> &lt;span class="punctuation">(&lt;/span>&lt;span class="keyword">i8&lt;/span>&lt;span class="punctuation">*,&lt;/span> &lt;span class="punctuation">...)&lt;/span> &lt;span class="name variable global">@printf&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="keyword">i8&lt;/span>&lt;span class="punctuation">*&lt;/span> &lt;span class="keyword">getelementptr&lt;/span> &lt;span class="keyword">inbounds&lt;/span> &lt;span class="punctuation">([...]&lt;/span> &lt;span class="name variable global">@.str&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="keyword">i64&lt;/span> &lt;span class="literal number">0&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="keyword">i64&lt;/span> &lt;span class="literal number">0&lt;/span>&lt;span class="punctuation">),&lt;/span> &lt;span class="keyword">i32&lt;/span> &lt;span class="name variable anonymous">%6&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="keyword">i32&lt;/span> &lt;span class="name variable anonymous">%4&lt;/span>&lt;span class="punctuation">),&lt;/span> &lt;span class="name variable">!dbg&lt;/span> &lt;span class="name variable anonymous">!23&lt;/span>&lt;br /> &lt;span class="keyword">ret&lt;/span> &lt;span class="keyword type">void&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name variable">!dbg&lt;/span> &lt;span class="name variable anonymous">!24&lt;/span>&lt;br />&lt;span class="punctuation">}&lt;/span>&lt;br />&lt;br />&lt;span class="punctuation">[...]&lt;/span>&lt;br />&lt;span class="comment">; DISubprogram defines (in our case) a C function, with its full type&lt;br />&lt;/span>&lt;span class="name variable anonymous">!7&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="keyword">distinct&lt;/span> &lt;span class="name variable">!DISubprogram&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="name label">name:&lt;/span> &lt;span class="literal string">"print_A"&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">scope:&lt;/span> &lt;span class="name variable anonymous">!1&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">file:&lt;/span> &lt;span class="name variable anonymous">!1&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">line:&lt;/span> &lt;span class="literal number">6&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">type:&lt;/span> &lt;span class="name variable anonymous">!8&lt;/span>&lt;span class="punctuation">,&lt;/span> [...]&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">variables:&lt;/span> &lt;span class="name variable anonymous">!17&lt;/span>&lt;span class="punctuation">)&lt;/span>&lt;br />&lt;span class="comment">; This defines the type of our subprogram&lt;br />&lt;/span>&lt;span class="name variable anonymous">!8&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="name variable">!DISubroutineType&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="name label">types:&lt;/span> &lt;span class="name variable anonymous">!9&lt;/span>&lt;span class="punctuation">)&lt;/span>&lt;br />&lt;span class="comment">; We have the "original" types used for print_A, with the first one being the&lt;br />; return type (null =&amp;gt; void), and the other ones the arguments (in !10)&lt;br />&lt;/span>&lt;span class="name variable anonymous">!9&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="punctuation">!{&lt;/span>&lt;span class="keyword">null&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name variable anonymous">!10&lt;/span>&lt;span class="punctuation">}&lt;/span>&lt;br />&lt;span class="name variable anonymous">!10&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="name variable">!DIDerivedType&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="name label">tag:&lt;/span> &lt;span class="error">DW_TAG_typedef&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">name:&lt;/span> &lt;span class="literal string">"A"&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">file:&lt;/span> &lt;span class="name variable anonymous">!1&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">line:&lt;/span> &lt;span class="literal number">4&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">baseType:&lt;/span> &lt;span class="name variable anonymous">!11&lt;/span>&lt;span class="punctuation">)&lt;/span>&lt;br />&lt;span class="comment">; This defines our structure, with its various fields&lt;br />&lt;/span>&lt;span class="name variable anonymous">!11&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="keyword">distinct&lt;/span> &lt;span class="name variable">!DICompositeType&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="name label">tag:&lt;/span> &lt;span class="error">DW_TAG_structure_&lt;/span>&lt;span class="keyword">type&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">file:&lt;/span> &lt;span class="name variable anonymous">!1&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">line:&lt;/span> &lt;span class="literal number">1&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">size:&lt;/span> &lt;span class="literal number">64&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">elements:&lt;/span> &lt;span class="name variable anonymous">!12&lt;/span>&lt;span class="punctuation">)&lt;/span>&lt;br />&lt;span class="name variable anonymous">!12&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="punctuation">!{&lt;/span>&lt;span class="name variable anonymous">!13&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name variable anonymous">!15&lt;/span>&lt;span class="punctuation">}&lt;/span>&lt;br />&lt;span class="comment">; We have here the size and name of the member "a". Offset is 0 (default value)&lt;br />&lt;/span>&lt;span class="name variable anonymous">!13&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="name variable">!DIDerivedType&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="name label">tag:&lt;/span> &lt;span class="error">DW_TAG_member&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">name:&lt;/span> &lt;span class="literal string">"a"&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">scope:&lt;/span> &lt;span class="name variable anonymous">!11&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">file:&lt;/span> &lt;span class="name variable anonymous">!1&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">line:&lt;/span> &lt;span class="literal number">2&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">baseType:&lt;/span> &lt;span class="name variable anonymous">!14&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">size:&lt;/span> &lt;span class="literal number">16&lt;/span>&lt;span class="punctuation">)&lt;/span>&lt;br />&lt;span class="name variable anonymous">!14&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="name variable">!DIBasicType&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="name label">name:&lt;/span> &lt;span class="literal string">"short"&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">size:&lt;/span> &lt;span class="literal number">16&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">encoding:&lt;/span> &lt;span class="error">DW_ATE_signed&lt;/span>&lt;span class="punctuation">)&lt;/span>&lt;br />&lt;span class="comment">; We have here the size, offset and name of the member "b"&lt;br />&lt;/span>&lt;span class="name variable anonymous">!15&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="name variable">!DIDerivedType&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="name label">tag:&lt;/span> &lt;span class="error">DW_TAG_member&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">name:&lt;/span> &lt;span class="literal string">"b"&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">scope:&lt;/span> &lt;span class="name variable anonymous">!11&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">file:&lt;/span> &lt;span class="name variable anonymous">!1&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">line:&lt;/span> &lt;span class="literal number">3&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">baseType:&lt;/span> &lt;span class="name variable anonymous">!16&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">size:&lt;/span> &lt;span class="literal number">32&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">offset:&lt;/span> &lt;span class="literal number">32&lt;/span>&lt;span class="punctuation">)&lt;/span>&lt;br />&lt;span class="name variable anonymous">!16&lt;/span> &lt;span class="punctuation">=&lt;/span> &lt;span class="name variable">!DIBasicType&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="name label">name:&lt;/span> &lt;span class="literal string">"int"&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">size:&lt;/span> &lt;span class="literal number">32&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name label">encoding:&lt;/span> &lt;span class="error">DW_ATE_signed&lt;/span>&lt;span class="punctuation">)&lt;/span>&lt;br />&lt;span class="punctuation">[...]&lt;/span>&lt;br />&lt;/pre>&lt;h4>Internals&lt;/h4>DragonFFI first parses the debug information included by Clang in the LLVM IR it produces, and creates a custom type system to represent the various function types, structures, enumerations and typedefs of the parsed C file. This custom type system has been created for two reasons:&lt;br />&lt;ul class="simple">&lt;li>create a type system that gathers only the necessary informations from the metadata tree (we don't need the whole debug informations)&lt;/li>&lt;li>make the public headers of the DragonFFI library free from any LLVM headers (so that the whole LLVM headers aren't needed to use the library)&lt;/li>&lt;/ul>Once we've got this type system, the DragonFFI API for calling C functions is this one:&lt;br />&lt;br />&lt;pre class="code cpp literal-block">&lt;span class="name">DFFI&lt;/span> &lt;span class="name function">FFI&lt;/span>&lt;span class="punctuation">([...]);&lt;/span>&lt;br />&lt;span class="comment single">// This will declare puts as a function that returns int and takes a const&lt;br />&lt;/span>&lt;/pre>&lt;pre class="code cpp literal-block">&lt;span class="comment single">// char* as an argument. We could also create this function type by hand.&lt;br />&lt;/span>&lt;span class="name">CompilationUnit&lt;/span> &lt;span class="name">CU&lt;/span> &lt;span class="operator">=&lt;/span> &lt;span class="name">FFI&lt;/span>&lt;span class="punctuation">.&lt;/span>&lt;span class="name">cdef&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="literal string">"int puts(const char* s);"&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="punctuation">[...]);&lt;/span>&lt;br />&lt;span class="name">NativeFunc&lt;/span> &lt;span class="name">F&lt;/span> &lt;span class="operator">=&lt;/span> &lt;span class="name">CU&lt;/span>&lt;span class="punctuation">.&lt;/span>&lt;span class="name">getFunction&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="literal string">"puts"&lt;/span>&lt;span class="punctuation">);&lt;/span>&lt;br />&lt;span class="keyword">const&lt;/span> &lt;span class="keyword type">char&lt;/span>&lt;span class="operator">*&lt;/span> &lt;span class="name">s&lt;/span> &lt;span class="operator">=&lt;/span> &lt;span class="literal string">"hello world!"&lt;/span>&lt;span class="punctuation">;&lt;/span>&lt;br />&lt;span class="keyword type">void&lt;/span>&lt;span class="operator">*&lt;/span> &lt;span class="name">Args&lt;/span>&lt;span class="punctuation">[]&lt;/span> &lt;span class="operator">=&lt;/span> &lt;span class="punctuation">{&lt;/span>&lt;span class="operator">&amp;amp;&lt;/span>&lt;span class="name">s&lt;/span>&lt;span class="punctuation">};&lt;/span>&lt;br />&lt;span class="keyword type">int&lt;/span> &lt;span class="name">Ret&lt;/span>&lt;span class="punctuation">;&lt;/span>&lt;br />&lt;span class="name">F&lt;/span>&lt;span class="punctuation">.&lt;/span>&lt;span class="name">call&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="operator">&amp;amp;&lt;/span>&lt;span class="name">Ret&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name">Args&lt;/span>&lt;span class="punctuation">);&lt;/span>&lt;br />&lt;/pre>&lt;br />So, basically, a pointer to the returned data and an array of &lt;tt class="docutils literal">void*&lt;/tt> is given to DragonFFI. Each &lt;tt class="docutils literal">void*&lt;/tt> value is a pointer to the data that must be passed to the underlying function. So the last missing piece of the puzzle is the code that takes this array of &lt;tt class="docutils literal">void*&lt;/tt> (and pointer to the returned data) and calls &lt;tt class="docutils literal">puts&lt;/tt>, so a function like this:&lt;br />&lt;pre class="code cpp literal-block">&lt;span class="keyword type">&lt;br />&lt;/span>&lt;/pre>&lt;pre class="code cpp literal-block">&lt;span class="keyword type">void&lt;/span> &lt;span class="name function">call_puts&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="keyword type">void&lt;/span>&lt;span class="operator">*&lt;/span> &lt;span class="name">Ret&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="keyword type">void&lt;/span>&lt;span class="operator">**&lt;/span> &lt;span class="name">Args&lt;/span>&lt;span class="punctuation">)&lt;/span> &lt;span class="punctuation">{&lt;/span>&lt;br /> &lt;span class="operator">*&lt;/span>&lt;span class="punctuation">((&lt;/span>&lt;span class="keyword type">int&lt;/span>&lt;span class="operator">*&lt;/span>&lt;span class="punctuation">)&lt;/span>&lt;span class="name">Ret&lt;/span>&lt;span class="punctuation">)&lt;/span> &lt;span class="operator">=&lt;/span> &lt;span class="name">puts&lt;/span>&lt;span class="punctuation">((&lt;/span>&lt;span class="keyword">const&lt;/span> &lt;span class="keyword type">char&lt;/span>&lt;span class="operator">*&lt;/span>&lt;span class="punctuation">)&lt;/span> &lt;span class="name">Args&lt;/span>&lt;span class="punctuation">[&lt;/span>&lt;span class="literal number integer">0&lt;/span>&lt;span class="punctuation">]);&lt;/span>&lt;br />&lt;span class="punctuation">}&lt;/span>&lt;br />&lt;/pre>&lt;br />We call these "function wrappers" (how original! :)). One advantage of this signature is that it is a generic signature, which can be used in the implementation of DragonFFI. Supposing we manage to compile at run-time this function, we can then call it trivially as in the following:&lt;br />&lt;br />&lt;pre class="code cpp literal-block">&lt;span class="keyword">typedef&lt;/span> &lt;span class="name function">void&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="operator">*&lt;/span>&lt;span class="name">puts_call_ty&lt;/span>&lt;span class="punctuation">)(&lt;/span>&lt;span class="keyword type">void&lt;/span>&lt;span class="operator">*&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="keyword type">void&lt;/span>&lt;span class="operator">**&lt;/span>&lt;span class="punctuation">);&lt;/span>&lt;br />&lt;span class="name">puts_call_ty&lt;/span> &lt;span class="name">Wrapper&lt;/span> &lt;span class="operator">=&lt;/span> &lt;span class="comment multiline">/* pointer to the compiled wrapper function */;&lt;/span>&lt;br />&lt;span class="name">Wrapper&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="name">Ret&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="name">Args&lt;/span>&lt;span class="punctuation">);&lt;/span>&lt;br />&lt;/pre>&lt;pre class="code cpp literal-block">&lt;span class="punctuation">&lt;br />&lt;/span>&lt;/pre>Generating and compiling a function like this is something Clang/LLVM is able to do. For the record, this is also what &lt;tt class="docutils literal">libffi&lt;/tt> mainly does, by generating the necessary assembly &lt;i>by hand&lt;/i>. We optimize the number of these wrappers in DragonFFI, by generating them for each different function type. So, the actual wrapper that would be generated for &lt;tt class="docutils literal">puts&lt;/tt> is actually this one:&lt;br />&lt;br />&lt;pre class="code cpp literal-block">&lt;span class="keyword type">void&lt;/span> &lt;span class="name function">__dffi_wrapper_0&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="keyword type">int32_t&lt;/span>&lt;span class="punctuation">(&lt;/span> &lt;span class="name">__attribute__&lt;/span>&lt;span class="punctuation">((&lt;/span>&lt;span class="name">cdecl&lt;/span>&lt;span class="punctuation">))&lt;/span> &lt;span class="operator">*&lt;/span>&lt;span class="name">__FPtr&lt;/span>&lt;span class="punctuation">)(&lt;/span>&lt;span class="keyword type">char&lt;/span> &lt;span class="operator">*&lt;/span>&lt;span class="punctuation">),&lt;/span> &lt;span class="keyword type">int32_t&lt;/span> &lt;span class="operator">*&lt;/span>&lt;span class="name">__Ret&lt;/span>&lt;span class="punctuation">,&lt;/span> &lt;span class="keyword type">void&lt;/span>&lt;span class="operator">**&lt;/span> &lt;span class="name">__Args&lt;/span>&lt;span class="punctuation">)&lt;/span> &lt;span class="punctuation">{&lt;/span>&lt;br /> &lt;span class="operator">*&lt;/span>&lt;span class="name">__Ret&lt;/span> &lt;span class="operator">=&lt;/span> &lt;span class="punctuation">(&lt;/span>&lt;span class="name">__FPtr&lt;/span>&lt;span class="punctuation">)(&lt;/span>&lt;span class="operator">*&lt;/span>&lt;span class="punctuation">((&lt;/span>&lt;span class="keyword type">char&lt;/span> &lt;span class="operator">**&lt;/span>&lt;span class="punctuation">)&lt;/span>&lt;span class="name">__Args&lt;/span>&lt;span class="punctuation">[&lt;/span>&lt;span class="literal number integer">0&lt;/span>&lt;span class="punctuation">]));&lt;/span>&lt;br />&lt;span class="punctuation">}&lt;/span>&lt;br />&lt;/pre>&lt;pre class="code cpp literal-block">&lt;span class="punctuation">&lt;br />&lt;/span>&lt;/pre>For now, all the necessary wrappers are generated when the &lt;tt class="docutils literal">&lt;span class="pre">DFFI::cdef&lt;/span>&lt;/tt> or &lt;tt class="docutils literal">&lt;span class="pre">DFFI::compile&lt;/span>&lt;/tt> APIs are used. The only exception where they are generated on-the-fly (when calling &lt;tt class="docutils literal">&lt;span class="pre">CompilationUnit::getFunction&lt;/span>&lt;/tt>) is for variadic arguments. One possible evolution is to let the user chooses whether he wants this to happen on-the-fly or not for every declared function.&lt;br />&lt;h3>Issues with Clang&lt;/h3>There is one major issue with Clang that we need to hack around in order to have the &lt;tt class="docutils literal">&lt;span class="pre">DFFI::cdef&lt;/span>&lt;/tt> functionality: unused declarations aren't emitted by Clang (even when using &lt;tt class="docutils literal">&lt;span class="pre">-g&lt;/span> &lt;span class="pre">-femit-all-decls&lt;/span>&lt;/tt>).&lt;br />&lt;br />Here is an example, produced from the following C code:&lt;br />&lt;br />&lt;pre class="code c literal-block">&lt;span class="keyword">typedef&lt;/span> &lt;span class="keyword">struct&lt;/span> &lt;span class="punctuation">{&lt;/span>&lt;br /> &lt;span class="keyword type">short&lt;/span> &lt;span class="name">a&lt;/span>&lt;span class="punctuation">;&lt;/span>&lt;br /> &lt;span class="keyword type">int&lt;/span> &lt;span class="name">b&lt;/span>&lt;span class="punctuation">;&lt;/span>&lt;br />&lt;span class="punctuation">}&lt;/span> &lt;span class="name">A&lt;/span>&lt;span class="punctuation">;&lt;/span>&lt;br />&lt;br />&lt;span class="keyword type">void&lt;/span> &lt;span class="name function">print_A&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="name">A&lt;/span> &lt;span class="name">s&lt;/span>&lt;span class="punctuation">);&lt;/span>&lt;br />&lt;/pre>&lt;pre class="code sh literal-block">$ clang -S -emit-llvm -g -femit-all-decls -o - a.c &lt;span class="punctuation">|&lt;/span>grep print_A &lt;span class="punctuation">|&lt;/span>wc -l&lt;br />&lt;span class="literal number">0&lt;/span>&lt;br />&lt;/pre>&lt;br />The produced LLVM IR does not contain a function named &lt;tt class="docutils literal">print_A&lt;/tt>! The hack we temporarily use parses the clang AST and generates temporary functions that looks like this:&lt;br />&lt;pre class="code cpp literal-block">&lt;span class="keyword type">&lt;br />&lt;/span>&lt;/pre>&lt;pre class="code cpp literal-block">&lt;span class="keyword type">void&lt;/span> &lt;span class="name function">__dffi_force_decl_print_A&lt;/span>&lt;span class="punctuation">(&lt;/span>&lt;span class="name">A&lt;/span> &lt;span class="name">s&lt;/span>&lt;span class="punctuation">)&lt;/span> &lt;span class="punctuation">{&lt;/span> &lt;span class="punctuation">}&lt;/span>&lt;br />&lt;/pre>&lt;br />This forces LLVM to generate an empty function named &lt;tt class="docutils literal">__dffi_force_decl_print_A&lt;/tt> with the good arguments (and associated debug informations).&lt;br />&lt;br />This is why DragonFFI proposes another API, &lt;tt class="docutils literal">&lt;span class="pre">DFFI::compile&lt;/span>&lt;/tt>. This API does not force declared-only functions to be present in the LLVM IR, and will only expose functions that end up naturally in the LLVM IR after optimizations.&lt;br />&lt;br />If someone has a better idea to handle this, please let us know! &lt;br />&lt;h3>Python bindings&lt;/h3>Python bindings were the first ones to have been written, simply because it's the "high level" language I know best. &amp;nbsp;Python provides its own set of challenges, but we will save that for another blog post. &amp;nbsp;These Python bindings are built using &lt;a href="https://github.com/pybind/pybind11">pybind11&lt;/a>, and provides their own set of C types. Lots of example of what can be achieved can be found &lt;a href="https://github.com/aguinet/dragonffi/tree/dffi-0.2.1/examples">here&lt;/a> and &lt;a href="https://github.com/aguinet/dragonffi/tree/dffi-0.2.1/bindings/python/tests">here&lt;/a>.&lt;br />&lt;h3>Project status&lt;/h3>DragonFFI currently supports Linux, OSX and Windows OSes, running on Intel 32 and 64-bits CPUs. Travis is used for continuous integration, and every changes is validated on all these platforms before being integrated.&lt;br />&lt;br />The project will go from alpha to beta quality when the 0.3 version will be out (which will bring Travis and Appveyor CI integration and support for variadic functions). The project will be considered stable once these things happen:&lt;br />&lt;ul class="simple">&lt;li>user and developer documentations exist!&lt;/li>&lt;li>another foreign language is supported (JS? Ruby?)&lt;/li>&lt;li>the DragonFFI main library API is considered stable&lt;/li>&lt;li>a non negligible list of tests have been added&lt;/li>&lt;li>all the things in the &lt;tt class="docutils literal">TODO&lt;/tt> file have been done :)&lt;/li>&lt;/ul>&lt;h3>Various ideas for the future&lt;/h3>Here are various interesting ideas we have for the future. We don't know yet when they will be implemented, but we think some of them could be quite nice to have.&lt;br />&lt;h4>Parse embedded DWARF information&lt;/h4>As the entry point of DragonFFI are DWARF informations, we could imagine parsing these debug informations from shared libraries that embed them (or provide them in a separate file). The main advantage is that all the necessary information for doing the FFI right are in one file, the header files are no longer required. The main drawback is that debug informations tend to take a lot of space (for instance, DWARF informations take 1.8Mb for &lt;tt class="docutils literal">libarchive&lt;/tt> 3.32 compiled in release mode, for an original binary code size of 735Kb), and this brings us to the next idea.&lt;br />&lt;h4>Lightweight debug info?&lt;/h4>The DWARF standard allows to define lots of information, and we don't need all of them in our case. We could imagine embedding only the necessary DWARF objects, that is just the necessary types to call the exported functions of a shared library. One experiment of this is available here: &lt;a href="https://github.com/aguinet/llvm-lightdwarf">https://github.com/aguinet/llvm-lightdwarf&lt;/a>. This is an LLVM optimisation pass that is inserted at the end of the optimisation pipeline, and parse metadata to only keep the relevant one for DragonFFI. More precisely, it only keeps the dwarf metadata related to &lt;b>exported&lt;/b> and &lt;b>visible&lt;/b> functions, with the associated types. It also keeps debug information of global variables, even thought these ones aren't supported yet in DragonFFI. It also does some unconventional things, like replacing every file and directory by "_", to save space. "Fun" fact, to do this, it borrows some code from the LLVM bitcode "obfuscator" included in recent Apple's clang version, that is used to anonymize some information from the LLVM bitcode that is sent with tvOS/iOS applications (see &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095588.html">http://lists.llvm.org/pipermail/llvm-dev/2016-February/095588.html&lt;/a> for more information).&lt;br />&lt;br />Enough talking, let's see some preliminary results (on Linux x64):&lt;br />&lt;ul class="simple">&lt;li>on libarchive 3.3.2, DWARF goes from 1.8Mb to 536Kb, for an original binary code size of 735Kb&lt;/li>&lt;li>on zlib 1.2.11, DWARF goes from 162Kb to 61Kb, for an original binary code size of 99Kb&lt;/li>&lt;/ul>The instructions to reproduce this are available in the README of the LLVM pass repository.&lt;br />We can conclude that defining this "light" DWARF format could be a nice idea. One other thing that could be done is defining a new binary format, that would be thus more space-efficient, but there are drawbacks going this way:&lt;br />&lt;ul class="simple">&lt;li>debug informations are well supported on every platform nowadays: tools exist to parse them, embed/extract them from binary, and so on&lt;/li>&lt;li>we already got DWARD and PDB: &lt;a href="https://xkcd.com/927/">https://xkcd.com/927/&lt;/a>&lt;/li>&lt;/ul>Nevertheless, it still could be a nice experiment to try and do this, figuring out the space won and see if this is worth it!&lt;br />&lt;br />As a final note, these two ideas would also benefit to &lt;tt class="docutils literal">libffi&lt;/tt>, as we could process these formats and create &lt;tt class="docutils literal">libffi&lt;/tt> types!&lt;br />&lt;h4>JIT code from the final language (like Python) to native function code&lt;/h4>One advantage of embedding a full working C compiler is that we could JIT the code from the final language glue to the final C function call, and thus limit the performance impact of this glue code.&lt;br />Indeed, when a call is issued from Python, the following things happen:&lt;br />&lt;ul class="simple">&lt;li>arguments are converted from Python to C according to the function type&lt;/li>&lt;li>the function pointer and wrapper and gathered from DragonFFI&lt;/li>&lt;li>the final call is made&lt;/li>&lt;/ul>All this process involves basically a loop on the types of the arguments of the called function, which contains a big switch case. This loop generates the array of &lt;tt class="docutils literal">void*&lt;/tt> values that represents the C arguments, which is then passed to the wrapper. We could JIT a specialised version of this loop for the function type, inline the already-compiled wrapper and apply classical optimisation on top of the resulting IR, and get a straightforward conversion code specialized for the given function type, directly from Python to C.&lt;br />&lt;br />One idea we are exploring is combining &lt;a href="https://github.com/jmmartinez/easy-just-in-time">easy::jit&lt;/a>&amp;nbsp;(hello fellow Quarkslab teammates!) with &lt;a href="http://www.llpe.org/">LLPE&lt;/a> to achieve this goal.&lt;br />&lt;h4>Reducing DragonFFI library size&lt;/h4>The DragonFFI shared library embed statically compiled versions of LLVM and Clang. The size of the final shared library is about 55Mb (stripped, under Linux x64). This is really really huge, compared for instance to the 39Kb of libffi (also stripped, Linux x64)!&lt;br />&lt;br />Here are some idea to try and reduce this footprint:&lt;br />&lt;ul class="simple">&lt;li>compile DragonFFI, Clang and LLVM using (Thin) LTO, with visibility hidden for both Clang and LLVM. This could have the effect of removing code from Clang/LLVM that isn't used by DragonFFI.&lt;/li>&lt;li>make DragonFFI more modular: - one core module that only have the parts from CodeGen that deals with ABIs. If the types and function prototypes are defined "by hand" (without &lt;tt class="docutils literal">&lt;span class="pre">DFFI::cdef&lt;/span>&lt;/tt>), that's more or less the only part that is needed (with LLVM obviously) - one optional module that includes the full clang compiler (to provide the &lt;tt class="docutils literal">&lt;span class="pre">DFFI::cdef&lt;/span>&lt;/tt> and &lt;tt class="docutils literal">&lt;span class="pre">DFFI::compile&lt;/span>&lt;/tt> APIs)&lt;/li>&lt;/ul>Even with all of this, it seems to be really hard to match the 39Kb of &lt;tt class="docutils literal">libffi&lt;/tt>, even if we remove the &lt;tt class="docutils literal">cdef&lt;/tt>/&lt;tt class="docutils literal">compile&lt;/tt> API from DragonFFI. As always, pick the right tool for your needs :)&lt;br />&lt;h3>Conclusion&lt;/h3>Writing the first working version of DragonFFI has been a fun experiment, that made me discover new parts of Clang/LLVM :) The current goal is to try and achieve a first stable version (see above), and experiment with the various cited ideas.&lt;br />&lt;br />It's a really long road, so feel free to come on &lt;tt class="docutils literal">#dragonffi&lt;/tt> on FreeNode for any questions/suggestions you might have, (inclusive) or if you want to contribute! &lt;br />&lt;h3>Acknowledgments&lt;/h3>Thanks to Serge «sans paille» Guelton for the discussions around the Python bindings, and for helping me finding the name of the project :) (one of the most difficult task). Thanks also to him, &lt;a href="https://twitter.com/_kamino_/">Fernand Lone-Sang&lt;/a> and &lt;a href="https://twitter.com/wiskitki">Kévin Szkudlapski&lt;/a> for their review of this blog post!</description></item><item><title>International Women's Day: Celebrating all the women in the LLVM Community!</title><link>https://blog.llvm.org/2018/03/international-womens-day-celebrating.html</link><pubDate>Thu, 08 Mar 2018 11:10:00 +0000</pubDate><guid>https://blog.llvm.org/2018/03/international-womens-day-celebrating.html</guid><description>&lt;br />Today is &lt;a href="https://en.wikipedia.org/wiki/International_Women%27s_Day">International Women's Day&lt;/a>! To all the women in the LLVM community, thank you for all your contributions!&lt;br />&lt;br />The &lt;a href="http://foundation.llvm.org/">LLVM Foundation&lt;/a> values diversity within the LLVM community and the field of compilers and tools. Our Women in Compilers and Tools program began in 2015 with a birds of a feather discussion during the US LLVM Developers' Meeting and we have been expanding it over the years.&lt;br />&lt;br />In 2017, we were a sponsor of the &lt;a href="https://ghc.anitab.org/ghc-17/">Grace Hopper Conference&lt;/a>. With the help of community members Anna Zaks and David Blaikie, the LLVM Foundation had a booth at the career fair to introduce women to LLVM and encourage them to become contributors. It was very exciting to learn that many women knew of LLVM, were using it in their classes or research, using it in their career, or were interested in learning more. We hopefully encouraged more women to get involved with LLVM, compilers, and open source.&lt;br />&lt;br />The LLVM Foundation was also a sponsor of the &lt;a href="https://2017.splashcon.org/track/splash-2017-PLMW">Programming Language Mentoring Workshop&lt;/a> at SPLASH 2017. Our sponsorship went towards the travel costs for many women and other minorities to attend this workshop. The workshop focused on encouraging and preparing students to enter research careers in the field of programming languages, compilers, and related fields and to provide first hand perspectives on graduate school.&lt;br />&lt;br />We hosted our first Women in Compilers &amp;amp; Tools reception before the 2017 US LLVM Developers' Meeting. Anna Zaks and Alice Chan participated in a panel discussion about the challenges and experiences that they have encountered in their careers and within the open source community. The event was attended by 60 members of the LLVM community.&lt;br />&lt;br />In 2018, we look forward to another year of expanding our program. The LLVM Foundation will again sponsor the Grace Hopper Conference and we are looking for LLVM community members to help out at the career booth (more details to come). We will be having two Women in Compilers and Tools events. The first will have a reception and panel discussion before the &lt;a href="http://llvm.org/devmtg/2018-04/">2018 EuroLLVM Developers' Meeting&lt;/a>. Get your tickets &lt;a href="https://www.eventbrite.com/e/2018-european-llvm-developers-meeting-women-in-compilers-and-tools-reception-tickets-42287427835">here&lt;/a>. The second will be before the 2018 US LLVM Developers' Meeting and details will be announced in the coming months.&lt;br />&lt;br />The LLVM Foundation thanks the LLVM community and its sponsors for supporting this work. If you want to participate in the discussion or receive notifications on events, please join the &lt;a href="http://lists.llvm.org/cgi-bin/mailman/listinfo/wict">Women in Compilers and Tools mailing list&lt;/a>.&lt;br />&lt;br />Question for the LLVM Foundation? Email us at &lt;a href="mailto:llvm-foundation@lists.llvm.org">llvm-foundation@lists.llvm.org&lt;/a>.&lt;br />&lt;br />&lt;br />&lt;br /></description></item><item><title>Clang is now used to build Chrome for Windows</title><link>https://blog.llvm.org/2018/03/clang-is-now-used-to-build-chrome-for.html</link><pubDate>Mon, 05 Mar 2018 12:46:00 +0000</pubDate><guid>https://blog.llvm.org/2018/03/clang-is-now-used-to-build-chrome-for.html</guid><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on">&lt;div style="text-align: left;">As of Chrome 64, Chrome for Windows is compiled with Clang. We now use Clang to build Chrome for all platforms it runs on: macOS, iOS, Linux, Chrome OS, Android, and Windows. Windows is the platform with the second most Chrome users after Android &lt;a href="http://gs.statcounter.com/browser-version-market-share">according to statcounter&lt;/a>, which made this switch particularly exciting.&lt;/div>&lt;br />Clang is the first-ever open-source C++ compiler that’s ABI-compatible with Microsoft Visual C++ (MSVC) – meaning you can build some parts of your program (for example, system libraries) with the MSVC compiler (“cl.exe”), other parts with Clang, and when linked together (either by MSVC’s linker, “link.exe”, or LLD, the LLVM project’s linker – see below) the parts will form a working program.&lt;br />&lt;br />Note that Clang is not a replacement for Visual Studio, but an addition to it. We still use Microsoft’s headers and libraries to build Chrome, we still use some SDK binaries like midl.exe and mc.exe, and many Chrome/Win developers still use the Visual Studio IDE (for both development and for debugging).&lt;br />&lt;br />This post discusses numbers, motivation, benefits and drawbacks of using Clang instead of MSVC, how to try out Clang for Windows yourself, project history, and next steps. For more information on the technical side you can look at the &lt;a href="https://docs.google.com/presentation/d/1oxNHaVjA9Gn_rTzX6HIpJHP7nXRua_0URXxxJ3oYRq0/edit#slide=id.p">slides of our 2015 LLVM conference talk&lt;/a>, and the slides linked from there.&lt;br />&lt;h3>Numbers&lt;/h3>This is what most people ask about first, so let’s talk about it first. We think the other sections are more interesting though.&lt;br />&lt;h4 style="text-align: left;">Build time&lt;/h4>Building Chrome locally with Clang is about 15% slower than with MSVC. (We’ve heard that Windows Defender can make Clang builds a lot slower on some machines, so if you’re seeing larger slowdowns, make sure to whitelist Clang in Windows Defender.) However, the way Clang emits debug info is more parallelizable and builds with a distributed build service (e.g. &lt;a href="https://chromium.googlesource.com/infra/goma/client/">Goma&lt;/a>) are hence faster.&lt;br />&lt;h4 style="text-align: left;">Binary size&lt;/h4>Chrome installer size gets smaller for 64-bit builds and slightly larger for 32-bit builds using Clang. The same difference shows in uncompressed code size for regular builds as well (see the &lt;a href="https://crbug.com/457078">tracking bug for Clang binary size&lt;/a> for many numbers). However, compared to MSVC builds using link-time code generation (LTCG) and &lt;a href="https://blog.chromium.org/2016/10/making-chrome-on-windows-faster-with-pgo.html">profile-guided optimization&lt;/a> (PGO) Clang generates larger code in 64-bit for targets that use /O2 but smaller code for targets that use /Os. The installer size comparison suggests Clang's output compresses better.&lt;br />&lt;br />Some raw numbers for versions 64.0.3278.2 (MSVC PGO) and 64.0.3278.0 (Clang). mini_installer.exe is Chrome’s installer that users download, containing the LZMA-compressed code. chrome_child.dll is one of the two main dlls; it contains Blink and V8, and generally has many targets that are built with /O2. chrome.dll is the other main dll, containing the browser process code, mostly built with /Os.&lt;br />&lt;span id="docs-internal-guid-891146fc-f7de-b09a-1a30-b3298ec281f3">&lt;br />&lt;/span>&lt;br />&lt;div dir="ltr" style="margin-left: 0pt;">&lt;table style="border-collapse: collapse; border: none;">&lt;colgroup>&lt;col width="117">&lt;/col>&lt;col width="142">&lt;/col>&lt;col width="106">&lt;/col>&lt;col width="137">&lt;/col>&lt;col width="121">&lt;/col>&lt;/colgroup>&lt;tbody>&lt;tr style="height: 0pt;">&lt;td style="border-bottom: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;br />&lt;/td>&lt;td style="border-bottom: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;">mini_installer.exe&lt;/span>&lt;/div>&lt;/td>&lt;td style="border-bottom: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;">chrome.dll&lt;/span>&lt;/div>&lt;/td>&lt;td style="border-bottom: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;">chrome_child.dll&lt;/span>&lt;/div>&lt;/td>&lt;td style="border-bottom: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;">chrome.exe&lt;/span>&lt;/div>&lt;/td>&lt;/tr>&lt;tr style="height: 0pt;">&lt;td style="border-top: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">32-bit win-pgo&lt;/span>&lt;/div>&lt;/td>&lt;td style="border-top: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">45.46 MB&lt;/span>&lt;/div>&lt;/td>&lt;td style="border-top: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">36.47 MB&lt;/span>&lt;/div>&lt;/td>&lt;td style="border-top: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">53.76 MB&lt;/span>&lt;/div>&lt;/td>&lt;td style="border-top: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">1.38 MB&lt;/span>&lt;/div>&lt;/td>&lt;/tr>&lt;tr style="height: 0pt;">&lt;td style="border-bottom: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">32-bit win-clang&lt;/span>&lt;/div>&lt;/td>&lt;td style="border-bottom: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">45.65 MB&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">(+0.04%)&lt;/span>&lt;/div>&lt;/td>&lt;td style="border-bottom: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">42.56 MB (+16.7%)&lt;/span>&lt;/div>&lt;/td>&lt;td style="border-bottom: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">62.38 MB&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">(+16%)&lt;/span>&lt;/div>&lt;/td>&lt;td style="border-bottom: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">1.45 MB&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">(+5.1%)&lt;/span>&lt;/div>&lt;/td>&lt;/tr>&lt;tr style="height: 0pt;">&lt;td style="border-top: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">64-bit win-pgo&lt;/span>&lt;/div>&lt;/td>&lt;td style="border-top: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">49.4 MB&lt;/span>&lt;/div>&lt;/td>&lt;td style="border-top: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">53.3 MB&lt;/span>&lt;/div>&lt;/td>&lt;td style="border-top: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">65.6 MB&lt;/span>&lt;/div>&lt;/td>&lt;td style="border-top: solid #000000 0.5pt; padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">1.6 MB&lt;/span>&lt;/div>&lt;/td>&lt;/tr>&lt;tr style="height: 0pt;">&lt;td style="padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">64-bit win-clang&lt;/span>&lt;/div>&lt;/td>&lt;td style="padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">46.27 MB&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">(-6.33%)&lt;/span>&lt;/div>&lt;/td>&lt;td style="padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">50.6 MB&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">(-5.1%)&lt;/span>&lt;/div>&lt;/td>&lt;td style="padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">72.71 MB&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">(+10.8%)&lt;/span>&lt;/div>&lt;/td>&lt;td style="padding: 5pt 5pt 5pt 5pt; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">1.57 MB&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;">(-1.2%)&lt;/span>&lt;/div>&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>&lt;/div>&lt;h4 style="text-align: left;">Performance&lt;/h4>We conducted extensive A/B testing of performance. Performance telemetry numbers are about the same for MSVC-built and clang-built Chrome – some metrics get better, some get worse, but all of them are within 5% of each other. The official MSVC builds used LTCG and PGO, while the Clang builds currently use neither of these. This is potential for improvement that we look forward to exploring. The PGO builds took a very long time to build due to the need for collecting profiles and then building again, and as a result, the configuration was not enabled on our performance-measurement buildbots. Now that we use Clang, the perf bots again track the configuration that we ship.&lt;br />&lt;br />Startup performance was worse in Clang-built Chrome until we started using a &lt;a href="https://chromium.googlesource.com/chromium/src/+/master/docs/win_order_files.md">link-order file&lt;/a> – a form of “PGO light” .&lt;br />&lt;h4 style="text-align: left;">Stability&lt;/h4>We A/B-tested stability as well and found no difference between the two build configurations.&lt;br />&lt;h3 style="text-align: left;">Motivation&lt;/h3>There were many motivating reasons for this project, the overarching theme being the benefits of using the same compiler across all of Chrome’s platforms, as well as the ability to change the compiler and deploy those changes to all our developers and buildbots quickly. Here’s a non-exhaustive list of examples.&lt;br />&lt;ul style="text-align: left;">&lt;li>Chrome is heavily using technology that’s based on compiler instrumentation (ASan, CFI, &lt;a href="https://blog.chromium.org/2012/04/fuzzing-for-security.html">ClusterFuzz&lt;/a>—uses ASan). Clang supports this instrumentation already, but we can’t add it to MSVC. We previously used &lt;a href="https://github.com/google/syzygy">after-the-fact binary instrumentation&lt;/a> to mitigate this a bit, but having the toolchain write the right bits in the first place is cleaner and faster.&lt;/li>&lt;li>Clang enables us to write compiler &lt;a href="https://www.chromium.org/developers/coding-style/chromium-style-checker-errors">plugins&lt;/a> that add Chromium-specific warnings and to write tooling for &lt;a href="https://chromium.googlesource.com/chromium/src/+/lkcr/docs/clang_tool_refactoring.md">large-scale refactoring&lt;/a>. &lt;a href="https://cs.chromium.org/">Chromium’s code search&lt;/a> can now learn to index Windows code.&lt;/li>&lt;li>Chromium is open-source, so it’s nice if it’s built with an open-source toolchain.&lt;/li>&lt;li>Chrome runs on 6+ platforms, and most developers are only familiar with 1-3 platforms. If your patch doesn’t compile on a platform you’re unfamiliar with, due to a compiler error that you can’t locally reproduce on your local development machine, it’ll take you a while to fix. On the other hand, if all platforms use the same compiler, if it builds on your machine then it’s probably going to build on all platforms.&lt;/li>&lt;li>Using the same compiler also means that compiler-specific micro-optimizations will help on all platforms (assuming that the same -O flags are used on all platforms – not yet the case in Chrome, and only on the same ISAs – x86 vs ARM will stay different).&lt;/li>&lt;li>Using the same compiler enables &lt;a href="https://cs.chromium.org/chromium/src/docs/win_cross.md">cross-compiling&lt;/a> – developers who feel most at home on a Linux box can now work on Windows-specific code, from their Linux box (without needing to run Wine).&lt;/li>&lt;li>We can &lt;a href="https://ci.chromium.org/p/chromium/g/chromium.clang/console">continuously build Chrome trunk with Clang trunk&lt;/a> to find compiler regressions quickly. This allows us to update Clang every week or two. Landing a major MSVC update in Chrome usually took a year or more, with several rounds of reporting internal compiler bugs and miscompiles. The issue here isn’t that MSVC is more buggy than Clang – it isn’t, all software is buggy – but that we can continuously improve Clang due to Clang being open-source.&lt;/li>&lt;li>C++ receives major new revisions every few years. When C++11 was released, we were still using six different compilers, and &lt;a href="http://chromium-cpp.appspot.com/">enabling C++11&lt;/a> was difficult. With fewer compilers, this gets much easier.&lt;/li>&lt;li>We can prioritize compiler features that are important to us. For example:&lt;/li>&lt;ul>&lt;li>&lt;a href="https://www.chromium.org/developers/testing/isolated-testing/deterministic-builds">Deterministic builds&lt;/a> were important to us before they were important for the MSVC team. For example, link.exe /incremental depends on an incrementing mtime timestamp in each object file.&lt;/li>&lt;li>We could enable warnings that fired in system headers long before &lt;a href="https://blogs.msdn.microsoft.com/vcblog/2017/12/13/broken-warnings-theory/">MSVC added support for the system header concept&lt;/a>.&lt;/li>&lt;li>cl.exe always prints the name of the input file, so that the &lt;a href="https://github.com/ninja-build/ninja/blob/master/src/clparser.cc#L67">build system has to filter it out for quiet builds&lt;/a>.&lt;/li>&lt;/ul>&lt;/ul>&lt;br />Of course, not all – or even most – of these reasons will apply to other projects.&lt;br />&lt;h3 style="text-align: left;">Benefits and drawbacks of using Clang instead of Visual C++&lt;/h3>&lt;div style="text-align: left;">Benefits of using Clang, if you want to try for your project:&lt;/div>&lt;div style="text-align: left;">&lt;/div>&lt;ul style="text-align: left;">&lt;li>Clang supports 64-bit inline assembly. For example, in Chrome we built libyuv (a video format conversion library) with Clang long before we built all of Chrome with it. libyuv had highly-tuned 64-bit inline assembly with performance not reachable with intrinsics, and we could just use that code on Windows.&lt;/li>&lt;li>If your project runs on multiple platforms, you can use one compiler everywhere. Building your project with several compilers is generally considered good for code health, but in Chrome we found that Clang’s diagnostics found most problems and we were mostly battling compiler bugs (and if another compiler has a great new diagnostic, we can add that to Clang).&lt;/li>&lt;li>Likewise, if your project is Windows-only, you can get a second compiler’s opinion on your code, and Clang’s warnings might find bugs.&lt;/li>&lt;li>You can use &lt;a href="https://clang.llvm.org/docs/AddressSanitizer.html">Address Sanitizer&lt;/a> to find memory bugs.&lt;/li>&lt;li>If you don’t use LTCG and PGO, it’s possible that Clang might create faster code.&lt;/li>&lt;li>Clang’s &lt;a href="https://clang.llvm.org/diagnostics.html">diagnostics and fix-it hints&lt;/a>.&lt;/li>&lt;/ul>There are also drawbacks:&lt;br />&lt;ul style="text-align: left;">&lt;li>Clang doesn’t support C++/CX or #import “foo.dll”.&lt;/li>&lt;li>MSVC offers paid support, Clang only gives you the code and the ability to write patches yourself (although the community is very active and helpful!).&lt;/li>&lt;li>MSVC has better documentation.&lt;/li>&lt;li>Advanced debugging features such as Edit &amp;amp; Continue don’t work when using Clang.&lt;/li>&lt;/ul>&lt;h3 style="text-align: left;">How to use&lt;/h3>If you want to give Clang for Windows a try, there are two approaches:&lt;br />&lt;ol style="text-align: left;">&lt;li>You could use clang-cl, a compiler driver that tries to be command-line flag compatible with cl.exe (just like Clang tries to be command-line flag compatible with gcc). The &lt;a href="https://clang.llvm.org/docs/UsersManual.html#clang-cl">Clang user manual&lt;/a> describes how you can tell popular Windows build systems how to call clang-cl instead of cl.exe. We used this approach in Chrome to keep the Clang/Win build working alongside the MSVC build for years, with minimal maintenance cost. You can keep using link.exe, all your current compile flags, the MSVC debugger or windbg, ETW, etc. clang-cl even writes warning messages in a format that’s compatible with cl.exe so that you can click on build error messages in Visual Studio to jump to the right file and line. Everything should just work.&lt;/li>&lt;li>Alternatively, if you have a cross-platform project and want to use gcc-style flags for your Windows build, you can pass a Windows triple (e.g. --target=x86_64-windows-msvc) to regular Clang, and it will produce MSVC-ABI-compatible output. Starting in Clang 7.0.0, due Fall 2018, Clang will also default to CodeView debug info with this triple.&lt;/li>&lt;/ol>Since Clang’s output is ABI-compatible with MSVC, you can build parts of your project with clang and other parts with MSVC. You can also pass &lt;a href="https://clang.llvm.org/docs/UsersManual.html#the-fallback-option">/fallback&lt;/a> to clang-cl to make it call cl.exe on files it can’t yet compile (this should be rare; it never happens in the Chrome build).&lt;br />&lt;br />clang-cl accepts Microsoft language extensions needed to parse system headers but tries to emit -Wmicrosoft-foo warnings when it does so (warnings are ignored for system headers). You can choose to fix your code, or pass -Wno-microsoft-foo to Clang.&lt;br />&lt;br />link.exe can produce regular PDB files from the CodeView information that Clang writes.&lt;br />&lt;h3 style="text-align: left;">Project History&lt;/h3>We switched chrome/mac and &lt;a href="http://blog.llvm.org/2015/01/using-clang-for-chrome-production.html">chrome/linux&lt;/a> to Clang a while ago. But on Windows, Clang was still missing support for parsing many Microsoft language extensions, and it didn’t have any Microsoft C++ ABI-compatible codegen at all. In 2013, we &lt;a href="http://blog.llvm.org/2013/09/a-path-forward-for-llvm-toolchain-on.html">spun up a team&lt;/a> to improve Clang’s Windows support, consisting half of Chrome engineers with a compiler background and half of other toolchain people. In mid-2014, Clang could &lt;a href="http://blog.llvm.org/2014/07/clangllvm-on-windows-update.html">self-host on Windows&lt;/a>. In February 2015, we had the first fallback-free build of 64-bit Chrome, in July 2015 the first fallback-free build of 32-bit Chrome (32-bit SEH was difficult). In Oct 2015, we shipped a first clang-built Chrome to the Canary channel. Since then, we’ve worked on &lt;a href="http://https//crbug.com/457078">improving the size of Clang’s output&lt;/a>, &lt;a href="https://crbug.com/636111">improved Clang’s debug information&lt;/a> (some of it behind -instcombine-lower-dbg-declare=0 for now), and A/B-tested stability and telemetry performance metrics.&lt;br />&lt;br />We use versions of Clang that are pinned to a recent upstream revision that we update every one to three weeks, without any local patches. All our work is done in upstream LLVM.&lt;br />&lt;br />Mid-2015, Microsoft announced that they were building on top of our work of making Clang able to parse all the Microsoft SDK headers with &lt;a href="https://blogs.msdn.microsoft.com/vcblog/2015/05/01/bringing-clang-to-windows/">clang/c2&lt;/a>, which used the Clang frontend for parsing code, but cl.exe’s codegen to generate code. &lt;a href="https://twitter.com/stephantlavavej/status/871861920315211776?lang=en">Development on clang/c2 was halted again&lt;/a> in mid-2017; it is conceivable that this was related to our improvements to MSVC-ABI-compatible Clang codegen quality. We’re thankful to Microsoft for publishing documentation on the PDB file format, answering many of our questions, fixing Clang compatibility issues in their SDKs, and for giving us publicity on their blog! Again, Clang is not a replacement for MSVC, but a complement to it.&lt;br />&lt;br />Opera for Windows is also &lt;a href="http://blogs.opera.com/desktop/2018/02/opera-51/">compiled with Clang&lt;/a> starting in version 51.&lt;br />&lt;br />Firefox is also looking at &lt;a href="https://ehsanakhgari.org/blog/2016-01-29/building-firefox-with-clang-cl-a-status-update">using clang-cl for building Firefox for Windows&lt;/a>.&lt;br />&lt;h3 style="text-align: left;">Next Steps&lt;/h3>Just as clang-cl is a cl.exe-compatible interface for Clang, lld-link is a link.exe-compatible interface for lld, the LLVM linker. Our next step is to use lld-link as an alternative to link.exe for linking Chrome for Windows. This has many of the same advantages as clang-cl (open-source, easy to update, …). Also, using clang-cl together with lld-link allows using &lt;a href="https://llvm.org/docs/LinkTimeOptimization.html">LLVM-bitcode-based LTO&lt;/a> (which in turn enables using &lt;a href="https://clang.llvm.org/docs/ControlFlowIntegrity.html">CFI&lt;/a>) and &lt;a href="http://blog.llvm.org/2018/01/improving-link-time-on-windows-with.html">using PE/COFF extensions to speed up linking&lt;/a>. A prerequisite for using lld-link was &lt;a href="http://blog.llvm.org/2017/08/llvm-on-windows-now-supports-pdb-debug.html">its ability to write PDB files&lt;/a>.&lt;br />We’re also considering using libc++ instead of the MSVC STL – this allows us to instrument the standard library, which is again useful for CFI and Address Sanitizer.&lt;span style="white-space: pre;"> &lt;/span>&lt;br />&lt;h3 style="text-align: left;">In Closing&lt;/h3>Thanks to the whole LLVM community for helping to create the first new production C++ compiler for Windows in over a decade, and the first-ever open-source C++ compiler that’s ABI-compatible with MSVC!&lt;br />&lt;div>&lt;br />&lt;/div>&lt;/div></description></item><item><title>EuroLLVM'18 developers' meeting program</title><link>https://blog.llvm.org/2018/03/eurollvm18-developers-meeting-program.html</link><pubDate>Thu, 01 Mar 2018 14:31:00 +0000</pubDate><guid>https://blog.llvm.org/2018/03/eurollvm18-developers-meeting-program.html</guid><description>The LLVM Foundation is excited to announce the program for the EuroLLVM'18 developers' meeting (April 16 - 17 in Bristol/UK) !&lt;br />&lt;br />&lt;h2>Keynotes&lt;/h2>&lt;div>&lt;ul>&lt;li>&lt;a href="http://www.llvm.org/devmtg/2018-04/talks.html#Keynote_1">The Cerberus Memory Object Semantics for ISO and De Facto C&lt;/a> &lt;i>P. Sewell&lt;/i>&lt;/li>&lt;li>&lt;i>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Keynote_2">LLVM x Blockchains = A new Ecosystem of Decentralized Applications&lt;/a> &lt;i>R. Zhong&lt;/i>&lt;/i>&lt;/li>&lt;/ul>&lt;/div>&lt;h2>Tutorials&lt;/h2>&lt;ul>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Tutorial_1">Pointers, Alias &amp;amp; ModRef Analyses&lt;/a> &lt;i>A. Sbirlea, N. Lopes&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Tutorial_2">Scalar Evolution - Demystified&lt;/a> &lt;i>J. Absar&lt;/i>&lt;/li>&lt;/ul>&lt;h2>Talks&lt;/h2>&lt;ul>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Talk_1">A Parallel IR in Real Life: Optimizing OpenMP&lt;/a> &lt;i>H. Finkel, J. Doerfert, X. Tian, G. Stelle &lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Talk_2">An Introduction to AMD Optimizing C/C++ Compiler&lt;/a> &lt;i>A. Team&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Talk_3">Analysis of Executable Size Reduction by LLVM passes&lt;/a> &lt;i>V. Sinha, P. Kumar, S. Jain, U. Bora, S. Purini, R. Upadrasta&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Talk_4">Developing Kotlin/Native infrastructure with LLVM/Clang, travel notes.&lt;/a> &lt;i>N. Igotti&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Talk_5">Extending LoopVectorize to Support Outer Loop Vectorization Using VPlan&lt;/a> &lt;i>D. Caballero, S. Guggilla&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Talk_6">Finding Iterator-related Errors with Clang Static Analyzer&lt;/a> &lt;i>Á. Balogh &lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Talk_7">Finding Missed Optimizations in LLVM (and other compilers)&lt;/a> &lt;i>G. Barany&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Talk_8">Global code completion and architecture of clangd&lt;/a> &lt;i>E. Liu, H. Wu, I. Biryukov, S. McCall &lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Talk_9">Hardening the Standard Library&lt;/a> &lt;i>M. Clow&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Talk_10">Implementing an LLVM based Dynamic Binary Instrumentation framework&lt;/a> &lt;i>C. Hubain, C. Tessier&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Talk_11">LLVM Greedy Register Allocator – Improving Region Split Decisions&lt;/a> &lt;i>M. Yatsina&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Talk_12">MIR-Canon: Improving Code Diff Through Canonical Transformation.&lt;/a> &lt;i>P. Lotfi&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Talk_13">New PM: taming a custom pipeline of Falcon JIT&lt;/a> &lt;i>F. Sergeev&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Talk_14">Organising benchmarking LLVM-based compiler: Arm experience&lt;/a> &lt;i>E. Astigeevich&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Talk_15">Performance Analysis of Clang on DOE Proxy Apps&lt;/a> &lt;i>H. Finkel, B. Homerding&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Talk_16">Point-Free Templates&lt;/a> &lt;i>A. Gozillon, P. Keir&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Talk_17">Protecting the code: Control Flow Enforcement Technology&lt;/a> &lt;i>O. Simhon&lt;/i>&lt;/li>&lt;/ul>&lt;h2>BoFs&lt;/h2>&lt;div>&lt;ul>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#BoF_1">Towards implementing #pragma STDC FENV_ACCESS&lt;/a>&amp;nbsp;U&lt;i>. Weigand&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#BoF_2">Build system integration for interactive tools&lt;/a> &lt;i>I. Biryukov, H. Wu, E. Liu, S. McCall&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#BoF_3">Clang Static Analyzer BoF&lt;/a> &lt;i>G. Horváth&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#BoF_4">LLVM Foundation BoF&lt;/a>&amp;nbsp;&lt;i>LLVM Foundation Board of Directors&lt;/i>&lt;/li>&lt;/ul>&lt;/div>&lt;h2>Student Research Competition&lt;/h2>&lt;div>&lt;ul>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#SRC_2">Compile-Time Function Call Interception to Mock Functions in C/C++&lt;/a> &lt;i>G. Márton, Z. Porkoláb&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#SRC_3">Improved Loop Execution Modeling in the Clang Static Analyzer&lt;/a> &lt;i>P. Szécsi &lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#SRC_4">Using LLVM in a Model Checking Workflow&lt;/a> &lt;i>G. Sallai&lt;/i>&lt;/li>&lt;/ul>&lt;/div>&lt;div>&lt;h2>Lightning Talks&lt;/h2>&lt;div>&lt;ul>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Lightning_1">C++ Parallel Standard Template Library support in LLVM&lt;/a> &lt;i>M. Dvorskiy, J. Cownie, A. Kukanov&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Lightning_2">Can reviews become less of a bottleneck?&lt;/a> &lt;i>K. Beyls&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Lightning_3">Clacc: OpenACC Support for Clang and LLVM&lt;/a> &lt;i>J. Denny, S. Lee, J. Vetter &lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Lightning_4">DragonFFI: Foreign Function Interface and JIT using Clang/LLVM&lt;/a> &lt;i>A. Guinet&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Lightning_5">Easy::Jit: Compiler-assisted library to enable Just-In-Time compilation for C++ codes&lt;/a> &lt;i>J. Fernandez, S. Guelton&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Lightning_7">Flang -- Project Update&lt;/a> &lt;i>S. Scalpone&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Lightning_9">Look-Ahead SLP: Auto-vectorization in the Presence of Commutative Operations&lt;/a> &lt;i>V. Porpodas, R. Rocha, L. Góes&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Lightning_10">Low Cost Commercial Deployment of LLVM&lt;/a> &lt;i>J. Bennett&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Lightning_11">Measuring the User Debugging Experience&lt;/a> &lt;i>G. Bedwell&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Lightning_12">Measuring x86 instruction latencies with LLVM&lt;/a> &lt;i>G. Chatelet, C. Courbet, B. De Backer, O. Sykora&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Lightning_13">OpenMP Accelerator Offloading with OpenCL using SPIR-V&lt;/a> &lt;i>D. Schürmann, J. Lucas, B. Juurlink&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Lightning_14">Parallware, LLVM and supercomputing&lt;/a> &lt;i>M. Arenaz&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Lightning_15">Returning data-flow to asynchronous programming through static analysis&lt;/a> &lt;i>M. Gilbert&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Lightning_16">RFC: A new divergence analysis for LLVM&lt;/a> &lt;i>S. Moll, T. Klössner, S. Hack&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Lightning_17">Static Performance Analysis with LLVM&lt;/a> &lt;i>C. Courbet, O. Sykora, G. Chatelet, B. De Backer&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Lightning_18">Supporting the RISC-V Vector Extensions in LLVM&lt;/a> &lt;i>R. Kruppe, J. Oppermann, A. Koch&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Lightning_19">Using Clang Static Analyzer to detect Critical Control Flow&lt;/a> &lt;i>S. Cook&lt;/i>&lt;/li>&lt;/ul>&lt;/div>&lt;/div>&lt;h2>Posters&lt;/h2>&lt;div>&lt;ul>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Poster_1">Automatic Profiling for Climate Modeling&lt;/a> &lt;i>A. Gerbes, N. Jumah, J. Kunkel&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Poster_2">Cross Translation Unit Analysis in Clang Static Analyzer: Qualitative Evaluation on C/C++ projects&lt;/a> &lt;i>G. Horvath, P. Szecsi, Z. Gera, D. Krupp&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Poster_3">Effortless Differential Analysis of Clang Static Analyzer Changes&lt;/a> &lt;i>G. Horváth, R. Kovács, P. Szécsi &lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Poster_4">Offloading OpenMP Target Regions to FPGA Accelerators Using LLVM&lt;/a> &lt;i>L. Sommer, J. Oppermann, J. Korinth, A. Koch&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2018-04/talks.html#Poster_5">Using clang as a Frontend on a Formal Verification Tool&lt;/a> &lt;i>M. Gadelha, J. Morse, L. Cordeiro, D. Nicole&lt;/i>&lt;/li>&lt;/ul>If you are interested in any of this talks, you should &lt;a href="https://www.eventbrite.com/e/2018-european-llvm-developers-meeting-bristol-tickets-42283244322" target="_blank">register&lt;/a> to attend the EuroLLVM'18. Tickets are limited !&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>More information about the EuroLLVM'18 is available &lt;a href="http://llvm.org/devmtg/2018-04/" target="_blank">here&lt;/a>.&amp;nbsp;&lt;/div></description></item><item><title>LLVM accepted to 2018 Google Summer of Code!</title><link>https://blog.llvm.org/2018/02/llvm-accepted-to-2018-google-summer-of.html</link><pubDate>Wed, 14 Feb 2018 13:36:00 +0000</pubDate><guid>https://blog.llvm.org/2018/02/llvm-accepted-to-2018-google-summer-of.html</guid><description>We are excited to announce the LLVM project has been accepted to&amp;nbsp;&lt;a href="https://summerofcode.withgoogle.com/organizations/6471192286855168/">2018 Google Summer of Code&lt;/a>!&lt;br />&lt;br />&lt;b>What is Google Summer of Code?&lt;/b>&lt;br />&lt;b>&lt;br />&lt;/b>Google Summer of Code (GSoC) is a global program focused on introducing students to open source software development. Students work on a 3 month programming project with an open source organization during their break from university. There are several benefits to this program for both the students and LLVM:&lt;br />&lt;br />&lt;ul>&lt;li>Inspire students to get involved with open source, compilers and LLVM&lt;/li>&lt;li>Give students exposure to real-world software development while getting paid a stipend&lt;/li>&lt;li>Allow students to do paid work related to their academic pursuits versus getting an unrelated summer job&lt;/li>&lt;li>Bring new developers into the LLVM project&lt;/li>&lt;li>Some LLVM bugs get fixed or new features get added&lt;/li>&lt;/ul>&lt;br />&lt;b>Students - Apply now!&amp;nbsp;&lt;/b>&lt;br />&lt;b>&lt;br />&lt;/b>Ok, so you can't apply right now as the official application to GSoC does not open until March 12, 2018, but you must begin discussing your project on the &lt;a href="http://lists.llvm.org/mailman/listinfo">LLVM mailing lists&lt;/a> well before that date. There are many &lt;a href="http://llvm.org/OpenProjects.html#gsoc18">open projects listed on our webpage&lt;/a>. Once you have selected a project, you will discuss it on the appropriate mailing list.&lt;br />&lt;br />If you have an idea for a project that is not listed, you can always propose it on the list as well and seek out a mentor.&lt;br />&lt;br />&lt;b>Key Dates to Remember&lt;/b>&lt;br />&lt;b>&lt;br />&lt;/b>We have listed a few key dates here, but always consult the&lt;a href="https://developers.google.com/open-source/gsoc/timeline">&amp;nbsp;official GSoC timeline&lt;/a>&amp;nbsp;to confirm.&lt;br />&lt;br />&lt;ul>&lt;li>March 12 (16:00 UTC) - Applications open&lt;/li>&lt;li>March 27 (16:00 UTC) - Deadline to file your application&lt;/li>&lt;li>April 23 (16:00 UTC) - Accepted student proposals are announced&lt;/li>&lt;li>May 14 - Coding begins&lt;/li>&lt;/ul>&lt;br />&lt;b>&lt;br />&lt;/b>&lt;b>LLVM Developers - Consider&amp;nbsp;being mentor!&lt;/b>&lt;br />&lt;b>&lt;br />&lt;/b>This program is not a success without our mentors. Thank you to all that have all who have already volunteered! If you have never mentored a GSoC project but are curious, it is not too late to volunteer! You can either select an &lt;a href="http://llvm.org/OpenProjects.html#gsoc18">open project&lt;/a> without a mentor or propose your own. Make sure to get it listed on the webpage so that students can see it as an option.&lt;br />&lt;br />If mentoring just isn't an option for you at this time, consider helping the project out my spreading the word about GSoC.&lt;br />&lt;br />&lt;b>Questions?&lt;/b>&lt;br />&lt;b>&lt;br />&lt;/b>If you have questions about the program for the organizers, please email &lt;a href="mailto:gsoc@lists.llvm.org">gsoc@lists.llvm.org&lt;/a>. Project specific questions should be sent to the appropriate &lt;a href="http://lists.llvm.org/mailman/listinfo">developer mailing list&lt;/a> instead.&lt;br />&lt;br /></description></item><item><title>Improving Link Time on Windows with clang-cl and lld</title><link>https://blog.llvm.org/2018/01/improving-link-time-on-windows-with.html</link><pubDate>Mon, 08 Jan 2018 10:06:00 +0000</pubDate><guid>https://blog.llvm.org/2018/01/improving-link-time-on-windows-with.html</guid><description>One of our goals in bringing clang and lld to Windows has always been to improve developer experience, and what is it that developers want the most?&amp;nbsp; Faster build times!&amp;nbsp; Recently, our focus has been on improving link time because it's the step that's the hardest to parallelize so we can't fall back on the time honored tradition of throwing more cores at it.&lt;br />&lt;br />Of the various steps involved in linking, generating the debug info (which, on Windows, is a PDB file) is by far the slowest since it involves merging O(# of linker inputs) sequences of type records, most of which are duplicate anyway.&amp;nbsp; For example, if two cpp files both include &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="font-family: inherit;">, then both of those object files will have hundreds of duplicate type records that need to be de-duplicated during the link step.&amp;nbsp; This means you have to compute O(M x N) hash values, even though only a small fraction of those ultimately contribute to the final PDB.&lt;/span>&lt;br />&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;span style="font-family: inherit;">Several strategies have been invented to deal with this over the years and try to make linking faster.&amp;nbsp; Many years ago, Microsoft introduced the notion of a &lt;i>Type Server&lt;/i>&amp;nbsp;(enabled via&amp;nbsp;&lt;b>/Zi&lt;/b>&amp;nbsp;compiler option in MSVC), which moves some of the work into the compiler (to take advantage of parallelism).&amp;nbsp; More recently we have been given the &lt;b>/DEBUG:FASTLINK&lt;/b>&amp;nbsp;linker option which attempts to solve the problem by not merging types at all in the linker.&amp;nbsp; However, each of these strategies has its own set of disadvantages, and neither can be considered perfect for all use cases.&lt;/span>&lt;br />&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;span style="font-family: inherit;">In this blog post, we'll first go over some technical background about CodeView so that we can understand the problem, followed by a summary of existing attempts to speed up type merging.&amp;nbsp; Then, we'll describe a novel extension to the PE/COFF file format which speeds up linking by offloading part of the work required to de-duplicate types to the compiler and using a new algorithm which uniquely identifies type records even across input files, and discuss the various tradeoffs of each approach.&amp;nbsp; Finally, we'll present some benchmarks and discuss how you can try this out in clang-cl and lld today.&lt;/span>&lt;br />&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;br />&lt;h2>&lt;span style="font-family: inherit;">Background&lt;/span>&lt;/h2>&lt;div>&lt;span style="font-family: inherit;">Consider a simple structure in C++, defined like this a header file:&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: blue;">struct&lt;/span> &lt;span style="color: #999999;">Node&lt;/span> {&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: #999999;">Node&lt;/span> *Next = &lt;span style="color: blue;">nullptr&lt;/span>;&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: #999999;">Node&lt;/span> *Prev = &lt;span style="color: blue;">nullptr&lt;/span>;&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: blue;">int&lt;/span> Value = 0;&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp;};&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: inherit;">Since each compilation happens independently of every other compilation, the compiler cannot assume any other translation unit will ever emit the records necessary to describe this type.&amp;nbsp; As a result, to guarantee that the type makes it into the final PDB, &lt;i>every&lt;/i>&amp;nbsp;compiler instance that encounters this definition must emit type information for this type.&amp;nbsp; So the record will be serialized by the compiler into a series of records that looks roughly like this:&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">0x1004 | LF_STRUCTURE [size = 40] `Node`&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;unique name: `.?AUNode@@`&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;vtable: &amp;lt;none&amp;gt;&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;base list: &amp;lt;none&amp;gt;&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;field list: &amp;lt;none&amp;gt;&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;options: forward ref | has unique name&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">0x1005 | LF_POINTER [size = 12]&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;referent = 0x1004&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;mode = pointer&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;opts = None&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;kind = ptr32&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">0x1006 | LF_FIELDLIST [size = 52]&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;- LF_MEMBER&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;name = `Next`&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Type = 0x1005&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Offset = 0&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;attrs = public&lt;/span>&lt;/div>&lt;div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;- LF_MEMBER&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;name = `Prev`&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Type = 0x1005&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Offset = 4&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;attrs = public&lt;/span>&lt;/div>&lt;/div>&lt;div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;- LF_MEMBER&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;name = `Value`&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Type = 0x0074 (int)&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Offset = 8&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;attrs = public&lt;/span>&lt;/div>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">0x1007 | LF_STRUCTURE [size = 40] `Node`&lt;/span>&lt;/div>&lt;div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;unique name: `.?AUNode@@`&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;vtable: &amp;lt;none&amp;gt;&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;base list: &amp;lt;none&amp;gt;&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;field list: 0x1006&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;options: has unique name&lt;/span>&lt;/div>&lt;/div>&lt;div>&lt;span style="font-family: inherit;">The values on the left correspond to the types &lt;i>index&lt;/i>&amp;nbsp;in the type sequence and depend on what types have already been encountered, while other types can the refer to them (for example,&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">referent = 0x1004&lt;/span>&lt;span style="font-family: inherit;">) means that this record is a pointer to whatever the type at index 0x1004 was.&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;/div>&lt;div>As a result of this design, another compilation unit which includes the same header file will need to emit this exact same type, with the only difference being the indices (since the other compilation may encounter other types before this one, causing the ordering to be different).&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>&lt;div class="MsoNormal">In short, type indices only make sense within the context of a single type sequence (i.e. compiland), but since the linker needs to see across &lt;i>all&lt;/i> object files, it has to have some way of identifying whether a type from object file A is isomorphic to a different type from object file B, even if its type indices might be different numerically from any previously seen type.&amp;nbsp;&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">This algorithm, henceforth referred to as &lt;i>type merging&lt;/i>, is the primary consumer of CPU cycles during linking (measured in LLD, and estimated in MSVC linker by comparing /DEBUG:FULL vs /DEBUG:FASTLINK times), and as such it is the portion of the linking process which this blog post presents a new solution to.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;h2>Existing Solutions&lt;/h2>&lt;/div>&lt;div>&lt;div class="MsoNormal">&lt;span lang="EN">It’s worthwhile to discuss some of the existing attempts to reduce the cost associated with type merging so that we can compare and contrast their various pros and cons.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">&lt;br />&lt;/span>&lt;/div>&lt;h3>&lt;span lang="EN">Type Servers (/Zi)&lt;/span>&lt;/h3>&lt;/div>&lt;div>&lt;span lang="EN">&lt;/span>&lt;br />&lt;div class="MsoNormal">&lt;span lang="EN">&lt;span lang="EN">The /Zi compiler option was one of the first attempts to address type merging speed, and it dates back many years.&amp;nbsp; The idea behind type servers is to offload the work of de-duplication from the linking phase to the compilation phase.&amp;nbsp; Most build systems already support parallel compilation, and even if they don’t &lt;/span>&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">cl.exe&lt;/span>&lt;span lang="EN"> supports it natively via the /MP compiler switch, so there is no roadblock to anyone taking advantage of parallel compilation.&amp;nbsp; &lt;o:p>&lt;/o:p>&lt;/span>&lt;/span>&lt;/div>&lt;span lang="EN">&lt;/span>&lt;br />&lt;div class="MsoNormal">&lt;span lang="EN">&lt;br />&lt;/span>&lt;/div>&lt;span lang="EN">&lt;/span>&lt;br />&lt;div class="MsoNormal">&lt;span lang="EN">&lt;span lang="EN">To implement type servers, each compilation process communicates via IPC with a single process (&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">mspdbsrv.exe&lt;/span>) whose job is to de-duplicate type records on the fly, and when a record is isomorphic to an existing record, the type server communicates back the previously saved index, and when it is new it sends back a new index.&amp;nbsp; This allows type deduplication to happen &lt;i>mostly&lt;/i>in parallel, but adding some overhead to each compilation (since there is contention over a global lock) in return for significantly reduced link times, since types will already have been merged.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/span>&lt;/div>&lt;span lang="EN">&lt;/span>&lt;br />&lt;div class="MsoNormal">&lt;span lang="EN">&lt;br />&lt;/span>&lt;/div>&lt;span lang="EN">&lt;/span>&lt;div class="MsoNormal">&lt;span lang="EN">&lt;span lang="EN">Type servers bring with them some disadvantages though, so we enumerate them here:&lt;o:p>&lt;/o:p>&lt;/span>&lt;/span>&lt;/div>&lt;span lang="EN">&lt;ol start="1" style="margin-top: 0in;" type="1">&lt;li class="MsoNormalCxSpMiddle">&lt;span lang="EN">Type servers add significant context switching and global lock contention to the compilation phase, reducing parallelism and degrading overall system performance while a build is in process.&amp;nbsp; While some performance is reclaimed from the linker, some is sacrificed due to the use of a global system lock.&amp;nbsp; It’s still a net win, but as it is not free, it leaves open the possibility that we may be able to achieve better parallelism using a different approach.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;li class="MsoNormalCxSpMiddle">&lt;span lang="EN">The type server process itself (&lt;/span>&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">mspdbsrv.exe&lt;/span>&lt;span lang="EN">) introduces a single point of failure.&amp;nbsp; When it crashes (we see C1033 several times per day on Chrome, for example, which seems to indicate an mspdbsrv.exe crash) it could trigger a full rebuild if the type server PDB file is left in a corrupt state.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;li class="MsoNormalCxSpMiddle">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">mspdbsrv&lt;/span>&lt;span lang="EN"> is incompatible with distributed builds, which is a show-stopper for large applications that can take several hours to build on normal workstations.&amp;nbsp; Type servers operate only via local IPC.&amp;nbsp; While multi-processing works well for small applications, many large products have build farms that distribute compilations among tens or hundreds of physical machines.&amp;nbsp; Type servers are incompatible with this scenario&lt;/span>&lt;span lang="EN">.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;/ol>&lt;div>&lt;h2>&lt;span lang="EN">Fastlink PDBs&lt;o:p>&lt;/o:p>&lt;/span>&lt;/h2>&lt;div class="MsoNormal">&lt;span lang="EN">Fastlink PDBs are a relatively recent introduction, and the approach used by this solution is to &lt;i>eliminate type merging entirely.&lt;/i>&amp;nbsp; To support this, special metadata is set in the PDB file to indicate to the tool that this is a fastlink PDB, and when the tool (e.g. debugger) encounters this metadata, it will fetch all type information from the original object file, rather than from the PDB.&amp;nbsp; As before, there are several disadvantages to this approach, enumerated here:&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;ol start="1" style="margin-top: 0in;" type="1">&lt;li class="MsoNormalCxSpMiddle">&lt;span lang="EN">The &lt;/span>&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">pdbcopy&lt;/span>&lt;span lang="EN"> utility is almost unusable with fastlink PDBs for performance reasons.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;li class="MsoNormalCxSpMiddle">&lt;span lang="EN">Since type merging doesn’t happen, indexing of type information also doesn’t happen (since the expensive part of building an index -- the hashing -- comes for free when you were hashing the record anyway).&amp;nbsp; This leads to degradation in the debugger user experience, since waits which previously happened only at build time now happen at debug-time.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;li class="MsoNormalCxSpMiddle">&lt;span lang="EN">Fastlink PDBs are not portable.&amp;nbsp; The PDB references the object files by path, so if you copy the PDB and object files to a different machine (or even different path on the same machine) for archival purposes, they can no longer be debugged.&amp;nbsp; This is a deal-breaker for using it on production builds&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;li class="MsoNormalCxSpMiddle">&lt;span lang="EN">Symbols can’t be enumerated in a Fastlink PDB.&amp;nbsp; This is most obvious if you attempt to use DIA SDK on a Fastlink PDB, where it will simply refuse to do anything at all.&amp;nbsp; This means that the only externally supported way of querying debug info for users is impossible against a Fastlink PDB.&amp;nbsp; Beyond that, however, it also means that even Microsoft’s own tools which need to enumerate symbols cannot use any standard API for doing so.&amp;nbsp; For example, WinDbg doesn’t fully support Fastlink PDBs, and many workflows are broken by the use of them, even using supported Microsoft tools.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;li class="MsoNormalCxSpMiddle">&lt;span lang="EN">It has several serious stability issues which make it unusable on large projects&amp;nbsp; [&lt;a href="https://developercommunity.visualstudio.com/content/problem/158451/chrome-with-1550-preview-50-and-fastlink-crashes-d.html">&lt;span style="color: #1155cc;">ref&lt;/span>&lt;/a>].&amp;nbsp; This is probably related to point 4 above, namely the fact that every tool that wants to be able to work with a Fastlink PDB needs to use different code than the SDK that has been tested and battle-hardened through years of development.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;li class="MsoNormalCxSpMiddle">&lt;span lang="EN">When compiling with clang-cl and linking with /debug:fastlink the compiler has to be instructed to &lt;a href="https://cs.chromium.org/chromium/src/build/config/compiler/BUILD.gn?type=cs&amp;amp;q=build/config/compiler/BUILD.gn&amp;amp;sq=package:chromium&amp;amp;l=1886">&lt;span style="color: #1155cc;">emit additional debug information&lt;/span>&lt;/a>, making .obj files about 29% larger.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;/ol>&lt;div>&lt;h2>&lt;span style="font-family: inherit;">&lt;span lang="EN">Clang's Solution - The COFF &lt;/span>&lt;span lang="EN">.debug$H&lt;/span>&lt;/span>&lt;span lang="EN">&lt;span style="font-family: inherit;"> section&lt;/span>&lt;o:p>&lt;/o:p>&lt;/span>&lt;/h2>&lt;div class="MsoNormal">&lt;span lang="EN">This new approach tries to combine the ideas behind type servers and fastlink PDBs.&amp;nbsp; Like type servers, it attempts to offload the work of de-duplication to the compilation phase so that it can be done in parallel.&amp;nbsp; However, it does so using an algorithm with the property that the resulting hash can be used to identify a type record even across type streams.&amp;nbsp; Specifically, &lt;b>if two records have the same hash, they are the same record even if they are from different object files.&lt;/b>&amp;nbsp; If you can take it on faith that such an algorithm exists (which will be henceforth referred to as a &lt;i>global hash&lt;/i>), then the amount of work that the linker needs to perform is greatly reduced.&amp;nbsp; And the work that it does still have to do can be done much quicker.&amp;nbsp; Perhaps most importantly, &lt;i>it produces a byte-for-byte identical PDB to when the option is not used&lt;/i>, meaning all of the issues surrounding Fastlink PDBs and compatibility are gone.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">Previously, the linker would do something that looks roughly like this:&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; HashTable&amp;lt;Type&amp;gt; HashedTypes;&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; vector&amp;lt;Type&amp;gt; MergedTypes;&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (ObjectFile &amp;amp;Obj : Objects) {&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; for (Type &amp;amp;T : Obj.types()) {&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; remapAllTypeIndices(MergedTypes, T);&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; if (!HashedTypes.try_insert(T))&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; continue;&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; MergedTypes.push_back(T);&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; }&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">The important observations here are:&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;ol start="1" style="margin-top: 0in;" type="1">&lt;li class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">remapAllTypeIndices &lt;/span>&lt;span lang="EN">is called unconditionally for every type in every object file.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;li class="MsoNormal">&lt;span lang="EN">A hash of the type is computed unconditionally for every type&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;li class="MsoNormal">&lt;i>At least one&lt;/i>&lt;span lang="EN"> full record comparison is done for every type.&amp;nbsp; In practice it turns out to be much more, because hash buckets are computed modulo table size, so there will actually be 1 full record comparison for every probe.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;/ol>&lt;div class="MsoNormal">&lt;span lang="EN">Given a global hash function as described above, the algorithm can be re-written like this:&lt;/span>&lt;span lang="EN" style="font-size: 8.0pt; line-height: 115%;">&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; line-height: 115%;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; HashMap&amp;lt;SHA1, int&amp;gt; HashToIndex;&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; line-height: 115%;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; vector&amp;lt;Type&amp;gt; OrderedTypes;&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; line-height: 115%;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (ObjectFile &amp;amp;Obj : Objects) {&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; line-height: 115%;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; auto Hashes = Obj.DebugHSectionHashes;&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; line-height: 115%;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; for (int I=0; I &amp;lt; Obj.NumTypes; ++I) {&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; line-height: 115%;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; int NextIndex = OrderedTypes.size();&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; line-height: 115%;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; if (!HashToIndex.try_emplace(Hashes[I], NextIndex))&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; line-height: 115%;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; continue;&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; line-height: 115%;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; remapAllTypeIndices(T);&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; line-height: 115%;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; OrderedTypes.push_back(T);&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; line-height: 115%;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; }&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; line-height: 115%;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;span style="font-size: 10pt;">&lt;o:p>&lt;/o:p>&lt;/span>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">While this appears very similar, its performance characteristics are quite different.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;ol start="1" style="margin-top: 0in;" type="1">&lt;li class="MsoNormalCxSpMiddle">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">remapAllTypeIndices &lt;/span>&lt;span lang="EN">is only called when the record is actually new.&amp;nbsp; Which, as we discussed earlier, is a small fraction of the time over many linker inputs.&lt;/span>&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;li class="MsoNormalCxSpMiddle">&lt;span lang="EN">A hash of the type is &lt;b>never&lt;/b> computed by the linker.&lt;b>&amp;nbsp; &lt;/b>It is simply there in the object file (the exception to this is mixed linker inputs, discussed earlier, but those are a small fraction of input files).&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;li class="MsoNormalCxSpMiddle">&lt;span lang="EN">Full record comparisons &lt;b>never&lt;/b> happen&lt;i>.&lt;/i>&amp;nbsp; Since we are using a strong hash function with negligible chance of false collisions, and since the hash of a record provides equality semantics across streams, the hash is as good as the record itself.&lt;i>&lt;o:p>&lt;/o:p>&lt;/i>&lt;/span>&lt;/li>&lt;/ol>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">Combining all of these points, we get an algorithm that is extremely cache friendly.&amp;nbsp; Amortized over all input files, most records during type merging are cache hits (i.e. duplicate records).&amp;nbsp; With this algorithm when we get a cache hit, the only two data structures that are accessed are:&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;ol start="1" style="margin-top: 0in;" type="1">&lt;li class="MsoNormalCxSpMiddle">&lt;span lang="EN">An array of contiguous hash values.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;li class="MsoNormalCxSpMiddle">&lt;span lang="EN">An array of contiguous hash buckets.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;/ol>&lt;div class="MsoNormal">&lt;span lang="EN">Since we never do full equality comparison (which would blow out the L1 and sometimes even L2 cache due to the average size of a type record being larger than a cache line) the algorithm here is very fast.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">We’ve deferred discussion of how to create such a hash up until now, but it is actually fairly straightforward.&amp;nbsp; We use what is known as a “tree hash” or “Merkle tree”.&amp;nbsp; The idea is to pass bytes from a type record directly to the hash function up until the point we get to a type index.&amp;nbsp; Then, instead of passing the numeric value of the type index to the hash function, we pass the previously computed hash of the record that is being referenced.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">Such a hash is very fast to compute in the compiler because &lt;i>the compiler must already hash types anyway&lt;/i>, so the incremental cost to emit this to the .debug$H section is negligible.&amp;nbsp; For example, when a type is encountered in a translation unit, before you can add that type to the object file’s &lt;/span>&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">.debug$T&lt;/span>&lt;span lang="EN"> section, it must first be verified that the type has not already been added.&amp;nbsp; And since this is happening naturally in the order in which types are encountered, all that has to be done is to save these hash values in an array indexed by type index, and subsequent hash operations will have O(1) access to all of the information needed to compute this merkle hash.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoSubtitle">&lt;a href="https://www.blogger.com/null" name="_ma3qfmnbo3o6">&lt;/a>&lt;span lang="EN">&amp;nbsp;&lt;/span>&amp;nbsp;&lt;/div>&lt;h3>&lt;span lang="EN">Mixed Input Files and Compiler/Linker Compatibility&lt;/span>&lt;/h3>&lt;div class="MsoSubtitle">&lt;a href="https://www.blogger.com/null" name="_rmj5k0mxyuuq">&lt;/a>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">A linker must be prepared to deal with a mixed set of input files.&amp;nbsp; For example, while a particular compiler may choose to always emit &lt;/span>&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">.debug$H&lt;/span>&lt;span lang="EN"> sections, a linker must be prepared to link objects that for whatever reason do not have this section.&amp;nbsp; To handle this, the linker can examine all inputs up front and manually compute hashes for inputs with missing &lt;/span>&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">.debug$H&lt;/span>&lt;span lang="EN">sections.&amp;nbsp; In practice this proves to be a small fraction and the penalty for doing this serially is negligible, although it should be noted that in theory this can also be done as a parallel pre-processing step if some use cases show that this has non-negligible cost.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">Similarly, the emission of this section in an object file has no impact on linkers which have not been taught to use it.&amp;nbsp; Since it is a purely additive (and optional) inclusion into the object file, any linker which does not understand it will continue to work exactly as it does today.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">&lt;br />&lt;/span>&lt;/div>&lt;h2>&lt;span lang="EN">The On-Disk Format&lt;/span>&lt;/h2>&lt;div class="MsoNormal">&lt;span lang="EN">Clang uses the following on-disk format for the &lt;/span>&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">.debug$H&lt;/span>&lt;span lang="EN"> section.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span>&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">0x0&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; : &amp;lt;Section Magic&amp;gt;&amp;nbsp; (4 bytes)&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 0x4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; : &amp;lt;Version&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (2 bytes)&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 0x6&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; : &amp;lt;Hash Algorithm&amp;gt; (2 bytes)&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 0x8&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; : &amp;lt;Hash Value&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (N bytes)&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 0x8 + N : &amp;lt;Hash Value&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (N bytes)&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; … &lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">Here, “Section Magic” is an arbitrarily chosen 4-byte number whose purpose is to provide some level of certainty that what we’re seeing is a real &lt;/span>&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">.debug$H&lt;/span>&lt;span lang="EN"> section, and not some section that someone created that accidentally happened&lt;span style="font-family: inherit;"> to be called that.&amp;nbsp;&amp;nbsp; Our current implementation uses the value 0x133C9C5, which represents the date of the initial prototype implementation.&amp;nbsp; But this can be any reasonable value here, as long as it never changes.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">&lt;span style="font-family: inherit;">“Version” is reserved for future use, so that the format of the section can theoretically change. &lt;o:p>&lt;/o:p>&lt;/span>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">&lt;span style="font-family: inherit;"> &lt;span lang="EN" style="line-height: 115%;">“Hash Algorithm” is a value that indicates what algorithm was used to generate the hashes that follow.&amp;nbsp; As such, the value of N above is also a function of what hash algorithm is used.&amp;nbsp; Currently, the only proposed value for Hash Algorithm is SHA1 = 0, which would imply N = 20 when Hash Algorithm = 0.&amp;nbsp; Should it prove useful to have truncated 8-byte SHA1 hashes, we could define SHA1_8 = 1, for example.&lt;/span>&lt;/span>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">&lt;span style="font-family: inherit;">&lt;span lang="EN" style="font-size: 11pt; line-height: 115%;">&lt;br />&lt;/span>&lt;/span>&lt;/span>&lt;/div>&lt;h2>&lt;span lang="EN">Limitations and Pitfalls&lt;/span>&lt;/h2>&lt;div class="MsoNormal">&lt;span lang="EN">The biggest limitation of this format is that it increases object file size.&amp;nbsp; Experiments locally on fairly large projects show an average aggregate object file size increase of ~15% compared to /DEBUG:FULL (which, for clang-cl, actually makes .debug$H object files &lt;i>smaller&lt;/i>than those needed to support /DEBUG:FASTLINK).&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">There is another, less obvious potential pitfall as well.&amp;nbsp; The worst case scenario is when no input files have a &lt;/span>&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">.debug$H&lt;/span>&lt;span lang="EN"> section present, but this limitation is the same in principle even if only a subset of files have a &lt;/span>&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">.debug$H&lt;/span>&lt;span lang="EN"> section.&amp;nbsp; Since the linker must agree on a single hash function for all object files, there is the question of what to do when not all object files agree on hash function, or when not all object files contain a &lt;/span>&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">.debug$H &lt;/span>&lt;span lang="EN">section.&amp;nbsp; If the code is not written carefully, you could get into a situation where, for example, no input files contain a &lt;/span>&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">.debug$H&lt;/span>&lt;span lang="EN"> section so the linker decides to synthesize one on the fly for every input file.&amp;nbsp; Since SHA1 (for example) is quite slow, this could cause a huge performance penalty.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">This limitation can be coded around with some care, however.&amp;nbsp; For example, tree hashes can be computed up-front in parallel as a pre-processing step.&amp;nbsp; Alternatively, a hash function could be chosen based on some heuristic estimate of what would likely lead to the fastest link (based on the percentage of inputs that had a &lt;/span>&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">.debug$H&lt;/span>&lt;span lang="EN"> section, for example).&amp;nbsp; There are other possibilities as well.&amp;nbsp; The important thing is to just be aware of this potential pitfall, and if your links become very slow, you'll know that the first thing you should check is "do all my object files have .debug$H sections?"&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN"> &lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">Finally, since a hash is considered to be identical to the original record, we must consider the possibility of collisions.&amp;nbsp; That said, this does not appear to be a serious concern in practice.&amp;nbsp; A single PDB can have a theoretical maximum of 2&lt;sup>32&lt;/sup> type records anyway (due to a type index being 4 bytes).&amp;nbsp; The following table shows the expected number of type records needed for a collision to exist as a function of hash size.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">&lt;/span>&lt;/div>&lt;table border="1" cellpadding="0" cellspacing="0" class="MsoNormalTable" style="border-collapse: collapse; border: none; margin-left: 5.0pt; mso-border-alt: solid black 1.0pt; mso-border-insideh: 1.0pt solid black; mso-border-insidev: 1.0pt solid black; mso-padding-alt: 0in 5.4pt 0in 5.4pt; mso-table-layout-alt: fixed; mso-yfti-tbllook: 1536; width: 449px;"> &lt;tbody>&lt;tr> &lt;td style="background: #6D9EEB; border: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 110.25pt;" valign="top" width="147">&lt;div class="MsoNormal" style="line-height: normal; mso-pagination: none;">&lt;span lang="EN">Hash Size (Bytes)&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #E69138; border-left: none; border: solid black 1.0pt; mso-border-left-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 226.5pt;" valign="top" width="302">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">Average # of records needed for a collision&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;/tr>&lt;tr> &lt;td style="background: #A4C2F4; border-top: none; border: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 110.25pt;" valign="top" width="147">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">4&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 226.5pt;" valign="top" width="302">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">82,137&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;/tr>&lt;tr> &lt;td style="background: #A4C2F4; border-top: none; border: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 110.25pt;" valign="top" width="147">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">6&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 226.5pt;" valign="top" width="302">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">21,027,121&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;/tr>&lt;tr> &lt;td style="background: #A4C2F4; border-top: none; border: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 110.25pt;" valign="top" width="147">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">8&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 226.5pt;" valign="top" width="302">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">5,382,943,231&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;/tr>&lt;tr> &lt;td style="background: #A4C2F4; border-top: none; border: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 110.25pt;" valign="top" width="147">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">12&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 226.5pt;" valign="top" width="302">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">3.53 x 10&lt;sup>14&lt;o:p>&lt;/o:p>&lt;/sup>&lt;/span>&lt;/div>&lt;/td> &lt;/tr>&lt;tr> &lt;td style="background: #A4C2F4; border-top: none; border: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 110.25pt;" valign="top" width="147">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">16&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 226.5pt;" valign="top" width="302">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">2.31 x 10&lt;sup>19&lt;/sup>&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;/tr>&lt;tr> &lt;td style="background: #A4C2F4; border-top: none; border: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 110.25pt;" valign="top" width="147">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">20&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 226.5pt;" valign="top" width="302">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">1.52 x 10&lt;sup>24&lt;/sup>&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;/tr>&lt;/tbody>&lt;/table>&lt;/div>&lt;/div>&lt;div>&lt;span lang="EN" style="line-height: 115%;">&lt;span style="font-family: inherit;">Given that this is strictly for debug information and not generated code, it’s worth thinking about the &lt;i>severity&lt;/i> of a collision.&amp;nbsp; We feel that an 8-byte hash is probably acceptable for real world use.&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span lang="EN" style="font-family: &amp;quot;arial&amp;quot; , sans-serif; line-height: 115%;">&lt;br />&lt;/span>&lt;/div>&lt;h2>&lt;span lang="EN" style="font-family: &amp;quot;arial&amp;quot; , sans-serif; line-height: 115%;">Benchmarks&lt;/span>&lt;/h2>&lt;div>&lt;span style="font-family: inherit;">Here we will give some benchmarks on large real world applications (specifically, Chrome and clang).&amp;nbsp; The times presented are &lt;b>only&lt;/b> for the linker.&amp;nbsp; gn args for each build of chromium are specified at the end..&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;arial&amp;quot; , sans-serif;">&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;table border="1" cellpadding="0" cellspacing="0" class="MsoNormalTable" style="border-collapse: collapse; border: none; margin-left: 5.0pt; mso-border-alt: solid black 1.0pt; mso-border-insideh: 1.0pt solid black; mso-border-insidev: 1.0pt solid black; mso-padding-alt: 0in 5.4pt 0in 5.4pt; mso-table-layout-alt: fixed; mso-yfti-tbllook: 1536; width: 623px;"> &lt;tbody>&lt;tr style="height: 21.0pt; mso-yfti-firstrow: yes; mso-yfti-irow: 0;"> &lt;td rowspan="2" style="background: #6D9EEB; border: solid black 1.0pt; height: 21.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 82.5pt;" valign="top" width="110">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;br />&lt;/div>&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;a href="https://www.blogger.com/null">&lt;/a>&lt;a href="https://www.blogger.com/null">&lt;/a>&lt;a href="https://www.blogger.com/null">&lt;/a>&lt;a href="https://www.blogger.com/null">&lt;/a>&lt;a href="https://www.blogger.com/null">&lt;/a>Toolchain&lt;span lang="EN">&amp;nbsp;&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td rowspan="2" style="background: #6D9EEB; border-left: none; border: solid black 1.0pt; height: 21.0pt; mso-border-left-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 110.25pt;" valign="top" width="147">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;br />&lt;/div>&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">Mode&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td colspan="4" style="background: #FF9900; border-left: none; border: solid black 1.0pt; height: 21.0pt; mso-border-left-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 274.5pt;" valign="top" width="366">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">Target&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;/tr>&lt;tr style="height: 21.0pt; mso-yfti-irow: 1;"> &lt;td style="background: #F9CB9C; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; height: 21.0pt; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 75.75pt;" valign="top" width="101">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">blink_core.dll&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #F9CB9C; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; height: 21.0pt; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 69.0pt;" valign="top" width="92">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">content.dll&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #F9CB9C; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; height: 21.0pt; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 66.0pt;" valign="top" width="88">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">chrome.dll&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #F9CB9C; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; height: 21.0pt; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 63.75pt;" valign="top" width="85">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">clang.exe&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;/tr>&lt;tr> &lt;td style="background: #A4C2F4; border-top: none; border: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 82.5pt;" valign="top" width="110">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">MSVC&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #A4C2F4; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 110.25pt;" valign="top" width="147">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">/DEBUG:FULL&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 75.75pt;" valign="top" width="101">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">553.11s&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 69.0pt;" valign="top" width="92">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">205.45s&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 66.0pt;" valign="top" width="88">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">507.17s&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 63.75pt;" valign="top" width="85">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">62.45s&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;/tr>&lt;tr> &lt;td style="background: #A4C2F4; border-top: none; border: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 82.5pt;" valign="top" width="110">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">MSVC&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #A4C2F4; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 110.25pt;" valign="top" width="147">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">/DEBUG:FASTLINK&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 75.75pt;" valign="top" width="101">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">116.77s&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 69.0pt;" valign="top" width="92">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">56.05s&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 66.0pt;" valign="top" width="88">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">67.80s&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 63.75pt;" valign="top" width="85">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">29.37s&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;/tr>&lt;tr> &lt;td style="background: #A4C2F4; border-top: none; border: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 82.5pt;" valign="top" width="110">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">lld-link&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #A4C2F4; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 110.25pt;" valign="top" width="147">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">/DEBUG:FULL&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 75.75pt;" valign="top" width="101">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">121.17s&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 69.0pt;" valign="top" width="92">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">42.10s&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 66.0pt;" valign="top" width="88">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">42.31s&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 63.75pt;" valign="top" width="85">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">24.14s&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;/tr>&lt;tr> &lt;td style="background: #A4C2F4; border-top: none; border: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 82.5pt;" valign="top" width="110">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">lld-link&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #A4C2F4; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 110.25pt;" valign="top" width="147">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">/DEBUG:GHASH&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 75.75pt;" valign="top" width="101">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">88.71s&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 69.0pt;" valign="top" width="92">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">33.30s&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 66.0pt;" valign="top" width="88">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">34.76s&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;td style="background: #FCE5CD; border-bottom: solid black 1.0pt; border-left: none; border-right: solid black 1.0pt; border-top: none; mso-border-left-alt: solid black 1.0pt; mso-border-top-alt: solid black 1.0pt; padding: 5.0pt 5.0pt 5.0pt 5.0pt; width: 63.75pt;" valign="top" width="85">&lt;div align="center" class="MsoNormal" style="line-height: normal; mso-pagination: none; text-align: center;">&lt;span lang="EN">17.99s&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/td> &lt;/tr>&lt;/tbody>&lt;/table>&lt;br />&lt;div>&lt;!--[if !supportAnnotations]--> &lt;br />&lt;div>&lt;div class="msocomtxt" id="_com_6" language="JavaScript">&lt;!--[if !supportAnnotations]-->&lt;/div>&lt;!--[endif]-->&lt;/div>&lt;/div>&lt;/div>&lt;div>&lt;div class="MsoNormal">&lt;span lang="EN">&lt;span style="font-family: inherit;">The numbers here indicate a reduction in link time of up to 30% by enabling /DEBUG:GHASH in lld.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">&lt;span style="font-family: inherit;">It's worth mentioning that lld does not yet have support for incremental linking so we could not compare the cost of an incremental link with /DEBUG:GHASH versus MSVC.&amp;nbsp; We still expect incremental linking using MSVC under optimal conditions (e.g. change whitespace in a header file) to produce much faster links than lld is currently able to do.&lt;/span>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">&lt;span style="font-family: inherit;">There are several possible avenues for further optimization though, so we will finish up by discussing them.&lt;/span>&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN">&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;h2>&lt;span lang="EN">Further Improvements&lt;/span>&lt;/h2>&lt;div class="MsoNormal">&lt;span lang="EN">There are several ways to improve the times further, which have yet to be explored.&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;ol start="1" style="margin-top: 0in;" type="1">&lt;li class="MsoNormalCxSpMiddle">&lt;span lang="EN">Use a smaller or faster hash.&amp;nbsp; We use a 20-byte SHA1 hash.&amp;nbsp; This is not a multiple of cache line size, and in any case the probability of collision is astronomically small even in the largest PDBs, considering that the theoretical limit of a PDB is just under 2^32 possible unique types (due to the 4-byte size of a type index).&amp;nbsp; SHA1 is also notoriously slow.&amp;nbsp; It might be interesting to try, for example, a Blake2 set to output an 8 byte hash.&amp;nbsp; This should give sufficiently low probability of a collision while improving cache performance.&amp;nbsp; The on-disk format is designed with this flexibility in mind, as different hash algorithms can be specified in the header.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;li class="MsoNormalCxSpMiddle">&lt;span lang="EN">Hashes for compilands with missing &lt;/span>&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">.debug$H&lt;/span>&lt;span lang="EN"> sections can be computed in parallel before linking.&amp;nbsp; Currently when we encounter an object file without a &lt;/span>&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">.debug$H&lt;/span>&lt;span lang="EN"> section, we must synthesize one in the linker.&amp;nbsp; Our prototype algorithm does this serially for each input.&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;li class="MsoNormalCxSpMiddle">&lt;span lang="EN">Symbol records from &lt;/span>&lt;span lang="EN" style="font-family: &amp;quot;courier new&amp;quot;; mso-fareast-font-family: &amp;quot;Courier New&amp;quot;;">.debug$S &lt;/span>&lt;span lang="EN">sections can be merged in parallel.&amp;nbsp; Currently in lld, we first merge type records into the TPI stream, then we iterate symbol records and remap types in each symbol record to correspond to the new type indices.&amp;nbsp; If we merge types from all modules up front, the symbol records (with the exception of global symbols) can be merged in parallel since they get written to independent streams).&lt;o:p>&lt;/o:p>&lt;/span>&lt;/li>&lt;/ol>&lt;h2>Try it out!&lt;/h2>&lt;/div>&lt;div>If you're already using clang-cl and lld on Windows today, you can try this out.&amp;nbsp; There are two flags needed to enable this, one for the compiler and one for the linker:&lt;/div>&lt;div>&lt;ol>&lt;li>To enable the emission of a .debug$H section by the compiler, you will need to pass the undocumented&amp;nbsp;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-mllvm -emit-codeview-ghash-section&lt;/span>&lt;span style="font-family: inherit;">&amp;nbsp;flag to clang-cl&amp;nbsp; (this flag should go away in the future, once this is considered stable and good enough to be turned on by default).&lt;/span>&lt;/li>&lt;li>&lt;span style="font-family: inherit;">To tell lld to use this information, you will need to pass the &lt;/span>&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">/DEBUG:GHASH&lt;/span>&lt;span style="font-family: inherit;">&amp;nbsp;to lld.&lt;/span>&lt;/li>&lt;/ol>&lt;div>Note that this feature is still considered highly experimental, so we're interested in your feedback (llvm-dev@ mailing list, direct email is ok too)&amp;nbsp;and bug reports (bugs.llvm.org).&amp;nbsp;&amp;nbsp;&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;/div>&lt;/span>&lt;/div></description></item><item><title>Clang ♥ bash -- better auto completion is coming to bash</title><link>https://blog.llvm.org/2017/09/clang-bash-better-auto-completion-is.html</link><pubDate>Tue, 19 Sep 2017 23:37:00 +0000</pubDate><guid>https://blog.llvm.org/2017/09/clang-bash-better-auto-completion-is.html</guid><description>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="https://4.bp.blogspot.com/-01JogPSFCBM/WcKRj79NXNI/AAAAAAAANZA/X1Mr4wf_cnI57LGLoglYPn_XZWE_q-6egCLcBGAs/s1600/out.gif" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" data-original-height="500" data-original-width="800" height="400" src="https://4.bp.blogspot.com/-01JogPSFCBM/WcKRj79NXNI/AAAAAAAANZA/X1Mr4wf_cnI57LGLoglYPn_XZWE_q-6egCLcBGAs/s640/out.gif" width="640" />&lt;/a>&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;/div>&lt;span id="docs-internal-guid-68af261c-84f5-10c3-00b1-6106d33aa46a">&lt;/span>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-68af261c-84f5-10c3-00b1-6106d33aa46a">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/div>&lt;span id="docs-internal-guid-68af261c-84f5-10c3-00b1-6106d33aa46a">&lt;/span>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-68af261c-84f5-10c3-00b1-6106d33aa46a">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">Compilers are complex pieces of software and have a multitude of command-line options to fine tune parameters. Clang is no exception: it has 447 command-line options. It’s nearly impossible to memorize all these options and their correct spellings, that's where shell completion can be very handy. When you type in the first few characters of a flag and hit tab, it will autocomplete the rest for you.&lt;/span>&lt;/span>&lt;/div>&lt;span id="docs-internal-guid-68af261c-84f5-10c3-00b1-6106d33aa46a">&lt;/span>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-68af261c-84f5-10c3-00b1-6106d33aa46a">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 14pt; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;">Background&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br class="kix-line-break" />&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">However, such a autocompletion feature is not available yet, as there's no easy way to get a complete list of the options Clang supports. For example, bash doesn’t have any autocompletion support for Clang, and despite some shells like zsh having a script for command-line autocompletion, they use hard coded lists of command-line options, and are not automatically updated when a new option is added to Clang. These shells also can’t autocomplete arguments which some flags take (-std=[tab] for instance).&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-68af261c-84f5-10c3-00b1-6106d33aa46a">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">This is the problem we were working to solve during this year’s Google Summer of Code. We’re adding a feature to Clang so that we can implement a complete, exact command-line option completion which is highly portable for any shell. To start with, we'll provide a completion script for bash which uses this feature. &lt;/span>&lt;/span>&lt;/div>&lt;span id="docs-internal-guid-68af261c-84f5-10c3-00b1-6106d33aa46a">&lt;/span>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-68af261c-84f5-10c3-00b1-6106d33aa46a">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 14pt; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;">Implementation&lt;/span>&lt;/span>&lt;/div>&lt;span id="docs-internal-guid-68af261c-84f5-10c3-00b1-6106d33aa46a">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">Clang now has a new command line option called &lt;/span>&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">--autocomplete&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">. This flag receives the incomplete user input from the shell and then queries the internal data structures of the current Clang binary, and returns a list of possible completions. With this API, we can always get an accurate list of options and values any time, on any newer versions of Clang.&lt;/span>&lt;/div>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">We built an autocompletion using this in bash for the first implementation. You can find its source code &lt;/span>&lt;a href="https://github.com/llvm-mirror/clang/blob/master/utils/bash-autocomplete.sh" style="text-decoration-line: none;">&lt;span style="color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">here&lt;/span>&lt;/a>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">. Also, &lt;/span>&lt;a href="https://github.com/Teemperor/clang-autocomplete-qt-demo/blob/master/clangcompleter.cpp#L29" style="text-decoration-line: none;">&lt;span style="color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">here&lt;/span>&lt;/a>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;"> is the sample for Qt text entry autocompletion to give an example how to use this API from an UI application as seen below:&lt;/span>&lt;/div>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;">&lt;img alt="final.gif" height="305" src="https://lh6.googleusercontent.com/ZMCiIg-nvoKUCVI3yrIxajonOBqEL1QiievBUEFeL3zNp-E6Ua6na5u6cenXMteX4XjqH2t_ve584cTA4Hw6MNczz6UtTOr_MpnejkI61fEhbsuhmIkccA7cUgmyIvyR4dni98dX" style="-webkit-transform: rotate(0.00rad); border: none; transform: rotate(0.00rad);" width="602" />&lt;/span>&lt;/div>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">You can always complete one flag at a time. So if you want to use the API, you have to select the flag that the user is currently typing. Then just pass this flag to the --autocomplete flag in the selected clang binary. So in the case below all flags start with `-tr` are displayed with their descriptions behind them (separated from the flag with a tab character).&lt;/span>&lt;br />&lt;div class="separator" style="clear: both; text-align: center;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">&lt;a href="https://2.bp.blogspot.com/-VRKNRM79brs/WcKM_j0JZdI/AAAAAAAANYg/0JosgCr4lo0VphdvQMqGSTXBwtqzGIOqwCLcBGAs/s1600/tr.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" data-original-height="64" data-original-width="496" height="82" src="https://2.bp.blogspot.com/-VRKNRM79brs/WcKM_j0JZdI/AAAAAAAANYg/0JosgCr4lo0VphdvQMqGSTXBwtqzGIOqwCLcBGAs/s640/tr.png" width="640" />&lt;/a>&lt;/span>&lt;/div>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">The API also supports completing the values of flags. If you have a flag for which value completion is supported, you can also provide an incomplete value behind the flag separated by a comma to get completion for this:&lt;/span>&lt;br />&lt;div class="separator" style="clear: both; text-align: center;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">&lt;a href="https://2.bp.blogspot.com/-bu1RSxe2PjQ/WcKNLOcnCqI/AAAAAAAANYk/xu41ZdQbPKcIoR1VpjLcI_055YCWv_lsgCLcBGAs/s1600/stdlib.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" data-original-height="59" data-original-width="495" height="76" src="https://2.bp.blogspot.com/-bu1RSxe2PjQ/WcKNLOcnCqI/AAAAAAAANYk/xu41ZdQbPKcIoR1VpjLcI_055YCWv_lsgCLcBGAs/s640/stdlib.png" width="640" />&lt;/a>&lt;/span>&lt;/div>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">If you provide nothing after the comma, the list of the all possible values for this flag is displayed.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="https://4.bp.blogspot.com/-7CZRQ3DJUMA/WcKNQ_GeYgI/AAAAAAAANYo/YsnMXn5EcUIjPrO-y5nEVj6GvuEaRZ9jACLcBGAs/s1600/meabi.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" data-original-height="94" data-original-width="491" height="122" src="https://4.bp.blogspot.com/-7CZRQ3DJUMA/WcKNQ_GeYgI/AAAAAAAANYo/YsnMXn5EcUIjPrO-y5nEVj6GvuEaRZ9jACLcBGAs/s640/meabi.png" width="640" />&lt;/a>&lt;/div>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/div>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 14pt; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;">How to get it&lt;/span>&lt;/div>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">This feature is available for use now with LLVM/clang 5.0 and we’ll also be adding this feature to the standard bash completion package. Make sure you have the latest clang version on your machine, and source &lt;/span>&lt;a href="https://github.com/llvm-mirror/clang/blob/master/utils/bash-autocomplete.sh" style="text-decoration-line: none;">&lt;span style="color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">this script&lt;/span>&lt;/a>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">. If want to make the change permanent, just source it from your &lt;/span>&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">.bashrc&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;"> and enjoy typing your clang invocations!&lt;/span>&lt;/span></description></item><item><title>2017 US LLVM Developers' Meeting Program</title><link>https://blog.llvm.org/2017/09/2017-us-llvm-developers-meeting-program.html</link><pubDate>Mon, 11 Sep 2017 09:00:00 +0000</pubDate><guid>https://blog.llvm.org/2017/09/2017-us-llvm-developers-meeting-program.html</guid><description>The LLVM Foundation is excited to announce the selected proposals for the 2017 US LLVM Developers' Meeting!&lt;br />&lt;br />&lt;b>Keynotes&lt;/b>:&lt;br />&lt;br />&lt;ul>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk12">Falcon: An optimizing Java JIT &lt;/a>&lt;/b> - &lt;i>Philip Reames&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk21">Compiling Android userspace and Linux kernel with LLVM &lt;/a>&lt;/b> - &lt;i>Stephen Hines, Nick Desaulniers and Greg Hackmann&lt;/i>&lt;/li>&lt;/ul>&lt;br />&lt;b>Talks:&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk1">Apple LLVM GPU Compiler: Embedded Dragons &lt;/a>&lt;/b> - &lt;i>Marcello Maggioni and Charu Chandrasekaran&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk2">Bringing link-time optimization to the embedded world: (Thin)LTO with Linker Scripts &lt;/a>&lt;/b> - &lt;i>Tobias Edler von Koch, Sergei Larin, Shankar Easwaran and Hemant Kulkarni&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk3">Advancing Clangd: Bringing persisted indexing to Clang tooling &lt;/a>&lt;/b> - &lt;i>Marc-Andre Laperle&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk4">The Further Benefits of Explicit Modularization: Modular Codegen &lt;/a>&lt;/b> - &lt;i>David Blaikie&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk5">eval() in C++ &lt;/a>&lt;/b> - &lt;i>Sean Callanan&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk7">Enabling Parallel Computing in Chapel with Clang and LLVM &lt;/a>&lt;/b> - &lt;i>Michael Ferguson&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk8">Structure-aware fuzzing for Clang and LLVM with libprotobuf-mutator &lt;/a>&lt;/b> - &lt;i>Kostya Serebryany, Vitaly Buka and Matt Morehouse&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk9">Adding Index‐While‐Building and Refactoring to Clang &lt;/a>&lt;/b> - &lt;i>Alex Lorenz and Nathan Hawes&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk10">XRay in LLVM: Function Call Tracing and Analysis &lt;/a>&lt;/b> - &lt;i>Dean Michael Berris&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk11">GlobalISel: Past, Present, and Future &lt;/a>&lt;/b> - &lt;i>Quentin Colombet and Ahmed Bougacha&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk13">Dominator Trees and incremental updates that transcend time &lt;/a>&lt;/b> - &lt;i>Jakub Kuderski&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk14">Scale, Robust and Regression-Free Loop Optimizations for Scientific Fortran and Modern C++ &lt;/a>&lt;/b> - &lt;i>Tobias Grosser and Michael Kruse&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk15">Implementing Swift Generics &lt;/a>&lt;/b> - &lt;i>Douglas Gregor, Slava Pestov and John McCall&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk16">lld: A Fast, Simple, and Portable Linker &lt;/a>&lt;/b> - &lt;i>Rui Ueyama&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk17">Vectorizing Loops with VPlan – Current State and Next Steps &lt;/a>&lt;/b> - &lt;i>Ayal Zaks and Gil Rapaport&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk18">LLVM Compile-Time: Challenges. Improvements. Outlook.&amp;nbsp;&lt;/a>&lt;/b>&lt;/li>&lt;li>- &lt;i>Michael Zolotukhin&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk19">Challenges when building an LLVM bitcode Obfuscator &lt;/a>&lt;/b> - &lt;i>Serge Guelton, Adrien Guinet, Juan Manuel Martinez and Pierrick Brunet&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#talk20">Building Your Product Around LLVM Releases &lt;/a>&lt;/b> - &lt;i>Tom Stellard&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2017-10/#talk6">&lt;b>The Type Sanitizer: Free Yourself from -fno-strict-aliasing&lt;/b>&lt;/a> - &lt;i>Hal Finkel&lt;/i>&lt;/li>&lt;/ul>&lt;br />&lt;i>&lt;br />&lt;/i>&lt;b>BoFs:&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#bof1">Storing Clang data for IDEs and static analysis &lt;/a>&lt;/b> - &lt;i>Marc-Andre Laperle&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#bof2">Source-based Code Coverage BoF &lt;/a>&lt;/b> - &lt;i>Eli Friedman and Vedant Kumar&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#bof3">Clang Static Analyzer BoF &lt;/a>&lt;/b> - &lt;i>Devin Coughlin, Artem Dergachev and Anna Zaks&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#bof4">Co-ordinating RISC-V development in LLVM &lt;/a>&lt;/b> - &lt;i>Alex Bradbury&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#bof5">Thoughts and State for Representing Parallelism with Minimal IR Extensions in LLVM &lt;/a>&lt;/b> - &lt;i>Xinmin Tian, Hal Finkel, Tb Schardl, Johannes Doerfert and Vikram Adve&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#bof6">BoF - Loop and Accelerator Compilation Using Integer Polyhedra &lt;/a>&lt;/b> - &lt;i>Tobias Grosser and Hal Finkel&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#bof7">LLDB Future Directions &lt;/a>&lt;/b> - &lt;i>Zachary Turner and David Blaikie&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#bof8">LLVM Foundation - Status and Involvement &lt;/a>&lt;/b> - &lt;i>LLVM Foundation Board of Directors&lt;/i>&lt;/li>&lt;/ul>&lt;br />&lt;i>&lt;br />&lt;/i>&lt;b>Tutorials:&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#tutorial1">Writing Great Machine Schedulers &lt;/a>&lt;/b> - &lt;i>Javed Absar and Florian Hahn&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#tutorial2">Tutorial: Head First into GlobalISel &lt;/a>&lt;/b> - &lt;i>Daniel Sanders, Aditya Nandakumar and Justin Bogner&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#tutorial3">Welcome to the back-end: The LLVM machine representation. &lt;/a>&lt;/b> - &lt;i>Matthias Braun&lt;/i>&lt;/li>&lt;/ul>&lt;br />&lt;i>&lt;br />&lt;/i>&lt;b>Lightning Talks:&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#lightning1">Porting OpenVMS using LLVM &lt;/a>&lt;/b> - &lt;i>John Reagan&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#lightning2">Porting LeakSanitizer: A Beginner's Guide &lt;/a>&lt;/b> - &lt;i>Francis Ricci&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#lightning3">Introsort based sorting function for libc++ &lt;/a>&lt;/b> - &lt;i>Divya Shanmughan and Aditya Kumar&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#lightning4">Code Size Optimization: Interprocedural Outlining at the IR Level &lt;/a>&lt;/b> - &lt;i>River Riddle&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#lightning5">ThreadSanitizer APIs for external libraries &lt;/a>&lt;/b> - &lt;i>Kuba Mracek&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#lightning6">A better shell command-line autocompletion for clang &lt;/a>&lt;/b> - &lt;i>Yuka Takahashi&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#lightning7">A CMake toolkit for migrating C++ projects to clang’s module system. &lt;/a>&lt;/b> - &lt;i>Raphael Isemann&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#lightning8">Debugging of optimized code: Extending the lifetime of local variables &lt;/a>&lt;/b> - &lt;i>Wolfgang Pieb&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#lightning10">An LLVM based Loop Profiler &lt;/a>&lt;/b> - &lt;i>Shalini Jain, Kamlesh Kumar, Suresh Purini, Dibyendu Das and Ramakrishna Upadrasta&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#lightning11">Compiling cross-toolchains with CMake and runtimes build &lt;/a>&lt;/b> - &lt;i>Petr Hosek&lt;/i>&lt;/li>&lt;/ul>&lt;br />&lt;br />&lt;b>Student Research Competition:&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#src1">VPlan + RV: A Proposal &lt;/a>&lt;/b> - &lt;i>Simon Moll and Sebastian Hack&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#src2">Polyhedral Value &amp;amp; Memory Analysis &lt;/a>&lt;/b> - &lt;i>Johannes Doerfert and Sebastian Hack&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#src3">DLVM: A Compiler Framework for Deep Learning DSLs &lt;/a>&lt;/b> - &lt;i>Richard Wei, Vikram Adve and Lane Schwartz&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#src4">Leveraging LLVM to Optimize Parallel Programs &lt;/a>&lt;/b> - &lt;i>William Moses&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#src5">Exploiting and improving LLVM's data flow analysis using superoptimizer &lt;/a>&lt;/b> - &lt;i>Jubi Taneja and John Regehr&lt;/i>&lt;/li>&lt;/ul>&lt;br />&lt;i>&lt;br />&lt;/i>&lt;b>Posters:&lt;/b>&lt;br />&lt;ul>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#poster1">Venerable Variadic Vulnerabilities Vanquished &lt;/a>&lt;/b> - &lt;i>Priyam Biswas, Alessandro Di Federico, Scott A. Carr, Prabhu Rajasekaran, Stijn Volckaert, Yeoul Na, Michael Franz and Mathias Payer&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#poster2">Extending LLVM’s masked.gather/scatter Intrinsic to Read/write Contiguous Chunks from/to Arbitrary Locations. &lt;/a>&lt;/b> -&amp;nbsp;&lt;i>Farhana Aleen, Elena Demikhovsky, Hideki Saito, and David Kreitzer&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#poster3">An LLVM based Loop Profiler &lt;/a>&lt;/b> - &lt;i>Shalini Jain, Kamlesh Kumar, Suresh Purini, Dibyendu Das and Ramakrishna Upadrasta&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2017-10/#poster4">&lt;b>Leveraging Compiler Optimizations to Reduce Runtime Fault Recovery Overhead&lt;/b>&lt;/a> -&amp;nbsp;&lt;i>Fateme S. Hosseini, Pouya Fotouhi, Chengmo Yang and Guang R. Gao&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#poster5">Polyhedral Optimizations and transparent GPU offloading for Julia by Polly&lt;/a>&lt;/b>&lt;i> -&amp;nbsp;Sanjay Srivallabh Singapuram&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#poster6">Improving debug information in LLVM to recover optimized-out function parameters&lt;/a>&lt;/b>&lt;i> -&amp;nbsp;Ananth Sowda and Ivan Baev&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#poster7">Adding Debug Information and Merge Attribute to Merge-Functions LLVM passes&lt;/a>&lt;/b>&lt;i> -&amp;nbsp;Anmol Paralkar&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#poster8">ALLVM: LLVM All the Things!&lt;/a>&lt;/b> &lt;i>-&amp;nbsp;Will Dietz and Vikram Adve&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#poster9">Project Sulong - Executing LLVM IR on top of a JVM&lt;/a>&lt;/b>&lt;i> -&amp;nbsp;Matthias Grimmer and Christian Wimmer&lt;/i>&lt;/li>&lt;li>&lt;a href="http://llvm.org/devmtg/2017-10/#poster10">&lt;b>JIT Fuzzing Solver: A LibFuzzer based constraint solver&lt;/b>&lt;/a>&lt;i> -&amp;nbsp;Daniel Liew, Cristian Cadar and Alastair Donaldson&lt;/i>&lt;/li>&lt;li>&lt;b>&lt;a href="http://llvm.org/devmtg/2017-10/#poster11">Non-determinism in LLVM Code Generation&lt;/a>&lt;/b>&lt;i> -&amp;nbsp;Mandeep Singh Grang&lt;/i>&lt;/li>&lt;/ul>&lt;br />If you are interested in any of these talks, you should &lt;a href="https://www.eventbrite.com/e/2017-llvm-developers-meeting-bay-area-tickets-35155516095">register&lt;/a> to attend the 2017 US LLVM Developers' Meeting! Tickets are limited, so &lt;a href="https://www.eventbrite.com/e/2017-llvm-developers-meeting-bay-area-tickets-35155516095">register&lt;/a> now!</description></item><item><title>LLVM on Windows now supports PDB Debug Info</title><link>https://blog.llvm.org/2017/08/llvm-on-windows-now-supports-pdb-debug.html</link><pubDate>Fri, 18 Aug 2017 12:55:00 +0000</pubDate><guid>https://blog.llvm.org/2017/08/llvm-on-windows-now-supports-pdb-debug.html</guid><description>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">For several years, we’ve been hard at work on making clang a world class toolchain for developing software on Windows. &amp;nbsp;We’ve &lt;/span>&lt;a href="http://blog.llvm.org/2013/09/a-path-forward-for-llvm-toolchain-on.html" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">written&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> about this &lt;/span>&lt;a href="http://blog.llvm.org/2014/07/clangllvm-on-windows-update.html" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">several&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> times in the past, and we’ve had full ABI compatibility (minus bugs) for some time. One area that been notoriously hard to achieve compatibility on has been debug information, but over the past 2 years we’ve made significant leaps. &amp;nbsp;If you just want the TL;DR, then here you go: &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">If you’re using clang on Windows, you can now get PDB debug information!&lt;/span>&lt;/div>&lt;b id="docs-internal-guid-c3d2d0fb-e2a7-395d-71e1-5806dc41f6bd" style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 18pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Background: CodeView vs. PDB&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">CodeView is a debug information format invented by Microsoft in the mid 1980s. For various reasons, other debuggers developed an independent format called DWARF, which eventually became standardized and is now widely supported by many compilers and programming languages. &amp;nbsp;CodeView, like DWARF, defines a set of records that describe mappings between source lines and code addresses, as well as types and symbols that your program uses. &amp;nbsp;The debugger then uses this information to let you set breakpoints by function name, display the value of a variable, etc. &amp;nbsp;But CodeView is only somewhat documented, with the &lt;/span>&lt;a href="http://ftp.openwatcom.org/devel/docs/CodeView.pdf" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">most recent official documentation&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> being at least 20 years old. &amp;nbsp;While some records still have the format documented above, others have evolved, and entirely new records have been introduced that are not documented anywhere.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">It’s important to understand though that CodeView is just a collection of records. &amp;nbsp;What happens when the user says “&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">show me the value of Foo&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">”? &amp;nbsp;The debugger has to &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">find&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> the record that describes Foo. &amp;nbsp;And now things start getting complicated. &amp;nbsp;What optimizations are enabled? &amp;nbsp;What version of the compiler was used? &amp;nbsp;(These could be important if there are certain ABI incompatibilities between different versions of the compiler, or as a hint when trying to reconstruct a backtrace in heavily optimized code, or if the stack has been smashed). &amp;nbsp;There are a billion other symbols in the program, how can we find the one named Foo without doing an exhaustive O(n) search? &amp;nbsp;How can we support incremental linking so that it doesn’t take a long time to re-generate debug info when only a small amount of code has actually changed? &amp;nbsp;How can we save space by de-duplicating strings that are used repeatedly? &amp;nbsp;Enter PDB.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">PDB (Program Database) is, as you might have guessed from the name, a database. &amp;nbsp;It &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">contains&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> CodeView but it also contains many other things that allow indexing of the CodeView records in various ways. &amp;nbsp;This allows for fast lookups of types and symbols by name or address, the philosophical equivalent of “tables” for individual input files, and various other things that are mostly invisible to you as a user but largely responsible for making the debugging experience on Windows so great. &amp;nbsp;But there’s a problem: While CodeView is at least kind-of documented, PDB is &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">completely undocumented&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">. &amp;nbsp;And it’s highly non-trivial.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 18pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">We’re Stuck (Or Are We?)&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Several years ago, we decided that the path forward was to abandon any hope of emitting CodeView and PDB, and instead focus on two things:&lt;/span>&lt;/div>&lt;ol style="margin-bottom: 0pt; margin-top: 0pt;">&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Make clang-cl emit DWARF debug information on Windows&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Port LLDB to Windows and teach it about the Windows ABI, which would be significantly easier than teaching Visual Studio and/or WinDbg to be able to interpret DWARF (assuming this is even possible at all, given that everything would have to be done strictly through the Visual Studio / WinDbg extensibility model)&lt;/span>&lt;/div>&lt;/li>&lt;/ol>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">In fact, I even wrote another &lt;/span>&lt;a href="http://blog.llvm.org/2015/01/lldb-is-coming-to-windows.html" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">blog post&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> about this very topic a little over 2 years ago. &amp;nbsp;So I got it to work, and I eventually got parts of LLDB working on Windows for simple debugging scenarios.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Unfortunately, it was beginning to become clear that we really needed PDB. &amp;nbsp;Our goal has always been to create as little friction as possible for developers who are embedded in the Windows ecosystem. &amp;nbsp;Tools like &lt;/span>&lt;a href="https://docs.microsoft.com/en-us/windows-hardware/test/wpt/windows-performance-analyzer" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">Windows Performance Analyzer&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> and vTune are very powerful and standard tools in engineers’ existing repertoires. &amp;nbsp;Organizations already have infrastructure in place to archive PDB files, and collect &amp;amp; analyze crash dumps. &amp;nbsp;Debugging with PDB is extremely responsive given that the debugger does not have to index symbols upon startup, since the indices are built into the file format. &amp;nbsp;And last but not least, tools such as WinDbg are already great for post-mortem debugging, and frankly many (perhaps even most) Windows developers will only give up the Visual Studio debugger when it is pried from their cold dead hands.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">I got some odd stares (to put it lightly) when I suggested that we just &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">ask&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> Microsoft if they would help us out. &amp;nbsp;But ultimately we did, and… they agreed! &amp;nbsp;This came in the form of some code uploaded to the &lt;/span>&lt;a href="https://github.com/Microsoft/microsoft-pdb" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">Microsoft Github&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> repo which we were on our own to figure out. &amp;nbsp;Although they were only able to upload a subset of their PDB code (meaning we had to do a lot of guessing and exploration, and the code didn’t compile either since half of it was missing), it filled in enough blanks that we were able to do the rest.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">After about a year and a half of studying this code, hacking away, studying the code some more, hacking away some more, etc, I’m proud to say that lld (the LLVM linker) can finally emit working PDBs. &amp;nbsp;All the basics like setting breakpoints by line, or by name, or viewing variables, or searching for symbols or types, everything works (minus bugs, of course).&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">For those of you who are interested in digging into the internals of a PDB, we also have been developing a tool for expressly this purpose. &amp;nbsp;It’s called &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">llvm-pdbutil&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> and is the spiritual counterpart to Microsoft’s own &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">cvdump&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> utility. &amp;nbsp;It can dump the internals of a PDB, convert a PDB to yaml and vice versa, find differences between two PDBs, and much more. &amp;nbsp;Brief documentation for llvm-pdbutil is &lt;/span>&lt;a href="https://llvm.org/docs/CommandGuide/llvm-pdbutil.html" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">here&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">, and a detailed description of the PDB file format internals are &lt;/span>&lt;a href="https://llvm.org/docs/PDB/index.html" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">here&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">, consisting of everything we’ve learned over the past 2 years (still a work in progress, as I have to divide my time between writing the documentation and actually making PDBs work).&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 18pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Bring on the Bugs!&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">So this is where you come in. &amp;nbsp;We’ve tested simple debugging scenarios with our PDBs, but we still consider this alpha in terms of debug info quality. &amp;nbsp;We’d love for you to try it out and report issues on our &lt;/span>&lt;a href="https://bugs.llvm.org/" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">bug tracker&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">. &amp;nbsp;To get you started, download the &lt;/span>&lt;a href="http://llvm.org/builds/" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">latest snapshot of clang for Windows&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">. &amp;nbsp;Here are two simple ways to test out this new functionality:&lt;/span>&lt;/div>&lt;ol style="margin-bottom: 0pt; margin-top: 0pt;">&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Have clang-cl invoke lld automatically&lt;/span>&lt;/div>&lt;/li>&lt;ol style="margin-bottom: 0pt; margin-top: 0pt;">&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: 'Courier New'; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: lower-alpha; text-decoration: none; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">clang-cl -fuse-ld=lld -Z7 -MTd hello.cpp&lt;/span>&lt;/div>&lt;/li>&lt;/ol>&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Invoke clang-cl and lld separately.&lt;/span>&lt;/div>&lt;/li>&lt;ol style="margin-bottom: 0pt; margin-top: 0pt;">&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: 'Courier New'; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: lower-alpha; text-decoration: none; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">clang-cl -c -Z7 -MTd -o hello.obj hello.cpp&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="background-color: transparent; color: black; font-family: 'Courier New'; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: lower-alpha; text-decoration: none; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">lld-link -debug hello.obj&lt;/span>&lt;/div>&lt;/li>&lt;/ol>&lt;/ol>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">We look forward to the onslaught of bug reports!&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">We would like to extend a very sincere and deep thanks to Microsoft for their help in getting the code uploaded to the github repository, as we would never have gotten this far without it.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">And to leave you with something to get you even more excited for the future, it's worth reiterating that all of this is done without a dependency on any windows specific api, dll, or library. &amp;nbsp;It's 100% portable. &amp;nbsp;Do I hear cross-compilation?&lt;/span>&lt;/div>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Zach Turner (on behalf of the the LLVM Windows Team)&lt;/span>&lt;/div></description></item><item><title>Devirtualization in LLVM and Clang</title><link>https://blog.llvm.org/2017/03/devirtualization-in-llvm-and-clang.html</link><pubDate>Fri, 10 Mar 2017 13:23:00 +0000</pubDate><guid>https://blog.llvm.org/2017/03/devirtualization-in-llvm-and-clang.html</guid><description>&lt;span style="background-color: transparent; color: black; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-weight: normal; text-indent: 10px; white-space: normal;">&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: small;">&lt;i>This blog post is part of a series of blog posts from students who were funded by the LLVM Foundation to attend the 2016 LLVM Developers' Meeting in San Jose, CA. Please visit the LLVM Foundation's&amp;nbsp;&lt;a href="http://llvm.org/foundation" style="color: purple; text-decoration: none;">webpage&lt;/a>&amp;nbsp;for more information on our Travel Grants program.&amp;nbsp;&lt;/i>&lt;/span>&lt;/span>&lt;/span>&lt;br />&lt;i style="text-indent: 10px;">&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">&lt;br />&lt;/span>&lt;/i>&lt;i style="text-indent: 10px;">&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">This post is from Piotr Padlewski on his work that he presented at the meeting:&lt;/span>&lt;/i>&lt;br />&lt;div>&lt;br />&lt;/div>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">&lt;span style="font-size: 11pt; white-space: pre-wrap;">This blogpost will show how C++ devirtualization is performed in current (4.0) clang and LLVM and also ongoing work on -fstrict-vtable-pointers features.&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">&lt;span style="white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="font-weight: normal; white-space: pre-wrap;">&lt;span style="font-size: large;">Devirtualization done by the frontend&lt;/span>&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">&lt;span style="font-size: 11pt; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="white-space: pre-wrap;">&lt;span style="font-family: inherit;">In order to transform a virtual call into a direct call, the frontend must be sure that there are no overrides of vfunction in the program or know the dynamic type of object. Compilation proceeds one translation unit at a time, so, barring LTO, there are only a few cases when the compiler may conclude that there are no overrides:&lt;/span>&lt;/span>&lt;/span>&lt;br />&lt;ul>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; white-space: pre-wrap;">either the class or virtual method is marked as final&lt;/span>&lt;/li>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; white-space: pre-wrap;">the class is defined in an anonymous namespace and has no deriving classes in its translation unit&lt;/span>&lt;/li>&lt;/ul>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">&lt;br />&lt;/span>&lt;span style="font-size: 11pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">The latter is more tricky for clang, which translates the source code in chunks on the fly (see: ASTProducer and ASTConsumer), so is not able to determine if there are any deriving classes later in the source. This could be dealt with in a couple of ways:&lt;/span>&lt;/span>&lt;br />&lt;ul>&lt;li>&lt;span style="white-space: pre-wrap;">&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">give up immediate generation&lt;/span>&lt;/span>&lt;/li>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; white-space: pre-wrap;">run data flow analysis in LLVM to find all the dynamic types passed to function, which has static linkage&lt;/span>&lt;/li>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; white-space: pre-wrap;">hope that every use of the virtual function, which is necessarily in the same translation unit, will be inlined by LLVM -- static linkage increases the chances of inlining&lt;/span>&lt;/li>&lt;/ul>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">&lt;br />&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: large; white-space: pre-wrap;">Store to load propagation in LLVM&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">&lt;span style="text-align: justify; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; text-align: justify; white-space: pre-wrap;">In order to devirtualize a virtual call we need:&lt;/span>&lt;br />&lt;ul>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; text-align: justify; white-space: pre-wrap;">value of vptr - which virtual table is pointed by it&lt;/span>&lt;/li>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; text-align: justify; white-space: pre-wrap;">value of vtable slot - which exact virtual function it is&lt;/span>&lt;/li>&lt;/ul>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; text-align: justify; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; text-align: justify; white-space: pre-wrap;">Because vtables are constant, the latter value is much easier to get when we have the value of vptr. The only thing we need is vtable definition, which can be achieved by using available_externally linkage.&lt;/span>&lt;br />&lt;span style="text-align: justify; white-space: pre-wrap;">&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">&lt;br />&lt;/span>&lt;/span>&lt;span style="text-align: justify; white-space: pre-wrap;">&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">In order to figure out the vptr value, we have to find the store to the same location that defines it. There are 2 analysis responsible for it:&lt;/span>&lt;/span>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;br />&lt;ul>&lt;li>&lt;span style="white-space: pre-wrap;">&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">MemDep (Memory Dependence Analysis) is a simple linear algorithm that for each quered instruction iterates through all instructions above and stops when first dependency is found. Because queries might be performed for each instruction we end up with a quadratic algorithm. Of course quadratic algorithms are not welcome in compilers, so MemDep can only check certain number of instructions.&lt;/span>&lt;/span>&lt;/li>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">Memory SSA on the other hand has constant complexity because of caching. To find out more, watch “Memory SSA in 5minutes” (&lt;/span>&lt;a href="https://www.youtube.com/watch?v=bdxWmryoHak" style="text-decoration: none;">&lt;span style="color: #1155cc; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">https://www.youtube.com/watch?v=bdxWmryoHak&lt;/span>&lt;/a>&lt;span style="vertical-align: baseline; white-space: pre-wrap;">). MemSSA is a pretty new analysis and it doesn’t have all the features MemDep has, therefore MemDep is still widely used.&lt;/span>&lt;/span>&lt;/li>&lt;/ul>&lt;/div>&lt;span style="text-align: justify; white-space: pre-wrap;">&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">The LLVM main pass that does store to load propagation is GVN - Global Value Numbering. &lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">&lt;br />&lt;/span>&lt;br />&lt;div>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: large; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: large; white-space: pre-wrap;">Finding vptr store&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">&lt;span style="font-family: inherit;">&lt;span style="font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-numeric: normal; font-variant-position: normal; text-align: justify; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/span>&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">&lt;span style="font-family: inherit;">&lt;span style="text-align: justify; vertical-align: baseline; white-space: pre-wrap;">In order to figure out the vptr value, we need to see store from constructor. To not rely on constructor's availability or inlining, we decided to use the &lt;/span>&lt;span style="font-weight: 700; text-align: justify; vertical-align: baseline; white-space: pre-wrap;">@llvm.assume intrinsic&lt;/span>&lt;span style="text-align: justify; vertical-align: baseline; white-space: pre-wrap;"> to indicate the value of vptr. Assume is akin to assert - optimizer seeing call to &lt;/span>&lt;span style="font-weight: 700; text-align: justify; vertical-align: baseline; white-space: pre-wrap;">@llvm.assume(i1 %b)&lt;/span>&lt;span style="text-align: justify; vertical-align: baseline; white-space: pre-wrap;"> can assume that %b is true after it. We can indicate vptr value by comparing it with the vtable and then call the @llvm.assume with the result of this comparison. &lt;/span>&lt;/span>&lt;/span>&lt;br />&lt;h2>&lt;b style="font-weight: normal;">&lt;span style="font-family: inherit;">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> call void @_ZN1AC1Ev(%struct.A* %a) ; call ctor&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;%3 = load {...} %a &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;; Load vptr&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;%4 = icmp eq %3, @_ZTV1A &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;; compare vptr with vtable&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span id="docs-internal-guid-190e6f9f-a52c-e721-c87c-026c2cef6ffc">&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;call void @llvm.assume(i1 %4)&lt;/span>&lt;/div>&lt;/span>&lt;/b>&lt;/h2>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: large; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: large; white-space: pre-wrap;">Calling multiple virtual functions&lt;/span>&lt;br />&lt;h2>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: small; font-weight: 400; text-align: justify; white-space: pre-wrap;">A non-inlined virtual call will clobber the vptr. In other words, optimizer will have to assume that vfunction might change the vptr in passed object. This sounds like something that never happens because vptr is “const”. The truth is that it is actually weaker than C++ const member, because it changes multiple times during construction of an object (every base type constructor or destructor must set vptrs). But vptr can't be changed during a virtual call, right? Well, what about that?&lt;/span>&lt;/h2>&lt;h2>&lt;b style="font-weight: normal;">&lt;span style="font-family: inherit;">&lt;div dir="ltr" style="font-family: inherit; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="background-color: transparent; color: black; font-size: 11pt; font-style: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">void&lt;/span>&lt;span style="background-color: transparent; color: black; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> A::foo() { // virtual &lt;/span>&lt;/div>&lt;div dir="ltr" style="font-family: inherit; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="background-color: transparent; color: black; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> static_assert(sizeof(A) == sizeof(Derived)); &lt;/span>&lt;/div>&lt;div dir="ltr" style="font-family: inherit; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="background-color: transparent; color: black; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="background-color: transparent; color: black; font-size: 11pt; font-style: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">new&lt;/span>&lt;span style="background-color: transparent; color: black; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">(&lt;/span>&lt;span style="background-color: transparent; color: black; font-size: 11pt; font-style: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">this&lt;/span>&lt;span style="background-color: transparent; color: black; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">) Derived; &lt;/span>&lt;/div>&lt;div dir="ltr" style="font-family: inherit; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="background-color: transparent; color: black; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">}&lt;/span>&lt;/div>&lt;div dir="ltr" style="font-family: inherit; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: inherit; font-size: small; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: small;">&lt;span style="white-space: pre-wrap;">This is call of placement new operator - it doesn’t allocate new memory, it just creates a new object in the provided location. So, by constructing a Derived object in the place where an object of type A was living, we change the vptr to point to Derived’s vtable. Is this code even legal? C++ Standard says yes.&lt;/span>&lt;span style="font-family: inherit;">&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: small; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="display: inline !important; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: small;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">However it turns out that if someone called &lt;/span>&lt;span style="background-color: transparent; color: black; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">foo&lt;/span>&lt;span style="background-color: transparent; color: black; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> 2 times (with the same object), the second call would be undefined behavior. Standard pretty much says that call or dereference of a pointer to an object whose lifetime has ended is UB, and because the standard agrees that nuking object from inside ends its lifetime, the second call is UB. Be aware that this is only because a zombie pointer is used for the second call. The pointer returned by placement new is considered alive, so performing calls on that pointer is valid. Note that we also silently used that fact with the use of assume.&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: large; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: large; white-space: pre-wrap;">(un)clobbering vptr&lt;/span>&lt;/div>&lt;/span>&lt;/b>&lt;/h2>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">&lt;span style="text-align: justify; vertical-align: baseline; white-space: pre-wrap;">We need to somehow say that vptr is invariant during its lifetime. We decided to introduce a new metadata for that purpose - !invariant.group. &lt;/span>&lt;span style="background-color: white; text-align: justify; vertical-align: baseline; white-space: pre-wrap;">The presence of the invariant.group metadata on the load/store tells the optimizer that every load and store to the same pointer operand within the same invariant group can be assumed to load or store the same value. With &lt;/span>&lt;span style="background-color: white; font-weight: 700; text-align: justify; vertical-align: baseline; white-space: pre-wrap;">-fstrict-vtable-pointers &lt;/span>&lt;span style="background-color: white; text-align: justify; vertical-align: baseline; white-space: pre-wrap;">Clang decorates vtable loads with invariant.group metadana coresponding to caller pointer type.&lt;/span>&lt;span style="text-align: justify; vertical-align: baseline; white-space: pre-wrap;">&amp;nbsp;&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">&lt;span style="text-align: justify; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="text-align: justify; white-space: pre-wrap;">We can enhance the load of virtual function (second load) by decorating it with !invariant.load, which is equivalent of saying “load from this location is always the same”, which is true because vtables never changes. This way we don’t rely on having the definition of vtable.&lt;/span>&lt;/span>&lt;br />&lt;h2>&lt;span style="font-family: inherit;">&lt;b style="font-weight: normal;">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: small; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Call like:&lt;/span>&lt;/div>&lt;div dir="ltr" style="font-family: inherit; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="background-color: white; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 10.5pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="font-family: inherit; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="background-color: white; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 10.5pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">void g(A *a) {&lt;/span>&lt;/div>&lt;div dir="ltr" style="font-family: inherit; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="background-color: white; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 10.5pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;&amp;nbsp;a-&amp;gt;foo();&lt;/span>&lt;/div>&lt;div dir="ltr" style="font-family: inherit; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="background-color: white; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 10.5pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;&amp;nbsp;a-&amp;gt;foo();&lt;/span>&lt;/div>&lt;div dir="ltr" style="font-family: inherit; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span id="docs-internal-guid-190e6f9f-a52d-5423-129c-37c542743a2b">&lt;/span>&lt;/div>&lt;div dir="ltr" style="font-family: inherit; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="background-color: white; color: black; font-family: &amp;quot;courier new&amp;quot;; font-size: 10.5pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">}&lt;/span>&lt;/div>&lt;div dir="ltr" style="font-family: inherit; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="background-color: white; color: black; font-size: 10.5pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="background-color: white; color: black; font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: small; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Will be translated to:&lt;/span>&lt;/div>&lt;div dir="ltr" style="font-family: inherit; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="background-color: white; color: black; font-size: 10.5pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;/b>&lt;/span>&lt;span id="docs-internal-guid-190e6f9f-a52d-9190-f702-f45ef470fbc2" style="font-weight: normal;">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">define void @function(%struct.A* %a) {&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;%1 = load {...} %a, !invariant.group !0&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;%2 = load {...} %1, !invariant.load !1&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;call void %2(%struct.A* %a)&lt;/span>&lt;/div>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;%3 = load {...} %a, !invariant.group !0&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;%4 = load {...} %4, !invariant.load !1&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;call void %4(%struct.A* %a)&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;ret void&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">}&lt;/span>&lt;/div>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">!0 = !{!"_ZTS1A"} ; mangled type name of A&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">!1 = !{}&lt;/span>&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;/span>&lt;span style="font-family: inherit;">&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: small; font-weight: 400; text-align: justify; white-space: pre-wrap;">And now by magic of GVN and MemDep:&lt;/span>&lt;b style="font-family: inherit; font-weight: normal;">&lt;br />&lt;/b>&lt;/span>&lt;span id="docs-internal-guid-190e6f9f-a52e-00ef-e518-921d8680d3b9" style="font-weight: normal;">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">define void @function(%struct.A* %a) {&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;%1 = load {...} %a, !invariant.group !0&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;%2 = load {...} %1, !invariant.load !1&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;call void %2(%struct.A* %a)&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;call void %2(%struct.A* %a)&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;ret void&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">}&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;courier new&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">&lt;b style="font-weight: normal;">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;">&lt;span style="background-color: transparent; color: black; font-size: small; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">With this, llvm-4.0 is be able to devirtualize function calls inside loops.&amp;nbsp;&lt;/span>&lt;br />&lt;span style="font-size: large; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="font-size: large; white-space: pre-wrap;">Barriers&lt;/span>&lt;/div>&lt;/b>&lt;/span>&lt;/h2>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-weight: 400; text-align: justify; white-space: pre-wrap;">In order to prevent the middle-end from finding load/store with the same !invariant.group metadata, that would come from construction/destruction of dead dynamic object, @llvm.invariant.group.barrier was introduced. It returns another pointer that aliases its argument but is considered different for the purposes of load/store invariant.group metadata. Optimizer won’t be able to figure out that returned pointer is the same because intrinsics don’t have a definition. Barrier must be inserted in all the places where the dynamic object changes:&lt;/span>&lt;br />&lt;ul>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; text-align: justify; white-space: pre-wrap;">constructors&lt;/span>&lt;/li>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; text-align: justify; white-space: pre-wrap;">destructors&lt;/span>&lt;/li>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; text-align: justify; white-space: pre-wrap;">placement new of dynamic object&lt;/span>&lt;/li>&lt;/ul>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: large;">&lt;span style="white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/span>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: large; white-space: pre-wrap;">Dealing with barriers&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">&lt;span style="background-color: transparent; color: black; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: inherit; font-size: medium;">&lt;br />&lt;/span>&lt;/span>&lt;span style="text-align: justify; white-space: pre-wrap;">Barriers hinder some other optimizations. Some ideas how it could be fixed:&lt;/span>&lt;/span>&lt;br />&lt;ul>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; text-align: justify; white-space: pre-wrap;">stripping invariant.group metadata and barriers just after devirtualization. Currently it is done before codegen. The problem is that most of the devirtualization comes from GVN, which also does most of the optimizations we would miss with barriers. GVN is expensive therefore it is run only once. It also might make less sense if we are in LTO mode, because that would limit the devirtualization in the link phase.&amp;nbsp;&lt;/span>&lt;/li>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; text-align: justify; white-space: pre-wrap;">teaching important passes to look through the barrier. This might be very tricky to preserve the semantics of barrier, but e.g. looking for dependency of load without invariant.group by jumping through the barrier to find a store without invariant.group, is likely to do the trick.&lt;/span>&lt;/li>&lt;li>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; text-align: justify; white-space: pre-wrap;">removing invariant.barrier when its argument comes from alloca and is never used etc.&lt;/span>&lt;/li>&lt;/ul>&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">&lt;span style="white-space: pre-wrap;">To find out more details about devirtualization check my talk (&lt;/span>&lt;a href="http://llvm.org/devmtg/2016-11/#talk6" style="white-space: pre-wrap;">http://llvm.org/devmtg/2016-11/#talk6&lt;/a>&lt;span style="white-space: pre-wrap;">) from LLVM Dev Meeting 2016.&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;">&lt;span style="font-size: 11pt; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/span>&lt;span style="color: #434343; font-weight: 400; white-space: pre-wrap;">&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: large;">About author&lt;/span>&lt;/span>&lt;br />&lt;h2>&lt;span style="font-weight: normal;">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">Undergraduate student at University of Warsaw, currently working on C++ static analysis in IIIT.&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;/span>&lt;/h2>&lt;/div></description></item><item><title>Some news about apt.llvm.org</title><link>https://blog.llvm.org/2017/03/some-news-about-aptllvmorg.html</link><pubDate>Mon, 06 Mar 2017 12:59:00 +0000</pubDate><guid>https://blog.llvm.org/2017/03/some-news-about-aptllvmorg.html</guid><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on">&lt;a href="http://apt.llvm.org/">apt.llvm.org&lt;/a> provides Debian and Ubuntu repositories for every maintained version of these distributions. LLVM, Clang, clang extra tools, compiler-rt, polly, LLDB and LLD packages are generated for the stable, stabilization and development branches.&lt;br />&lt;br />As it seems that we have more and more users of these packages, I would like to share an update about various recent changes.&lt;br />&lt;h3 style="text-align: left;">New features&lt;/h3>&lt;h4 style="text-align: left;">LLD&lt;br />&lt;span style="font-weight: normal;">First, the cool new stuff : lld is now proposed and built for i386/amd64 on all Debian and Ubuntu supported versions. The test suite is also executed and the &lt;a href="http://llvm.org/reports/coverage/">coverage results&lt;/a> are great. &lt;/span>&lt;/h4>&lt;h4 style="text-align: left;">4.0&lt;br />&lt;span style="font-weight: normal;">Then, following the branching for the 4.0 release, I created new repositories to propose this release.&lt;/span>&lt;br />&lt;span style="font-weight: normal;">For example, for Debian stable, just add the following in &lt;i>/etc/apt/sources.list.d/llvm.list&lt;/i>&lt;/span>&lt;/h4>&lt;blockquote class="tr_bq">&lt;i>&lt;span style="font-weight: normal;">deb http://apt.llvm.org/jessie/ llvm-toolchain-jessie-4.0 main&lt;/span>&lt;/i>&lt;span style="font-weight: normal;">&lt;i>&lt;br />&amp;nbsp; deb-src http://apt.llvm.org/jessie/ llvm-toolchain-jessie main&lt;/i>&lt;/span>&lt;/blockquote>&lt;br />&lt;h4 style="text-align: left;">llvm-defaults&lt;br />&lt;span style="font-weight: normal;">Obviously, the trunk is now 5.0. If llvm-defaults is used, clang, lldb and other meta packages will be automatically updated to this version.&lt;/span>&lt;br />&lt;span style="font-weight: normal;">As a consequence and also because the branches are dead, 3.7 and 3.8 jobs have been disabled. Please note that both repositories are still available on apt.llvm.org and won't be removed.&lt;/span>&lt;/h4>&lt;h4 style="text-align: left;">Zesty: New Ubuntu&lt;br />&lt;span style="font-weight: normal;">Packages for the next Ubuntu 17.04 (zesty) are also generated for 3.9, 4.0 and 5.0.&lt;/span>&lt;/h4>&lt;h4 style="text-align: left;">libfuzzer&lt;br />&lt;span style="font-weight: normal;">It has been implemented a few months ago but not clearly communicated. &lt;a href="http://llvm.org/docs/LibFuzzer.html">libfuzzer&lt;/a> has also its own packages: libfuzzer-X.Y-dev (example: &lt;i>libfuzzer-3.9-dev,&lt;/i> &lt;i>libfuzzer-4.0-dev&lt;/i> or &lt;i>libfuzzer-5.0-dev&lt;/i>).&lt;/span>&lt;/h4>&lt;br />&lt;h3 style="text-align: left;">Changes in the infrastructure&lt;/h3>&lt;br />In order to support the load, I started to use new blades that Google (thanks again to Nick Lewycky) sponsored for an initiative that I was running for Debian and &lt;a href="https://www.irill.org/">IRILL&lt;/a>. The 6 new blades removed all the wait time. With a new salt configuration, I automated the deployment of the slaves. In case the load increases again, we will have access to more blades.&lt;br />&lt;br />I also took the time to fix some long ongoing issues:&lt;br />&lt;ul style="text-align: left;">&lt;li>all repositories are signed and verified that they are&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li>&lt;li>&lt;i>i386&lt;/i> and &lt;i>amd64&lt;/i> packages are now uploaded at once instead of being uploaded separately. This was causing checksum error when one of the two architectures built correctly and the second was failing (ex: test failing)&lt;/li>&lt;/ul>Last but not least, the &lt;a href="http://llvm.org/reports/coverage/">code coverage results&lt;/a> are produced in a more reliable manner.&lt;br />&lt;br />&lt;br />&lt;h3>More information about the implementation and services.&lt;/h3>As what is shipped on apt.llvm.org is exactly the same as in Debian and Ubuntu, packaging files are stored on the &lt;a href="https://anonscm.debian.org/viewvc/pkg-llvm/llvm-toolchain/branches/">Debian subversion server.&lt;/a>&lt;br />&lt;br />A &lt;a href="http://llvm-jenkins.debian.net/">Jenkins instance&lt;/a> is in charge of the orchestration of the whole build infrastructure.&lt;br />&lt;br />The trunk packages are built twice a day for every Debian and Ubuntu packages. Branches (3.9 and 4.0 currently) are rebuilt only when the - trigger job found a change. &lt;br />&lt;br />In both case, the Jenkins source job will checkout the Debian SVN branches for their version, checkout/update LLVM/clang/etc repositories and repack everything to create the source tarballs and Debian files (dsc, etc).The completion of job will trigger the binaries job to start. These jobs, thanks to &lt;a href="https://jenkins-debian-glue.org/">Debian Jenkins glue&lt;/a> will create or update Debian/Ubuntu versions.&lt;br />&lt;br />Then builds are done the usual way through pbuilder for both i386 and amd64. All the test suites are going to be executed. If any LLVM test is failing on i386 or amd64, the whole build will fail. If both builds and the LLVM testsuite are successful, the sync job will start and rsync packages to the LLVM server to be replicated on the CDN. If one or both builds fail, a notification is sent to the administrator.&lt;br />&lt;br />Some Debian static analysis (&lt;a href="https://packages.debian.org/stretch/lintian">lintian&lt;/a>) are executed on the packages to prevent some packaging errors. From time to time, some interesting issues are found.&lt;br />&lt;br />In parallel, some binary builds have some special hooks like &lt;a href="https://scan.coverity.com/projects/llvm">Coverity&lt;/a>, &lt;a href="http://llvm.org/reports/coverage/">code coverage&lt;/a> or installation of more recent versions of gcc for Ubuntu precise.&lt;br />&lt;br />&lt;h3 style="text-align: left;">Report bugs&lt;/h3>&lt;div style="text-align: left;">&lt;span style="font-weight: normal;">Bugs can be reported on the &lt;a href="https://bugs.llvm.org//enter_bug.cgi?product=Packaging&amp;amp;component=deb%20packages">bugzilla of the LLVM project&lt;/a> in the product "Packaging" and the component "deb packages".&lt;/span>&lt;/div>&lt;div style="text-align: left;">&lt;span style="font-weight: normal;">&amp;nbsp;&lt;/span>&amp;nbsp;&lt;/div>&lt;h3 style="text-align: left;">Common issues&lt;/h3>&lt;div style="text-align: left;">Because packaging quickly moving projects like LLVM or clang, in some cases, this can be challenging to follow the rhythm in particular with regard to tests. For Debian unstable or the latest version of Ubuntu, the matrix is complexified by new versions of the basic pieces of the operating system like gcc/g++ or libtstdc++.&lt;br />&lt;br />This is also not uncommon that some tests are being ignored in the process.&lt;/div>&lt;h3 style="text-align: left;">How to help&lt;/h3>&lt;div style="text-align: left;">&lt;br />Some &lt;a href="https://bugs.debian.org/cgi-bin/pkgreport.cgi?include=originator%3Asylvestre;tag=newcomer">new comers bugs&lt;/a> are available. As an example:&lt;br />&lt;ul style="text-align: left;">&lt;li>&lt;a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=751789">Move the compiler-rt libraries&lt;/a> into a specific packages to simplify their usage by other packages &lt;/li>&lt;li>&lt;a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=813673">Ship libc++&lt;/a> as part of llvm-toolchain packages&lt;/li>&lt;li>&lt;a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=813672">Ship openmp library&lt;/a> as part of llvm-toolchain packages&lt;/li>&lt;li>&lt;a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=827185">Full bootstrap of llvm-toolchain&lt;/a> (use a clang built during the process)&lt;/li>&lt;li>... &lt;/li>&lt;/ul>Related to all this, a Google Summer of Code 2017 under the LLVM umbrella has been proposed: &lt;a href="http://llvm.org/OpenProjects.html#apt">Integrate libc++ and OpenMP in apt.llvm.org&lt;/a>&lt;br />&lt;br />Help is also needed to keep track of the new test failures and get them fixed upstream. For example, a few tests have been marked as &lt;i>expected to fail&lt;/i> to avoid crashes.&lt;/div>&lt;/div></description></item><item><title>2016 LLVM Developers' Meeting - Experience from Johannes Doerfert, Travel Grant Recipient</title><link>https://blog.llvm.org/2017/02/this-blog-post-is-part-of-series-of.html</link><pubDate>Tue, 21 Feb 2017 23:26:00 +0000</pubDate><guid>https://blog.llvm.org/2017/02/this-blog-post-is-part-of-series-of.html</guid><description>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">&lt;i>This blog post is part of a series of blog posts from students who were funded by the LLVM Foundation to attend the 2016 LLVM Developers' Meeting in San Jose, CA. Please visit the LLVM Foundation's &lt;a href="http://llvm.org/foundation">webpage&lt;/a> for more information on our Travel Grants program.&lt;/i>&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">&lt;i>&lt;br />&lt;/i>&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">&lt;i>This post is from Johannes Doerfert:&lt;/i>&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">2016 was my third time attending the US LLVM developers meeting and for&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">the third year in a row I was impressed by the quality of the talks, the&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">organization and the diversity of attendees. The hands on experiences&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">that are presented, combined with innovative ideas and cutting edge&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">research makes it a perfect venue for me as a PhD student. The honest&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">interest in the presented topics and the lively discussions that include&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">students, professors and industry people are two of the many things that&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">I experienced the strongest at these developer meetings.&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">&lt;br />&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">For the last two years I was mainly attending as a Polly developer that&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">talked about new features and possible applications of Polly. This year&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">however my roles were different. First, I was attending as part of the&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">organization team of the European LLVM developers meeting 2017 [0]&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">together with my colleagues Tina Jung and Simon Moll. In this capacity I&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">answered questions about the venue (Saarbruecken, Germany [1,2]) and the&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">alterations in contrast to prior meetings. Though, more importantly, I&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">advertised the meeting to core developers that usually do not attend the&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">European version. Second on my agenda was the BoF on a parallel&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">extension to the LLVM-IR which I organized with Simon Moll. In this BoF,&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">but also during the preparation discussion on the mailing list [3], we&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">tried to collect motivating examples, requirements as well as known&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">challenges for a parallel extension to LLVM. These insights will be used&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">to draft a proposal that can be discussed in the community.&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">&lt;br />&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">Finally, I attended as a 4th year PhD student who is interested in&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">contributing his work to the LLVM project (not only Polly). As my c&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">urrent research required a flexible polyhedral value (and iteration&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">space) analysis, I used the opportunity to implement one with an&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">interface similar to scalar evolution. The feedback I received on this&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">topic was strictly positive. I will soon post a first version of this&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">standalone analysis and start a public discussion. Since I hope to&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">finish my studies at some (not too distant) point in time, I seized the&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">opportunity to inquire about potential options for the time after my&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">PhD.&lt;/span>&lt;br />&lt;br style="font-family: Helvetica; font-size: 12px;" />&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">As a final note I would like to thank the LLVM Foundation for their&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">student travel grant that allowed me to attend the meeting in the first&amp;nbsp;&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">place.&lt;/span>&lt;br />&lt;br style="font-family: Helvetica; font-size: 12px;" />&lt;br style="font-family: Helvetica; font-size: 12px;" />&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">[0]&amp;nbsp;&lt;/span>&lt;a href="http://llvm.org/devmtg/2017-03/" style="font-family: Helvetica; font-size: 12px;">http://llvm.org/devmtg/2017-03/&lt;/a>&lt;br />&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">[1]&amp;nbsp;&lt;/span>&lt;a href="http://sic.saarland/" style="font-family: Helvetica; font-size: 12px;">http://sic.saarland/&lt;/a>&lt;br />&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">[2]&amp;nbsp;&lt;/span>&lt;a href="https://en.wikipedia.org/wiki/Saarbr%C3%BCcken" style="font-family: Helvetica; font-size: 12px;">https://en.wikipedia.org/wiki/Saarbr%C3%BCcken&lt;/a>&lt;br />&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">[3]&amp;nbsp;&lt;/span>&lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-October/106051.html" style="font-family: Helvetica; font-size: 12px;">http://lists.llvm.org/pipermail/llvm-dev/2016-October/106051.html&lt;/a></description></item><item><title>LLVM's New Versioning Scheme</title><link>https://blog.llvm.org/2016/12/llvms-new-versioning-scheme.html</link><pubDate>Wed, 14 Dec 2016 13:25:00 +0000</pubDate><guid>https://blog.llvm.org/2016/12/llvms-new-versioning-scheme.html</guid><description>Historically, LLVM's major releases always added "0.1" to the version number, producing major versions like 3.8, 3.9, and 4.0 (expected by March 2017). With our next release though, we're changing this. &amp;nbsp;The LLVM version number will now increase by "1.0" with every major release, which means that the first major release after LLVM 4.0 will be LLVM 5.0 (expected September 2017).&lt;br />We believe that this approach will provide a simpler and more standard approach to versioning.&lt;br />&lt;a name='more'>&lt;/a>LLVM’s version number (also shared by many of its sub-projects, such as Clang, LLD, etc.) consists of three parts: &lt;i>major&lt;/i>.&lt;i>minor&lt;/i>.&lt;i>patch&lt;/i>. The community produces a new release every six months, with "patch" releases (also known as "dot" or "stable" releases) containing bug fixes in between.&lt;br />Until now, the six-monthly releases would cause the &lt;i>minor&lt;/i> component of the version to be incremented. Every five years, after &lt;i>minor&lt;/i> reached 9, a more major release would occur, including some breaking changes: &lt;a href="http://lists.llvm.org/pipermail/llvm-announce/2007-May/000023.html">2.0&lt;/a> introduced the bitcode format, &lt;a href="http://lists.llvm.org/pipermail/llvm-announce/2011-December/000039.html">3.0&lt;/a> a &lt;a href="http://blog.llvm.org/2011/11/llvm-30-type-system-rewrite.html">type system rewrite&lt;/a>.&lt;br />During &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101044.html">the discussions&lt;/a> about what to call the release after 3.9, it was pointed out that since our releases are time-based rather than feature-based, the distinction between major and minor releases seems arbitrary. Further, every release is also API breaking, so by the principles of &lt;a href="http://semver.org/">semantic versioning&lt;/a>, we should be incrementing the major version number.&lt;br />We decided that going forward, &lt;b>every release on the six-month cycle will be a major release&lt;/b>. Patch releases will increment the &lt;i>patch&lt;/i> component as before (producing versions like 5.0.1), and the &lt;i>minor&lt;/i> component will stay at zero since no minor releases will be made.&lt;br />&lt;h3>Bitcode Compatibility&lt;/h3>Before LLVM 4.0.0, the &lt;a href="http://llvm.org/docs/DeveloperPolicy.html">Developer Policy&lt;/a> specified that bitcode produced by LLVM would be readable by the next versions up to and including the next major release. The new version of the Developer Policy instead specifies that LLVM will currently load any bitcode produced by version 3.0 or later. When developers decide to drop support for some old bitcode feature, the policy will be updated.&lt;br />&lt;h3>API Compatibility&lt;/h3>Nothing has changed. As before, patch releases are API and ABI compatible with the main releases, and the C API is "&lt;a href="http://llvm.org/docs/DeveloperPolicy.html#c-api-changes">best effort&lt;/a>" for stability, but besides that, LLVM’s API changes between releases. &lt;br />&lt;h3>What About the Minor Version?&lt;/h3>Since the &lt;i>minor&lt;/i> version is expected to always be zero, why not drop it and just use &lt;i>major&lt;/i>.&lt;i>patch&lt;/i> as the version number?&lt;br />Dropping the minor component from the middle of the version string would introduce ambiguity: whether to interpret &lt;i>x&lt;/i>.&lt;i>y&lt;/i> as &lt;i>major&lt;/i>.&lt;i>minor&lt;/i> or &lt;i>major&lt;/i>.&lt;i>patch&lt;/i> would then depend on the value of &lt;i>x&lt;/i>.&lt;br />The version numbers are also exposed through various APIs, such as LLVM's &lt;span style="font-family: monospace;">llvm-config.h&lt;/span> and Clang's &lt;span style="font-family: monospace;">__clang_minor__&lt;/span> preprocessor macro. Removing the &lt;i>minor&lt;/i> component from these APIs would break a lot of existing code.&lt;br />Going forward, since the &lt;i>minor&lt;/i> number will be zero and patch releases are compatible, I expect we will generally refer to versions simply by their &lt;i>major&lt;/i> number and treat the rest of the version string as details (just as Chromium 55 might really be 55.0.2883.76). Future versions of LLVM and Clang can generally be referred to simply as "LLVM 4" or "Clang 5".</description></item><item><title>Announcing the next LLVM Foundation Board of Directors</title><link>https://blog.llvm.org/2016-09-12-announcing-next-llvm-foundation-board.html</link><pubDate>Mon, 12 Sep 2016 09:55:00 +0000</pubDate><guid>https://blog.llvm.org/2016-09-12-announcing-next-llvm-foundation-board.html</guid><description>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">The LLVM Foundation is pleased to announce its new Board of Directors:&lt;/span>&lt;/div>&lt;b id="docs-internal-guid-6038a77a-1083-f85c-21ca-6c75ed972326" style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Chandler Carruth&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Hal Finkel&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Arnaud de Grandmaison&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">David Kipping&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Anton Korobeynikov&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Tanya Lattner&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Chris Lattner&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">John Regehr&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Three new members and five continuing members were elected to the eight person board. The new board consists of individuals from corporations and from the academic and scientific communities. They also represent various geographical groups of the LLVM community. All board members are dedicated and passionate about the programs of the LLVM Foundation and growing and supporting the LLVM community. &lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">When voting on new board members, we took into consideration all contributions (past and present) and current involvement in the LLVM community. We also tried to create a balanced board of individuals from a wide range of backgrounds and locations to provide a voice to as many groups within the LLVM community. &lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">We want to thank everyone who applied as we had many strong applications. As the programs of the LLVM Foundation grow we will be relying on volunteers to help us reach success. Please join our &lt;a href="http://lists.llvm.org/cgi-bin/mailman/listinfo/llvm-foundation">mailing list&lt;/a> to be informed of volunteer opportunities.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">About the board of directors (listed alphabetically by last name):&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Chandler Carruth&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> has been an active contributor to LLVM since 2007. Over the years, he has has worked on LLVM’s memory model and atomics, Clang’s C++ support, GCC-compatible driver, initial profile-aware code layout optimization pass, pass manager, IPO infrastructure, and much more. He is the current code owner of inlining and SSA formation.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">In addition to his numerous technical contributions, Chandler has led Google’s LLVM efforts since 2010 and shepherded a number of new efforts that have positively and significantly impacted the LLVM project. These new efforts include things such as adding C++ modules to Clang, adding address and other sanitizers to Clang/LLVM, making Clang compatible with MSVC and available to the Windows C++ developer community, and much more.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Chandler works at Google Inc. as a technical lead for their C++ developer platform and has served on the LLVM Foundation board of directors for the last 2 years.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Hal Finkel &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">has been an active contributor to the LLVM project since 2011. He is the code owner for the PowerPC target, alias-analysis infrastructure, loop re-roller and the basic-block vectorizer. &amp;nbsp;&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">In addition to his numerous technical contributions, Hal has chaired the LLVM in HPC workshop, which is held in conjunction with Super Computing (SC), for the last 3 years. This workshop provides a venue for the presentation of peer-reviewed HPC-related researching LLVM from both industry and academia. He has also been involved in organizing an LLVM-themed BoF session at SC and LLVM socials in Austin.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Hal is Lead for Compiler Technology and Programming Languages at Argonne National Laboratory’s Leadership Computing Facility. &lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Arnaud de Grandmaison &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">has been hacking on LLVM projects since 2008. In addition to his open source contributions, he has worked for many years on private out-of-tree LLVM-based projects at Parrot, DiBcom, or ARM. He has also been a leader in the European LLVM community by organizing the EuroLLVM Developers’ meeting, Paris socials, and chaired or participated in numerous program committees for the LLVM Developers’ Meetings and other LLVM related conferences.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Arnaud has attended numerous LLVM Developers’ meetings and volunteered as moderator or presented as well. He also moderates several LLVM mailing lists. &amp;nbsp;Arnaud is also very involved in community wide discussions and decisions such as re-licensing and code of conduct.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Arnaud is a Principal Engineer at ARM.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">David Kipping &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">has been involved with the LLVM project since 2010. He has been a key organizer and supporter of many LLVM community events such as the US and European LLVM Developers’ Meetings. He has served on many of the program committees for these events. &lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">David has worked hard to advance the adoption of LLVM at Qualcomm and other companies. One such example of his efforts is the LLVM track he created at the 2011 Linux Collaboration summit. He has over 30 years experience in open source and developer tools including working on C++ at Borland. &lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">David has served on the board of directors for the last 2 years and has held the officer position of treasurer. The treasurer is a time demanding position in that he supports the day to day operation of the foundation, balancing the books, and generates monthly treasurer reports. &lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">David is Director of Product Management at Qualcomm and has served on the LLVM Foundation board of directors for the last 2 years&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Anton Korobeynikov &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">has been an active contributor to the LLVM project since 2006. Over the years, he has numerous technical contributions to areas including Windows support, ELF features, debug info, exception handling, and backends such as ARM and x86. He was the original author of the MSP430 and original System Z backend. &lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">In addition to his technical contributions, Anton has maintained LLVM’s participation in Google Summer of Code by managing applications, deadlines, and overall organization. He also supports the LLVM infrastructure and has been on numerous program committees for the LLVM Developers’ Meetings (both US and EuroLLVM). &lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Anton is currently an associate professor at the Saint Petersburg State University and has served on the LLVM Foundation board of directors for the last 2 years. &lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Tanya Lattner &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">has been involved in the LLVM project for over 14 years. She began as a graduate student who wrote her master's thesis using LLVM, and continued on using and extending LLVM technologies at various jobs during her career as a compiler engineer. &amp;nbsp;&amp;nbsp;&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Tanya has been organizing the US LLVM Developers’ meeting since 2008 and attended every developer meeting. She was the LLVM release manager for 3 years, moderates the LLVM mailing lists, and helps administer the LLVM infrastructure servers, mailing lists, bugzilla, etc. Tanya has also been on the program committee for the US LLVM Developers’ meeting (4 years) and the EuroLLVM Developers’ Meeting (1 year). &lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">With the support of the initial board of directors, Tanya created the LLVM Foundation, defined its charitable and education mission, and worked to get 501(c)(3) status. &lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Tanya is the Chief Operating Officer and has served as the President of the LLVM Foundation board for the last 2 years.&lt;/span>&lt;/div>&lt;br />&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Chris Lattner &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">is well known as the founder for the LLVM project and has a lengthy history of technical contributions to the project over the years. &amp;nbsp;He drove much of the early implementation, architecture, and design of LLVM and Clang.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Chris has attended every LLVM Developers’ meeting, and presented at the majority. He helped drive the conception and incorporation of the LLVM Foundation, and has served as Secretary of the board for the last 2 years. Chris also grants commit access to the LLVM Project, moderates mailing lists, moderates and edits the LLVM blog, and drives important non-technical discussions and policy decisions related to the LLVM project. &lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Chris manages the Developer Tools department at Apple Inc and has served on the LLVM Foundation board of directors for the last 2 years.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">John Regehr &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">has been involved in LLVM for a number of years. As a professor of computer science at the University of Utah, his research specializes in compiler correctness and undefined behavior. He is well known within the LLVM community for the hundreds of bug reports his group has reported to LLVM/Clang.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">John was a project lead for IOC, a Clang based integer overflow checker that eventually became the basis for the integer parts of UBSan. He was also the primary developer of C-Reduce which utilizes Clang as a library and is often used as a test case reducer for compiler issues.&lt;/span>&lt;/div>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">In addition to his technical contributions, John has served on several LLVM-related program committees. He also has a widely read blog about LLVM and other compiler-related issues (&lt;/span>&lt;a href="http://blog.regehr.org/" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">Embedded in Academia&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">).&lt;/span>&lt;/div></description></item><item><title>LLVM Weekly - #130, Jun 27th 2016</title><link>https://blog.llvm.org/2016/06/llvm-weekly-130-jun-27th-2016.html</link><pubDate>Mon, 27 Jun 2016 08:00:00 +0000</pubDate><guid>https://blog.llvm.org/2016/06/llvm-weekly-130-jun-27th-2016.html</guid><description>Welcome to the one hundred and thirtieth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org/">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org/">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="mailto:asb@asbradbury.org">asb@asbradbury.org&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;br />If you're reading this on blog.llvm.org then do note this is LAST TIME it will be cross-posted there directly. There is a great effort underway to increase the content on the LLVM blog, and unfortunately LLVM Weekly has the effect of drowning out this content. As ever, you can head to &lt;a href="http://llvmweekly.org/">http://llvmweekly.org&lt;/a>, subscribe to get it by email, or subscribe to the &lt;a href="http://llvmweekly.org/rss.xml">RSS feed&lt;/a>.&lt;br />The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/130">can be found here at llvmweekly.org&lt;/a>. &lt;br />&lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>After recently being taken down due to excessive resource usage, the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101500.html">LLVM apt repositories are now back&lt;/a>.&lt;br />A detailed &lt;a href="http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html">introduction to ThinLTO&lt;/a> has been published on the LLVM blog. This covers the background, design, current status, and usage information for ThinLTO.&lt;br />A post on Reddit gives a summary of &lt;a href="https://www.reddit.com/r/cpp/comments/4pmlpz/">notable language features voted into the C++17 working draft at the Oulu meeting&lt;/a>.&lt;br />&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>Sanjoy Das has written an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101522.html">strong GC references in LLVM&lt;/a>. The motivating case for this proposal is supporting a precise, relocating garbage collector.&lt;br /> &lt;/li>&lt;li>LLVM version 3.8.1-final &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101458.html">has been tagged&lt;/a>.&lt;br /> &lt;/li>&lt;li>The Google Summer of Code mid-terms have snuck up on us already. The participating students have posted to the mailing lists with a summary of their work so far:&lt;br /> &lt;ul>&lt;li>&lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2016-June/049547.html">Finding and reporting bugs caused by copy and paste&lt;/a>&lt;/li>&lt;li>&lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2016-June/049563.html">Enabling LLVM's self-hosted modules builds using libstdc++&lt;/a>&lt;/li>&lt;li>&lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101237.html">Capture tracking improvements&lt;/a>&lt;/li>&lt;li>&lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101370.html">Improvement of vectorization process in Polly&lt;/a>&lt;/li>&lt;li>&lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101414.html">Better alias analysis by default&lt;/a>&lt;/li>&lt;li>&lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101057.html">Interprocedural register allocation&lt;/a>&lt;/li>&lt;li>&lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101314.html">Polly as an analysis pass&lt;/a>&lt;/li>&lt;li>&lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101419.html">Enabling polyhedral optimisations in Julia&lt;/a>&lt;/li>&lt;/ul>&lt;/li>&lt;li>Vivek Pandya wrote the mailing list seeking &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101319.html">advice on adding a new calling convention for interprocedural register allocation&lt;/a>. Matthias Braun &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101338.html">summarised some follow-up discussion&lt;/a>.&lt;br /> &lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>The new representation for control-flow integrity and virtual call metadata has landed. The commit message further details the problems this change addresses. &lt;a href="http://reviews.llvm.org/rL273729">r273729&lt;/a>.&lt;br /> &lt;/li>&lt;li>The &lt;code>llvm.type.checked.load&lt;/code> intrinsic was added. It loads a function pointer from a virtual table pointer using type metadata. &lt;a href="http://reviews.llvm.org/rL273576">r273576&lt;/a>.&lt;br /> &lt;/li>&lt;li>As part of the work on CFL-AA, interprocedural function summaries were added. These avoid recomputation for many properties of a function. &lt;a href="http://reviews.llvm.org/rL273219">r273219&lt;/a>, &lt;a href="http://reviews.llvm.org/rL273596">r273596&lt;/a>.&lt;br /> &lt;/li>&lt;li>MemorySSA gained new APIs for PHI creation and MemoryAccess creation. &lt;a href="http://reviews.llvm.org/rL273295">r273295&lt;/a>.&lt;br /> &lt;/li>&lt;li>Metadata attachments are now allowed for declarations. &lt;a href="http://reviews.llvm.org/rL273336">r273336&lt;/a>.&lt;br /> &lt;/li>&lt;li>A new runtimes directory was added to the LLVM tree. &lt;a href="http://reviews.llvm.org/rL273620">r273620&lt;/a>.&lt;br /> &lt;/li>&lt;li>LLVM's dynamic loader gained basic support for COFF ARM. &lt;a href="http://reviews.llvm.org/rL273682">r273682&lt;/a>.&lt;br /> &lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;code>constexpr if&lt;/code> support has been added to Clang. &lt;a href="http://reviews.llvm.org/rL273602">r273602&lt;/a>.&lt;br /> &lt;/li>&lt;li>clang-tidy has a new &lt;code>modernize-use-emplace&lt;/code> check that will replace calls of &lt;code>push_back&lt;/code> to &lt;code>emplace_back&lt;/code>. &lt;a href="http://reviews.llvm.org/rL273275">r273275&lt;/a>.&lt;br /> &lt;/li>&lt;li>The CMake build system for Clang gained a &lt;code>ENABLE_X86_RELAX_RELOCATIONS&lt;/code> option. &lt;a href="http://reviews.llvm.org/rL273224">r273224&lt;/a>.&lt;br /> &lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>Basic support for versioned symbols was added to LLD. &lt;a href="http://reviews.llvm.org/rL273143">r273143&lt;/a>.&lt;br /> &lt;/li>&lt;li>LLD now handles both single and double dashes for all options. &lt;a href="http://reviews.llvm.org/rL273256">r273256&lt;/a>.&lt;br /> &lt;/li>&lt;/ul></description></item><item><title>ThinLTO: Scalable and Incremental LTO</title><link>https://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html</link><pubDate>Tue, 21 Jun 2016 06:01:00 +0000</pubDate><guid>https://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html</guid><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on">&lt;div style="text-align: left;">ThinLTO was first introduced at &lt;a href="http://llvm.org/devmtg/2015-04/slides/ThinLTO_EuroLLVM2015.pdf">EuroLLVM in 2015&lt;/a>, with results shown from a prototype implementation within clang and LLVM. Since then, the design was reviewed through several RFCs, it has been implemented in LLVM (for gold and libLTO), and tuning is ongoing. Results already show good performance for a number of benchmarks, with compile time close to a non-LTO build.&lt;/div>&lt;br />&lt;div style="text-align: left;">This blog post covers the background, design, current status and usage information.&lt;/div>&lt;br />&lt;div style="text-align: left;">This post was written by Teresa Johnson, Mehdi Amini and David Li.&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;/div>&lt;h3>LTO Background and Motivation&lt;/h3>&lt;div style="text-align: left;">LTO (Link Time Optimization) is a method for achieving better runtime performance through whole-program analysis and cross-module optimization. During the compile phase, clang will emit LLVM bitcode &amp;nbsp;instead of an object file. The linker recognizes these bitcode files and invokes LLVM during the link to generate the final objects that will constitute the executable. The LLVM implementation loads all input bitcode files and merges them together to produce a single Module. The interprocedural analyses (IPA) as well as the interprocedural optimizations (IPO) are performed serially on this monolithic Module.&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;br />&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="https://4.bp.blogspot.com/--p7jPdTVaxI/V19BygsO0aI/AAAAAAAAMhg/aJSiVLqd30AFDXPyQqZkQFaKPohsfNHwgCKgB/s1600/Screen%2BShot%2B2016-06-13%2Bat%2B4.28.25%2BPM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" height="292" src="https://4.bp.blogspot.com/--p7jPdTVaxI/V19BygsO0aI/AAAAAAAAMhg/aJSiVLqd30AFDXPyQqZkQFaKPohsfNHwgCKgB/s640/Screen%2BShot%2B2016-06-13%2Bat%2B4.28.25%2BPM.png" width="640" />&lt;/a>&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;br />&lt;/div>&lt;br />&lt;div style="text-align: left;">What this means in practice is that LTO often requires a large amount of memory (to hold all IR at once) and is very slow. And with debug information enabled via -g, the size of the IR and the resulting memory requirements are significantly larger. Even without debug information, this is prohibitive for very large applications, or when compiling on memory-constrained machines. It also makes incremental builds less effective, as everything from the LTO step on must be re-executed when any input source changes.&lt;/div>&lt;h3 style="text-align: left;">ThinLTO Design&lt;/h3>&lt;div style="text-align: left;">ThinLTO is a new approach that is designed to scale like a non-LTO build, while retaining most of the performance achievement of full LTO.&lt;/div>&lt;div style="text-align: left;">In ThinLTO, the serial step is very thin and fast. This is because instead of loading the bitcode and merging a single monolithic module to perform these analyses, it utilizes compact summaries of each module for global analyses in the serial link step, as well as an index of function locations for later cross module importing. The function importing and other IPO transformations are performed later when the modules are optimized in fully parallel backends.&lt;/div>&lt;br />&lt;div style="text-align: left;">The key transformation enabled by ThinLTO global analyses is function importing, in which only those functions likely to be inlined are imported into each module. This minimizes the memory overhead in each ThinLTO backend, while maximizing the most impactful cross module optimization opportunities. The IPO transformations are therefore performed on each module extended with its imported functions.&lt;/div>&lt;br />&lt;div style="text-align: left;">The ThinLTO process is divided into 3 phases:&lt;/div>&lt;div style="text-align: left;">&lt;ol style="text-align: left;">&lt;li>Compile: Generate IR as with full LTO mode, but extended with module summaries&amp;nbsp;&lt;/li>&lt;li>Thin Link: Thin linker plugin layer to combine summaries and perform global analyses&amp;nbsp;&lt;/li>&lt;li>ThinLTO backend: Parallel backends with summary-based importing and optimizations&amp;nbsp;&lt;/li>&lt;/ol>&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="https://1.bp.blogspot.com/-n15XLWlQoJE/V18v5zSXCGI/AAAAAAAAMgc/5utJmweTI8QoqCbfruf-LHLHyY7ij-UVgCKgB/s1600/Screen%2BShot%2B2016-06-13%2Bat%2B3.12.16%2BPM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" height="274" src="https://1.bp.blogspot.com/-n15XLWlQoJE/V18v5zSXCGI/AAAAAAAAMgc/5utJmweTI8QoqCbfruf-LHLHyY7ij-UVgCKgB/s640/Screen%2BShot%2B2016-06-13%2Bat%2B3.12.16%2BPM.png" width="640" />&lt;/a>&lt;/div>&lt;br />&lt;div style="text-align: left;">By default, linkers that support ThinLTO (see below) are set up to launch the ThinLTO backends in threads. So the distinction between the second and third phases is transparent to the user.&lt;/div>&lt;br />&lt;div style="text-align: left;">The key enabler for this process are the summaries emitted during phase 1. These summaries are emitted using the bitcode format, but designed so that they can be separately loaded without involving an LLVMContext or any other expensive construction. Each global variable and function has an entry in the module summary. An entry contains metadata that abstracts the symbol it is describing. For example, a function is abstracted with its linkage type, the number of instructions it contains, and optional profiling information (PGO). Additionally, every reference (address taken, direct call) to another global is recorded. This information enables building a complete reference graph during the Thin Link phase, and subsequent fast analyses using the global summary information.&lt;/div>&lt;h3 style="text-align: left;">Current Status&lt;/h3>&lt;div style="text-align: left;">ThinLTO is currently supported in both the gold plugin as well as in ld64 starting with &lt;a href="https://developer.apple.com/xcode/">Xcode 8&lt;/a>.&amp;nbsp;Additionally, support is currently being added to the lld linker. The 3.9 release of clang will have ThinLTO accessible using the -flto=thin command line option.&lt;/div>&lt;br />&lt;div style="text-align: left;">While tuning is still in progress, ThinLTO already performs well compared to LTO, in many cases matching the performance improvement. In a few cases ThinLTO even outperforms full LTO, most likely because the higher scalability of ThinLTO allows using a more aggressive backend optimization pipeline (similar to that of a non-LTO build).&lt;/div>&lt;br />&lt;div style="text-align: left;">The following results were collected for the C/C++ SPEC cpu2006 benchmarks on an 8-core 2.6GHz Intel Xeon E5-2689. Each benchmark was run in isolation three times and results are shown for the average of the three runs.&lt;/div>&lt;br />&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="https://lh5.googleusercontent.com/FBz172vtE5q1NtGldLhWM11Q_S0CxXO8gTtEUMFTHEWhq5H6vO9ouh8HxMo_46rAaONS_WCz4G1zgUli_6sm6EeQJaMOg8lxfc3L7WQNhLMKyb9tvpi1qEPVMsJ4u3_1zL0v-mBk" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" height="453" src="https://lh5.googleusercontent.com/FBz172vtE5q1NtGldLhWM11Q_S0CxXO8gTtEUMFTHEWhq5H6vO9ouh8HxMo_46rAaONS_WCz4G1zgUli_6sm6EeQJaMOg8lxfc3L7WQNhLMKyb9tvpi1qEPVMsJ4u3_1zL0v-mBk" width="640" />&lt;/a>&lt;a href="https://www.blogger.com/blogger.g?blogID=6088150582281556517" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;/a>&lt;/div>&lt;br />&lt;br />&lt;div style="text-align: left;">Critically, due to the scalable design of ThinLTO, this performance is achieved with a build time that stays within a non-LTO build scale. The following build times were collected on a 20 core 2.8GHz Intel Xeon CPU E5-2680 v2, running Linux and using the gold linker. The results are for an end-to-end build of clang (ninja clang) from a clean build directory, so it includes all the compile steps and links of intermediate binaries such as llvm-tblgen and clang-tblgen.&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="https://4.bp.blogspot.com/-iLPTCAEC8yU/V1jubF7sl9I/AAAAAAAAMfQ/sRVEnIRxebc80PorKWB5lqRGD6G1OlGDACKgB/s1600/BuildTime.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" height="394" src="https://4.bp.blogspot.com/-iLPTCAEC8yU/V1jubF7sl9I/AAAAAAAAMfQ/sRVEnIRxebc80PorKWB5lqRGD6G1OlGDACKgB/s640/BuildTime.png" width="640" />&lt;/a>&lt;/div>&lt;br />Release build shows how ThinLTO build time is very comparable to a non-LTO build. Adding -gline-tables-only adds a very small overhead, and ThinLTO is again similar to the regular non-LTO build. However with full debug information, ThinLTO is still somewhat slower than a non-LTO build due to the additional overhead during importing. Ongoing improvements to debug metadata representation and handling are expected to continue to reduce this overhead. In all cases, full LTO is actually significantly slower.&lt;br />&lt;br />&lt;div style="text-align: left;">On the memory consumption side, the improvements are significant. Over the last two years, FullLTO was significantly improved, as shown on the chart below, but our measurement shows that ThinLTO keeps a large advantage.&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;br />&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="https://1.bp.blogspot.com/-22OhulY_7AI/V185N9fAJyI/AAAAAAAAMhE/nBEjhKGbeAcpv_VDj18q_24vwiOQPUMtgCKgB/s1600/Screen%2BShot%2B2016-06-13%2Bat%2B3.52.10%2BPM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" height="406" src="https://1.bp.blogspot.com/-22OhulY_7AI/V185N9fAJyI/AAAAAAAAMhE/nBEjhKGbeAcpv_VDj18q_24vwiOQPUMtgCKgB/s640/Screen%2BShot%2B2016-06-13%2Bat%2B3.52.10%2BPM.png" width="640" />&lt;/a>&lt;/div>&lt;h3 style="text-align: left;">Usage Information&lt;/h3>&lt;div style="text-align: left;">To utilize ThinLTO, simply add the -flto=thin option to compile and link. E.g.&lt;/div>&amp;nbsp; &amp;nbsp; % clang -flto=thin -O2 file1.c file2.c -c&lt;br />&amp;nbsp; &amp;nbsp; % clang -flto=thin -O2 file1.o file2.o -o a.out&lt;br />&lt;br />&lt;div style="text-align: left;">As mentioned earlier, by default the linkers will launch the ThinLTO backend threads in parallel, passing the resulting native object files back to the linker for the final native link. &amp;nbsp;As such, the usage model the same as non- LTO. Similar to regular LTO, for Linux this requires using the&amp;nbsp;&lt;a href="http://llvm.org/docs/GoldPlugin.html">gold linker configured with plugins enabled&lt;/a>&amp;nbsp;or&amp;nbsp;ld64 starting with&amp;nbsp;&lt;a href="https://developer.apple.com/xcode/">Xcode 8&lt;/a>.&lt;/div>&lt;h3 style="text-align: left;">Distributed Build Support&lt;/h3>&lt;div style="text-align: left;">To take advantage of a distributed build system, the parallel ThinLTO backends can each be launched as a separate process. To support this, the gold plugin provides a thinlto_index_only option that causes the link to exit after creating the combined index and performing global analysis.&lt;/div>&lt;br />&lt;div style="text-align: left;">Additionally, in this mode:&lt;/div>&lt;ul style="text-align: left;">&lt;li>Instead of using a monolithic combined index, a separate individual index file is written per backend containing the necessary portions of the combined index for recording the imports and any other global summary based optimization decisions that should be acted on in the backend.&amp;nbsp;&lt;/li>&lt;li>A plain text listing of the bitcode files each module will import from is optionally emitted to aid in distributed build file staging (thinlto-emit-imports-files plugin option).&amp;nbsp;&lt;/li>&lt;/ul>&lt;br />&lt;div style="text-align: left;">The backends can be launched by invoking clang on the bitcode and providing its index via an option. Finally, the resulting native objects are linked to generate the final binary. For example:&lt;/div>&lt;br />&amp;nbsp; &amp;nbsp; % clang -flto=thin -O2 file1.c file2.c -c&lt;br />&amp;nbsp; &amp;nbsp; % clang -flto=thin -O2 file1.o file2.o -Wl,-plugin-opt,-thinlto-index-only&lt;br />&amp;nbsp; &amp;nbsp; % clang -O2 -o file1.native.o -x ir file1.o -c -fthinlto-index=./file1.o.thinlto.bc&lt;br />&amp;nbsp; &amp;nbsp; % clang -O2 -o file2.native.o -x ir file2.o -c -fthinlto-index=./file2.o.thinlto.bc&lt;br />&amp;nbsp; &amp;nbsp; % clang file1.native.o file2.native.o -o a.out&lt;br />&lt;br />&lt;h3 style="text-align: left;">Incremental ThinLTO Support&lt;/h3>&lt;div style="text-align: left;">With full LTO, only the initial compile steps can be performed incrementally. If any input has changed, the expensive serial IPA/IPO step must be redone.&lt;/div>&lt;br />&lt;div style="text-align: left;">With ThinLTO, the serial Thin Link step must be redone if any input has changed, however, as noted earlier this is small and fast, and does not involve loading any module. And any particular ThinLTO backend must be redone iff:&lt;/div>&lt;br />&lt;ol style="text-align: left;">&lt;li>The corresponding (primary) module’s bitcode changed&amp;nbsp;&lt;/li>&lt;li>The list of imports into or exports from the module changed&amp;nbsp;&lt;/li>&lt;li>The bitcode for any module being imported from has changed&amp;nbsp;&lt;/li>&lt;li>Any global analysis result affecting either the primary module or anything it imports has changed.&amp;nbsp;&lt;/li>&lt;/ol>&lt;br />&lt;div style="text-align: left;">For single machine builds, where the threads are launched by the linker, incremental builds can be achieved by caching the module after applying the global summary based optimizations such as importing, using a hash of the information listed above as the key. This caching is already supported in libLTO’s ThinLTO handling, which is used by ld64. To enable it, the link step needs to be passed an extra flag: &lt;i>-Wl,-cache_path_lto,/path/to/cache&lt;/i>&lt;/div>&lt;br />&lt;div style="text-align: left;">For distributed builds, the above information in items 2-4 are all serialized into the individual index files. So the build system can compare the contents of the input bitcode files (the primary module’s bitcode and any it imports from) along with the combined index against those from an earlier build to decide if a particular ThinLTO backend must be redone. To make this process more efficient, the content of the bitcode file is hashed when emitted during the compile phase, and the result is stored in the bitcode file itself so that the cache can be queried during the Thin Link step without reading the IR.&lt;br />&lt;br />The chart below illustrates the full build time of clang in three different situations:&lt;br />&lt;ol style="text-align: left;">&lt;li>The full link following a clean build.&lt;/li>&lt;li>The developer fixes the implementation of &lt;i>DenseMap::grow()&lt;/i>. This is a widely used header in the project, which forces to rebuild a large number of files.&lt;/li>&lt;li>The developer fixes the implementation of &lt;i>visitCallInst()&lt;/i> in &lt;i>InstCombineCalls.cpp&lt;/i>. This an implementation file and incremental build should be fast.&lt;/li>&lt;/ol>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="https://1.bp.blogspot.com/-1AXpVE8BMtA/V1866_hMEpI/AAAAAAAAMhQ/oBNi7TXF8BcRZD93OUMGJmFa0oFxg3BwwCKgB/s1600/Screen%2BShot%2B2016-06-13%2Bat%2B3.59.16%2BPM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" height="358" src="https://1.bp.blogspot.com/-1AXpVE8BMtA/V1866_hMEpI/AAAAAAAAMhQ/oBNi7TXF8BcRZD93OUMGJmFa0oFxg3BwwCKgB/s640/Screen%2BShot%2B2016-06-13%2Bat%2B3.59.16%2BPM.png" width="640" />&lt;/a>&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;br />&lt;/div>&lt;div style="text-align: left;">These results illustrate how full LTO is not friendly with incremental build, and show how ThinLTO is providing an incremental link-time very close to a non-LTO build.&lt;/div>&lt;/div>&lt;/div></description></item><item><title>LLVM Weekly - #129, Jun 20th 2016</title><link>https://blog.llvm.org/2016/06/llvm-weekly-129-jun-20th-2016.html</link><pubDate>Mon, 20 Jun 2016 04:23:00 +0000</pubDate><guid>https://blog.llvm.org/2016/06/llvm-weekly-129-jun-20th-2016.html</guid><description>&lt;p>Welcome to the one hundred and twenty-ninth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/129">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Last week was WWDC, which featured talks on &lt;a href="https://developer.apple.com/videos/play/wwdc2016/405/">what's new in LLVM&lt;/a> (&lt;a href="http://devstreaming.apple.com/videos/wwdc/2016/405i2ilotov3bazyei1/405/405_whats_new_in_llvm.pdf">slides&lt;/a>) and &lt;a href="https://developer.apple.com/videos/play/wwdc2016/402/">what's new in Swift&lt;/a> (&lt;a href="http://devstreaming.apple.com/videos/wwdc/2016/402h429l9d0hy98c9m6/402/402_whats_new_in_swift.pdf">slides&lt;/a>). Note that the embedded video player suggests you need Safari or the WWDC app to stream the video, but you can find a downloadable version under the "resources" tab.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Jason Henline has announced the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101028.html">LLVM parallel-libs subproject&lt;/a> which will "host the development of libraries which are aimed at enabling parallelism in code and which are also closely tied to compiler technology.Examples of libraries suitable for hosting within the &lt;code>parallel-libs&lt;/code> subproject are runtime libraries and parallel math libraries. The initial candidates for inclusion in this subproject are StreamExecutor and libomptarget which would live in the &lt;code>streamexecutor&lt;/code>and &lt;code>libomptarget&lt;/code> subdirectories of &lt;code>parallel-libs&lt;/code>, respectively."&lt;/p>&lt;/li>&lt;li>&lt;p>One of the most active threads this week was about &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101044.html">whether the release following 3.9 should be 4.0&lt;/a>. Much of the discussion was around whether the move from 3.9 to 4.0 should come with a large change breaking IR compatibility. Chris Lattner suggests a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101270.html">sliding window of IR compatibility may be better&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>TB Schardl has posted an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101162.html">upstreaming the CSI framework&lt;/a> ("Comprehensive Static Instrumentation"). The &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101196.html">code&lt;/a> is now up for review. This framework makes it easy to implement dynamic analysis tools, often without needing compiler changes.&lt;/p>&lt;/li>&lt;li>&lt;p>Ashutosh Nema has shared an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101123.html">strided memory access vectorisation&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>In response to a question on the mailing list, Hubert Tong has given a &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2016-June/049480.html">brain dump on the status of work on concepts support in Clang&lt;/a> including opportunities for getting involved.&lt;/p>&lt;/li>&lt;li>&lt;p>Paweł Bylica has &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101125.html">asked for advice on dealing with LLVM as a project dependency&lt;/a>. In particular, is it worth investigating CMake's ExternalProject module? Chris Bieneman has &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101131.html">shared some advice&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Michael Kuperstein has posted an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/101136.html">allowing the loop vectorizer to choose vector widths that generate illegal types&lt;/a>. The feedback appears to be possible so far.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>FileCheck learnt the &lt;code>--check-prefixes&lt;/code> option as a shorthand for multiple &lt;code>--check-prefix&lt;/code> options. &lt;a href="http://reviews.llvm.org/rL272670">r272670&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A &lt;code>local_unnamed_addr&lt;/code> attribute was introduced. This can be used by the code generator and LTO to allow the linker to decide whether the global needs to be in the symbol table. &lt;a href="http://reviews.llvm.org/rL272709">r272709&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The ScalarReplAggregates pass has been removed as it has been superseded by SROA by a long time. &lt;a href="http://reviews.llvm.org/rL272737">r272737&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM's C API gained support for string attributes. &lt;a href="http://reviews.llvm.org/rL272811">r272811&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Assembly parsing and lexing has seem some cleanups. &lt;a href="http://reviews.llvm.org/rL273007">r273007&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A new loop distribution pragma was added. Loop distribution is a transformation which attempts to break a loop in to multiple loops with each taking part of the loop body. &lt;a href="http://reviews.llvm.org/rL272656">r272656&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The nodebug attribute can now be applied to local variables. &lt;a href="http://reviews.llvm.org/rL272859">r272859&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The validity check for MIPS CPU/ABI pairings is now performed at initialisation time and a much clearer message is printed. &lt;a href="http://reviews.llvm.org/rL272645">r272645&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A complete implementation of the C++ Filesystem TS has been checked in. &lt;a href="http://reviews.llvm.org/rL273034">r273034&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD's ARM port gained initial support for Thumb with ARMv7a. &lt;a href="http://reviews.llvm.org/rL272881">r272881&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>Using LNT to Track Performance</title><link>https://blog.llvm.org/2016/06/using-lnt-to-track-performance.html</link><pubDate>Wed, 15 Jun 2016 23:19:00 +0000</pubDate><guid>https://blog.llvm.org/2016/06/using-lnt-to-track-performance.html</guid><description>&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;span style="font-family: inherit;">In the past year, LNT has grown a number of new features that makes performance tracking and understanding the root causes of performance deltas a lot easier. In this post, I’m showing how we’re using these features.&lt;/span>&lt;br />&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;span style="font-family: inherit;">LNT contains 2 big pieces of functionality:&lt;/span>&lt;br />&lt;ol>&lt;li>&lt;span style="font-family: inherit;">A server,&lt;br />a. to which you can submit correctness and performance measurement data, by sending it a json-file in the correct format,&lt;br />b. that analyzes which performance changes are significant and which ones aren't,&lt;br />c. that has a webui to show results and analyses in a number of different ways.&lt;/span>&lt;/li>&lt;li>&lt;span style="font-family: inherit;">A command line tool to run tests and benchmarks, such as LLVM’s test-suite, SPEC2000 and SPEC2006 benchmarks.&lt;/span>&lt;/li>&lt;/ol>&lt;span style="font-family: inherit;">This post focuses on using the server. None of the features I’ll show are LLVM-specific, or even specific to ahead-of-time code generators, so you should be able to use LNT in the same way for all your code performance tracking needs. At the end, I’ll give pointers to the documentation needed to setup an LNT server and how to construct the json file format with benchmarking and profiling data to be submitted to the server.&lt;/span>&lt;br />&lt;span style="font-family: inherit;">The features highlighted focus on tracking the performance of code, not on other aspects LNT can track and analyze.&lt;/span>&lt;br />&lt;span style="font-family: inherit;">We have 2 main uses cases in tracking performance:&lt;/span>&lt;br />&lt;ul>&lt;li>&lt;span style="font-family: inherit;">Post-commit detection of performance regressions and improvements.&lt;/span>&lt;/li>&lt;li>&lt;span style="font-family: inherit;">Pre-commit analysis of the impact of a patch on performance.&lt;/span>&lt;/li>&lt;/ul>&lt;span style="font-family: inherit;">I'll focus on the post-commit detection use case.&lt;/span>&lt;br />&lt;h2>&lt;span style="font-family: inherit;">Post-commit performance tracking&lt;/span>&lt;/h2>&lt;h4>Step 1. Get an overview of the "Daily Report" page&lt;/h4>&lt;div>&lt;div>Assuming your server runs at http://yourlntserver:8000, this page is located at http://yourlntserver:8000/db_default/v4/nts/daily_report&lt;/div>&lt;div>The page gives a summary of the significant changes it found today.&lt;/div>&lt;div>An example of the kind of view you can get on that page is the following&lt;/div>&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="https://4.bp.blogspot.com/-lNSURt-I4tc/V2F48OowcSI/AAAAAAAAFg8/EYJXuOe9tZ4_ljn2fzbEjcdTArs0BAeDACLcB/s1600/lnt_daily_report.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" height="256" src="https://4.bp.blogspot.com/-lNSURt-I4tc/V2F48OowcSI/AAAAAAAAFg8/EYJXuOe9tZ4_ljn2fzbEjcdTArs0BAeDACLcB/s640/lnt_daily_report.png" width="640" />&lt;/a>&lt;/div>&lt;div class="separator" style="clear: both;">In the above screenshot, you can see that there were performance differences on 3 different programs, bigfib, fasta and ffbench. The improvement on ffbench only shows up on a machine named “machine3”, whereas the performance regression on the other 2 programs shows up on multiple machines.&lt;/div>&lt;div class="separator" style="clear: both;">&lt;br />&lt;/div>&lt;div class="separator" style="clear: both;">The table shows how performance evolved over the past 7 days, one column for each day. The sparkline on the right shows graphically how performance has evolved over those days. When the program was run multiple times to get multiple sample points, these show as separate dots that are vertically aligned (because they happened on the same date). The background color in the sparkline represents a hash of the program binary. If the color is the same on multiple days, the binaries were identical on those days.&lt;/div>&lt;div class="separator" style="clear: both;">&lt;br />&lt;/div>&lt;div class="separator" style="clear: both;">Let’s look first at the ffbench program. The background color in the sparkline is the same for the last 2 days, so the binary for this program didn’t change in those 2 days. Conclusion: the reported performance variation of -8.23% is caused by noise on the machine, not due to a change in code. The vertically spread out dots also indicate that this program has been noisy consistently over the past 7 days.&lt;/div>&lt;div class="separator" style="clear: both;">&lt;br />&lt;/div>&lt;div class="separator" style="clear: both;">Let’s now look at the bigfib. The background color in the sparkline has changed since its previous run, so let’s investigate further. By clicking on one of the machine names in the table, we go to a chart showing the long-term evolution of the performance of this program on that machine.&lt;/div>&lt;h4>Step 2. The long-term performance evolution chart&lt;/h4>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="https://1.bp.blogspot.com/-S53qGJAhZiI/V2F58jQ0NVI/AAAAAAAAFhI/XuxqfUnh0rshfgqD1Gcn1SEynH22ZOEKACLcB/s1600/longterm-perf-evolution-chart.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" height="280" src="https://1.bp.blogspot.com/-S53qGJAhZiI/V2F58jQ0NVI/AAAAAAAAFhI/XuxqfUnh0rshfgqD1Gcn1SEynH22ZOEKACLcB/s640/longterm-perf-evolution-chart.png" width="640" />&lt;/a>&lt;/div>&lt;div class="separator" style="clear: both;">This view shows how performance has evolved for this program since we started measuring it. When you click on one of the dots, which each represent a single execution of the program, you get a pop-up with information such as revision, date at which this was run etc.&lt;/div>&lt;div class="separator" style="clear: both;">When you click on the number after “Run:” in that pop-up, it’ll bring you to the run page.&lt;/div>&lt;h4 style="clear: both;">Step 3. The Run page&lt;/h4>&lt;div>&lt;div>The run page gives an overview of a full “Run” on a given machine. Exactly what a Run contains depends a bit on how you organize the data, but typically it consists of many programs being run a few times on 1 machine, representing the quality of the code generated by a specific revision of the compiler on one machine, for one optimization level.&lt;/div>&lt;div>This run page shows a lot of information, including performance changes seen since the previous run:&lt;/div>&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="https://1.bp.blogspot.com/-2CaZGoSAmL4/V2F7Fftk8XI/AAAAAAAAFhU/gnTa49e6lt0ckVLkj49zP20in0VvXd5HACLcB/s1600/run-over-run%2Bchanges.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" height="128" src="https://1.bp.blogspot.com/-2CaZGoSAmL4/V2F7Fftk8XI/AAAAAAAAFhU/gnTa49e6lt0ckVLkj49zP20in0VvXd5HACLcB/s640/run-over-run%2Bchanges.png" width="640" />&lt;/a>&lt;/div>&lt;div>When hovering with the mouse over entries, a “Profile” button will show, that when clicked, shows profiles of both the previous run and the current run.&lt;/div>&lt;h4>Step 4. The Profile page&lt;/h4>&lt;div>&lt;div>At the top, the page gives you an overview of differences of recorded performance events between the current and previous run.&lt;/div>&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="https://2.bp.blogspot.com/-1KaKjIGohZw/V2F9WxfRdII/AAAAAAAAFhg/d1ePCRy_uL4T6rVQnZPk316H8iuxutQ0wCLcB/s1600/PerformanceCounters.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" height="64" src="https://2.bp.blogspot.com/-1KaKjIGohZw/V2F9WxfRdII/AAAAAAAAFhg/d1ePCRy_uL4T6rVQnZPk316H8iuxutQ0wCLcB/s640/PerformanceCounters.png" width="640" />&lt;/a>&lt;/div>&lt;div class="separator" style="clear: both; text-align: left;">After selecting which function you want to compare, this page shows you the annotated assembly:&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="https://1.bp.blogspot.com/-k5mJCSu02Og/V2F90A9uiSI/AAAAAAAAFho/epjri2UOIPMYQILotrAX34gllJWoSBMSwCLcB/s1600/profile_view.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" height="306" src="https://1.bp.blogspot.com/-k5mJCSu02Og/V2F90A9uiSI/AAAAAAAAFho/epjri2UOIPMYQILotrAX34gllJWoSBMSwCLcB/s640/profile_view.png" width="640" />&lt;/a>&lt;/div>&lt;div class="separator" style="clear: both; text-align: left;">&lt;br />&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>&lt;div>While it’s clear that there are differences between the disassembly, it’s often much easier to understand the differences by reconstructing the control flow graph to get a per-basic-block view of differences. By clicking on the “View:” drop-down box and selecting the assembly language you see, you can get a CFG view. I find showing absolute values rather than relative values helps to understand performance differences better, so I also chose “Absolute numbers” in the drop down box on the far right:&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="https://4.bp.blogspot.com/-intetvmwToI/V2F-WH08lII/AAAAAAAAFh0/1rNkIiUEtOAtQ1QeWVaSXkXExXjK-8rqACLcB/s1600/profile_view_cfg.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" height="196" src="https://4.bp.blogspot.com/-intetvmwToI/V2F-WH08lII/AAAAAAAAFh0/1rNkIiUEtOAtQ1QeWVaSXkXExXjK-8rqACLcB/s640/profile_view_cfg.png" width="640" />&lt;/a>&lt;/div>&lt;div class="separator" style="clear: both;">There is obviously a single hot basic block, and there are differences in instructions in the 2 versions. The number in the red side-bar shows that the number of cycles spent in this basic block has increased from 431M to 716M. In just a few clicks, I managed to drill down to the key codegen change that caused the performance difference!&lt;/div>&lt;div class="separator" style="clear: both;">&lt;br />&lt;/div>&lt;div class="separator" style="clear: both;">We combine the above workflow with the llvmbisect tool available at &lt;a href="http://llvm.org/viewvc/llvm-project/zorg/trunk/llvmbisect/">http://llvm.org/viewvc/llvm-project/zorg/trunk/llvmbisect/&lt;/a> to also quickly find the commit introducing the performance difference. We find that using both the above LNT workflow and the llvmbisect tool are vital to be able to act quickly on performance deltas.&lt;/div>&lt;h2>Pointers on setting up your own LNT server for tracking performance&lt;/h2>&lt;div>&lt;div>Setting up an LNT server is as simple as running the half a dozen commands documented at &lt;a href="http://lnt.llvm.org/quickstart.html">http://lnt.llvm.org/quickstart.html&lt;/a> under "Installation" and "Viewing Results". The "Running tests" section is specific to LLVM tests, the rest is generic to performance tracking of general software.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>The documentation for the json file format to submit results to the LNT server is here: &lt;a href="http://lnt.llvm.org/importing_data.html">http://lnt.llvm.org/importing_data.html&lt;/a>.&lt;/div>&lt;div>The documentation for how to also add profile information, is at &lt;a href="http://lnt.llvm.org/profiles.html">http://lnt.llvm.org/profiles.html&lt;/a>.&lt;/div>&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;/div>&lt;div>&lt;br />&lt;/div></description></item><item><title>LLVM Weekly - #128, June 13th 2016</title><link>https://blog.llvm.org/2016/06/llvm-weekly-128-june-13th-2016.html</link><pubDate>Mon, 13 Jun 2016 05:08:00 +0000</pubDate><guid>https://blog.llvm.org/2016/06/llvm-weekly-128-june-13th-2016.html</guid><description>&lt;p>Welcome to the one hundred and twenty-eighth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/128">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>LDC, a compiler for the D programming language with an LLVM backends has a &lt;a href="http://forum.dlang.org/post/lwsnqbravjqbnnryvjkx@forum.dlang.org">major release with 1.0.0&lt;/a>. The big news with this release is that the frontend is now completely written in D. Congratulations to everyone involved in this release. See &lt;a href="http://dlang.org/">the D website&lt;/a> for more information about the D programming language.&lt;/p>&lt;p>The minor release LLVM 3.8.1-rc1 &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100787.html">has been tagged&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Gor Nishanov has shared an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100838.html">adding support for coroutines to LLVM IR&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Hans Wennborg has shared the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100913.html">release plan for the 3.9 release&lt;/a>. This plan would see the release branch created on the 18th of July and the final shipping on the 22nd of August. Hans wonders whether, as with 2.9 and 1.9 the base version number will be incremented (making release 4.0). He'd also like to make LLVM's current release cadence "official" on the website and publicly list people who are currently committed to testing releases.&lt;/p>&lt;/li>&lt;li>&lt;p>Chris Bieneman is &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100859.html">proposing some changes to the LLVM directory structure&lt;/a>. Specifically, adding a 'runtimes' subdirectory and removing the 'projects' subdirectory. Chris has helpfully &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100904.html">summarised some of the key feedback&lt;/a> and proposed how to move forwards.&lt;/p>&lt;/li>&lt;li>&lt;p>Sebastian Pop is trying to get a feel for &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100942.html">how many LLVM developers are attending HPCA/PPoPP/CGO in February 2017&lt;/a> in order to estimate potential numbers for an LLVM gathering.&lt;/p>&lt;/li>&lt;li>&lt;p>In answer to a question, Krzysztof Parzyszek explains &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100885.html">how to use glue values&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Philip Reames provides a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100781.html">handy explanation&lt;/a> of what is means for allocations to "escape", be "captured" or be "thread local".&lt;/p>&lt;/li>&lt;li>&lt;p>Simon Brand is seeking feedback on how to &lt;a href="http://lists.llvm.org/pipermail/lldb-dev/2016-June/010453.html">enhance LLDB to better support HSA applications&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Simon Cook describes how he has &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100899.html">set up pseudo-registers representing register locations on a very register-poor architecture&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Vikram TV has shared a proposal on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100789.html">adding a pass that calculates loop cost based on cache data&lt;/a>. The prototype patch analyses references to determine which would be in the same cache line. This knowledge can then be used to calculate a more accurate loop cost and. A drawback of the current implementation is it uses a static cache line size.&lt;/p>&lt;/li>&lt;li>&lt;p>Sean Silva has kicked off a thread about the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100792.html">intended behaviour of the CGSCC pass manager&lt;/a>. This manages passes over strongly connected components of the callgraph.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Some of the work from the GSoC project on interprocedural register allocation has started to land. A RegUsageInfoCollector analysis was added that collects the list of clobbered registers for a MachineFunction. A new transformation pass was committed which scans the body of a function to find calls and updates the register mask with the one saved by RegUsageInfoCollector. &lt;a href="http://reviews.llvm.org/rL272403">r272403&lt;/a>, &lt;a href="http://reviews.llvm.org/rL272414">r272414&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Chapter 2 of the tutorial on building a JIT with ORC has been fleshed out with a rough draft of the text. &lt;a href="http://reviews.llvm.org/rL271885">r271885&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The host CPU detection code for x86 has seen a large refactoring. &lt;a href="http://reviews.llvm.org/rL271921">r271921&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>More documentation has been added about LLVM's CodeView support. &lt;a href="http://reviews.llvm.org/rL272057">r272057&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-symbolizer will now be searched for in the same directory as the LLVM or Clang tool being executed. This increases the chance of being able to print pretty backtraces for systems where LLVM tools aren't installed in the $PATH. &lt;a href="http://reviews.llvm.org/rL272232">r272232&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang analyzer gained a checker for correct usage of the MPI API in C and C++. &lt;a href="http://reviews.llvm.org/rL271907">r271907&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Documentation was added on avoiding static initializers when using profiling. &lt;a href="http://reviews.llvm.org/rL272067">r272067&lt;/a>, &lt;a href="http://reviews.llvm.org/rL272214">r272214&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A hardened allocator, 'scudo' was added to compiler-rt. It attempts to mitigate some common heap-based vulnerabilities. &lt;a href="http://reviews.llvm.org/rL271968">r271968&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Initial support for ARM has landed in LLD. This is just enough to link a hello world on ARM Linux. &lt;a href="http://reviews.llvm.org/rL271993">r271993&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Initial support for AddressSanitizer on Win64 was added. &lt;a href="http://reviews.llvm.org/rL271915">r271915&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #127, June 6th 2016</title><link>https://blog.llvm.org/2016/06/llvm-weekly-127-june-6th-2016.html</link><pubDate>Mon, 06 Jun 2016 08:02:00 +0000</pubDate><guid>https://blog.llvm.org/2016/06/llvm-weekly-127-june-6th-2016.html</guid><description>&lt;p>Welcome to the one hundred and twenty-seventh issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/127">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Graham Markall at Embecosm has been comparing the code size of &lt;a href="http://www.embecosm.com/2016/05/26/risc-v-compiler-performance-part-1-code-size-comparisons/">RISC-V binaries produced by the GCC and LLVM ports&lt;/a>, as well as compared to ARM. GCC is currently ahead, though it is worth noting the LLVM port has seen much less attention.&lt;/p>&lt;p>Matthias Reisinger is a Google Summer of Code student working on enabling polyhedral optimisations for the Julia programming language. He's written a blog post detailing his &lt;a href="http://www.mreisinger.com/?p=43">initial steps and immediate future plans&lt;/a>. Hopefully we'll see more posts over the summer.&lt;/p>&lt;p>Loïc Hamot has been working on a &lt;a href="http://forum.dlang.org/post/ngxvmfqusvhyezwdbvaq@forum.dlang.org">C++ to D converter&lt;/a>, implemented using Clang.&lt;/p>&lt;p>The MSVC team have blogged about the &lt;a href="https://blogs.msdn.microsoft.com/vcblog/2016/06/03/clang-3-8-in-the-may-release-of-clang-with-microsoft-codegen/">latest release of Clang with Microsoft CodeGen&lt;/a>, based on Clang 3.8.&lt;/p>&lt;p>There is going to be a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100647.html">clang-tidy code dojo&lt;/a> in Warsaw on Tuesday the 7th of June.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Renato Golin has kicked off a discussion on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/100310.html">moving LLVM's repository hosting to GitHub&lt;/a>. Chris Lattner &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/100314.html">came out in favour&lt;/a>, specifically motivated by GitHub's community aspects. Renato has very helpfully &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100507.html">summarised the discussion&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Peter Smith has shared his &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100598.html">initial port of LLD to ARM&lt;/a> along with his planned roadmap. The currently submitted patch is just enough to link a hello world executable on ARM Linux.&lt;/p>&lt;/li>&lt;li>&lt;p>The apt repo hosted at llvm.org has been &lt;a href="http://lists.llvm.org/pipermail/llvm-foundation/2016-May/000020.html">temporarily turned off&lt;/a> as it is resulting in excessive I/O and network activity. Some commenters ask about setting up an Ubuntu PPA or using the OpenSUSE build service.&lt;/p>&lt;/li>&lt;li>&lt;p>David Blaikie has written a GDB pretty printer script for some common LLVM types and &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/100365.html">described how to use it&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Michael LeMay has posted an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/100346.html">RFC on using segmentation to harden SafeStack&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Rui Ueyama has been investigating &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100700.html">using sendfile to copy file contents in LLD&lt;/a> and shares his results. He concludes the performance improvement is too modest to be worth the change.&lt;/p>&lt;/li>&lt;li>&lt;p>If you're interested in register allocation, then &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100523.html">delve in to this thread on LLVM's PBQP allocator and copy propagation&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Daniel Dunbar is &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2016-May/049135.html">suggesting some changes to the lit default output&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Steven Wu shares a follow-up RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100643.html">embedded bitcode&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>There's a useful discussion in &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100470.html">this thread on lowering loops to use a hardware loop instruction&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Peter Collingbourne &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-June/100462.html">proposes renaming and slightly redesigning the bitset metadata&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLVM gained support for 'SJLJ' (setjmp/longjmp) exception handling on x86 targets. &lt;a href="http://reviews.llvm.org/rL271244">r271244&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM now requires CMake 3.4.3 to build &lt;a href="http://reviews.llvm.org/rL271325">r271325&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support was added for attaching metadata to global variables. &lt;a href="http://reviews.llvm.org/rL271348">r271348&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The AArch64 backend switched to use SubtargetFeatures rather than testing for specific CPUs. &lt;a href="http://reviews.llvm.org/rL271555">r271555&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The release notes have been updated to explain the current level of OpenMP support (full support of non-offloading features of OpenMP 4.5). &lt;a href="http://reviews.llvm.org/rL271263">r271263&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang's source-based code coverage has been documented. &lt;a href="http://reviews.llvm.org/rL271454">r271454&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>An &lt;code>-fno-exceptions&lt;/code> libc++abi library variant was defined, to match the &lt;code>-fno-exceptions&lt;/code> libc++ build. &lt;a href="http://reviews.llvm.org/rL271267">r271267&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB's compact unwind printing tool gained support for ARMv7's compact unwind format. &lt;a href="http://reviews.llvm.org/rL271744">r271744&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #126, May 30th 2016</title><link>https://blog.llvm.org/2016/05/llvm-weekly-126-may-30th-2016.html</link><pubDate>Mon, 30 May 2016 12:07:00 +0000</pubDate><guid>https://blog.llvm.org/2016/05/llvm-weekly-126-may-30th-2016.html</guid><description>&lt;p>Welcome to the one hundred and twenty-sixth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/126">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;p>I've been moving house this weekend, so do accept my apologies if you find this issue to be a little less thorough than usual.&lt;/p>&lt;h3>News and articles from around the web&lt;/h3>&lt;p>Pyston, the LLVM-based Python compiler has &lt;a href="https://blog.pyston.org/2016/05/25/pyston-0-5-released/">released version 0.5&lt;/a>. The main changes are a switch to reference counting and NumPy compatibility.&lt;/p>&lt;p>I don't want to become "C++ weekly", but I think this audience appreciates a fun use of C++ features. &lt;a href="https://woboq.com/blog/verdigris-qt-without-moc.html">Verdigris&lt;/a> is a header-only library that allows you to use Qt5 without the moc preprocessor.&lt;/p>&lt;p>The call for papers for the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/100107.html">3rd workshop on the LLVM compiler infrastructure in HPC&lt;/a> has been published. The deadline for paper submission is September 1st. The workshop will take place on November 14th in Salt Lake City, and is held in conjunction with SC16.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Vivek Pandya, a GSoC student working on interprocedural register allocation has shared &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/100227.html">a weekly status report&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Rafael Espíndola has proposed &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/100190.html">creating a bitcode symbol table&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>There's been &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/100169.html">some&lt;/a> &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/100170.html">updates&lt;/a> on the progress of open-sourcing PGI's Fortran frontend.&lt;/p>&lt;/li>&lt;li>&lt;p>Elena Lepilkina has proposed some &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/100024.html">enhancement to FileCheck&lt;/a>. Some questions were raised about how useful the proposed extensions will be. Sergey Yakoushkin provided more background on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/100162.html">how these features are used&lt;/a> in a commercial codebase. As Elena notes, these features don't need to all be upstreamed at once (or at all), and are mostly independent.&lt;/p>&lt;/li>&lt;li>&lt;p>Lang Hames has posted a heads-up about &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/100061.html">upcoming breaking API changes for ORC and MCJIT&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Sean Silva has kicked off a discussion on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/100021.html">the state of IRPGO&lt;/a>. You might ask what is IRPGO? This is profile-guided optimisation performed through instrumentation at the LLVM IR level, as opposed to FEPGO where instrumentation is added by the frontend (e.g. Clang), prior to lowering to IR. Sean would like to make IRPGO the default on all platforms other than Apple at the moment (who may require a longer deprecation period). A number of followup comments discuss possibilities for ensuring all platforms can move forward together, and ensuring a sensible flag exists to choose between frontend or middle-end PGO.&lt;/p>&lt;/li>&lt;li>&lt;p>What exactly is a register pressure set? Both &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/100004.html">Quentin Colombet&lt;/a> and &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/100019.html">Andrew Trick&lt;/a> have answers for us.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>New optimisations covering checked arithmetic were added. &lt;a href="http://reviews.llvm.org/rL271152">r271152&lt;/a>, &lt;a href="http://reviews.llvm.org/rL271153">r271153&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Advanced unrolling analysis is now enabled by default. &lt;a href="http://reviews.llvm.org/rL270478">r270478&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The initial version of a new chapter to the 'Kaleidoscope' tutorial has been committed. This describes how to build a JIT using ORC. &lt;a href="http://reviews.llvm.org/rL270487">r270487&lt;/a>, &lt;a href="http://reviews.llvm.org/rL271054">r271054&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM's stack colouring analysis data flow analysis has been rewritten in order to increase the number of stack variables that can be overlapped. &lt;a href="http://reviews.llvm.org/rL270559">r270559&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Parts of EfficiencySanitizer are starting to land, notably instrumentation for its working set tool. &lt;a href="http://reviews.llvm.org/rL270640">r270640&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>SelectionDAG learned how to expand multiplication for larger integer types where there isn't a standard runtime call to handle it. &lt;a href="http://reviews.llvm.org/rL270720">r270720&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM will now report more accurate loop locations in optimisation remarks by reading the starting location from llvm.loop metadata. &lt;a href="http://reviews.llvm.org/rL270771">r270771&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Symbolic expressions are now supported in assembly directives, matching the behaviour of the GNU assembler. &lt;a href="http://reviews.llvm.org/r271102">r271102&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Symbols used by plugins can now be auto-exported on Windows, which improves support for plugins in Windows. See the commit message for a full description. &lt;a href="http://reviews.llvm.org/rL270839">r270839&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Software floating point for Sparc has been exposed in Clang through &lt;code>-msoft-float&lt;/code>. &lt;a href="http://reviews.llvm.org/rL270538">r270538&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang now supports the &lt;code>-finline-functions&lt;/code> argument to enable inlining separately from the standard &lt;code>-O&lt;/code> flags. &lt;a href="http://reviews.llvm.org/rL270609">r270609&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>SectionPiece in LLD is now 8-bytes smaller on 64-bit platforms. This improves the time to link Clang with debug info by 2%. &lt;a href="http://reviews.llvm.org/rL270717">r270717&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD has replaced a use of binary search with a hash table lookup, resulting in a 4% speedup when linking Clang with debug info. &lt;a href="http://reviews.llvm.org/rL270999">r270999&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB now supports AArch64 compact unwind tables, as used on iOS, tvos and watchos. &lt;a href="http://reviews.llvm.org/rL270658">r270658&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #125, May 23rd 2016</title><link>https://blog.llvm.org/2016/05/llvm-weekly-125-may-23rd-2016.html</link><pubDate>Mon, 23 May 2016 03:57:00 +0000</pubDate><guid>https://blog.llvm.org/2016/05/llvm-weekly-125-may-23rd-2016.html</guid><description>&lt;p>Welcome to the one hundred and twenty-fifth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/125">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Stephen Kelly has written a blog post about &lt;a href="https://steveire.wordpress.com/2016/05/18/generating-python-bindings-with-clang/">using Clang through the cindex API to automatically generate Python bindings&lt;/a>. He also makes use of &lt;a href="https://www.riverbankcomputing.com/software/sip/intro">SIP&lt;/a>.&lt;/p>&lt;p>Krister Walfridsson has written a wonderfully clear post on &lt;a href="http://kristerw.blogspot.co.uk/2016/05/type-based-aliasing-in-c.html">C's type-based aliasing rules&lt;/a>.&lt;/p>&lt;p>This week I discovered the &lt;a href="http://swiftweekly.github.io/">Swift Weekly Brief newsletter&lt;/a>. Its author, Jesse Squires does a wonderful job of summarising mailing list traffic, recent commits, and discussions on swift-evolution proposals. If you have an interest in Swift development or language design in general I highly recommend it.&lt;/p>&lt;p>Are you interested in &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099807.html">writing for the LLVM blog&lt;/a>? Or volunteering to help recruit content authors? If so, get in touch with Tanya.&lt;/p>&lt;p>The next Cambridge LLVM Social will be held &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099870.html">at 7.30pm on May 25th at the Cambridge Blue&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Elena Demikhovsky is interested in &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099724.html">extending scalar evolution (SCEV) analysis to include floating point support&lt;/a>. This kicked off a pretty interesting discussion. Sanjoy Das highlighted what he sees as the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099743.html">most important issues to discuss&lt;/a>. A number of follow-ups discussed whether enough code uses floating point values as an induction variable to be worth optimising. There was also the question of &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099819.html">should vectorisation be pursued at any cost?&lt;/a>. Even if a loop can be made vectorisable through loop-versioning with run-time checks, is it worth the code size? Is the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099814.html">cost of maintaining the compiler code&lt;/a> worthwhile? Hideki Saito posted a useful &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099928.html">summary of the discussion so far&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth is looking for feedback on the idea of &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099715.html">supporting horizontal operations on vector types such as sum directly in LLVM IR&lt;/a>. Everyone who has responsed so far is in favour.&lt;/p>&lt;/li>&lt;li>&lt;p>Jia Chen, GSoC student with LLVM, has noted the CFL-AA pass seems to be mostly working now and would &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099742.html">appreciate reports from people trying it out on their codebases&lt;/a>.So far, Geoff Berry &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099900.html">reports&lt;/a> no correctness issues but seemingly very limited changes in the generated code for SPEC and the LLVM test-suite.&lt;/p>&lt;/li>&lt;li>&lt;p>Adam Nemet is seeking feedback on the idea of &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099873.html">adding optimisation remarks to indicate where non-temporal stores may be profitable&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Quentin Colombet has &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099752.html">summarised recent discussion on policies to help release management&lt;/a> and detailed the automatic hooks he hopes to explore next for updating bugs when referenced in a commit message. The following discussion looked at how these hooks may be implemented and what level of rigidity would be most beneficial to the community.&lt;/p>&lt;/li>&lt;li>&lt;p>Dean Michael Berris is looking for a way of &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099759.html">defining a default implementation for a pseudo-instruction&lt;/a>. No answers yet, but hopefully that will change soon!&lt;/p>&lt;/li>&lt;li>&lt;p>Galina Kistanova is doing some cleanup work on zorg (the buildbot-based testing infrastructure of the LLVM project) and is interested whether &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099739.html">anyone uses these seemingly stale modules&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>llc will now report all errors in the input file rather than just exiting after the first. &lt;a href="http://reviews.llvm.org/rL269655">r269655&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The SPARC backend gained support for soft floating point. &lt;a href="http://reviews.llvm.org/rL269892">r269892&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;code>Reloc::Default&lt;/code> no longer exists. Instead, &lt;code>Optional&amp;lt;Reloc&amp;gt;&lt;/code> is used. &lt;a href="http://reviews.llvm.org/rL269988">r269988&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>An initial implementation of a "guard widening" pass has been committed. This will combine multiple guards to reduce the number of checks at runtime. &lt;a href="http://reviews.llvm.org/rL269997">r269997&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>clang-include-fixer gained a basic Vim integration. &lt;a href="http://reviews.llvm.org/rL269927">r269927&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The intrinsics headers now have feature guards enabled in Microsoft mode to combat the compile-time regression discussed last week due to their increased size. &lt;a href="http://reviews.llvm.org/rL269675">r269675&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>avxintrin.h gained many new Doxygen comments. &lt;a href="http://reviews.llvm.org/rL269718">r269718&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>lld now lets you specify a subset of passes to run in LTO. &lt;a href="http://reviews.llvm.org/rL269605">r269605&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB has replaced uses of its own Mutex class with &lt;code>std::mutex&lt;/code>. &lt;a href="http://reviews.llvm.org/rL269877">r269877&lt;/a>, &lt;a href="http://reviews.llvm.org/rL270024">r270024&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #124, May 16th 2016</title><link>https://blog.llvm.org/2016/05/llvm-weekly-124-may-16th-2016.html</link><pubDate>Mon, 16 May 2016 04:26:00 +0000</pubDate><guid>https://blog.llvm.org/2016/05/llvm-weekly-124-may-16th-2016.html</guid><description>&lt;p>Welcome to the one hundred and twenty-fourth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/124">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The main news this week is the announcement of &lt;a href="http://www.scala-native.org/">Scala-native&lt;/a>, an ahead-of-time compiler for Scala using LLVM. Jos Dirkens has written a &lt;a href="http://www.smartjava.org/content/getting-started-scala-native">getting started guide&lt;/a> if you want to compile it and try it out. There's also more information in the &lt;a href="https://github.com/densh/talks/blob/master/2016-05-11-scala-goes-native.pdf">slides from the announcement talk&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>More of the students taking part in Google Summer of Code with LLVM-related projects have introduced themselves and their plans. Vivek Pandya will be working on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099492.html">interprocedural register allocation&lt;/a>. Scott Egerton will be working on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099704.html">capture tracking improvements&lt;/a>. Jie Chen will be working on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099573.html">better alias analysis, specifically improving cfl-aa&lt;/a>. Matthias Reisinger will be working on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099471.html">enabling polyhedral optimisations in Julia&lt;/a>, and Zhengyan Liu has plans for &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099600.html">SAFECode memory hardening&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Renato Golin kicked off a discussion about &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099541.html">whether LLVM's release process could be better aligned with downstream users&lt;/a>. This thread covered a broad range of topics and triggered a lot of discussion, but luckily there's no need to summarise it as Renato has &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099706.html">done the job for us&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Nicolai Hähnle notes that currently libLLVM.so &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099398.html">contains about 1.7MB in its .data.rel.ro section&lt;/a>, of which about 1.3MB comes from the MCInstrDesc tables created by tablegen representing a massive number of pointers to be relocated. He suggests reducing this by using offsets instead. Reducing the relocations will both reduce binary size and increase the portion of the binary that can be mapped as shared. So far, responses to the thread are supportive of the idea.&lt;/p>&lt;/li>&lt;li>&lt;p>James Knight has written a detailed post on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099490.html">how it's not really possible to write an LL/SC loop guaranteed to make forward progress in LLVM IR right now&lt;/a>. There are restrictions on what you can do between a load-linked and a store-conditional instruction that the code generator may not meet.&lt;/p>&lt;/li>&lt;li>&lt;p>A public &lt;a href="http://lists.llvm.org/cgi-bin/mailman/listinfo/llvm-foundation">llvm-foundation&lt;/a> mailing list has been &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099574.html">announced&lt;/a>, which to facilitate discussions related to the Foundation.&lt;/p>&lt;/li>&lt;li>&lt;p>As well as the long, technically detailed and precise threads each week it's nice to highlight cases where a simple question has a simple answer. How do you register a pass as being opt-in based on a command-line flag? &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099470.html">Answer&lt;/a>: have it run every time, but return immediately if the desired command line flag isn't present.&lt;/p>&lt;/li>&lt;li>&lt;p>Sanjoy Das has shared an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099693.html">adding a callee-saved register verifier&lt;/a>. As is clarified later in the thread, the intention is to ensure that code not generated by LLVM (e.g. output from another JIT or hand-written assembly) properly adheres to the calling convention and doesn't clobber registers it shouldn't. The proposed pass would simply add code to check that the test values written to the callee-saved registers aren't modified.&lt;/p>&lt;/li>&lt;li>&lt;p>In response to questions about pass ordering, Mehdi Amini has written a helpful description of &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099477.html">what exactly happens when you do opt -mymodulepass0 -myfunctionpass -mymodulepass1&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Konstantin Vladimirov wonders &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099494.html">if there's an option to force the register allocator to use as many architectural registers as possible to reduce dependencies&lt;/a>. The short answer is there isn't currently, but it would be interesting to investigate.&lt;/p>&lt;/li>&lt;li>&lt;p>Diana Picus has shared an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099594.html">modifying llc so it no longer exits after the first error&lt;/a>. Generally people are in favour, and the patch should hopefully land soon (it had to be temporarily backed out after exposing some test cases failures in lldb).&lt;/p>&lt;/li>&lt;li>&lt;p>Nico Weber has noted that now with AVX512, &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2016-May/048837.html">Clang's intrinsics headers are huge&lt;/a>. This can cause compile time issues, for instance Nico reports building all of the v8 JS engine is 6% faster after removing the avx512 includes. The thread participants haven't yet decided on the best way forward to fix this, beyond the potential immediate step of adding include guards so AVX512 intrinsic headers aren't included when not compiling for AVX512 platforms.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The outdated guide on cross-compiling LLVM has been brought up to date. &lt;a href="http://reviews.llvm.org/rL269054">r269054&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The WebAssembly backend gained preliminary fast instruction selection (fast-isel) support. &lt;a href="http://reviews.llvm.org/rL269083">r269083&lt;/a>, &lt;a href="http://reviews.llvm.org/rL269203">r269203&lt;/a>, &lt;a href="http://reviews.llvm.org/rL269273">r269273&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Loop unrolling (other than in the case of explicit pragmas) is now disabled at &lt;code>-Os&lt;/code> in LLVM. You may recall last week it was enabled for &lt;code>-Os&lt;/code> in Clang, but with different thresholds. &lt;a href="http://reviews.llvm.org/rL269124">r269124&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new cost-tracking system has been implemented for the loop unroller. &lt;a href="http://reviews.llvm.org/rL269388">r269388&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM's Sparc backend has seen the addition of more LEON-specific features, e.g. signed and unsigned multiply-accumulate. &lt;a href="http://reviews.llvm.org/rL268908">r268908&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llc's &lt;code>-run-pass&lt;/code> option will now work with any pass known to the pass registry. Previously it would silently do nothing if you specify indirectly added analysis passes or passes not present in the optimisation pipeline. &lt;a href="http://reviews.llvm.org/rL269003">r269003&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>WebAssembly register stackification and coloring are now run very late in the optimisation pipeline. The commit message suggests it's useful to think of these passes as domain-specific liveness-based compression rather than a conventional optimisation. &lt;a href="http://reviews.llvm.org/rL269012">r269012&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>When declaring global in textual LLVM IR, you must now assign them with e.g. &lt;code>@0 = global i32 42&lt;/code>. &lt;a href="http://reviews.llvm.org/rL269096">r269096&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The internal assembler is now enabled by default for 32-bit MIPS targets. &lt;a href="http://reviews.llvm.org/rL269560">r269560&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang now supports &lt;code>__float128&lt;/code>. &lt;a href="http://reviews.llvm.org/rL268898">r268898&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang gained a new warning that triggers when casting away calling conventions from a function. &lt;a href="http://reviews.llvm.org/rL269116">r269116&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The recently developed include-fixer tools now has documentation. &lt;a href="http://reviews.llvm.org/rL269167">r269167&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>compiler-rt's CMake build system can now build builtins without a full toolchain, allowing you to bootstrap a cross-compiler. &lt;a href="http://reviews.llvm.org/rL268977">r268977&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD will now sort relocations to optimise dynamic linker performance. &lt;a href="http://reviews.llvm.org/rL269066">r269066&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #123, May 9th 2016</title><link>https://blog.llvm.org/2016/05/llvm-weekly-123-may-9th-2016.html</link><pubDate>Mon, 09 May 2016 01:28:00 +0000</pubDate><guid>https://blog.llvm.org/2016/05/llvm-weekly-123-may-9th-2016.html</guid><description>&lt;p>Welcome to the one hundred and twenty-third issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>If you're in London tomorrow you may be interested in the &lt;a href="http://oshug.org/event/nmiopen">NMI Open Source Conference&lt;/a>. You can register until midday today. I'll be giving a brief talk on &lt;a href="http://www.lowrisc.org/">lowRISC&lt;/a>. While on the subject of conferences, if you are interested in diversity and inclusion in computing education, you may want to check out the &lt;a href="http://casinclude.org.uk/events/diversity-conference-2016/">CAS #include diversity conference&lt;/a> in Manchester on the 11th June.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/123">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a>&lt;h3>News and articles from around the web&lt;/h3>&lt;p>Fabien Giesen has written a brief article explaining &lt;a href="https://gist.github.com/rygorous/e0f055bfb74e3d5f0af20690759de5a7">why compilers exploit undefined signed overflow&lt;/a>.&lt;/p>&lt;p>The Google Open Source blog has a &lt;a href="http://google-opensource.blogspot.co.uk/2016/05/xray-function-call-tracing-system.html">short piece&lt;/a> on the XRay function call tracing system that was proposed for upstreaming last week on the LLVM mailing list.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>By far the most active thread on the mailing list this week was the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099120.html">resumption of discussion on adding an LLVM Code of Conduct&lt;/a>. The draft text can be found &lt;a href="http://reviews.llvm.org/D13741">here&lt;/a>. As well as a number of messages offering a "+1" to the current text, concerns were raised by some about the implications of "violations of this code outside these spaces may affect a person's ability to participate within them", and about how the committee enforcing the CoC will be selected.&lt;/p>&lt;/li>&lt;li>&lt;p>Amos Robinson wrote to the mailing list with &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099034.html">an optimisation missed by LLVM's current Global Value Numbering pass&lt;/a>. Rather excitingly, Daniel Berlin &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099035.html">reports&lt;/a> he's working on a &lt;a href="https://github.com/dberlin/llvm-gvn-rewrite/branches">new GVN implementation&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth has written an update on the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099121.html">state of work to move to the new pass manager&lt;/a>. He notes the major missing piece at the moment is the ability to communicate invalidation information between two parts of the pass manager.&lt;/p>&lt;/li>&lt;li>&lt;p>Jonas Hahnfield has shared an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/098980.html">automatically generating non-temporal loads and stores&lt;/a>. Some respondents are very strongly against this, suggesting it's something better left for the programmer to specify.&lt;/p>&lt;/li>&lt;li>&lt;p>Some of the students taking part in Google Summer of Code this year with LLVM-related projects have been introducing themselves on the mailing list. Utpal Bora will be working on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099373.html">implementing Polly as an analysis pass in LLVM&lt;/a>. Bianca-Cristina Cristescu will be working in &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2016-May/048671.html">enabling LLVM's self-hosted modules builds using libstdc++&lt;/a>, and Roman Gareev will be &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/098943.html">improving the vectorisation process in Polly&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Chris Bieneman notes he recently introduced a new option in LLVM's CMake buildsystem that may be of particular interest to package maintainers. &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/098993.html">LLVM_DISTRIBUTION_COMPONENTS&lt;/a> allows you to specify which components of LLVM you want to install.&lt;/p>&lt;/li>&lt;li>&lt;p>Peter Collingbourne has posted an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099095.html">extending ThinLTO to allow a bitcode module to embed another bitcode module containing summary information for CFI and whole-program devirtualisation&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Adam Nemet is interested in feedback on the idea of &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099082.html">filtering optimisation remarks by the hotness of the code region&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Justin Bogner has given a heads-up to out-of-tree backend maintainers that he &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/099216.html">intends to change the API of SelectionDAGISel::Select&lt;/a> so the function directly replaces nodes rather than returning the desired replacement.&lt;/p>&lt;/li>&lt;li>&lt;p>Quentin Colombet has shared an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-May/098952.html">how LLVM contributors can better help release management&lt;/a>. There's a lot of support for this direction, with most comments discussing ways of better tagging commit messages (post-commit in phabricator/bugzilla, or through getting committers to write commit messages in a certain format).&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLVM's CppBackend has been removed. As the commit message says, this backend has bit-rotted to the extent that it's not useful for its original purpose and doesn't generate code that compiles. &lt;a href="http://reviews.llvm.org/rL268631">r268631&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The AVR backend has seen a large amount of code merged in to LLVM. &lt;a href="http://reviews.llvm.org/rL268722">r268722&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The MIPS backend has seen some large changes to how relocations are handled. These are now represented using MipsMCExpr instead of MCSymbolRefExpr. As someone who has done quite a lot of (out-of-tree) LLVM backend work, I've always found it odd how some architectures have globally visible enum members in include/llvm/MC/MCExpr.h. &lt;a href="http://reviews.llvm.org/rL268379">r268379&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM builds should hopefully now be deterministic by default, as &lt;code>LLVM_ENABLE_TIMESTAMPS&lt;/code> is now opt-in rather than opt-out. In fact, a follow-up patch removed the option altogether. &lt;a href="http://reviews.llvm.org/rL268441">r268441&lt;/a>, &lt;a href="http://reviews.llvm.org/rL268670">r268670&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The AARch64 backend learned to combine adjustments to the stack pointer for callee-save stack memory and local stack memory. &lt;a href="http://reviews.llvm.org/rL268746">r268746&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang now supports &lt;code>-malign-double&lt;/code> for x86. This matches the default behaviour on x86-64, where i64 and f64 types are aligned to 8-bytes instead of 4. &lt;a href="http://reviews.llvm.org/rL268473">r268473&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Loop unrolling is no longer completely disabled for &lt;code>-Os&lt;/code>. &lt;a href="http://reviews.llvm.org/rL268509">r268509&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang's release notes (reflecting the state of current trunk) have been updated to say more about the state of C++1z support. &lt;a href="http://reviews.llvm.org/rL268663">r268663&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>libcxx will now build a libc++experimental.a static library to hold symbols from the experimental C++ Technical Specifications (e.g. filesystem). This library provides no ABI compatibility. &lt;a href="http://reviews.llvm.org/rL268443">r268443&lt;/a>, &lt;a href="http://reviews.llvm.org/rL268456">r268456&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>All usage of pthreads in libcxx has been refactored in to the &lt;code>__threading_support&lt;/code> header, with the intention of making it easier to retarget libcxx to platform that don't support pthreads. &lt;a href="http://reviews.llvm.org/rL268374">r268374&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libcxx gained support for the &lt;a href="https://isocpp.org/files/papers/N3916.pdf">polymorphic memory resources&lt;/a> C++ TS. &lt;a href="http://reviews.llvm.org/rL268829">r268829&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #122, May 2nd 2016</title><link>https://blog.llvm.org/2016/05/llvm-weekly-122-may-2nd-2016.html</link><pubDate>Mon, 02 May 2016 08:31:00 +0000</pubDate><guid>https://blog.llvm.org/2016/05/llvm-weekly-122-may-2nd-2016.html</guid><description>&lt;p>Welcome to the one hundred and twenty-second issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/122">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>GCC 6.1 &lt;a href="https://gcc.gnu.org/ml/gcc-announce/2016/msg00000.html">has been released&lt;/a>. Perhaps the most apparent user-visible change is that the C++ frontend now defaults to C++14.&lt;/p>&lt;p>The Rust compiler has &lt;a href="http://blog.rust-lang.org/2016/04/19/MIR.html">introduced a new intermediate representation&lt;/a>, MIR, used for optimisations prior to lowering to LLVM IR.&lt;/p>&lt;p>Tanya Lattner has &lt;a href="http://blog.llvm.org/2016/04/llvm-foundation-2016-announcements.html">written about the LLVM Foundation's plans for 2016&lt;/a>. The LLVM Foundation has established 3 main programs: Educational Outreach, Grants and Scholarships, and Women in Compilers and Tools.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Dean Michael Berris has shared an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098901.html">RFC on upstraming Google's 'XRay' function call tracing system&lt;/a>. For more information, you can read &lt;a href="https://storage.googleapis.com/xray-downloads/whitepaper/XRayAFunctionCallTracingSystem.pdf">the XRay whitepaper&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Sanjoy Das has suggested &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098853.html">generalising the AssumptionCache to AxiomAche&lt;/a>. He proposes maintaining separate lists of guards and assumptions within the AxiomCache.&lt;/p>&lt;/li>&lt;li>&lt;p>There's been some more activity in response to Phil Tomson's question about instruction scheduling. Christof Douma followed up &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098763.html">with some advice&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Chris Bieneman has suggested &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098780.html">raising the CMake minimum version to 3.4.3&lt;/a>. Renato Golin &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098811.html">flagged up some concerns&lt;/a>, with Chandler Carruth &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098814.html">offering a counterpoint&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Discussion has continued on the proposal to introduce a new LLVM sub-project for parallelism runtime and support libraries. This is probably best summarised by reading &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098734.html">Hal Finkel's thoughts on the way forward&lt;/a>, &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098820.html">C Bergström's concerns&lt;/a>, and &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098822.html">Jason Henline's proposed charter for the subproject&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Peter Collingbourne has shared an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098832.html">RFC on redesigning the LLD symbol table&lt;/a> in order to improve memory locality.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLVM now supports indirect call promotion based on value-profile information. This will promote indirect calls to a direct call guarded by a precondition. &lt;a href="http://reviews.llvm.org/rL267815">r267815&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM documentation has been extended with a CMake primer covering the basics of the CMake scripting language. &lt;a href="http://reviews.llvm.org/rL268906">r268096&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The PDB dumper has been refactored into a library. &lt;a href="http://reviews.llvm.org/rL267431">r267431&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The MinLatency attributed has been removed from SchedMachineModel. &lt;a href="http://reviews.llvm.org/rL267502">r267502&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>CodeGenPrepare will now use branch weight metadata to decide if a select should be turned into a branch. &lt;a href="http://reviews.llvm.org/rL267572">r267572&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for &lt;code>llvm.loop.distribute.enable&lt;/code> metadata was added. This indicates a loop should be split in to multiple loops. &lt;a href="http://reviews.llvm.org/rL267672">r267672&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The SystemZ backend now supports the Swift calling convention. &lt;a href="http://reviews.llvm.org/rL267823">r267823&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libFuzzer's documentation has been expanded and improved. &lt;a href="http://reviews.llvm.org/rL267892">r267892&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>clang-tidy gained a new checker for redundant expressions on both sides of a binary operator. &lt;a href="http://reviews.llvm.org/rL267574">r267574&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new clang-tidy check will warn for use of functions like &lt;code>atoi&lt;/code> and &lt;code>atol&lt;/code> that don't report conversion errors. &lt;a href="http://reviews.llvm.org/rL268100">r268100&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>nodebug&lt;/code> attribute on a global or static variable will now suppress all debug info for that variable. &lt;a href="http://reviews.llvm.org/rL267746">r267746&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A number of OpenMP features gained codegen support, such as the map clause and target data directive. &lt;a href="http://reviews.llvm.org/rL267808">r267808&lt;/a>, &lt;a href="http://reviews.llvm.org/rL267811">r267811&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLD now supports an &lt;code>-O0&lt;/code> option to produce output as quickly as possible. Currently this disables section merging at the cost of a potentially much larger output. &lt;a href="http://reviews.llvm.org/rL268056">r268056&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The symbol table in LLD's ELF linker has been redesigned with the intent of improving memory locality. The new design produces measurable speedups for the binaries tested in the commit message. &lt;a href="http://reviews.llvm.org/rL268178">r268178&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD's linkerscript support expanded to encompass comparison operators. &lt;a href="http://reviews.llvm.org/rL267832">r267832&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD performance on large executables has been improved by skipping scanRelocs on sections that are never mapped to memory at runtime (e.g. debug sections). &lt;a href="http://reviews.llvm.org/rL267917">r267917&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Foundation 2016 Announcements</title><link>https://blog.llvm.org/2016/04/llvm-foundation-2016-announcements.html</link><pubDate>Wed, 27 Apr 2016 08:48:00 +0000</pubDate><guid>https://blog.llvm.org/2016/04/llvm-foundation-2016-announcements.html</guid><description>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px;">With 2016 upon us, the &lt;a href="http://llvm.org/foundation">LLVM Foundation&lt;/a> would like to announce our plans for the year. If you are not familiar with the LLVM Foundation, we are a 501(c)(3) nonprofit that supports the LLVM Project and its community. We are best known for our LLVM Developers’ Meetings, but we are introducing several new programs this year.&amp;nbsp;&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px; min-height: 13px;">&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px;">The LLVM Foundation originally grew out of the need to have a legal entity to plan and support the annual LLVM Developers’ Meeting and LLVM infrastructure. However, as the Foundation was created we saw a need for help in other areas related to the LLVM project, compilers, and tools. The LLVM Foundation has established 3 main programs: Educational Outreach, Grants &amp;amp; Scholarships, and Women in Compilers &amp;amp; Tools.&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px; min-height: 13px;">&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px;">&lt;b>Educational Outreach&amp;nbsp;&lt;/b>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px; min-height: 13px;">&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px;">The LLVM Foundation plans to expand its educational materials and events related to the LLVM Project and compiler technology and tools.&amp;nbsp;&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px; min-height: 13px;">&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px;">First, the LLVM Foundation is excited to announce the 2016 Bay Area LLVM Developers’ Meeting will be held November 3-4 in San Jose, CA. This year will be the 10th anniversary of the developer meeting which brings together developers of LLVM, Clang, and related projects. For this year’s meeting, we are increasing our registration cap to 400 in order to allow more community members to attend.&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px; min-height: 13px;">&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px;">We also are investigating how we can support or be involved in other conferences in the field of compilers and tools. This may include things such as LLVM workshops or tutorials by sponsoring presenters, or providing instructional materials. We plan to work with other conference organizers to determine how the LLVM Foundation can be helpful and develop a plan going forward.&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px; min-height: 13px;">&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px;">However, we want to do more for the community and have brainstormed some ideas for the coming year. We plan to create some instructional videos for those just beginning with LLVM. These will be short 5-10 minute videos that introduce developers to the project and get them started. Documentation is always important, but we find that many are turning to videos as a way to learn.&amp;nbsp;&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px; min-height: 13px;">&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px; min-height: 13px;">&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px;">&lt;b>Grants &amp;amp; Scholarships&lt;/b>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px; min-height: 13px;">&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px;">We are creating a grants and scholarships program to cover student presenter travel expenses to the LLVM Developers’ Meetings. However, we also hope to expand this program to include student presenter travel to other conferences where the student is presenting their LLVM related work. Details on this program will be published once they have been finalized.&amp;nbsp;&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px; min-height: 13px;">&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px;">&lt;b>Women in Compilers &amp;amp; Tools&lt;/b>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px; min-height: 13px;">&lt;br />&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px;">Grace Hopper invented the first compiler and yet women are severely underrepresented in the field of compilers and tools. At the 2015 Bay Area LLVM Developers’ Meeting, we held a BoF on this topic and brainstormed ideas about what can be done. One idea was to increase LLVM awareness at technical conferences that have strong female participation. One such conference is the Grace Hopper Conference (GHC). The LLVM Foundation has submitted a proposal to present about LLVM and how to get involved with the LLVM open source community. We hope our submission is accepted, but if not, we are exploring other ways we can increase our visibility at GHC. Many of the other ideas from this BoF are being considered and actionable plans are in progress.&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px; min-height: 13px;">&lt;br />&lt;b>&lt;/b>&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px;">In addition, to these 3 programs, we will continue to support the LLVM Project’s infrastructure. The &lt;a href="http://llvm.org/">llvm.org&lt;/a> server will move to a new machine to increase performance and reliability. &amp;nbsp;&lt;/div>&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px; min-height: 13px;">&lt;br />&lt;/div>&lt;br />&lt;div style="-webkit-text-stroke-color: rgb(0, 0, 0); -webkit-text-stroke-width: initial; font-family: Helvetica; font-size: 11px;">We hope that you are excited about the work the LLVM Foundation will be doing in 2016. Our 2016 Plans &amp;amp; Budget may be viewed &lt;a href="http://llvm.org/foundation/documents/other/2016-LLVMFoundation-Outlook-Budget.pdf">here&lt;/a>. You may also contact our COO &amp;amp; President, Tanya Lattner (&lt;a href="mailto:tanyalattner@llvm.org">tanyalattner@llvm.org&lt;/a>) or the LLVM Foundation Board of Directors (&lt;a href="mailto:board@llvm.org">board@llvm.org&lt;/a>).&lt;/div>&lt;div>&lt;br />&lt;/div></description></item><item><title>LLVM Weekly - #121, Apr 25th 2016</title><link>https://blog.llvm.org/2016/04/llvm-weekly-121-apr-25th-2016.html</link><pubDate>Mon, 25 Apr 2016 04:20:00 +0000</pubDate><guid>https://blog.llvm.org/2016/04/llvm-weekly-121-apr-25th-2016.html</guid><description>&lt;p>Welcome to the one hundred and twenty-first issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/121">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Congratulations to the eight students who have &lt;a href="https://summerofcode.withgoogle.com/organizations/5450930363301888/#projects">been selected for LLVM projects on Google Summer of Code this year&lt;/a>. There's about a month before they start coding. The time between now and then is the 'community bonding period', so please do make them feel welcome.&lt;/p>&lt;p>The preliminary release schedule for LLVM/Clang 3.8.1 has &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098637.html">been published&lt;/a>. This would have a deadline of May 25th for requesting changes to be merged and would see the final release on June 15th.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>A series of RFCs have been posted around the idea of &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098355.html">adding an EfficiencySanitizer tool&lt;/a>. Like the existing sanitizer tools, this would rely on compiler-based dynamic instrumentation in order to detect problems in user code. The goal is to collect userful information with overhead less than 5x, ideally closer to 3x. Separate threads have been started to discuss an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098658.html">EfficiencySanitizer cache fragmentation tool&lt;/a> and &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098491.html">a working set tool&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Sanjoy Patel has proposed &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098642.html">removing the llvm.expect intrinsic&lt;/a>, in favour of using metadata to represent the same information. There isn't currently &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098657.html">full agreement on this&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Richard Trieu is seeking feedback on &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2016-April/048508.html">which floating point to boolean conversions should trigger warnings&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>How do you add fixup information to a MachineInstruction? Tim Northover &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098511.html">has the answer&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Elena Lepilkina has shared an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098372.html">RFC on adding support for custom metrics and test parameterisation to LNT&lt;/a>. The feedback so far seems positive.&lt;/p>&lt;/li>&lt;li>&lt;p>Phil Tomson is looking for &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098535.html">advice on instruction scheduling in LLVM&lt;/a>. As he notes in his email, it's part of LLVM that's seen a lot of changes over the past 8 years or so. I'm certainly interested in the answer here.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>An implementation of optimisation bisection support has landed. This helps to track down bugs by allowing optimisations to be selectively disabled at compile-time to identify the one introducing a miscompile. &lt;a href="http://reviews.llvm.org/rL267022">r267022&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The AArch64 and ARM thread pointer intrinsics have been merged to make a target-independent &lt;code>llvm.thread.pointer&lt;/code> intrinsic. &lt;a href="http://reviews.llvm.org/rL266818">r266818&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The llvm.load.relative intrinsic has been added. &lt;a href="http://reviews.llvm.org/rL267233">r267233&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>There have been more changes to DebugInfo which will require a bitcode upgrade. A script to perform this upgrade is linked in the commit message. &lt;a href="http://reviews.llvm.org/rL267296">r27296&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The ORC JIT API improved its support for RPC, including support for calling functions with return values. &lt;a href="http://reviews.llvm.org/rL266581">r266581&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The patchable-function function attribution has been introduced, indicating that the function should be easily patchable at runtime. &lt;a href="http://reviews.llvm.org/rL266715">r266715&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The IntrReadArgMem intrinsic property has been split in to IntrReadMem and IntrArgMemOnly. &lt;a href="http://reviews.llvm.org/rL267021">r267021&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The MachineCombiner gained the ability to combine AArch64 fmul and fadd in to an fmadd. &lt;a href="http://reviews.llvm.org/rL267328">r267328&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Scheduling itineraries were added for Sparc, specifically for the LEON processors. &lt;a href="http://reviews.llvm.org/rL267121">r267121&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A prototype of an include fixing tool was created. The indexer remains to be written. &lt;a href="http://reviews.llvm.org/rL266870">r266870&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new warning has been added, which will trigger if the compiler tries to make an implicit instantiation of a template but cannot find the template definition. &lt;a href="http://reviews.llvm.org/rL266719">r266719&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Initial driver flags for EfficiencySanitizer were added. &lt;a href="http://reviews.llvm.org/rL267059">r267059&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The initial EfficiencySanitizer base runtime library was added to compiler-rt. It doesn't do much of anything yet. &lt;a href="http://reviews.llvm.org/rL267060">r267060&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD learned to support the linkerscript ALIGN command. &lt;a href="http://reviews.llvm.org/rL267145">r267145&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB can now parse EABI attributes for an ELF input. &lt;a href="http://reviews.llvm.org/rL267291">r267291&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #120, Apr 18th 2016</title><link>https://blog.llvm.org/2016/04/llvm-weekly-120-apr-18th-2016.html</link><pubDate>Mon, 18 Apr 2016 06:05:00 +0000</pubDate><guid>https://blog.llvm.org/2016/04/llvm-weekly-120-apr-18th-2016.html</guid><description>&lt;p>Welcome to the one hundred and twentieth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/120">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>This week has seen not one, but two articles about LLVM and profile-guided optimisation. Dig in John Engelen's article about &lt;a href="https://johanengelen.github.io/ldc/2016/04/13/PGO-in-LDC-virtual-calls.html">optimising D's virtual function calls with PGO&lt;/a>, then read Geoffroy Couprie's article about &lt;a href="https://unhandledexpression.com/2016/04/14/using-llvm-pgo-in-rust/">PGO with Rust&lt;/a>.&lt;/p>&lt;p>The next Cambridge (UK) social &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098248.html">will be at 7.30pm on April 20th&lt;/a>, at the Cambridge Blue.&lt;/p>&lt;p>Alex Denisov has written a blog post &lt;a href="http://lowlevelbits.org/llvm-based-mutation-testing-system/">around the idea of building a mutation testing system using LLVM&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>James Knight is &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098218.html">requesting a way to test changes before committing them&lt;/a>. Renato Golin had a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098219.html">thorough response&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Eric Fiselier has shared an &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2016-April/048411.html">RFC on packaging the proposed libc++ filesystem library&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Teresa Johnson has shared an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098272.html">RFC on the ThinLTO distributed backend interface&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Jeroen Dobbelaere is wondering if there's &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098303.html">any interest in an LLVM social in Leuven, Belgium&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Mingwha Wang asks if there's any support for &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098227.html">outlining in LLVM&lt;/a>. You'll want to &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098229.html">look at CodeExtractor&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>AtomicExpandPass learned to lower various atomic operations to &lt;code>__atomic_*&lt;/code> library calls. The eventual aim is to move all atomic lowering from Clang to LLVM. &lt;a href="http://reviews.llvm.org/rL266115">r266115&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Targets can now define an inlining threshold multiplier, to e.g. increase the likelihood of inlining on platforms where calls are very expensive. &lt;a href="http://reviews.llvm.org/rL266405">r266405&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The ownership between DICompileUnit and DISubprogram has been reversed. This may break tests for your out-of-tree backend, but the commit has a link to a Python script to update your testcases. &lt;a href="http://reviews.llvm.org/rL266446">r266446&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-readobj learned to print a histogram of an input ELF file's .gnu.hash . &lt;a href="http://reviews.llvm.org/rL265967">r265967&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>More target-specific support for the Swift calling convention (on ARM, AARch64, and X86) has landed. Also, a callee save register is used for the swiftself parameter. &lt;a href="http://reviews.llvm.org/rL265997">r265997&lt;/a>, &lt;a href="http://reviews.llvm.org/rL266251">r266251&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new &lt;code>allocsize&lt;/code> attribute has been introduced. This indicates the given function is an allocation function. &lt;a href="http://reviews.llvm.org/rL266032">r266032&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>analyzeSiblingValues has been replaced with a new lower-complexity implementation in order to reduce compile times. &lt;a href="http://reviews.llvm.org/rL266162">r266162&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The AMDGPU backend gained a skeleton GlobalISel implementation. &lt;a href="http://reviews.llvm.org/rL266356">r266356&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Every use of getGlobalContext other than the C API has been removed. &lt;a href="http://reviews.llvm.org/rL266379">r266379&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang gained support for the GCC ifunc attribute. &lt;a href="http://reviews.llvm.org/rL265917">r265917&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>__unaligned&lt;/code> type qualifier was implemented for MSVC compatibility. &lt;a href="http://reviews.llvm.org/rL266415">r266415&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for C++ core guideline Type.6: always initialize a member variable was completed in clang-tidy. &lt;a href="http://reviews.llvm.org/rL266191">r266191&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new clang-tidy checker for suspicious sizeof expressions was added. &lt;a href="http://reviews.llvm.org/rL266451">r266451&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The way relocations are applied in the new ELF linker has been reworked. &lt;a href="http://reviews.llvm.org/rL266158">r266158&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>ELF LLD now supports parallel codegen for LTO using splitCodeGen. &lt;a href="http://reviews.llvm.org/rL266484">r266484&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for Linux on SystemZ in LLDB landed. &lt;a href="http://reviews.llvm.org/rL266308">r266308&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #119, Apr 11th 2016</title><link>https://blog.llvm.org/2016/04/llvm-weekly-119-apr-11th-2016.html</link><pubDate>Mon, 11 Apr 2016 06:03:00 +0000</pubDate><guid>https://blog.llvm.org/2016/04/llvm-weekly-119-apr-11th-2016.html</guid><description>&lt;p>Welcome to the one hundred and nineteenth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/119">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Last week the slides from the &lt;a href="http://llvm.org/devmtg/2016-03/">recent EuroLLVM 2016 Developers' Meeting&lt;/a> made it online. This week this has been followed by &lt;a href="https://www.youtube.com/playlist?list=PL_R5A0lGi1ADuZKWUJOVOgXr2dRW06e55">videos of the talks from the conference&lt;/a>.&lt;/p>&lt;p>John Regehr has written about &lt;a href="http://blog.regehr.org/archives/1384">efficient integer overflow checking in LLVM&lt;/a>, looking at cases where LLVM can and cannot remove unnecessary overflow checks, and how this might be improved.&lt;/p>&lt;p>Version 0.13 of Pocl, the portable OpenCL implementation &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/097953.html">has been released&lt;/a>. This release works with LLVM/Clang 3.8 and 3.7, and adds initial OpenCL 2.0 support and improved HSA support.&lt;/p>&lt;p>Serge Guelton at QuarksLab has written up a really useful guide to &lt;a href="http://blog.quarkslab.com/implementing-a-custom-directive-handler-in-clang.html">implementing a custom directive handler in Clang&lt;/a>.&lt;/p>&lt;p>Microsoft's Visual C++ team are &lt;a href="https://blogs.msdn.microsoft.com/vcblog/2016/04/06/clangc2-we-need-your-advice/">looking for feedback on Clang/C2&lt;/a> (Clang with Microsoft CodeGen).&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>James Molloy has posted an RFC on adding support for &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/097936.html">constant folding calls to math.h functions on long doubles&lt;/a>. Currently these functions aren't constant-folded as the internal APFloat class doesn't implement them and long double operations aren't portable. Solutions include adding support to APFloat, linking against libMPFR to provide compile-time evaluation, or recognising when the long double format of the host and target are the same, so the host math library can be called. From the responses so far, there seems to be some push-back on adding the libMPFR dependency.&lt;/p>&lt;/li>&lt;li>&lt;p>Sanjoy Das has an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/098034.html">adding a patchable-prologue attribute&lt;/a>. This would be used to indicate that the function's prologue is compiled so as to provide support for easy hot-patching.&lt;/p>&lt;/li>&lt;li>&lt;p>Ulrich Weigand has shared a patch for &lt;a href="http://lists.llvm.org/pipermail/lldb-dev/2016-April/010067.html">supporting LLDB on Linux on SystemZ&lt;/a>. The patchset contains many big-endian fixes, and may be of interest to others looking at porting LLDB.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The Swift calling convention as well as support for the 'swifterror' argument has been added. &lt;a href="http://reviews.llvm.org/rL265433">r265433&lt;/a>, &lt;a href="http://reviews.llvm.org/rL265480">r265480&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Work on GlobalISel continues with many commits related to the assignment of virtual registers to register banks. &lt;a href="http://reviews.llvm.org/rL265445">r265445&lt;/a>, &lt;a href="http://reviews.llvm.org/rL265440">r265440&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM will no longer perform inter-procedural optimisation over functions that can be "de-refined". &lt;a href="http://reviews.llvm.org/rL265762">r265762&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The substitutions supported by lit are now documented. &lt;a href="http://reviews.llvm.org/rL265314">r265314&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Unrolled loops now execute the remainder in an epilogue rather than the prologue. This should produce slightly improved code. &lt;a href="http://reviews.llvm.org/rL265388">r265388&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang gained necessary support for the Swift calling convention. &lt;a href="http://reviews.llvm.org/rL265324">r265324&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>New flags &lt;code>-fno-jump-tables&lt;/code> and &lt;code>-fjump-tables&lt;/code> can be used to disable/enable support for jump tables when lowering switch statements. &lt;a href="http://reviews.llvm.org/rL265425">r265425&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>TargetOptions is now passed through all the TargetInfo constructors. This will allow target information to be modified based on the ABI selected. &lt;a href="http://reviews.llvm.org/rL265640">r265640&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A large number of intrinsics from emmintrin.h now have Doxygen docs. &lt;a href="http://reviews.llvm.org/rL265844">r265844&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>clang-tidy gained a new check to flag initializers of globals that access extern objects, leading to potential order-of-initialization issues. &lt;a href="http://reviews.llvm.org/rL265774">r265774&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD's ELF linker gained new options &lt;code>--start-lib&lt;/code>, &lt;code>--end-lib&lt;/code>, &lt;code>--no-gnu-unique&lt;/code>, &lt;code>--strip-debug&lt;/code>. &lt;a href="http://reviews.llvm.org/rL265710">r265710&lt;/a>, &lt;a href="http://reviews.llvm.org/rL265717">r265717&lt;/a>, &lt;a href="http://reviews.llvm.org/rL265722">r265722&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #118, Apr 4th 2016</title><link>https://blog.llvm.org/2016/04/llvm-weekly-118-apr-4th-2016.html</link><pubDate>Mon, 04 Apr 2016 04:22:00 +0000</pubDate><guid>https://blog.llvm.org/2016/04/llvm-weekly-118-apr-4th-2016.html</guid><description>&lt;p>Welcome to the one hundred and eighteenth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/118">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Almost all slides from the recent EuroLLVM conference are &lt;a href="http://llvm.org/devmtg/2016-03/">now available online&lt;/a> for your enjoyment.&lt;/p>&lt;p>Some readers my be interested in a new paper about the 'LifeJacket' tool for &lt;a href="http://arxiv.org/abs/1603.09290">verifying precise floating-point optimisations in LLVM&lt;/a>.&lt;/p>&lt;p>Christian Neumüller has written a &lt;a href="https://github.com/oberon00/synth">new tool for syntax highlighting and cross-referencing C and C++ source&lt;/a> using libclang.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Chandler Carruth suggests that just like commits that break codegen are immediately reverted, &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/097849.html">commits that introduce large, especially super-linear compile time regressions should be reverted&lt;/a>. There's a lot of agreement in the general principle in replies, though some point out that much of the slowdown across the past few LLVM and Clang versions is due to a large number of small changes.&lt;/p>&lt;/li>&lt;li>&lt;p>James Molloy is interested in discussing &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-April/097877.html">how LLVM could learn the size of a particular std::vector&lt;/a> and omit unnecessary checks etc.&lt;/p>&lt;/li>&lt;li>&lt;p>Nick Johnson has a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/097755.html">couple of questions about IfConversion in LLVM&lt;/a>. They haven't been answered yet, but I know I'd be interested in the answer.&lt;/p>&lt;/li>&lt;li>&lt;p>Russell Wallace has kicked off a very useful thread about &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/097675.html">generating calls to existing functions from the JIT&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Zachary Turner is interested in &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/097756.html">people's feelings on requiring a minimum of MSVC 2015 to compile LLVM and Clang&lt;/a>. The general feeling so far is that it's too early for this, as typically the policy is to support the last two major MSVC releases.&lt;/p>&lt;/li>&lt;li>&lt;p>Hans Wennborg has kindly highlighted a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/097844.html">recent API change to TargetFrameLowering::eliminateCallFramePseudoInstr&lt;/a> that will be of interest to maintainers of out-of-tree backends.&lt;/p>&lt;/li>&lt;li>&lt;p>Matt Masten has posted an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/097862.html">vectorizing loops with calls to math functions using SVML&lt;/a> (Intel's short vector math library).&lt;/p>&lt;/li>&lt;li>&lt;p>Eric Christopher has posted an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/097773.html">migrating debug type information generation from the backends to the frontend&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Ke Bai's &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/097355.html">memory scope proposal&lt;/a> hasn't really seen any responses up to now. Philip Reames does &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/097726.html">share some feedback&lt;/a>, but notes it's unlikely this proposal could realistically be merged in to LLVM unless there is more interest. If this is an area that interests you, then please do have a good read of Ke's proposal.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The Lanai backend has landed. &lt;a href="http://reviews.llvm.org/rL264578">r264578&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new &lt;code>llvm.experimental.guard&lt;/code> intrinsic has been added. As described in the accompanying documentation, along with deoptimization operand bundles this allows frontends to express guards or checks on optimistic assumptions made during compilation. &lt;a href="http://reviews.llvm.org/rL264976">r264976&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for a number of new Altivec instructions has been added. Amazingly, this includes BCD (Binary Coded Decimal) instructions. &lt;a href="http://reviews.llvm.org/rL264568">r264568&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The concept of MachineFunctionProperties has been introduced, with the first property being AllVRegsAllocated. This allows passes to declare that they require a particular property, in this case requiring that they be run after regalloc. &lt;a href="http://reviews.llvm.org/rL264593">r264593&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>On X86, push will now be used in preference to mov at all optimisation levels (before it was only enabled for &lt;code>-Os&lt;/code>). &lt;a href="http://reviews.llvm.org/rL264966">r264966&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM's support library can now compute SHA1 hashes. This is used to implement a 'build-id'. &lt;a href="http://reviews.llvm.org/rL265094">r265094&lt;/a>, &lt;a href="http://reviews.llvm.org/rL265095">r265095&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>When metadata is only referenced in a single function, it will now be emitted just in that function block. The aim of this is to improve the potential of lazy-loading. &lt;a href="http://reviews.llvm.org/rL265226">r265226&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The Lanai backend is now supported in the Clang driver. &lt;a href="http://reviews.llvm.org/rL264655">r264655&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libTooling gained a handy formatAndApplyAllReplacements function. &lt;a href="http://reviews.llvm.org/rL264745">r264745&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Parts of LLD are starting to use the new Error handling. &lt;a href="http://reviews.llvm.org/rL264910">r264910&lt;/a>, &lt;a href="http://reviews.llvm.org/rL264921">r264921&lt;/a>, &lt;a href="http://reviews.llvm.org/rL264924">r264924&lt;/a>, and more.&lt;/p>&lt;/li>&lt;li>&lt;p>Infrastructure was added to LLD for generating thunks (as required on platforms like MIPS when calling PIC code from non-PIC). &lt;a href="http://reviews.llvm.org/rL265059">r265059&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>My Little LLVM: Undefined Behavior is Magic!</title><link>https://blog.llvm.org/2016/04/undefined-behavior-is-magic.html</link><pubDate>Fri, 01 Apr 2016 00:00:00 +0000</pubDate><guid>https://blog.llvm.org/2016/04/undefined-behavior-is-magic.html</guid><description>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="https://2.bp.blogspot.com/-uilL1GOdl0E/WrVbVxsAxHI/AAAAAAAAAoU/oDi-ww1rx8I-xlHhmFHtUiLK_FgCUVajQCLcBGAs/s1600/DragonPony.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" data-original-height="961" data-original-width="1600" height="384" src="https://2.bp.blogspot.com/-uilL1GOdl0E/WrVbVxsAxHI/AAAAAAAAAoU/oDi-ww1rx8I-xlHhmFHtUiLK_FgCUVajQCLcBGAs/s640/DragonPony.png" width="640" />&lt;/a>&lt;/div>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">There’s been &lt;a href="https://www.google.com/#q=%22undefined+behavior%22+%22should+just%22+OR+%22just+work%22+site:news.ycombinator.com">lots of discussion online&lt;/a> (&lt;a href="http://www.complang.tuwien.ac.at/kps2015/proceedings/KPS_2015_submission_29.pdf">and&lt;/a> &lt;a href="https://gcc.gnu.org/ml/gcc/2016-02/msg00381.html">then&lt;/a> &lt;a href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html">quite&lt;/a> &lt;a href="http://blog.regehr.org/archives/761">some&lt;/a> &lt;a href="https://groups.google.com/forum/m/#!msg/boring-crypto/48qa1kWignU/o8GGp2K1DAAJ">more&lt;/a>) &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">about compilers abusing undefined behavior. As a response the LLVM compiler infrastructure is rebranding and adopting a motto to make undefined behavior friendlier and less prone to &lt;/span>&lt;a href="https://youtu.be/H6g15JroPow?t=1m32s" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">corruption&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">The re-branding puts to rest a long-standing issue with LLVM’s “dragon” logo &lt;/span>&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">&lt;a href="http://scifi.stackexchange.com/questions/34088/differences-between-dragon-drake-wyrm-and-wyvern" style="text-decoration: none;">actually being a wyvern&lt;/a>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> with an &lt;a href="https://twitter.com/siracusa/status/659741883166547968" target="_blank">upside-down head&lt;/a>, a special form of undefined behavior in its own right. The logo is now &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">clearly&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> a pegasus pony.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Another great side-effect of this rebranding is increased security by auto-magically closing all vulnerabilities used by the hacker who goes by the pseudonym “&lt;/span>&lt;a href="https://www.google.com/search?q=pinkie%20pie%20hacker" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">Pinkie Pie&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">”.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">These new features are enabled with the &lt;/span>&lt;span style="background-color: transparent; color: black; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">-rainbow&lt;/span>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> clang option, in honor of Rainbow Dash’s unary name.&lt;/span>&lt;br />&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;br />&lt;a name='more'>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;span style="font-family: &amp;quot;arial&amp;quot;; font-size: 21.333333333333332px; white-space: pre-wrap;">A Few Examples&lt;/span>&lt;br />&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">C++’s memory model specifies that data races are undefined behavior. It is well established that &lt;/span>&lt;a href="http://wg21.link/n4455" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">no sane compiler would optimize atomics&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">, LLVM will therefore supplement the Standard’s &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">happens-before relationship&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> with an LLVM-specific &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">happens-to-work relationship&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">. On most architectures this will be implemented with micro-pause primitives such as x86’s &lt;/span>&lt;span style="background-color: transparent; color: black; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">rep rep rep nop&lt;/span>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> instruction.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Shifts by bit-width or larger will now return a normally-distributed random number. This also obsoletes &lt;/span>&lt;span style="background-color: transparent; color: black; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">rand()&lt;/span>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> and &lt;/span>&lt;span style="background-color: transparent; color: black; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">std::random_shuffle&lt;/span>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">bool&lt;/span>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> now obeys the rules of &lt;/span>&lt;a href="https://en.wikipedia.org/wiki/Truthiness" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">truthiness&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> to avoid that annoying “but what if it’s &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">not&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> zero or one?” interview question. Further, incrementing a &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">bool&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> with &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">++&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> now does the right thing.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Atomic integer arithmetic is already specified to be two’s complement. Regular arithmetic will therefore now also be atomic. Except when &lt;/span>&lt;span style="background-color: transparent; color: black; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">volatile&lt;/span>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">, but not when &lt;/span>&lt;span style="background-color: transparent; color: black; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">volatile&lt;/span>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> atomic.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html#899" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">NaNs&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> will now compare equal, subnormals are free to self-classify as normal / zero / other, negative zero simply won’t be a thing, IEEE-754 has been upgraded to PONY-754, floats will still &lt;/span>&lt;a href="http://en.cppreference.com/w/cpp/types/numeric_limits/float_round_style" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">round with style&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">, and generating a signaling NaN is now guaranteed to &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">not&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> be quiet by being equivalent to &lt;/span>&lt;span style="background-color: transparent; color: black; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">putchar('\a')&lt;/span>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">. While we’re at it none of &lt;/span>&lt;span style="background-color: transparent; color: black; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">math.h&lt;/span>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> will set &lt;/span>&lt;span style="background-color: transparent; color: black; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">errno&lt;/span>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> anymore. This has nothing to do with undefined behavior but seriously, &lt;/span>&lt;span style="background-color: transparent; color: black; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;">errno&lt;/span>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">?&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Type-punning isn’t a thing anymore. We’re renaming it to type-pony-ing, but it doesn’t do anything surprising besides throw parties. &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">AND WHO DOESN’T LIKE PARTIES‽ EVEN SECURITY PEOPLE DO!&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.6667px; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> 🎉&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;h2 dir="ltr" style="line-height: 1.38; margin-bottom: 6pt; margin-top: 18pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 21.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">A Word From Our Sponsors&lt;/span>&lt;/h2>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">The sanitizers—especially &lt;/span>&lt;a href="http://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">undefined behavior sanitizer&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">, &lt;/span>&lt;a href="http://clang.llvm.org/docs/AddressSanitizer.html" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">address sanitizer&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> and &lt;/span>&lt;a href="http://clang.llvm.org/docs/ThreadSanitizer.html" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">thread sanitizer&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">—are great tools when dealing with undefined behavior. Use them on your tests, combine them with &lt;/span>&lt;a href="http://llvm.org/docs/LibFuzzer.html" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">fuzzers&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">, try them as cupcake topping! Be warned: their runtimes aren’t designed to be secure and you shouldn’t ship them in production code!&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;h2 dir="ltr" style="line-height: 1.38; margin-bottom: 6pt; margin-top: 18pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 21.333333333333332px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Cutie Marks&lt;/span>&lt;/h2>&lt;br />&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">To address the &lt;/span>&lt;a href="https://twitter.com/horse_clang" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">horse&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> in the room: we’ve left the new LLVM logo’s cutie mark as &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">implementation-defined&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">. Different instances of the logo can use their own cutie mark to illustrate their proclivities, but must clearly document them.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;i>&lt;span style="font-size: xx-small;">Posted by &lt;a href="https://twitter.com/jfbastien">JF Bastien&lt;/a> and &lt;a href="https://twitter.com/Bigcheesegs">Michael Spencer&lt;/a>.&lt;/span>&lt;/i>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;arial&amp;quot;; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;i>&lt;span style="font-size: xx-small;">&lt;br />&lt;/span>&lt;/i>&lt;/span>&lt;/div></description></item><item><title>LLVM Weekly - #117, Mar 28th 2016</title><link>https://blog.llvm.org/2016/03/llvm-weekly-117-mar-28th-2016.html</link><pubDate>Mon, 28 Mar 2016 06:22:00 +0000</pubDate><guid>https://blog.llvm.org/2016/03/llvm-weekly-117-mar-28th-2016.html</guid><description>&lt;p>Welcome to the one hundred and seventeenth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/117">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Google Summer of Code applications are now closed. Applicants and interested third-parties can look forward to finding out which projects were selected &lt;a href="https://summerofcode.withgoogle.com/how-it-works/">on April 22nd&lt;/a>.&lt;/p>&lt;p>Ramkumar Ramachandra has written a blog post giving a &lt;a href="http://artagnon.com/inside-a-register-allocator/">whirlwind tour of the internals of LLVM's fast register allocator&lt;/a> (FastRegAlloc.cpp).&lt;/p>&lt;p>Alex Denisov has blogged about &lt;a href="http://lowlevelbits.org/system-under-test-llvm/">the various test suites used within the LLVM project&lt;/a>.&lt;/p>&lt;p>Version 1.13 of the TTA-based Co-design Environment (TCE) has &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/097139.html">been released&lt;/a>. This adds support for LLVM 3.8.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Last week, Jia Chen's thread about &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096851.html">pointer analysis in LLVM&lt;/a> had yet to receive replies. It's now received some extensive discussion. Daniel Berlin argues there is &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/097152.html">lower hanging fruit than improving AA&lt;/a>. It does seem there's &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/097372.html">interest in getting in getting cfl-aa turned on by default&lt;/a>, which will require some careful bug fixing.&lt;/p>&lt;/li>&lt;li>&lt;p>The issue of LLD and fatal errors has again surfaced on the mailing list. The more productive line of discussion focused around what should be expected of LLD when given maliciously corrupted inputs. Rui Ueyama is suggesting &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/097445.html">adding a verifier pass&lt;/a> which could be optionally enabled or disabled.&lt;/p>&lt;/li>&lt;li>&lt;p>Andrew Kaylor has shared an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/097617.html">RFC on adding new support to help triage optimisation-related failures&lt;/a>. Optimisation passes are assigned numbers which can be used to help bisect a failure. Michael Gottesman reports &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/097637.html">a similar approach used in Swift&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Samuel F Antao has &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2016-March/048087.html">summarised recent discussion on unified offloading support in Clang&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Duncan P. N. Exon Smith has proposed an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/097419.html">RFC on lazy-loading of debug info metadata&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>What does it mean for a platform to support a type but not support a particular operation? Krzysztof Parzyszek is kind enough to provide a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/097489.html">clear and straight-forward answer&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Applications for Google Summer of Code have closed, but the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/097380.html">list of new project ideas&lt;/a> from Philip Reames is a good starting point for anybody looking for a way to get stuck in to making impactful contributions to LLVM.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A new utility, &lt;code>update_test_checks.py&lt;/code> was added to update opt or llc test cases with new FileCheck patterns. &lt;a href="http://reviews.llvm.org/rL264357">r264357&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Non-power-of-2 loop unroll count pragmas are now supported. &lt;a href="http://reviews.llvm.org/rL264407">r264407&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The NVPTX backend gained a new address space inference pass. &lt;a href="http://reviews.llvm.org/rL263916">r263916&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Instances of Error are now convertible to &lt;code>std::error_code&lt;/code>. Conversions are also available between &lt;code>Expected&amp;lt;T&amp;gt;&lt;/code> and &lt;code>ErrorOr&amp;lt;T&amp;gt;&lt;/code>. &lt;a href="http://reviews.llvm.org/rL264221">r264221&lt;/a>, &lt;a href="http://reviews.llvm.org/rL264238">r264238&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Hexagon gained supported for run-time stack overflow checking. &lt;a href="http://reviews.llvm.org/rL264328">r264328&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang now supports lambda capture of &lt;code>*this&lt;/code> by value. &lt;a href="http://reviews.llvm.org/rL263921">r263921&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The bitreverse builtins are now documented. &lt;a href="http://reviews.llvm.org/rL264203">r264203&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLDB will fix inputted expressions with 'trivial' mistakes automatically. &lt;a href="http://reviews.llvm.org/rL264379">r264379&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>ThreadSanitizer debugging support was added to LLDB. &lt;a href="http://reviews.llvm.org/rL264162">r264162&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Polly gained documentation to describe how it fits in to the LLVM pass pipeline. &lt;a href="http://reviews.llvm.org/rL264446">r264446&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB has been updated to handle the UTF-16 APIs on Windows. &lt;a href="http://reviews.llvm.org/rL264074">r264074&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #116, Mar 21st 2016</title><link>https://blog.llvm.org/2016/03/llvm-weekly-116-mar-21st-2016.html</link><pubDate>Mon, 21 Mar 2016 05:06:00 +0000</pubDate><guid>https://blog.llvm.org/2016/03/llvm-weekly-116-mar-21st-2016.html</guid><description>&lt;p>Welcome to the one hundred and sixteenth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/116">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>If you're a student and would like to get paid to work on an LLVM-related project over the summer then do consider &lt;a href="https://summerofcode.withgoogle.com/organizations/5450930363301888/">applying for Google Summer of Code with LLVM&lt;/a>. More details about Summer of Code are available &lt;a href="https://summerofcode.withgoogle.com/how-it-works/">here&lt;/a>. The deadline for applications is this Friday, March 25th at 1900 GMT. I'd also encourage you to look at &lt;a href="http://www.lowrisc.org/docs/gsoc-2016-ideas/">lowRISC's project ideas&lt;/a> if you have an interest in open source hardware.&lt;/p>&lt;p>Stephen Kelly has written about his &lt;a href="https://steveire.wordpress.com/2016/03/19/aaargh-aaa-right-good-and-hygenic/">new Clang-based tool for porting a C++ codebase to use almost-always-auto&lt;/a>. As was pointed out on Twitter, Ryan Stortz from Trail of Bits has a tools that removes auto and does &lt;a href="https://github.com/trailofbits/clang-tidy-audit">roughly the opposite&lt;/a>.&lt;/p>&lt;p>Honza Hubička has written up his experiments of &lt;a href="http://hubicka.blogspot.co.uk/2016/03/building-libreoffice-with-gcc-6-and-lto.html">building LibreOffice with GCC6 and LTO&lt;/a>. This includes a comparison to a build using LLVM and Clang.&lt;/p>&lt;p>Nick Clifton has shared an update for February and March &lt;a href="https://gcc.gnu.org/ml/gcc/2016-03/msg00164.html">on the GNU toolchain&lt;/a> that may be of interest.&lt;/p>&lt;p>The developer of the Capstone disassembly framework and the Unicorn multi-architecture simulator is running a funding campaign for the &lt;a href="http://www.keystone-engine.org/">Keystone multi-architecture assembler framework&lt;/a>. Like Capstone, this will build on LLVM but also &lt;a href="http://www.keystone-engine.org/docs/beyond_llvm.html">aims to go beyond it&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Ehsan Amiri has shared an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096901.html">RFC on a change in the InstCombine canonical form&lt;/a>. In the ensuing discussion, the question of the current state of the typeless pointer work was raised &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096928.html">and answered&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Sean Silva has shared some &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096879.html">recent performance observations about LLD with --build-id&lt;/a>. Adding support for this option has added a measurable slowdown which should be considered when reviewing comparisons with other linkers from before it was added.&lt;/p>&lt;/li>&lt;li>&lt;p>I normally prefer to link to mailing list threads where there has already been some discussion or attempts at answers, but I think this one is worth some more eyeballs. Jia Chen is interested in &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096851.html">the tradeoffs in LLVM using more sophisticated pointer analyses&lt;/a>. There are no responses at the time of writing, but it seems an interesting question.&lt;/p>&lt;/li>&lt;li>&lt;p>Huw Davies has proposed a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096762.html">new IR attribute, incoming-stack-align&lt;/a>. This is needed for Wine which may require functions to have an ABI stack alignment different to the host's alignment.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A new Error support class has been added to support structured error handling. See the associated updates to the LLVM programmer's manual for more info. &lt;a href="http://reviews.llvm.org/rL263609">r263609&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>New documentation was committed for advanced CMake build configurations. &lt;a href="http://reviews.llvm.org/rL263834">r263834&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support was added for MIPS32R6 compact branches. &lt;a href="http://reviews.llvm.org/rL263444">r263444&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The MemCpyOptimizer will now attempt to reorder instructions in order to create an optimisable sequence. &lt;a href="http://reviews.llvm.org/rL263503">r263503&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-readobj learnt to print sections and relocations in the GNU style. &lt;a href="http://reviews.llvm.org/rL263561">r263561&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Attributes have been added for the &lt;code>preserve_mostcc&lt;/code> and &lt;code>preserve_allcc&lt;/code> calling conventions. &lt;a href="http://reviews.llvm.org/rL263647">r263647&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>clang-format will handle some cases of automatic semicolon insertion in JavaScript. &lt;a href="http://reviews.llvm.org/rL263470">r263470&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang learned to convert some Objective-C message sends to runtime calls. &lt;a href="http://reviews.llvm.org/rL263607">r263607&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>AddressSanitizer is now supported on mips/mips64 Android. &lt;a href="http://reviews.llvm.org/rL263261">r263261&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The documentation on the LLD linker has added a few numbers to give an idea of the sort of inputs it needs to handle. e.g. Chrome with debug info contains roughly 13M relocations, 6.3M symbols, 1.8M sections and 17k files. &lt;a href="http://reviews.llvm.org/rL263466">r263466&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #115, Mar 14th 2016</title><link>https://blog.llvm.org/2016/03/llvm-weekly-115-mar-14th-2016.html</link><pubDate>Mon, 14 Mar 2016 04:56:00 +0000</pubDate><guid>https://blog.llvm.org/2016/03/llvm-weekly-115-mar-14th-2016.html</guid><description>&lt;p>Welcome to the one hundred and fifteenth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/115">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;p>We have an LLVM-related research position currently being &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096751.html">advertised here at the University of Cambridge Computer Lab&lt;/a>. If you'd like an informal chat about what it's like working in this group or on this project please don't hesitate to get in touch with me.&lt;/p>&lt;h3>News and articles from around the web&lt;/h3>&lt;p>LLVM and Clang 3.8 have now been released. Check out the &lt;a href="http://llvm.org/releases/3.8.0/docs/ReleaseNotes.html">LLVM&lt;/a> and &lt;a href="http://llvm.org/releases/3.8.0/tools/clang/docs/ReleaseNotes.html">Clang&lt;/a> release notes for a run-down of the new features.&lt;/p>&lt;p>It's GDC this week and if you're attending you may be interested that there's an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096446.html">LLVM meetup scheduled for Thursday&lt;/a>.&lt;/p>&lt;p>Felix Angell has a detailed blog post introducing &lt;a href="https://blog.felixangell.com/an-introduction-to-llvm-in-go/">generating LLVM IR from Go&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Jason Henline has posted a very detailed RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096576.html">creating a new parallel runtime library&lt;/a>. StreamExecutor wraps both the CUDA and OpenCL runtimes and is used internally at Google.&lt;/p>&lt;/li>&lt;li>&lt;p>Ed Maste has shared an update on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096449.html">linking the FreeBSD base system using LLD&lt;/a>. With a few workarounds, the full amd64 FreeBSD system is now buildable.&lt;/p>&lt;/li>&lt;li>&lt;p>Vedant Kumar has shared an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096643.html">RFC on removing redundant profile counter updates&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Sean Silva is seeking to &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096529.html">formalize the 'revert for more design review policy'&lt;/a>. Overall, the comments seem to be positive.&lt;/p>&lt;/li>&lt;li>&lt;p>With EuroLLVM coming up this week, people have been advertising their birds of a feather sessions. e.g. the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096667.html">LLVM on PowerPC and SystemZ&lt;/a> session and the session on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096638.html">surviving downstream&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Rafael Espíndola reports that compilation with LLVM and Clang has been &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096488.html">getting slower over time&lt;/a>. Hal Finkel has some good input on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096491.html">potential areas for improvement&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Loop invariant code motion learnt the ability the exploit the fact a memory location is known to be thread-local. &lt;a href="http://reviews.llvm.org/rL263072">r263072&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new &lt;code>llvm.experimental.deoptimize&lt;/code> intrinsic has been added. &lt;a href="http://reviews.llvm.org/rL263281">r26328&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A ThinLTOCodeGenerator was added in order to provide a proof-of-concept implementation. &lt;a href="http://reviews.llvm.org/rL262977">r262977&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Sparc backend gained support for co-processor condition branching and conditional traps. &lt;a href="http://reviews.llvm.org/rL263044">r263044&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang gained support for the &lt;code>[[nodiscard]]&lt;/code> attribute. &lt;a href="http://reviews.llvm.org/rL262872">r262872&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>New AST matchers were added for addrLabelExpr, atomicExpr, binaryCondtionalOperator, designatedINitExpr, designatedInitExpr, designatorCountIs, hasSyntacticForm, implicitValueINitExpr, labelDecl, opaqueValueExpr, parenListExpr, predefinedExpr, requiresZeroInitialization, and stmtExpr. &lt;a href="http://reviews.llvm.org/rL263027">r263027&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Error and warning messages in LLD are now more consistent. &lt;a href="http://reviews.llvm.org/rL263125">r263125&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Documentation on the new ELF and COFF LLD linkers has been updated. &lt;a href="http://reviews.llvm.org/rL263336">r263336&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #114, Mar 7th 2016</title><link>https://blog.llvm.org/2016/03/llvm-weekly-114-mar-7th-2016.html</link><pubDate>Mon, 07 Mar 2016 04:40:00 +0000</pubDate><guid>https://blog.llvm.org/2016/03/llvm-weekly-114-mar-7th-2016.html</guid><description>&lt;p>Welcome to the one hundred and fourteenth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/114">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>LLVM has been &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/096138.html">accepted&lt;/a> as a mentoring organisation in Google Summer of Code 2016. See &lt;a href="https://summerofcode.withgoogle.com/how-it-works/">here&lt;/a> for more about what that means. If you're a student who would like to get paid to work on LLVM over the summer, you should definitely consider applying. Also take a look at the full list of &lt;a href="https://summerofcode.withgoogle.com/organizations/">organisations in GSoC 2016&lt;/a>. If you have an interest in open source hardware, in my (biased) opinion you should definitely look at &lt;a href="http://www.lowrisc.org/docs/gsoc-2016-ideas/">lowRISC's listed project ideas&lt;/a>.&lt;/p>&lt;p>LLVM and Clang 3.8 'final' &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096319.html">has been tagged&lt;/a>. A release should be imminent.&lt;/p>&lt;p>There was a big C++ committee meeting last week. You can find summaries &lt;a href="https://www.reddit.com/r/cpp/comments/48zp05/what_we_added_to_the_c17_working_draft/">here&lt;/a> and &lt;a href="http://usingstdcpp.org/2016/03/05/trip-report-c-meeting-at-jacksonville/">here&lt;/a>. If you were hoping for modules, concepts, UFCS, ranges, or coroutines in C++17 I'm afraid you're in for disappointment. Many new features will be available in C++ Technical Specifications though.&lt;/p>&lt;p>llvmlite 0.9.0 has been &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096199.html">released&lt;/a>. llvmlite is a light-weight Python binding for LLVM. If you're wondering how to get started with llvmlite, then check out this recent blog post from Ian Bertolacci on &lt;a href="https://ian-bertolacci.github.io/llvm/llvmlite/python/compilers/programming/2016/03/06/LLVMLite_fibonacci.html">writing fibonacci in LLVM with llvmlite&lt;/a>.&lt;/p>&lt;p>Andi McClure has written a really interesting blog post about &lt;a href="http://msm.runhello.com/p/1003">writing software without a compiler&lt;/a>. In this case, generating LLVM IR from LuaJIT.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>John McCall has posted an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096250.html">implementing the Swift calling convention in LLVM and Clang&lt;/a>. Feedback is generally positive and there's an interesting discussion on the handling of Swift's errors in the calling convention.&lt;/p>&lt;/li>&lt;li>&lt;p>Roel Jordans has &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096205.html">posted some thoughts and questions in preparation for the EuroLLVM birds of a feather sessions on compilers in education&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Peter Collingbourne has shared a new RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/096146.html">adding a new ABI for virtual calls&lt;/a>, termed the 'relative ABI'. He'd also like to change how virtual calls are represented in the IR.&lt;/p>&lt;/li>&lt;li>&lt;p>Grigori Fursin from Dividiti &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096370.html">shared some recent work on crowdtuning compiler optimisation heuristics&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096351.html">What is the current status of garbage collection with statepoints in LLVM?&lt;/a>. &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096360.html">Philip Reames&lt;/a> and &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096361.html">Sanjoy Das&lt;/a> have the answer!&lt;/p>&lt;/li>&lt;li>&lt;p>Xinmin Tian has shared a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096291.html">proposal for function vectorisation and loop vectorisation with function calls&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Akira Hatanaka is interested in comments to his &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096233.html">RFC on more precise lifetime.end metadata&lt;/a>. In the given example, three local variables have non-overlapping lifetimes and could potentially use the same stack slot, but this isn't currently done.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>MemorySSA has gained an initial update API. &lt;a href="http://reviews.llvm.org/rL262362">r262362&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>TableGen can now check at compile time that a scheduling model is complete. &lt;a href="http://reviews.llvm.org/rL262384">r262384&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>New comments in PassBuilder give a description of what trade-offs are expected for each optimisation level. &lt;a href="http://reviews.llvm.org/rL262196">r262196&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LoopLoadElimination is now enabled by default. &lt;a href="http://reviews.llvm.org/rL262250">r262250&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new patch adding infrastructure for profile-guided optimisation enhancements in the inline has landed. &lt;a href="http://reviews.llvm.org/rL262636">r262636&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Experimental ValueTracking code which tried to infer more precise known bits using implied dominating conditions has been removed. Experiments didn't find it to be profitable enough, but it may still be useful to people wanting to experiment out of tree. &lt;a href="http://reviews.llvm.org/rL262646">r262646&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang's C API gained an option to demote fatal errors to non-fatal errors. This is likely to be useful for clients like IDEs. &lt;a href="http://reviews.llvm.org/rL262318">r262318&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>clang-cl gained initial support for precompiled headers. &lt;a href="http://reviews.llvm.org/rL262420">r262420&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>An &lt;code>-fembed-bitcode&lt;/code> driver option has been introduced. &lt;a href="http://reviews.llvm.org/rL262282">r262282&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Semantic analysis for the swiftcall calling convention has landed. &lt;a href="http://reviews.llvm.org/rL262587">r262587&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang's TargetInfo will now store an actual DataLayout instance rather than a string. &lt;a href="http://reviews.llvm.org/rL262737">r262737&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLDB can now read line tables from Microsoft's PDB debug info files. &lt;a href="http://reviews.llvm.org/rL262528">r262528&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM test-suite gained the ability to hash generated binaries and to skip tests if the hash didn't change since a previous run. &lt;a href="http://reviews.llvm.org/rL262307">r262307&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM's OpenMP runtime now supports the new OpenMP 4.5 doacross loop nest and taskloop features. &lt;a href="http://reviews.llvm.org/rL262532">r262532&lt;/a>, &lt;a href="http://reviews.llvm.org/rL262535">r262535&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #113, Feb 29th 2016</title><link>https://blog.llvm.org/2016/02/llvm-weekly-113-feb-29th-2016.html</link><pubDate>Mon, 29 Feb 2016 06:58:00 +0000</pubDate><guid>https://blog.llvm.org/2016/02/llvm-weekly-113-feb-29th-2016.html</guid><description>&lt;p>Welcome to the one hundred and thirteenth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or @llvmweekly or @asbradbury on Twitter.&lt;/p>&lt;h3>News and articles from around the web&lt;/h3>&lt;p>LLVM and Clang 3.8RC3 &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095756.html">has been tagged&lt;/a>.&lt;/p>&lt;p>EuroLLVM 2016 is &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095832.html">less than a month away&lt;/a>. If you want to attend, be sure to &lt;a href="http://www.llvm.org/devmtg/2016-03/#registration">register&lt;/a>.&lt;/p>&lt;p>The Red Hat blog has a &lt;a href="http://developerblog.redhat.com/2016/02/23/upcoming-features-in-gcc-6/">summary of new features in the upcoming GCC 6 release&lt;/a>.&lt;/p>&lt;p>The Meeting C++ blog has a &lt;a href="http://meetingcpp.com/index.php/br/items/current-proposals-for-c17.html">helpful summary of a subset of the proposals for the next C++ committee meeting&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Chandler Carruth has suggested &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095809.html">moving the LLVM test-suite repository to Github&lt;/a>. In response to some concerns, Chris Lattner points out that using GitHub in this case &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095942.html">doesn't mean abandoning the current development workflow&lt;/a>, it just means it can be augmented with GitHub-style pull requests for those who prefer it. Chandler &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095943.html">summarised the thread&lt;/a> and provided a list of next steps.&lt;/p>&lt;/li>&lt;li>&lt;p>Sanjoy Das &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095833.html">pointed out a potential soundness issue with the &lt;code>available_externally&lt;/code> linkage type&lt;/a>. This triggered a very long discussion. James Knight pointed out the same issue &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095935.html">could happen with normal functions in a shared library&lt;/a>. There was some back and forth between Hal Finkel and Chandler Carruth &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/096025.html">on the best approach to addressing this problem&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Philip Reames asks whether &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095964.html">a PHI depending on another PHI in the same basic block is valid&lt;/a>. It's currently accepted by the verifier but arguably shouldn't be. So far, nobody has argued that it should be valid.&lt;/p>&lt;/li>&lt;li>&lt;p>Matthias Braun kicked off a discussion on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095947.html">better defining the semantics of reserved and unallocatable registers&lt;/a>. After more discussion, he followed up with a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095999.html">revised definition&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>David Li has posted a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/096077.html">proposal for supporting in-process merging of profile data&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The Sparc backend now contains definitions for all registers and instructions defined in the Sparc v8 manual. &lt;a href="http://reviews.llvm.org/rL262133">r262133&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM gained a basic LoopPassManager, though it currently only contains dummy passes. &lt;a href="http://reviews.llvm.org/rL261831">r261831&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A number of TargetInstrInfo predicates now take a reference to a MachineInstr rather than a pointer. &lt;a href="http://reviews.llvm.org/rL261605">r261605&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The WebAssembly backend gained redzone support for the userspace stack. &lt;a href="http://reviews.llvm.org/rL261662">r261662&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Whole-program vtable optimisation is now available in Clang using the &lt;code>-fwhole-program-vtables&lt;/code> flag. &lt;a href="http://reviews.llvm.org/rL261767">r261767&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang gained &lt;code>__builtin_canonicalize&lt;/code> which returns the platform-specific canonical encoding of a floating point number. &lt;a href="http://reviews.llvm.org/rL262122">r262122&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A hasAnyName matcher was added. &lt;a href="http://reviews.llvm.org/rL261574">r261574&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The pointer arithmetic checker has been improved to report fewer false positives. &lt;a href="http://reviews.llvm.org/rL261632">r261632&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The new ELF linker gained support for identical code folding (ICF). This reduces the size of an LLD binary by 3.6% and of a Clang binary by 2.7%. As described in the commit message, this is not a "safe" version of ICF as implemented in GNU gold, so will cause issues if the input relies on two distinct functions always having distinct addresses. &lt;a href="http://reviews.llvm.org/rL261912">r261912&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Polly's tree now contains an &lt;code>update_check.py&lt;/code> script that may be useful to other LLVM devs. It updates a FileCheck-based lit test by updating the &lt;code>CHECK:&lt;/code> lines with the actual output of the &lt;code>RUN:&lt;/code> command. &lt;a href="http://reviews.llvm.org/rL261899">r261899&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB gained a new set of plugins to help debug Java programs, specifically Java code JIT-ed by the Android runtime. &lt;a href="http://reviews.llvm.org/rL262015">r262015&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The new OpenMP 4.5 affinity API is now supported in LLVM's openmp implementation. &lt;a href="http://reviews.llvm.org/rL261915">r261915&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The new ELF linker gained support for the &lt;code>-r&lt;/code> command-line option, which produces relocatable output (partial linking). &lt;a href="http://reviews.llvm.org/rL261838">r261838&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The CMake/lit runner for SPEC in the LLVM test-suite can now run the C CPU2006 floating point benchmarks (but not the Fortran ones). &lt;a href="http://reviews.llvm.org/rL261816">r261816&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The old ELF linker has been deleted from LLD. &lt;a href="http://reviews.llvm.org/rL262158">r262158&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #112, Feb 22nd 2016</title><link>https://blog.llvm.org/2016/02/llvm-weekly-112-feb-22nd-2016.html</link><pubDate>Mon, 22 Feb 2016 03:29:00 +0000</pubDate><guid>https://blog.llvm.org/2016/02/llvm-weekly-112-feb-22nd-2016.html</guid><description>&lt;p>Welcome to the one hundred and twelfth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/112">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Filip Pizlo has written a &lt;a href="https://webkit.org/blog/5852/introducing-the-b3-jit-compiler/">fantastic article&lt;/a> introducing the new B3 JIT compiler for WebKit's JavaScriptCore. This intends to replace LLVM as the optimising backend to their fourth-tier JIT. The article describes in detail their reasons for moving away from LLVM (mainly compile-time) and the design trade-offs made, such as in reducing memory allocations and minimising pointer-chasing in the IR. This reminds me of the trade-offs Mike Pall made in the &lt;a href="http://wiki.luajit.org/SSA-IR-2.0">LuaJIT 2.0 IR&lt;/a>. Philip Reames also shared &lt;a href="http://www.philipreames.com/Blog/2016/02/15/quick-thoughts-on-webkits-b3/">some initial thoughts on B3&lt;/a>. I know some people have expressed disappointment about WebKit moving away from LLVM, but if you'll allow me to insert just a little bit of editorial I'd argue B3 is a very positive development for LLVM and the wider compiler community. B3 explores a different set of design trade-offs to those chosen for LLVM, and these sort of changes are probably easiest to explore in a fresh codebase.Thanks to this write-up (and hopefully future B3/AIR documentation), we can learn from the B3 developers' experiences and consider if some of their choices will make sense for LLVM. It's also good to remember that LLVM isn't the only feasible route for code generation and optimisation, and we shouldn't treat LLVM's design choices as the one-true way to do things. Impressively, B3 was developed to its current state in only &lt;a href="https://news.ycombinator.com/item?id=11104604">6 months of developer-time&lt;/a>.&lt;/p>&lt;p>Version 0.17.0 of LDC, the LLVM-based compiler for the D programming language has &lt;a href="http://forum.dlang.org/thread/cqgwucbznngoiesvbmlk@forum.dlang.org">been released&lt;/a>. You can view a &lt;a href="https://github.com/ldc-developers/ldc/releases/tag/v0.17.0">detailed changelog here&lt;/a>.&lt;/p>&lt;p>GCC6 will feature a whole bunch of new warnings, and &lt;a href="https://gnu.wildebeest.org/blog/mjw/2016/02/15/looking-forward-to-gcc6-many-new-warnings/">this blog post&lt;/a> details many of them.&lt;/p>&lt;p>The schedule for &lt;a href="http://www.llvm.org/devmtg/2016-03/">EuroLLVM 2016&lt;/a> has now been posted. This will be held March 17th-18th in Barcelona.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Bob Wilson proposes that format-security warnings in Clang &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2016-February/047367.html">default to error&lt;/a>. Nico Weber posted a handy &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2016-February/047438.html">summary of the thread&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Sanjoy Das has posted an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095523.html">RFC on adding guard intrinsics to LLVM&lt;/a>. These would be used in a similar way to the Check opcode in WebKit's new B3 compiler.&lt;/p>&lt;/li>&lt;li>&lt;p>Alina Sbirlea proposes adding &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095557.html">bitcode tests to the LLVM test-suite&lt;/a>. Hal Finkel suggests going further and just &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095562.html">pulling Halide in to the LLVM test-suite&lt;/a> as a front-end example that should provide greater test coverage.&lt;/p>&lt;/li>&lt;li>&lt;p>Andrew Trick shared some &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095463.html">thoughts on LLVM in light of the WebKit B3 announcement&lt;/a>. "Even when LLVM's compile time problems are largely solved, and I believe they can be, there will always be systemic compile time and memory overhead from design decisions that achieve generality, flexibility, and layering. These are software engineering tradeoffs."&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The PPCLoopDataPrefetch pass has been moved to Transforms/Scalar/LoopDataPrefetch in preparation for it becoming a target-agnostic pass. &lt;a href="http://reviews.llvm.org/rL261265">r261265&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The cmpxchg LLVM instruction now allows pointer type operands. &lt;a href="http://reviews.llvm.org/rL261281">r261281&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The X86 backend gained support for a new stack symbol ordering optimisation. This is primarily intended to reduce code size, and produces small but measurable improvements across some SPEC CPU 2000 benchmarks. &lt;a href="http://reviews.llvm.org/rL260917">r260917&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM C API has been extended to allow it to be used to manipulate the datalayout. &lt;a href="http://reviews.llvm.org/rL260936">r260936&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Some major work on the LazyCallGraph has been checked in. &lt;a href="http://reviews.llvm.org/rL261040">r261040&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The AMDGPU backend gained a basic disassembler. &lt;a href="http://reviews.llvm.org/rL261185">r261185&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The PostOrderFuctionAttrs pass has been ported to the new pass manager. As described in the commit message, this actually represents a major milestone. &lt;a href="http://reviews.llvm.org/rL261203">r261203&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Hexagon backend gained support for thread-local storage. &lt;a href="http://reviews.llvm.org/rL261218">r261218&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A nullPointerConstant AST matcher was added. &lt;a href="http://reviews.llvm.org/rL261008">r261008&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang gained a &lt;code>-Wcomma&lt;/code> warning, which will warn for most uses of the builtin comma operator. &lt;a href="http://reviews.llvm.org/rL261278">r261278&lt;/a>&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLD has sprouted a release notes document. &lt;a href="http://reviews.llvm.org/rL260960">r260960&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM test-suite's CMake build system saw a number of fixes for SPEC. &lt;a href="http://reviews.llvm.org/rL261470">r261470&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #111, Feb 15th 2016</title><link>https://blog.llvm.org/2016/02/llvm-weekly-111-feb-15th-2016.html</link><pubDate>Mon, 15 Feb 2016 03:58:00 +0000</pubDate><guid>https://blog.llvm.org/2016/02/llvm-weekly-111-feb-15th-2016.html</guid><description>&lt;p>Welcome to the one hundred and eleventh issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/111">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>There has been a &lt;a href="http://cilkplus.github.io/">new release of the CilkPlus compiler&lt;/a>. This includes an update to the latest LLVM and Clang trunk. CilkPlus implements the Cilk Plus language extensions for data and task parallelism in Clang.&lt;/p>&lt;p>There's been some more papers appearing from the C++ standards committee. P0225R0, or as you may prefer to call it "&lt;a href="https://isocpp.org/files/papers/p0225r0.html">Why I want Concepts, and why I want them sooner rather than later&lt;/a>" is worth a read. There's also been a few &lt;a href="https://isocpp.org/blog/2016/02/new-papers">other recently published papers&lt;/a> on iterator facades, the filesystem technical specification, and unified function call syntax.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Jacques Pienaar has proposed &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095118.html">upstreaming the 'Lanai' backend&lt;/a>. This is for a CPU design used internally at Google, and the posting of these patches did attract some &lt;a href="http://www.theregister.co.uk/2016/02/09/google_processor/">attention in the press&lt;/a>. A good chunk of the ensuing discussion focused on what the bar should be for accepting a new backend upstream. There seem to ultimately be far more people for the upstreaming than against it, but some concern was raised about the ability for others to test the generated code without access to hardware or even simulators.&lt;/p>&lt;/li>&lt;li>&lt;p>Natanael Ramos recently worked with LLVM for his bachelor thesis, and as a result &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095083.html">wrote and submitted a tutorial for writing a new LLVM register allocator&lt;/a>. This can also be found &lt;a href="https://github.com/nael8r/How-To-Write-An-LLVM-Register-Allocator/blob/master/HowToWriteAnLLVMRegisterAllocator.rst">on github&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Nolan has been working on an &lt;a href="https://github.com/beholdnec/llvm-m6502">experimental 6502 backend&lt;/a>, and sought some help with a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095379.html">memory operand folding problem&lt;/a>. He later followed up to the list &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095436.html">with his solution&lt;/a>, and David Chisnall added some &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095439.html">extra thoughts on potential approaches to targeting 6502 or similar architectures&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Hans Wennborg is &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095376.html">looking for help in expanding the release notes for the 3.8 release&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Vaivaswatha Nagaraj has been working on a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095115.html">control structure analysis&lt;/a> capable of detecting control structures in the CFG and is seeking feedback on his code.&lt;/p>&lt;/li>&lt;li>&lt;p>Lang Hames has followed up to his RFC on error handling in LLVM libraries with a detailed post &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095324.html">summarising his thoughts and responding some some feedback&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Sadly, CMake's current Ninja generator &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095266.html">is non-deterministic&lt;/a>. The good news is there is &lt;a href="https://public.kitware.com/Bug/view.php?id=15968">already a fix in upstream CMake&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Peter Collingbourne prototyped &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095306.html">a change to reduce DWARF emitter memory consumption&lt;/a>. Early results are very positive.&lt;/p>&lt;/li>&lt;li>&lt;p>Philip Reames proposes &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095290.html">removing the inaccessiblememonly attribute from the 3.8 branch&lt;/a>, on the grounds that the major motivating patch was reverted, there has been no further development, and including it in a release may pose a backwards-compatibility concern. There appears to be agreement so far in the responses.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM will be applying for inclusion in the Google Summer of Code this year. If you have a project listed on the 'open projects' page, &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/095087.html">please review and update it if necessary&lt;/a>, or suggest new projects.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The WholeProgramDevirt pass has been added. This implements whole program optimization of virtual calls where the list of callees is known to be fixed. &lt;a href="http://reviews.llvm.org/rL260312">r260312&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The AVR backend upstreaming continues with the addition of the AVR tablegen instruction definitions. &lt;a href="http://reviews.llvm.org/rL60363">r260363&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>There's been a bunch of other work on the new global instruction selection mechanism this week, but the commits I'd pick out are the addition of support for translating Add instructions and for lowering returns. It is currently being tests with the AArch64 backend. &lt;a href="http://reviews.llvm.org/rL260549">r260549&lt;/a>, &lt;a href="http://reviews.llvm.org/rL260562">r260562&lt;/a>, &lt;a href="http://reviews.llvm.org/rL260600">r260600&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The AArch64 backend gained support (including a scheduling model) for the Qualcomm Kryo CPU. &lt;a href="http://reviews.llvm.org/rL260686">r260686&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LoopUnrollAnalyzer has been abstracted out from LoopUnrollPass, and gained unit tests for its functionality. &lt;a href="http://reviews.llvm.org/rL260169">r260169&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-config gained preliminary Windows support. &lt;a href="http://reviews.llvm.org/rL260263">r260263&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The details of the convergent attribute have been clarified in the language reference. The convergent attribute will now be removed on functions which provably don't converge or invoke any convergent functions. &lt;a href="http://reviews.llvm.org/rL260318">r260316&lt;/a>, &lt;a href="http://reviews.llvm.org/rL260319">r260319&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>It is now possible to perform a 3-stage Clang build using CMake. It is suggested in the commit message this may be useful for detecting non-determinism in the compiler by verifying stage2 and stage3 are identical. &lt;a href="http://reviews.llvm.org/rL260261">r260261&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>ARMv8.2-A can be targeted using appropriate Clang options. &lt;a href="http://reviews.llvm.org/rL260533">r260533&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang's CMake build system learned the &lt;code>CLANG_DEFAULT_CXX_STDLIB&lt;/code> to set the default C++ standard library. &lt;a href="http://reviews.llvm.org/rL260662">r260662&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The new LLD ELF linker gained initial link-time optimisation support. &lt;a href="http://reviews.llvm.org/rL260726">r260726&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB has seen some more updates for Python 3 support, though not yet enough for a clean testsuite run. &lt;a href="http://reviews.llvm.org/rL260721">r260721&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #110, Feb 8th 2016</title><link>https://blog.llvm.org/2016/02/llvm-weekly-110-feb-8th-2016.html</link><pubDate>Mon, 08 Feb 2016 08:44:00 +0000</pubDate><guid>https://blog.llvm.org/2016/02/llvm-weekly-110-feb-8th-2016.html</guid><description>&lt;p>Welcome to the one hundred and tenth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/110">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Slides from the LLVM devroom at FOSDEM last weekend are &lt;a href="http://llvm.org/devmtg/2016-01/">now available online&lt;/a>. Unfortunately there was an issue with the recording of the talks so videos will not be available.&lt;/p>&lt;p>JavaScriptCore's &lt;a href="https://trac.webkit.org/wiki/FTLJIT">FTL JIT&lt;/a> is moving away from using LLVM as its backend, towards &lt;a href="https://webkit.org/docs/b3/">B3 (Bare Bones Backend)&lt;/a>. This includes its own &lt;a href="https://webkit.org/docs/b3/intermediate-representation.html">SSA IR&lt;/a>, optimisations, and instruction selection backend.&lt;/p>&lt;p>Source tarballs and binaries are &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/094987.html">now available&lt;/a> for LLVM and Clang 3.8-RC2.&lt;/p>&lt;p>The Zurich LLVM Social &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/094759.html">is coming up this Thursday&lt;/a>, February 11th at 7pm.&lt;/p>&lt;p>Jeremy Bennett has written up a &lt;a href="http://www.embecosm.com/2016/02/05/how-similar-are-gcc-and-llvm-the-user-perspective/">comparison of the Clang and GCC command-line flags&lt;/a>. The headline summary is that 397 work in both GCC and LLVM, 433 are LLVM-only and 598 are GCC-only.&lt;/p>&lt;p>&lt;a href="https://github.com/alepez/vim-llvmcov">vim-llvmcov&lt;/a> has been released. It is a vim plugin to show code coverage using the llvm-cov tool.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Mehdi Amini has posted an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/094869.html">RFC on floating point environment and rounding mode handling in LLVM&lt;/a>. The work started all the way back in 2014 and has a whole bunch of patches up for review. Chandler Carruth has responded with a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/094916.html">detail description of his concerns about the current design&lt;/a>, and his proposed alternative seems to be getting a lot of positive feedback.&lt;/p>&lt;/li>&lt;li>&lt;p>Morten Brodersen has recently upgraded a number of applications from the old JIT to the new MCJIT under LLVM 3.7.1 but has &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/094908.html">found significant performance regressions&lt;/a>. Some other respondents have seen similar issues, either in compilation time or in reduced code quality in the generated code. Some of the thread participants will be providing specific examples so they can be investigated. It's possible the issue is something as simple as a different default somewhere. Benoit Belley noted &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/094946.html">they saw regressions due to their frontend's use of allocas in 3.7&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Lang Hames kicked off a long discussion about &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/094804.html">error handling in LLVM libraries&lt;/a>. Lang has implemented a new scheme and is seeking feedback on it. There's a lot of discussion that unfortunately I haven't had time to summarise properly. If error handling design interests you, do get stuck in.&lt;/p>&lt;/li>&lt;li>&lt;p>Adrian McCarthy has written up details on the &lt;a href="http://lists.llvm.org/pipermail/lldb-dev/2016-February/009533.html">recent addition of minidump support to LLDB&lt;/a>. Minidumps are the Windows equivalent of a core file.&lt;/p>&lt;/li>&lt;li>&lt;p>Juan Wajnerman is looking at adding support for multithreading to the Crystal language, and has a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/094736.html">question about thread local variables&lt;/a>. LLVM won't re-load the thread local address, which causes issues when a thread local variable is read in a coroutine running on one thread which is then suspended and continued on a different thread. This is apparently a known issue, covered by &lt;a href="https://llvm.org/bugs/show_bug.cgi?id=19177">PR19177&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Steven Wu has posted an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-February/094851.html">RFC on embedding bitcode in object files&lt;/a>. The intent is to upstream support that already exists in Apple's fork. Understandably some of the respondents asked how this relates to the .llvmbc section that the Thin-LTO work is introducing. Steven indicates it's pretty much the same, but for Mach-O rather than ELF and that he hopes to unify them during the upstreaming.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLVM now has a memory SSA form. This isn't yet used by anything in-tree, but should form a very useful basis for a variety of analyses and transformations. This patch has been baking for a long time, first being submitted for initial feedback in April last year. &lt;a href="http://reviews.llvm.org/rL259595">r259595&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new loop versioning loop-invariant code motion (LICM) pass was introduced. This enables more opportunities for LICM by creating a new version of the loop guarded by runtime checks to test for potential aliases that can't be determined not to exist at compile-time. &lt;a href="http://reviews.llvm.org/rL259986">r259986&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LazyValueInfo gained an intersect operation on lattice values, which can be used to exploit multiple sources of facts at once. The intent is to make greater use of it, but already it is able to remove a half range-check when performing jump-threading. &lt;a href="http://reviews.llvm.org/rL259461">r259461&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The SmallSet and SmallPtrSet templates will now error out if created with a size greater than 32. &lt;a href="http://reviews.llvm.org/rL259419">r259419&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The ability to emit errors from the backend for unsupported features has been refactored, so BPF, WebAssembly, and AMDGPU backends can all share the same implementation. &lt;a href="http://reviews.llvm.org/rL259498">r259498&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A simple pass using LoopVersioning has been added, primarily for testing. The new pass will fully disambiguate all may-aliasing memory accesses no matter how many runtime checks are required. &lt;a href="http://reviews.llvm.org/rL259610">r259610&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The way bitsets are used to encode type information has now been documented. &lt;a href="http://reviews.llvm.org/rL259619">r259619&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>You can now use the flag &lt;code>-DLLVM_ENABLE_LTO&lt;/code> with CMake to build LLVM with link-time optimisation. &lt;a href="http://reviews.llvm.org/rL259766">r259766&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>TableGen's AsmOperandClass gained the &lt;code>IsOptional&lt;/code> field. Setting this to 1 means the operand is optional and the AsmParser will not emit an error if the operand isn't present. &lt;a href="http://reviews.llvm.org/rL259913">r259913&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>There is now a scheduling model for the Exynos-M1. &lt;a href="http://reviews.llvm.org/rL259958">r259958&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang now has builtins for the bitreverse intrinsic. &lt;a href="http://reviews.llvm.org/rL259671">r259671&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The option names for profile-guided optimisations with the cc1 driver have been modified. &lt;a href="http://reviews.llvm.org/rL259811">r259811&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>AddressSanitizer now supports iOS. &lt;a href="http://reviews.llvm.org/rL259451">r259451&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The current policy for using the new ELF LLD as a library has been documented. &lt;a href="http://reviews.llvm.org/rL259606">r259606&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Polly's new Sphinx documentation gained a guide on using Polly with Clang. &lt;a href="http://reviews.llvm.org/rL259767">r259767&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #109, Feb 1st 2016</title><link>https://blog.llvm.org/2016/02/llvm-weekly-109-feb-1st-2016.html</link><pubDate>Mon, 01 Feb 2016 06:24:00 +0000</pubDate><guid>https://blog.llvm.org/2016/02/llvm-weekly-109-feb-1st-2016.html</guid><description>&lt;p>Welcome to the one hundred and ninth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/109">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The GNU Tools Cauldron 2016 has been &lt;a href="https://gcc.gnu.org/ml/gcc/2015-12/msg00160.html">announced&lt;/a> for the 9th-11th of September 2016, in Hebden Bridge, UK.&lt;/p>&lt;p>The Sulong project has been &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094713.html">announced&lt;/a>. It is an LLVM IR interpreter using the Truffle framework and Graal on the JVM to support JIT compilation.&lt;/p>&lt;p>Ehsan Akhgari has posted an &lt;a href="https://ehsanakhgari.org/blog/2016-01-29/building-firefox-with-clang-cl-a-status-update">updated on building Firefox with clang-cl&lt;/a>. It is now possible to build a complete Firefox with Clang without using the MSVC fallback once.&lt;/p>&lt;p>I've mentioned it down below in the list of notable commits, but it's worth calling out here too: the old autoconf build-system has now been &lt;a href="http://reviews.llvm.org/rL258861">removed&lt;/a> from LLVM. 3.8 will be the last release to include it. Time to switch to CMake if you haven't already.&lt;/p>&lt;p>John Regehr gave a talk about undefined behaviour in LLVM at the Paris LLVM meetup, and you can find the slides &lt;a href="http://www.cs.utah.edu/~regehr/llvm-ub.pdf">here&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>James Knight has written to the list to get feedback on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094576.html">approaches to cleaning up Clang's handling of atomics&lt;/a>. There seems to be widespread support for the cleanup. James followed up again to &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094702.html">slightly revise his plan&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Matt Arsenault proposes that &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094593.html">all libcalls be canonicalized to intrinsics&lt;/a>. All responses so far are in favour.&lt;/p>&lt;/li>&lt;li>&lt;p>Ke Bai has shared a proposal on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094640.html">representing multiple memory scopes in LLVM IR&lt;/a>. There hasn't been any feedback yet.&lt;/p>&lt;/li>&lt;li>&lt;p>Dmitree Kuvaiskii asks if anyone has implemented &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094620.html">a pass utilizing Intel's new MPX memory protection&lt;/a>. The answer appears to be no, and in addition &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094627.html">David&lt;/a> and &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094638.html">Kostya&lt;/a> are sceptical about how worthwhile it would be.&lt;/p>&lt;/li>&lt;li>&lt;p>Peter Collingbourne has proposed a new optimisation, &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094600.html">virtual constant propagation&lt;/a>. The original motivation was to reduce the overhead added by enabling control-flow integrity in certain Chromium benchmarks. Constants will be devirtualized at LTO time.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The autoconf build system for LLVM has been removed. &lt;a href="http://reviews.llvm.org/rL258861">r258861&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The WebAssembly backend gained support for unaligned loads and stores. &lt;a href="http://reviews.llvm.org/rL258779">r258779&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM's MCAsmSreamer will now always use .p2align rather than .align, because .align's behaviour can differ between targets. &lt;a href="http://reviews.llvm.org/rL258750">r258750&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Intrinsic IDs are now looked up by binary search rather than the previous more complex mechanism. This improves the compile time of Function.cpp. &lt;a href="http://reviews.llvm.org/rL258774">r258774&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>TargetSelectionDAGInfo has been renamed to SelectionDAGTargetInfo and now lives in CodeGen rather than Target. &lt;a href="http://reviews.llvm.org/rL258939">r258939&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A LoopSimplifyCFG pass was added to canonicalise loops before running through passes such as LoopRotate and LoopUnroll. &lt;a href="http://reviews.llvm.org/rL259256">r259256&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The clang-cl driver will now warn for unknown arguments rather than erroring, to match the behaviour of MSVC. &lt;a href="http://reviews.llvm.org/rL258720">r258720&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The old autoconf build system was removed from Clang. &lt;a href="http://reviews.llvm.org/rL258862">r258862&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The 'sancov' (SanitizerCoverage) tool gained some documentation. &lt;a href="http://reviews.llvm.org/rL259000">r259000&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>libcxx gained an implementation of &lt;code>ostream_joiner&lt;/code>. &lt;a href="http://reviews.llvm.org/rL259014">r259014&lt;/a>, &lt;a href="http://reviews.llvm.org/rL259015">r259015&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lld gained a new error function which won't cause process exit. The hope is this can be used to provide a gradual path towards lld-as-a-library. &lt;a href="http://reviews.llvm.org/rL259069">r259069&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The lit runner for the LLVM test suite can now be passed &lt;code>--param=profile=perf&lt;/code> which will cause each test to be run under &lt;code>perf record&lt;/code>. &lt;a href="http://reviews.llvm.org/rL259051">r259051&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #108, Jan 25th 2016</title><link>https://blog.llvm.org/2016/01/llvm-weekly-108-jan-25th-2016.html</link><pubDate>Mon, 25 Jan 2016 04:48:00 +0000</pubDate><guid>https://blog.llvm.org/2016/01/llvm-weekly-108-jan-25th-2016.html</guid><description>&lt;p>Welcome to the one hundred and eighth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/108">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>LLVM 3.8 RC1 &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094433.html">has been released&lt;/a>. Now is the time to test it out with your favourite projects and report any issues.&lt;/p>&lt;p>The deadline for the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094371.html">EuroLLVM call for papers&lt;/a> is today.&lt;/p>&lt;p>Version 1.6 of the Rust programming language &lt;a href="http://blog.rust-lang.org/2016/01/21/Rust-1.6.html">was released&lt;/a> las week. Rust uses LLVM for its code generation.&lt;/p>&lt;p>The LLVM Social in Paris &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094370.html">will be held this week&lt;/a> on Wednesday.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Quentin Colombet has posted an RFC &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094426.html">asking for views on adding a kind of MachineModulePass&lt;/a>. Questions include who would be interested and why. John Criswell's &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094444.html">response&lt;/a> includes some interesting use-cases.&lt;/p>&lt;/li>&lt;li>&lt;p>Eduard-Mihai Burtescu has posted an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094204.html">making byval argument passing work with opaque pointers&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Quentin Colombet has posted an RFC seeking opinions on the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094411.html">contract between LLVM IR and the backends for instruction selection&lt;/a>. In particular, should backends be able to perform instruction selection on any valid LLVM IR. Several people have fed back that in practical terms, a backend doesn't need to be able to select any instruction as long as it provides IR to IR transformations that can perform necessary modifications prior to instruction selection.&lt;/p>&lt;/li>&lt;li>&lt;p>Jonas Wagner is looking for feedback on how to support &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094192.html">self-modifying branches in LLVM&lt;/a>. The thread contained some interesting discussion about the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094340.html">cost of well-predicted branches&lt;/a>. It would certainly seem worthwhile to delve deeper to see how much of the overhead is due to limitations in LLVM's basic block at-a-time instruction scheduler.&lt;/p>&lt;/li>&lt;li>&lt;p>Philip Reames has written to the list to warn users of the RewriteStatePointsForGC &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094411.html">that there are currently issues expressing arbitrary exceptional control flow&lt;/a>. The thread discusses some potential solutions to the current issues.&lt;/p>&lt;/li>&lt;li>&lt;p>Ed Maste has been working to use libunwind in FreeBSD's base system, and &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094202.html">queries its stack usage&lt;/a>. LLVM's libunwind allows for 120 saved registers on all architectures, while in contrast the GCC unwinder has a target-dependent maximum (it's 18 on x86-64).&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>&lt;code>llvm::SplitModule&lt;/code> gained a new flag which can be used to cause it to attempt to split the module without globalizing local objects. &lt;a href="http://reviews.llvm.org/rL258083">r258083&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The WebAssembly backend will now rematerialize constants with multiple uses rather than holding them live in registers, as there is no code size saving in using registers in for constants in most cases in the WebAssembly encoding. &lt;a href="http://reviews.llvm.org/rL258142">r258142&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Some small patches from the global instruction selection effort have started to land, such as the introduction of a generic machine opcode for ADD (&lt;code>G_ADD&lt;/code>) and the all-important CMake support for building it. &lt;a href="http://reviews.llvm.org/rL258333">r258333&lt;/a>, &lt;a href="http://reviews.llvm.org/rL258344">r258344&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;code>getCacheLineSize&lt;/code> was added to TargetTransformInfo. It's currently only used by PPCLoopDataPrefetch. &lt;a href="http://reviews.llvm.org/rL258419">r258419&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LoopIdiomRecognize improved in its ability to recognise memsets. &lt;a href="http://reviews.llvm.org/rL258620">r258620&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A number of new AST matchers were added. &lt;a href="http://reviews.llvm.org/rL258042">r258042&lt;/a>, &lt;a href="http://reviews.llvm.org/rL258072">r258072&lt;/a>, and more.&lt;/p>&lt;/li>&lt;li>&lt;p>The LeakSanitizer documentation has been updated with a usage example. &lt;a href="http://reviews.llvm.org/rL258476">r258476&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The new ELF linker gained initial support for MIPS local GOT (global offset table) entries. &lt;a href="http://reviews.llvm.org/rL2583888">r2583888&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM test suite now contains a ClangAnalyzer subdirectory containing tests for the static analyzer. &lt;a href="http://reviews.llvm.org/rL258336">r258336&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #107, Jan 18th 2016</title><link>https://blog.llvm.org/2016/01/llvm-weekly-107-jan-18th-2016.html</link><pubDate>Mon, 18 Jan 2016 05:32:00 +0000</pubDate><guid>https://blog.llvm.org/2016/01/llvm-weekly-107-jan-18th-2016.html</guid><description>&lt;p>Welcome to the one hundred and seventh issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/107">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;p>I have a very exciting piece of non-LLVM news to share this week. On Saturday I proposed to my partner Carrie Anne, and I'm delighted to report that &lt;a href="https://twitter.com/MissPhilbin/status/688452374260744192">she said yes&lt;/a>. You may well question if this piece of personal news has any relevance to you, and in response I'd like to highlight just how important Carrie Anne is to this weekly newsletter. For over two years now, I've given up 2-3+ hours of my time every week without fail on evenings and weekends, time we could really be spending together as a couple. Without Carrie Anne's understanding and support LLVM Weekly couldn't exist. 2016 is going to be a very exciting year.&lt;/p>&lt;h3>News and articles from around the web&lt;/h3>&lt;p>Registration is &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094106.html">now open&lt;/a> for EuroLLVM 2016. The conference will be held in Barcelona on March 17th-18th. The call for papers closes on January 25th.&lt;/p>&lt;p>Registration is &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093960.html">open&lt;/a> for the Clang/LLVM development sprint to be held on the weekend of Feb 6th/7th at Bloomberg's London and New York offices.&lt;/p>&lt;p>The next Cambridge LLVM social will be held &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093918.html">on Wednesday 20th January at 7.30pm&lt;/a>, and will be colocated with the FreeBSD social.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Rui Ueyama has run &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094132.html">benchmarks for every LLD commit&lt;/a>. He observes the linker in general is getting slightly slower over time as it gains more functionality, but that no commit seems to increase link time without a justifiable reason.&lt;/p>&lt;/li>&lt;li>&lt;p>Chris Bieneman has posted an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093875.html">RFC on removing autoconf from the trunk&lt;/a>. The proposal is to remove it from the repository on January 26th. There don't seem to be any objections to this timeline so far.&lt;/p>&lt;/li>&lt;li>&lt;p>Krzystof Parzyszek has shared a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093891.html">description of the recently committed register data-flow framework&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Discussion has been ongoing in the thread about global instruction selection, particularly surrounding the semantics of bitcasts on big-endian systems. James Molloy has &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093977.html">posted to clarify the current behaviour&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>JF Bastien has posted an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093912.html">RFC on supporting non-temporal fencing in LLVM IR&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Quentin Colombet is &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094049.html">seeking feedback on the best way to map LLVM IR values to MachineInstr values&lt;/a> as part of his GlobalISel work.&lt;/p>&lt;/li>&lt;li>&lt;p>The branch for LLVM 3.8 &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093932.html">has now been created&lt;/a>. The first release candidate should some soon.&lt;/p>&lt;/li>&lt;li>&lt;p>John McCall has posted an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094012.html">enforcing pointer type alignment in Clang&lt;/a>. The RFC proposes the following "It is not undefined behavior to create a pointer that is less aligned than its pointee type. Instead, it is only undefined behavior to access memory through a pointer that is less aligned than its pointee type."&lt;/p>&lt;/li>&lt;li>&lt;p>Philip Reames has posted a note for anyone using RewriteStatepointsForGC. There's been a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/094041.html">recent change in the handling of vectors of pointers&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Derek Schuff has followed up to the previous discussion about allowing virtual registers after register allocation with &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093952.html">some more thoughts after some offline discussions&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Hans de Goede is working on a backend for TGSI (Tungsten Graphics Shader Infrastruture, as used by Gallium) and has a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093829.html">number of questions&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The ORC JIT API now supports remote JITing over an RPC interface to a separate process. The LLI tool has been updated to use this interface. &lt;a href="http://reviews.llvm.org/rL257305">r257305&lt;/a>, &lt;a href="http://reviews.llvm.org/rL257343">r257343&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Hexagon backend gained a target-independent SSA-based data flow framework for representing data flow between physical registers and passes using this to implement register liveness analysis, dead code elimination, and copy propagation. &lt;a href="http://reviews.llvm.org/rL257447">r257447&lt;/a>, &lt;a href="http://reviews.llvm.org/rL257480">r257480&lt;/a>, &lt;a href="http://reviews.llvm.org/rL257485">r257485&lt;/a>, &lt;a href="http://reviews.llvm.org/rL257490">r257490&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The documentation on committing code reviewed on Phabricator to trunk has been improved. &lt;a href="http://reviews.llvm.org/rL257764">r257764&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>WebAssembly gained a prototype instruction encoder and disassembler based on a temporary binary format. &lt;a href="http://reviews.llvm.org/rL257440">r257440&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM's MathExtras gained a SaturatingMultiplyAdd helper. &lt;a href="http://reviews.llvm.org/rL257352">r257352&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-readobj has much-expanded support for dumping CodeView debug info. &lt;a href="http://reviews.llvm.org/rL257658">r257658&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The code that finds code sequences implementing bswap or bitreverse and emits the appropriate intrinsic has been rewritten. &lt;a href="http://reviews.llvm.org/rL257875">r257875&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The AMDGPU backend gained a new machine scheduler for the Southern Islands architecture. &lt;a href="http://reviews.llvm.org/rL257609">r257609&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A Python implementation of scan-build has been added. &lt;a href="http://reviews.llvm.org/rL257533">r257533&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The 'interrupt' attribute is now supported on x86. &lt;a href="http://reviews.llvm.org/rL257867">r257867&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang learned to respond to the &lt;code>-fsanitize-stats&lt;/code> flag. It can currently only be used with control-flow integrity and allows statistics to be dumped. &lt;a href="http://reviews.llvm.org/rL257971">r257971&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The compiler-rt CMake buildsystem gained experimental support for tvOS and watchOS. &lt;a href="http://reviews.llvm.org/rL257544">r257544&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Initial support was added for PPC and the new ELF linker. &lt;a href="http://reviews.llvm.org/rL257374">r257374&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The CMake and Lit runners in the LLVM test-suite can now support the integer C and C++ tests from SPEC CPU2006. &lt;a href="http://reviews.llvm.org/rL257370">r257370&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #106, Jan 11th 2016</title><link>https://blog.llvm.org/2016/01/llvm-weekly-106-jan-11th-2016.html</link><pubDate>Mon, 11 Jan 2016 05:15:00 +0000</pubDate><guid>https://blog.llvm.org/2016/01/llvm-weekly-106-jan-11th-2016.html</guid><description>&lt;p>Welcome to the one hundred and sixth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/106">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;p>Many readers may be interested that last week was the 3rd RISC-V Workshop. You can find slides from the two &lt;a href="http://www.lowrisc.org">lowRISC&lt;/a> talks &lt;a href="https://speakerdeck.com/asb/lowrisc-plans-for-risc-v-in-2016">here&lt;/a> and &lt;a href="http://riscv.org/workshop-jan2016/Wed1115%20untether_wsong83.pdf">here&lt;/a>. You may also want to read my &lt;a href="http://www.lowrisc.org/blog/2016/01/third-risc-v-workshop-day-one/">liveblog of the event&lt;/a>.&lt;/p>&lt;h3>News and articles from around the web&lt;/h3>&lt;p>The BSD Now podcast recently &lt;a href="http://www.jupiterbroadcasting.com/92191/the-bsd-black-box-bsd-now-122/">interviewed Alex Rosenberg&lt;/a> about his work on LLVM/Clang and FreeBSD.&lt;/p>&lt;p>The folks at QuarksLab have shared a &lt;a href="http://blog.quarkslab.com/clang-hardening-cheat-sheet.html">Clang hardening cheat sheet&lt;/a>.&lt;/p>&lt;p>LLDB 3.8 will &lt;a href="https://groups.google.com/forum/m/#!topic/golang-nuts/pzpNcarQcvo">feature initial Go debugging support&lt;/a>.&lt;/p>&lt;p>The next Paris LLVM Social will be held &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093610.html">on January 27th&lt;/a> and includes a talk from John Regehr.&lt;/p>&lt;p>The next Zurich LLVM Social &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093589.html">will be taking place on January 14th&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>One long discussion on the lists this week was regarding the design of the new LLD ELF and COFF linkers. Rui Ueyama &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093712.html">notes that they are currently designed as commands instead of libraries&lt;/a>. e.g. exit() on failure is considered appropriate. Chandler Carruth argues strongly that &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093760.html">supporting a library interface is important for any project under the LLVM umbrella&lt;/a>. There ultimately seems to be agreement that the ability to use the linker as a library is important for some use cases, but also that the person doing the work (Rui) should be able to go about development in the way that makes most sense to him. He intends to focus first on reaching feature parity with the GNU linker, and then look at issues such as the library interface.&lt;/p>&lt;/li>&lt;li>&lt;p>There's been some discussion in the thread on the new global instruction selection implementation about the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093739.html">semantics of inttoptr and ptrtoint&lt;/a>. Specifically whether the currently specified semantics are appropriate for architectures where converting between integers and pointers is not a no-op. It looks like &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093802.html">Philip Reames, David Chisnall, and others&lt;/a> should share an RFC on this issue in the following weeks.&lt;/p>&lt;/li>&lt;li>&lt;p>Matthew Arsenault asks about &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093662.html">TargetTransformInfo getOperationCost&lt;/a>. Hal Finkel &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093670.html">points out&lt;/a> the problems Matt is seeing are likely down to there being two cost models. One used for vectorization, and one used for inlining and unrolling.&lt;/p>&lt;/li>&lt;li>&lt;p>James Byerly has an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093692.html">interesting question about constraint solving and unspillable register classes&lt;/a>. He is targetting a custom, seemingly micro-coded architecture and hasn't received any responses so far.&lt;/p>&lt;/li>&lt;li>&lt;p>Steve King has shared some thoughts on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093626.html">adding ISD::OPAQUE to complement ISD::BITCAST&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>What is the current status of LLDB on Windows? Zachary Turner has &lt;a href="http://lists.llvm.org/pipermail/lldb-dev/2016-January/009248.html">written a summary&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Both &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093706.html">Xilinx&lt;/a> and &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2016-January/093684.html">Microsoft Research Cambridge&lt;/a> are advertising intern positions on LLVM-related projects.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLVM gained the &lt;code>-print-funcs&lt;/code> option which can be used to filter IR printing to only certain functions. &lt;a href="http://reviews.llvm.org/rL256952">r256952&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM ADT library gained a new sum type abstraction for pointer-like types and an abstraction for embedding an integer within a pointer-like type. &lt;a href="http://reviews.llvm.org/rL257282">r257282&lt;/a>, &lt;a href="http://reviews.llvm.org/rL257284">r257284&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM now recognises the Samsung Exynos M1 core. &lt;a href="http://reviews.llvm.org/rL256828">r256828&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>InstCombine learned to expose more constants when comparing getelementptrs (GEPs) by detecting when both GEPs could be expressed as GEPs with the same base pointer. &lt;a href="http://reviews.llvm.org/rL257064">r257064&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>SelectionDAGBuilder will set NoUnsignedWrap for an inbounds getelementptr and for load/store offsets. &lt;a href="http://reviews.llvm.org/rL256890">r256890&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>AArch64 MachineCombine will now allow fadd and fmul instructions to be reassociated. &lt;a href="http://reviews.llvm.org/rL257024">r257024&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Macro emission in DWARFv4 is now supported. &lt;a href="http://reviews.llvm.org/rL257060">r257060&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-symbolizer gained the &lt;code>-print-source-context-lines&lt;/code> option to print source code around the line. &lt;a href="http://reviews.llvm.org/rL257326">r257326&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang's CMake build system can now perform a multi-stage bootstrap build with profile-guided optimisation. &lt;a href="http://reviews.llvm.org/rL256873">r256873&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang's command line frontend learned to handle a whole bunch of &lt;code>-fno-builtin-*&lt;/code> arguments. &lt;a href="http://reviews.llvm.org/rL256937">r256937&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The new ELF LLD linker will now be used for th AMDGPU target. &lt;a href="http://reviews.llvm.org/rL257175">r257175&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The performance of string table construction in the LLD ELF linker has been improved. This improves link time of lld by 12% from 3.50 seconds to 3.08 seconds. &lt;a href="http://reviews.llvm.org/rL257017">r257017&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLD ELF linker gained support for the AMDGPU target. &lt;a href="http://reviews.llvm.org/rL257023">r257023&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #105, Jan 4th 2016</title><link>https://blog.llvm.org/2016/01/llvm-weekly-105-jan-4th-2016.html</link><pubDate>Mon, 04 Jan 2016 06:07:00 +0000</pubDate><guid>https://blog.llvm.org/2016/01/llvm-weekly-105-jan-4th-2016.html</guid><description>&lt;p>Welcome to the one hundred and fifth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>Happy new year! This issue marks the second anniversary of LLVM Weekly. It's rather short as the past week has been very quiet, with most LLVM developers seemingly taking a break over the holidays. My colleague Wei Song and myself will be presenting about &lt;a href="http://www.lowrisc.org">lowRISC&lt;/a> at the &lt;a href="http://riscv.org/workshop-jan2016.html">3rd RISC-V workshop&lt;/a> on Wednesday this week. Do say hi if you're going to be there.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/105">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Sanjoy Das has written a blog post about &lt;a href="http://www.playingwithpointers.com/problem-with-undef.html">issues with LLVM's undef value&lt;/a>. Interestingly, he provides an example where undef can actually inhibit optimisations.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Devin Coughlin provided a really useful and detailed &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2015-December/046653.html">guide to how you might implement a lifetime checker in the Clang static analyzer&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>There's been some questions raised about &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093544.html">what happened to the LLVM/Clang 3.7.1 release&lt;/a>. Everything is ready to go, it's just waiting for the release manager to push the button.&lt;/p>&lt;/li>&lt;li>&lt;p>Rahman Lavaee Mashhadi has been &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093537.html">experimenting with disabling function alignment&lt;/a>. He observes this results in a segfault on some programs, which David Chisnall points out &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093545.html">is because of the C++ ABI using low-bits on pointers&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Dan Liew has posted some &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093540.html">feedback on the Arcanist/Phabricator work-flow&lt;/a>. This has resulted in a new patch up for review &lt;a href="http://reviews.llvm.org/D15801">improving the LLVM Phabricator documentation&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The &lt;code>-align-all-loops&lt;/code> and &lt;code>-align-all-functions&lt;/code> arguments have been introduced to force function or loop alignments for testing purposes. &lt;a href="http://reviews.llvm.org/rL256571">r256571&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The x86 backend has added intrinsics for reading and writing to the flags register. &lt;a href="http://reviews.llvm.org/rL256685">r256685&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Various Clang classes have been converted to use the TrailingObjects helper. &lt;a href="http://reviews.llvm.org/rL256658">r256658&lt;/a>, &lt;a href="http://reviews.llvm.org/rL256659">r256659&lt;/a>, and more.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;code>__readeflags&lt;/code> and &lt;code>__writeeflags&lt;/code> intrinsics are exposed in Clang. &lt;a href="http://reviews.llvm.org/rL256686">r256686&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul> &lt;li>&lt;p>In libcxx, undefined behaviour in &lt;code>&amp;lt;list&amp;gt;&lt;/code> has been fixed for builtin pointer types and support added for the next ABI version. &lt;a href="http://reviews.llvm.org/rL256652">r256652&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #104, Dec 28th 2015</title><link>https://blog.llvm.org/2015/12/llvm-weekly-104-dec-28th-2015.html</link><pubDate>Mon, 28 Dec 2015 07:50:00 +0000</pubDate><guid>https://blog.llvm.org/2015/12/llvm-weekly-104-dec-28th-2015.html</guid><description>&lt;p>Welcome to the one hundred and fourth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/104">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The &lt;a href="http://llvm.org/devmtg/2016-01/">schedule for the LLVM devroom at FOSDEM&lt;/a> has been published. This will be on January 30th 2016 in Brussels at &lt;a href="https://fosdem.org/2016/">FOSDEM&lt;/a>.&lt;/p>&lt;p>Andy Finnell spent some time over the Christmas vacation porting the LLVM Kaleidoscope tutorial to Erlang and has kindly &lt;a href="http://losingfight.com/blog/2015/12/24/christmas-and-compilers/">shared the fruits of his labours&lt;/a>.&lt;/p>&lt;p>Richard Pennington has written another blog post about ELLCC, this time about &lt;a href="http://ellcc.org/blog/?p=26435">using it to cross-compile the Linux kernel for the Raspberry Pi&lt;/a>.&lt;/p>&lt;p>Tim Jones (lecturer at the University of Cambridge Computer Laboratory) has written about the &lt;a href="http://www-dyn.cl.cam.ac.uk/~tmj32/wordpress/alias-analysis-in-helix/">alias analysis used in the HELIX compiler&lt;/a>. There's nothing LLVM-specific here, indeed it was implemented using ILDJIT but should be of general interest to compiler developers.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Keno Fischer has posted a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093535.html">proposal for multi-location debug info support in LLVM IR&lt;/a>. This would allow, for instance, modelling when a variable is available either on the stack or in a register.&lt;/p>&lt;/li>&lt;li>&lt;p>Adam Nemet is proposing to &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093514.html">extend the PowerPC software prefetching pass to work on other targets&lt;/a>, specifically AArch64.&lt;/p>&lt;/li>&lt;li>&lt;p>Russel Wallace asks for &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093486.html">advice on finding all pointers to functions&lt;/a>, and had a number of suggestions in response.&lt;/p>&lt;/li>&lt;li>&lt;p>For a while now, Galina Kistanova has been posting &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093503.html">statistics from the LLVM buildbots&lt;/a>. This includes the number of commits for each project, the number of failed builds, and average build time. I haven't linked to it before, so felt I should rectify that.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>An initial implementation of an LLVMCodeView library has landed. This implements support for emitting debug info in the CodeView format. &lt;a href="http://reviews.llvm.org/rL256385">r256385&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lit has gained support for a per-test timeout which can be set using &lt;code>--timeout=&lt;/code>. &lt;a href="http://reviews.llvm.org/rL256471">r256471&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>All uses of edge wights in BranchProbabilityInfo have been replaced with probabilities. &lt;a href="http://reviews.llvm.org/rL256263">r256263&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM project documentation on patch reviews via Phabricator now has advice on choosing reviewers. &lt;a href="http://reviews.llvm.org/rL256265">r256265&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The gc.statepoint intrinsic's return type is now a token type rather than i32. &lt;a href="http://reviews.llvm.org/rL256443">r256443&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul> &lt;li>&lt;p>ASTtemplateKWAndArgsInfo and ASTTemplateArgumentListInfo have been converted to use the TrailingObjects header. This abstracts away &lt;code>reinterpret_cast&lt;/code>, pointer arithmetic, and size calculations needed for the case where a class has some other objects appended to the end of it. &lt;a href="http://reviews.llvm.org/rL256359">r256359&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul> &lt;li>&lt;p>Development of LLD's new ELF linker is continuing, with support for new relocations on x86, x86-64, and MIPS. &lt;a href="http://reviews.llvm.org/rL256143">r256143&lt;/a>, &lt;a href="http://reviews.llvm.org/rL256144">r256144&lt;/a>, &lt;a href="http://reviews.llvm.org/rL256172">r256172&lt;/a>, &lt;a href="http://reviews.llvm.org/rL256416">r256416&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #103, Dec 21st 2015</title><link>https://blog.llvm.org/2015/12/llvm-weekly-103-dec-21st-2015.html</link><pubDate>Mon, 21 Dec 2015 11:42:00 +0000</pubDate><guid>https://blog.llvm.org/2015/12/llvm-weekly-103-dec-21st-2015.html</guid><description>&lt;p>Welcome to the one hundred and third issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/103">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;p>Regular readers will know about lowRISC, a not-for-profit project a group of us founded aiming to produce a complete open-source System-on-Chip in volume. We've just hit a new milestone with the &lt;a href="http://www.lowrisc.org/blog/2015/12/untethered-lowrisc-release/">untethering of the base SoC&lt;/a>. If you're interested in contributing, the blog post contains a number of potential starting points.&lt;/p>&lt;h3>News and articles from around the web&lt;/h3>&lt;p>The 6th EuroLLVM conference will be held on March 17th-18th in Barcelona, Spain. The &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093291.html">call for papers&lt;/a> is now open and will remain open until January 25th 2016. EuroLLVM CFP &lt;/p>&lt;p>Chandler Carruth's keynote, "Understanding compiler optimizations" from the Meeting C++ 2015 conference is &lt;a href="https://www.youtube.com/watch?v=FnGCDLhaxKU">now online&lt;/a>.&lt;/p>&lt;p>Richard Pennington has blogged about &lt;a href="http://ellcc.org/blog/?p=26397">bootstrapping LLVM and Clang using pre-compiled ELLCC binaries&lt;/a>.&lt;/p>&lt;p>Bloomberg is going to be holding a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093412.html">weekend Clang and LLVM hackathon&lt;/a> in NYC and in London on February 6th and 7th. The event will be open to everyone in the community and Bloomberg will provide space, power, food, beverages, and internet access.They're looking for experienced Clang and LLVM developers to help as mentors.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Marshall Clow proposes &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2015-December/046575.html">dropping support in libc++ for GCC versions prior to 4.7&lt;/a>. Eric Fiselier suggests that actually GCC 4.7 and 4.8 have a rather large number of test failures and &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2015-December/046584.html">4.9 would be a more sensible requirement&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Dmitry Polukhin has proposed an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093414.html">RFC on supporting GCC's ifunc attribute&lt;/a>. He proposes three potential approaches and feedback so far prefers the second.&lt;/p>&lt;/li>&lt;li>&lt;p>Easwaran Raman has posted an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093388.html">hotness thresholds in profile-guided optimisation&lt;/a>. The proposal attempts to define a way of determining hot blocks that works both for programs with few hot-spots and a long tail of frequently executed blocks.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLVM IR now supports floating point atomic loads and stores. &lt;a href="http://reviews.llvm.org/rL255737">r255737&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>New attributes have been introduced: &lt;code>InaccessibleMemOnly&lt;/code> (a function may only access memory that is not accessible by the module being compiled) and &lt;code>InaccessibleMemOrArgMemOnly&lt;/code> (a function may only access memory that is either not accessible by the module being compiled or is pointed to by its pointer arguments). &lt;a href="http://reviews.llvm.org/rL255778">r255778&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The PowerPC backend gained support for soft float operations on ppc32. &lt;a href="http://reviews.llvm.org/rL255516">r255516&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>terminatepad&lt;/code> instruction has been removed from LLVM IR. &lt;a href="http://reviews.llvm.org/rL255522">r255522&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>IR call instructions can now take a fast-math flags marker which indicates fast-math flags may allow otherwise unsafe optimisations. &lt;a href="http://reviews.llvm.org/rL255555">r255555&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM gained a C++11 ThreadPool in its internal library. It is intended to be used for ThinLTO. &lt;a href="http://reviews.llvm.org/rL255593">r255593&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The default set of passes has been adjusted. mem2reg will not be run immediately after globalopt and more scalar optimization passes have been added to the LTO pipeline. &lt;a href="http://reviews.llvm.org/rL255634">r255634&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The llvm-profdata tool now supports specifying a weight when merging profile data. This can be used to give more relative importance to one of multiple profile runs. &lt;a href="http://reviews.llvm.org/rL255659">r255659&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>For CMake builds, a &lt;code>compile_commands.json&lt;/code> file will now be generated which tells tools like YouCompleteMe and &lt;code>clang_complete&lt;/code> how to build each source file. &lt;a href="http://reviews.llvm.org/rL255789">r255789&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Hexagon VLIW packetizer saw a large update (though unfortunately the changes aren't summarised in the commit message). &lt;a href="http://reviews.llvm.org/rL255807">r255807&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A number of LLVM's C APIs have been depreciated: LLVMParseBitcode, LLVMParseBitcodeInContext, LLVMGetBitcodeModuleInContext and LLVMGetBitcodeModule. These have been replaced with new versions of the functions which don't record a diagnostic. &lt;a href="http://reviews.llvm.org/rL256065">r256065&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The AVR backend (which is being imported incrementally) gained AVR.td and AVRRegisterInfo.td. &lt;a href="http://reviews.llvm.org/rL256120">r256120&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A new checker has been introduced to detect excess padding in classes and structs. &lt;a href="http://reviews.llvm.org/rL255545">r255545&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new control-flow integrity mode was introduced, cross-DSO CFI allows control flow to be protected across shared objects. It is currently marked experimental. &lt;a href="http://reviews.llvm.org/rL255694">r255694&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang's CMake build system now supports generating profile data for Clang. &lt;a href="http://reviews.llvm.org/rL255740">r255740&lt;/a>, &lt;a href="http://reviews.llvm.org/rL256069">r256069&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>It is now possible to suppress reports from UndefinedBehaviourSanitizer for certain files, functions, or modules at runtime. &lt;a href="http://reviews.llvm.org/rL256018">r256018&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The llvm test-suite's CMake+Lit runner gained support for SPEC2000 and SPEC CPU95. &lt;a href="http://reviews.llvm.org/rL255876">r255876&lt;/a>, &lt;a href="http://reviews.llvm.org/rL255878">r255878&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #102, Dec 14th 2015</title><link>https://blog.llvm.org/2015/12/llvm-weekly-102-dec-14th-2015.html</link><pubDate>Mon, 14 Dec 2015 04:43:00 +0000</pubDate><guid>https://blog.llvm.org/2015/12/llvm-weekly-102-dec-14th-2015.html</guid><description>&lt;p>Welcome to the one hundred and second issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/102">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Version 1.5 of the Rust programming language &lt;a href="http://blog.rust-lang.org/2015/12/10/Rust-1.5.html">has been released&lt;/a>. Rust of course uses LLVM as its backend.&lt;/p>&lt;p>George Balatsouras has written a blog post on &lt;a href="http://gbalats.github.io/2015/12/10/compiling-autotooled-projects-to-LLVM-bitcode.html">compiling a project using autotools to LLVM bitcode&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Derek Schuff kicked off a discussion about whether &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093172.html">virtual registers should be allowed after register allocation for targets with infinite virtual register sets&lt;/a>. For targets such as WebAssembly and NVPTX, it of course doesn't make sense to have a fixed size register file. A number of people raised concerns that using virtual registers after register allocation seems like a hack that could result in difficult corner cases, or suggested that supporting infinite (or at least growable) physical register sets might be an interesting alternative. Matthias Braun gave a really good &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093215.html">summary of the issues&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Discussion has continued on adding an HasInaccessibleState attribute. Vaivaswatha Nagaraj summarised the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093108.html">key points of the discussion so far&lt;/a> while Joseph Tremoulet &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093139.html">shared some thoughts based on his experience on the Microsoft Phoenix compiler&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Alexander Riccio is interested in feedback on his &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2015-December/046384.html">proposal to integrate more static analysis tests&lt;/a>. He's looking to import code published by NIST.&lt;/p>&lt;/li>&lt;li>&lt;p>Philip Reames has posted an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093237.html">extending atomic loads and stores to floating point and vector types&lt;/a>. Feedback appears to be positive.&lt;/p>&lt;/li>&lt;li>&lt;p>Hans Wennborg has proposed a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093273.html">schedule for the 3.8 release&lt;/a>. Under this proposal, 3.8 would be branched on the 13th of January 2016 with a final release targeted for 18th February.&lt;/p>&lt;/li>&lt;li>&lt;p>Craig Topper has provided a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093239.html">useful description of how patterns are ordered by TableGen&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>David Li has posted an update detailing &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093170.html">remaining steps for size reduction of profile-guided optimisation&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>When writing your own backend, how should you handle checking the range of immediates for your assembly parser? Alex Bradbury &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093093.html">explains how&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A new minimum spanning tree based method of instrumenting code for profile-guided optimisation was added. This guarantees the minimum number of CFG edges are instrumented. &lt;a href="http://reviews.llvm.org/rL255132">r255132&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MatchBSwap in InstCombine will now also detect bit reversals. &lt;a href="http://reviews.llvm.org/rL255334">r255334&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Sample-based profile-guided optimisation memory usage has been reduced by 10x by changing from using a DenseMap for sample records to a std::map. &lt;a href="http://reviews.llvm.org/rL255389">r255389&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>An &lt;code>Instruction::getFunction&lt;/code> method was added. It's perhaps surprising this didn't exist before. &lt;a href="http://reviews.llvm.org/rL254975">r254975&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>FP16 vector instructions defined in ARMv8.2-A are now supported. &lt;a href="http://reviews.llvm.org/rL255010">r255010&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The EarlyCSE (common subexpression elimination) pass learned to perform value forwarding for unordered atomics. &lt;a href="http://reviews.llvm.org/rL255054">r255054&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Debug info in LLVM IR can now refer to macros. &lt;a href="http://reviews.llvm.org/rL255245">r255245&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM's developer policy has been updated to detail the currently accepted C API stability policy and other guidelines. &lt;a href="http://reviews.llvm.org/rL255300">r255300&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A massive rework of funclet-oriented exception handling (needed for Windows exceptions) has landed. &lt;a href="http://reviews.llvm.org/rL255422">r255422&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang gained an option to use the new ThinLTO pipeline. &lt;a href="http://reviews.llvm.org/rL254927">r254927&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Hexagon will use the integrated assembler by default. &lt;a href="http://reviews.llvm.org/rL255127">r255127&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>dllexport and dllimport attributes are now exposed through the libclang API. &lt;a href="http://reviews.llvm.org/rL255273">r255273&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul> &lt;li>&lt;p>ThreadSanitizer gained initial support for PPC64. &lt;a href="http://reviews.llvm.org/rL255057">r255057&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #101, Dec 7th 2015</title><link>https://blog.llvm.org/2015/12/llvm-weekly-101-dec-7th-2015.html</link><pubDate>Mon, 07 Dec 2015 03:52:00 +0000</pubDate><guid>https://blog.llvm.org/2015/12/llvm-weekly-101-dec-7th-2015.html</guid><description>&lt;p>Welcome to the one hundred and first issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/101">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The implementation of the Swift programming language is &lt;a href="https://swift.org/blog/welcome/">now open source&lt;/a>. Rather than being a simple code dump, development will now occur out in the open with &lt;a href="https://swift.org/contributing/">external contributions encouraged&lt;/a>. If you haven't already, now might be a good time to watch Joseph Groff and Chris Lattner's &lt;a href="https://www.youtube.com/watch?v=Ntj8ab-5cvE">talk on the Swift Intermediate Language&lt;/a>.&lt;/p>&lt;p>Rui Ueyama &lt;a href="http://blog.llvm.org/2015/11/new-elf-linker-from-llvm-project.html">wrote about the new LLD ELF linker&lt;/a> on the official LLVM blog.&lt;/p>&lt;p>The Visual C++ team have released &lt;a href="http://blogs.msdn.com/b/vcblog/archive/2015/12/04/introducing-clang-with-microsoft-codegen-in-vs-2015-update-1.aspx">Clang with Microsoft CodeGen&lt;/a>. This uses the Clang parser along with the code generator and optimizer from Visual C++. The majority of the Clang and LLVM changes will be contributed back upstream.&lt;/p>&lt;p>Alex Denisov wrote about &lt;a href="http://lowlevelbits.org/how-to-use-llvm-api-with-swift/">using the LLVM API with Swift&lt;/a>.&lt;/p>&lt;p>If you haven't already submitted your talk proposal for the LLVM devroom at FOSDEM, you've now got a little more time. &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/092897.html">Get your submission in by this Friday&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Swift team members have started discussions about upstreaming their changes to &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093006.html">LLVM&lt;/a>, &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2015-December/046335.html">Clang&lt;/a>, and &lt;a href="http://lists.llvm.org/pipermail/lldb-dev/2015-December/009010.html">LLDB&lt;/a>. The Clang changes include the addition of an 'API notes' feature which has seen some interest from other developers. This can be used to associate certain attributes with functions from system headers through an external YAML file, which is of course much more pragmatic than expecting system headers on all supported platforms to be updated.&lt;/p>&lt;/li>&lt;li>&lt;p>Vaivaswatha Nagaraj observes that &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/092919.html">malloc and realloc don't have the doesNotAccessMemory/onlyReadsMemory attributes set&lt;/a>, and that this makes GlobalsAA much less effective. As was pointed out in the ensuing discussion, these attributes wouldn't be correct for malloc and realloc but it would perhaps make sense to add a new attribute. Vaivaswatha &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093008.html">penned an RFC on an HasInaccessibleState attribute&lt;/a>. This has generated a lot of discussion and alternate proposals but no conclusion yet.&lt;/p>&lt;/li>&lt;li>&lt;p>Christof Douma has posted an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093021.html">RFC on adding execute only support to the ARM code generator&lt;/a>. This means the compiler will not generate data accesses in to the code section.&lt;/p>&lt;/li>&lt;li>&lt;p>Oliver Stannard has posted an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/093022.html">RFC on supporting position-independent code on ARM for small embedded systems&lt;/a>. In read-only position independence (ROPI), code and read-only data is accessed PC-relative with the offsets known at static link time. In read-write position independence (RWPI), read-write data is accessed relative to the static base register (R9).&lt;/p>&lt;/li>&lt;li>&lt;p>This week's bikeshedding thread is on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/092876.html">the naming convention for LLVM intrinsics&lt;/a>. The proposal is to standardise on using &lt;code>.&lt;/code> as a separator. There are some suggestions that &lt;code>_&lt;/code> be allowed in words.&lt;/p>&lt;/li>&lt;li>&lt;p>How can you recompile functions at different optimisation levels? Lang Hames &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-December/092945.html">provides a sample doing this using the Orc API&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>llc and opt gained an option to run all passes twice. This is intended to help show up bugs that occur when using the same pass manager to compile multiple modules. &lt;a href="http://reviews.llvm.org/rL254774">r254774&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>An initial prototype for llvm-dwp has been committed. This will eventually be a tool for building a DWARF package file out of a number of .dwo split debug files. &lt;a href="http://reviews.llvm.org/rL254355">r254355&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>All weight-based interfaces in MachineBasicBlock have now been replaced with probability-based interfaces. &lt;a href="http://reviews.llvm.org/rL254377">r254377&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM's STLExtras gained a range-based version of &lt;code>std::any_of&lt;/code> and &lt;code>std::find&lt;/code>. &lt;a href="http://reviews.llvm.org/rL254391">r254391&lt;/a>, &lt;a href="http://reviews.llvm.org/rL254390">r254390&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;code>llvm.get.dynamic.area.offset.{i32,264}&lt;/code> intrinsics have been added. These can be used to get the address of the most recent dynamic alloca. &lt;a href="http://reviews.llvm.org/rL254404">r254404&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The X86 backend gained a new pass to reduce code size by removing redundant address recalculations for LEA. &lt;a href="http://reviews.llvm.org/rL254712">r254712&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The WebAssembly backend now has initial support for varargs. &lt;a href="http://reviews.llvm.org/rL254799">r254799&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Design docs have been added for forward-edge CFI for indirect calls. &lt;a href="http://reviews.llvm.org/rL254464">r254464&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>pass_object_size&lt;/code> attribute was added to Clang. This intended to be used to work around cases where &lt;code>__builtin_object_size&lt;/code> doesn't function. &lt;a href="http://reviews.llvm.org/rL254554">r254554&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Documentation was added for UndefinedBehaviorSanitizer. &lt;a href="http://reviews.llvm.org/rL254733">r254733&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLD now supports the &lt;code>R_MIPS_HI16/LO16&lt;/code> relocations. &lt;a href="http://reviews.llvm.org/rL254461">r254461&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libomp can now make use of libhwloc on Unix to discover topology of the host system. &lt;a href="http://reviews.llvm.org/rL254320">r254320&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>New ELF Linker from the LLVM Project</title><link>https://blog.llvm.org/2015/11/new-elf-linker-from-llvm-project.html</link><pubDate>Mon, 30 Nov 2015 07:26:00 +0000</pubDate><guid>https://blog.llvm.org/2015/11/new-elf-linker-from-llvm-project.html</guid><description>We have been working hard for a few months now to rewrite the ELF support in lld, the LLVM linker. We are happy to announce that it has reached a significant milestone: it is now able to bootstrap LLVM, Clang, and itself and pass all tests on x86-64 Linux and FreeBSD with the speed expected of an LLVM project.&lt;br />&lt;br />ELF is the standard file format for executables on Unix-like systems, such as Linux and BSDs. GNU ld and GNU gold are commonly used linkers for such systems today. In many use cases, the linker is a black box for which only speed matters. Depending on program size, linking a program takes from tens of milliseconds to more than a minute. We designed the new linker so that it runs as fast as possible. Although no serious benchmarking or optimization has been conducted yet, it is consistently observed that the new lld links the LLVM/Clang/lld executables in about half the time of GNU gold. Generated executables are roughly the same size. lld is not at feature parity with gold yet, so it is too early to make a conclusion, but we are working hard to maintain or improve lld’s speed while adding more features.&lt;br />&lt;br />lld is command-line compatible with GNU ld so that it can be used as a drop-in replacement. This does not necessarily mean that we are implementing all the features of the GNU linkers in the same way as they did. Some features are no longer relevant for modern Unix-like systems and can be removed. Some other features can be implemented in more efficient ways than those in the traditional linkers. Writing a new linker from scratch is a rare occasion. We take advantage of this opportunity to simplify the linker while keeping compatibility with the existing linkers for normal use.&lt;br />&lt;br />The new ELF linker is a relatively small program which currently consists of about 7000 lines of C++ code. It is based on the same design as the PE/COFF (Windows) support in lld, so the design document for the PE/COFF support is directly applicable to the ELF support.&lt;br />&lt;br />The older ELF support still exists in lld repository in parallel with the new one. Please be careful to not confuse the two. They are separated at the top directory and do not share code. You can run the new linker with ld.lld command or by passing -fuse-ld=lld to Clang when linking.&lt;br />&lt;br />We are still working on implementing remaining functionality such as improved linker script support or improved support for architectures beyond x86_64. If you are interested in the new linker, &lt;a href="http://lld.llvm.org/getting_started.html">try it out for yourself&lt;/a>.</description></item><item><title>LLVM Weekly - #100, Nov 30th 2015</title><link>https://blog.llvm.org/2015/11/llvm-weekly-100-nov-30th-2015.html</link><pubDate>Mon, 30 Nov 2015 04:41:00 +0000</pubDate><guid>https://blog.llvm.org/2015/11/llvm-weekly-100-nov-30th-2015.html</guid><description>&lt;p>Welcome to the one hundredth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>Eagle-eyed readers will note we've now reached issue 100, marking 100 weeks of uninterrupted service and of course meaning there's just 28 weeks to go until an important numerical milestone.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/100">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>There is going to be an LLVM Devroom at FOSDEM next year and the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092826.html">call for proposals&lt;/a> closes on December 1st. Get your submissions in!&lt;/p>&lt;p>Most slides from the recent LLVM in HPC workshop have &lt;a href="http://llvm-hpc2-workshop.github.io/">now been posted&lt;/a>.&lt;/p>&lt;p>Jeff Trull has posted a great &lt;a href="http://jefftrull.github.io/c++/clang/llvm/fuzzing/sanitizers/2015/11/27/fuzzing-with-sanitizers.html">blog post on fuzzing C++ code with AFL and libFuzzer&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>The upcoming removal of the autoconf build system came up on the mailing list again. Chris Bieneman explains &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092841.html">the policy on blocking vs non-blocking bugs for this&lt;/a>. If you think you're likely to be affected, now is a very good time to kick the tires on CMake.&lt;/p>&lt;/li>&lt;li>&lt;p>Geoffrey Romer is &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2015-November/046239.html">interested in adding the ability to customise the behaviour of std::hash&lt;/a> and is looking for feedback.&lt;/p>&lt;/li>&lt;li>&lt;p>Is it possible to use a static base register on ARM rather than PC-relative addressing? Oliver Stannard &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092812.html">has a patch for this&lt;/a> which should be upstreamed soon.&lt;/p>&lt;/li>&lt;li>&lt;p>Rail Shafigulin is looking for information on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092729.html">how slots are assigned for packets in Hexagon&lt;/a>. As usual, Krzystof Parzyszek provides some useful answers.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A number of patches related to ARMv8.2-A have landed. Public documentation doesn't seem to have been released for this architecture revision, but the patches indicate some of the new features including: persistent memory instruction and FP16 instructions. You can see the patches still in review &lt;a href="http://reviews.llvm.org/differential/?authors=olista01">here&lt;/a>. &lt;a href="http://reviews.llvm.org/rL254156">r254156&lt;/a>, &lt;a href="http://reviews.llvm.org/rL254198">r254198&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A series of helper functions from SelectionDAGNodes have been exposed (isNullConstant, isNullFPConstant, isAllOnesConstant, isOneConstant). These helpers can help simplify code in your target's ISelLowering. &lt;a href="http://reviews.llvm.org/rL254085">r254085&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The WebAssembly backend's block placement algorithm has been improved. &lt;a href="http://reviews.llvm.org/rL253876">r253876&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Tests generated from &lt;code>utils/update_llc_test_checks.py&lt;/code> are now marked as autogenerated. &lt;a href="http://reviews.llvm.org/rL253917">r253917&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>DataRecursiveASTVisitor has been removed, and RecursiveASTVisitor can be used in its place. This resulted in the removal of 2912 lines of code. &lt;a href="http://reviews.llvm.org/rL253948">r253948&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Sparc and SparcV9 default to using an external assembler again. &lt;a href="http://reviews.llvm.org/rL254199">r254199&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>Functions with the interrupt attribute are now supported for mips32r2+. &lt;a href="http://reviews.llvm.org/rL254205">r254205&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A single DataFlowSanitizer or ThreadSanitizer-instrumented binary can now run on both 39-bit virtual address space and 42-bit virtual address space AArch64 platforms. &lt;a href="http://reviews.llvm.org/rL254151">r254151&lt;/a>, &lt;a href="http://reviews.llvm.org/rL254197">r254197&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lldb gained a &lt;code>swig_bot.py&lt;/code> for generating bindings. &lt;a href="http://reviews.llvm.org/rL254022">r254022&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #99, Nov 23rd 2015</title><link>https://blog.llvm.org/2015/11/llvm-weekly-99-nov-23rd-2015.html</link><pubDate>Mon, 23 Nov 2015 06:20:00 +0000</pubDate><guid>https://blog.llvm.org/2015/11/llvm-weekly-99-nov-23rd-2015.html</guid><description>&lt;p>Welcome to the ninety-ninth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/99">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>LLVM/Clang 3.7.1-rc2 &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092684.html">has been tagged&lt;/a>. As always, help testing is appreciated.&lt;/p>&lt;p>Clasp 0.4 &lt;a href="https://drmeister.wordpress.com/2015/11/20/clasp-0-4-joining-common-lisp-and-cxx/">has been released&lt;/a>. Clasp is a new Common Lisp implementation that uses LLVM as a compiler backend and aims to offer seamless C++ interoperation.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Quentin Colombet has shared a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092566.html">plan for moving forwards with global instruction selection&lt;/a>, as proposed in his &lt;a href="https://www.youtube.com/watch?v=F6GGbYtae3g">Dev Meeting talk&lt;/a>. There's a lot of enthusiasm for this work, though some questions about how in practical terms the development should proceed and be tested. There is also hope that this new work will &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092616.html">allow the distinction between integers and pointers to be preserved through to MachineInstructions&lt;/a>. This is useful both &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092612.html">for GC&lt;/a> and for &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092609.html">architectures where pointers aren't integers&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Eric Christopher has shared a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092623.html">summary of discussions from the recent Birds of a Feather discussion on the LLVM C API&lt;/a>. This includes proposed policy for stability guarantees and extending the APIs.&lt;/p>&lt;/li>&lt;li>&lt;p>Ed Maste has been experimenting with &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092572.html">linking the FreeBSD base system with lld&lt;/a>. With a few extra patches he's managed to link the whole FreeBSD userland.&lt;/p>&lt;/li>&lt;li>&lt;p>Artem Dergachev has shared some &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2015-November/046136.html">minutes from a call about summary-based inter-procedural analysis&lt;/a> for Clang's static analyser.&lt;/p>&lt;/li>&lt;li>&lt;p>Steve King is &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092611.html">concerned about recent code size regressions with Os&lt;/a>. The issue was &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092675.html">bisected&lt;/a> to recent changes to the heuristic for merging conditional stores. James Molloy, who authored the patch in question suggests &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092679.html">more investigation is necessary&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Rail Shafigulin is working on a custom VLIW architecture and has had a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092665.html">number&lt;/a> &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092467.html">of&lt;/a> &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092531.html">questions&lt;/a> &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092518.html">about&lt;/a> &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092480.html">the&lt;/a> DFAPacketizer. Krzysztof Parzyszek has provided useful answers each time - well worth a read of these threads if you're doing any work with VLIW or want to learn more about DFAPacketizer.&lt;/p>&lt;/li>&lt;li>&lt;p>Nick Johnson pointed out an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092526.html">interesting potential bug in the LiveVariables pass&lt;/a>. There haven't been any responses yet, but he has followed up with a &lt;a href="http://reviews.llvm.org/D14875">patch to fix the issue&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Amjad Aboud has posted a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092551.html">detailed RFC on ensuring LLVM debug info supports all lexically scoped entities&lt;/a>. He includes a simple example which shows where block-local typedefs or class definitions can lead to problems.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Initial support for value profiling landed. &lt;a href="http://reviews.llvm.org/rL253484">r253484&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>It is now possible to use the &lt;code>-force-attribute&lt;/code> command-line option for specifying a function attribute for a particular function (e.g. norecurse, noinline etc). This should be very useful for testing. &lt;a href="http://reviews.llvm.org/rL253550">r253550&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The WebAssembly backend gained initial prototype passes for register coloring (on its virtual registers) and register stackifying. &lt;a href="http://reviews.llvm.org/rL253217">r253217&lt;/a>, &lt;a href="http://reviews.llvm.org/rL253465">r253465&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The built-in assembler now treats fatal errors as non-fatal in order to report all errors in a file rather than just the first one encountered. &lt;a href="http://reviews.llvm.org/rL253328">r253328&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>As &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092238.html">discussed on the mailing list last week&lt;/a>, lane masks are now always precise. &lt;a href="http://reviews.llvm.org/rL253279">r253279&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for prelinking has been dropped. See the commit message for a full rationale. &lt;a href="http://reviews.llvm.org/rL253280">r253280&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-lto can now be used to emit assembly rather than object code. &lt;a href="http://reviews.llvm.org/rL253622">r253622&lt;/a>, &lt;a href="http://reviews.llvm.org/rL253624">r253624&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang should now be usable for CUDA compilation out of the box. &lt;a href="http://reviews.llvm.org/rL253389">r253389&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>When giving the &lt;code>-mcpu/-march&lt;/code> options to Clang targeting ARM, you can now specify &lt;code>+feature&lt;/code>. &lt;a href="http://reviews.llvm.org/rL253471">r253471&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Compiler-rt gained support for value profiling. &lt;a href="http://reviews.llvm.org/rL253483">r253483&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The 'new ELF linker' is now the default ELF linker in lld. &lt;a href="http://reviews.llvm.org/rL253318">r253318&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM test suite gained support for running SPEC2000int and SPEC2006int+fp with PGO and reference inputs. &lt;a href="http://reviews.llvm.org/rL253362">r253362&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #98, Nov 16th 2015</title><link>https://blog.llvm.org/2015/11/llvm-weekly-98-nov-16th-2015.html</link><pubDate>Mon, 16 Nov 2015 04:18:00 +0000</pubDate><guid>https://blog.llvm.org/2015/11/llvm-weekly-98-nov-16th-2015.html</guid><description>&lt;p>Welcome to the ninety-eighth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>This week's issue comes to you from Vienna where I'm just about to head home from a short break (so apologies if it's a little later than usual and perhaps a little less detailed). I'll admit that nobody has actually written in to beg that LLVM Weekly share travel tips, but I will say that Vienna is a beautiful city that's provided lots to do over the past few days. If you're visiting, I can strongly recommend &lt;a href="http://www.salmbraeu.com/home/">Salm Bräu&lt;/a> for good beer and food.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/98">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>All of the &lt;a href="https://www.youtube.com/playlist?list=PL_R5A0lGi1AA4Lv2bBFSwhgDaHvvpVU21">LLVM Dev Meeting Videos&lt;/a> are now up, and will stay up. This includes &lt;a href="https://www.youtube.com/watch?v=Ntj8ab-5cvE">Chris Lattner and Joseph Groff's talk on Swift's IR&lt;/a>. You can also find most of the slides &lt;a href="http://llvm.org/devmtg/2015-10/slides/">here&lt;/a>. The folks at Quarkslab have also &lt;a href="http://blog.quarkslab.com/llvm_dev_meeting.html">posted a trip report&lt;/a>.&lt;/p>&lt;p>The big news this week is that code derived from NVIDIA's PGI Fortran compiler &lt;a href="https://www.llnl.gov/news/nnsa-national-labs-team-nvidia-develop-open-source-fortran-compiler-technology">is to be open-sourced and a production-grade Fortran front-end to LLVM produced&lt;/a>. This project is a collaboration between the US NNSA (National Nuclear Security Administration), NVIDIA, and the Lawrence Livermore, Sandia, and Los Alamos national laboratories. Hal Finkel has &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092404.html">shared a little more on the LLVM mailing list&lt;/a>. With a source code release not due for about another year, where does this leave the existing &lt;a href="https://github.com/llvm-flang/flang">Flang&lt;/a> efforts? The hope is that &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092422.html">parts of Flang will be merged with the PGI release&lt;/a>. Douglas Miles from the PGI team has also &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092438.html">shared a mini-FAQ&lt;/a>. Fortran announcement &lt;/p>&lt;p>Bjarne Stroustrup has shared a &lt;a href="https://isocpp.org/blog/2015/11/kona-standards-meeting-trip-report">detailed trip report&lt;/a> from the last C++ Standards Meeting.&lt;/p>&lt;p>This post over at the Include Security Blog &lt;a href="http://blog.includesecurity.com/2015/11/LLVM-SafeStack-buffer-overflowprotection.html">delves in to some details of support for the SafeStack buffer overflow protection in LLVM&lt;/a>.&lt;/p>&lt;p>At the official LLVM blog, a new post gives a very useful guide on &lt;a href="http://blog.llvm.org/2015/11/reduce-your-testcases-with-bugpoint-and.html">how to reduce your testcases using bugpoint and custom scripts&lt;/a>. As the post notes, bugpoint is a very powerful tool but can be difficult to use.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Do you maintain an out-of-tree target? Does your out-of-tree target have a huge number of subregisters and depends on imprecise lanemasks being available? If so, &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092238.html">Matthias Braun wants to hear from you&lt;/a>. Speak up now if the proposed change may affect you.&lt;/p>&lt;/li>&lt;li>&lt;p>Geoff Berry is &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092376.html">proposing some more work on devirtualization&lt;/a>. In particular, he wants to propagate &lt;code>llvm.assume&lt;/code> across function calls. He also asks what else is required to enable Clang's &lt;code>-fstrict-vtable-pointers&lt;/code> by default, which &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092384.html">Piotr Padlewski and Richard Smith provide detailed responses to&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Cong Hou has posted an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092379.html">adding a vector reduction add instruction&lt;/a> to LLVM IR. There hasn't been much feedback yet, but David Li &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092398.html">questions whether the effect could be modelled with simpler instructions/intrinsics&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Ben Langmuir has posted an &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2015-November/045999.html">RFC on whether modules specified in a module map file should shadow implicitly discovered modules&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLVM's autoconf-based build system is now officially deprecated, with the CMake build system being preferred. &lt;a href="http://reviews.llvm.org/rL252520">r252520&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Do you want to compile CUDA code with Clang and LLVM? There's now some &lt;a href="http://llvm.org/docs/CompileCudaWithLLVM.html">handy documentation describing how to do so&lt;/a>. See also &lt;a href="https://www.youtube.com/watch?v=JHfb8z-iSYk">Jingyue's talk&lt;/a> from the recent LLVM Dev Meeting. &lt;a href="http://reviews.llvm.org/rL252660">r252660&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A simple MachineInstruction SSA pass for PowerPC has been added. The implementation is short and straight-forward, so worth a read if you want to do some MI-level peephole optimisations for your target. &lt;a href="http://reviews.llvm.org/rL252651">r252651&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Basic support for AArch64's address tagging has been added. In AArch64, the top 8 bits of an address can be used to store extra metadata with these bits being masked out before going through address translation. &lt;a href="http://reviews.llvm.org/rL252573">r252573&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Hexagon backend now supports assembly parsing. &lt;a href="http://reviews.llvm.org/rL252443">r252443&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The CMake build system gained a new LLVMExternalProjectUtils module. As an example, this is used with the LLVM test suite which can be set up to be rebuilt whenever the in-tree clang or lld change. This could also be used with compiler-rt or libcxx. &lt;a href="http://reviews.llvm.org/rL252747">r252747&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>An 'empty token' is now defined (written as &lt;code>token empty&lt;/code>) for when using tokens in LLVM IR. &lt;a href="http://reviews.llvm.org/rL252811">r252811&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LibFuzzer gained a new experimental search heuristic, drill. As the comment in FuzzerLoop.cpp explains, this will 1) read+shuffle+execute+minimize the corpus, 2) choose a random unit, 3) reset the coverage, 4) start fuzzing as if the chosen unit was the only element of the corpus, 5) reset the coverage again when done, 6) merge the newly created corpus into the original one. &lt;a href="http://reviews.llvm.org/rL252838">r252838&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A BITREVERSE SelectionDAG node and a set of &lt;code>llvm.bitreverse.*&lt;/code> intrinsics have been introduced. The intention is that backends should no longer have to reimplement similar code to match instruction patterns to their own ISA's bitreverse instruction. See also the patch to the ARM backend that replaces ARMISD::RBIT with ISD::BITREVERSE. &lt;a href="http://reviews.llvm.org/rL252878">r252878&lt;/a>, &lt;a href="http://reviews.llvm.org/rL253047">r253047&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Support for &lt;code>__attribute__(internal_linkage)&lt;/code> was added. This is much like C's static keyword, but applies to C++ class methods. &lt;a href="http://reviews.llvm.org/rL252648">r252648&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang now supports GCC's &lt;code>__auto_type&lt;/code> extension, with a few minor enhancements. &lt;a href="http://reviews.llvm.org/rL252690">r252690&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul> &lt;li>&lt;p>libcxx gained initial support for building with mustl libc. Primarily this is a new CMake option, necessary as Musl doesn't provide a macro to indicate its presense. &lt;a href="http://reviews.llvm.org/rL252457">r252457&lt;/a>).&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>Reduce Your Testcases with Bugpoint and Custom Scripts</title><link>https://blog.llvm.org/2015/11/reduce-your-testcases-with-bugpoint-and.html</link><pubDate>Thu, 12 Nov 2015 20:18:00 +0000</pubDate><guid>https://blog.llvm.org/2015/11/reduce-your-testcases-with-bugpoint-and.html</guid><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on">&lt;div style="text-align: left;">&lt;div style="text-align: left;">LLVM provides many useful command line tools to handle bitcode:&amp;nbsp;&lt;i>opt&lt;/i>&amp;nbsp;is the most widely known and is used to run individual passes on an IR module, and&amp;nbsp;&lt;i>llc&lt;/i>&amp;nbsp;invokes the backend to generate an assembly or object file from an IR module. Less known but very powerful is&amp;nbsp;&lt;i>bugpoint&lt;/i>, the automatic test case reduction tool, that should be part of every developer's toolbox.&lt;/div>&lt;div style="text-align: left;">&lt;br />&lt;/div>&lt;div style="text-align: left;">The&amp;nbsp;&lt;i>bugpoint&lt;/i>&amp;nbsp;tool helps to reduce an input IR file while preserving some interesting behavior, usually a compiler crash or a miscompile. Multiple strategies are involved in the reduction of the test case (shuffling instructions, modifying the control flow, etc.), but because it is oblivious to the LLVM passes and the individual backend specificities, "it may appear to do stupid things or miss obvious simplifications", as stated in the&amp;nbsp;&lt;a href="http://llvm.org/docs/CommandGuide/bugpoint.html#description">official description&lt;/a>. The&amp;nbsp;&lt;a href="http://llvm.org/docs/Bugpoint.html">documentation&lt;/a>&amp;nbsp;gives some insights on the strategies that can be involved by&amp;nbsp;&lt;i>bugpoint&lt;/i>, but the details are&amp;nbsp;beyond the scope of this post.&lt;br />&lt;br />Read on to learn how you can use the power of bugpoint to solve some non-obvious problems.&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;/div>&lt;h2 style="text-align: left;">Bugpoint Interface Considered Harmful&lt;/h2>Bugpoint is a powerful tool to reduce your test case, but its interface can lead to frustration (as stated in the documentation: "&lt;i>bugpoint can be a remarkably useful tool, but it sometimes works in non-obvious ways&lt;/i>"). One of the main issue seems to be that&amp;nbsp;&lt;i>bugpoint&lt;/i>&amp;nbsp;is ironically too advanced! It operates under three modes and switches automatically among them to solve different kind of problem: crash, miscompilation, or code generation (see&amp;nbsp;&lt;a href="http://llvm.org/docs/Bugpoint.html">the documentation&lt;/a>&amp;nbsp;for more information on these modes). However it is not always obvious to know beforehand which mode will be activated and which strategy&amp;nbsp;&lt;i>bugpoint&lt;/i>&amp;nbsp;is actually using.&lt;/div>&lt;br />I found that for most of my uses, I don't want the&amp;nbsp;&lt;i>advanced&lt;/i>&amp;nbsp;&lt;i>bugpoint&lt;/i>&amp;nbsp;features that deal with pass ordering for example, and I don't need&amp;nbsp;&lt;i>bugpoint&lt;/i>&amp;nbsp;to detect which mode to operate and switch automatically. For most of my usage, the `compile-custom` option is perfectly adequate: similar to&lt;br />`git bisect`, it allows you to provide a script to&amp;nbsp;&lt;i>bugpoint&lt;/i>. This script is a black box for&amp;nbsp;&lt;i>bugpoint&lt;/i>, it needs to accept a single argument (the bitcode file to process) and needs to return 0 if the bitcode does not exhibit the behavior you're interested in, or a non zero value in the other case.&amp;nbsp;&lt;i>Bugpoint&lt;/i>&amp;nbsp;will apply multiple strategies in order to reduce the test case, and will call your custom script after each transformation to validate if the behavior you're looking for is still exhibited. The invocation for&amp;nbsp;&lt;i>bugpoint&lt;/i>&amp;nbsp;is the following:&lt;br />&lt;br />&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">$ ./bin/bugpoint -compile-custom -compile-command=./check.sh -opt-command=./bin/opt my_test_case.ll&lt;/div>&lt;br />The important part is the two options&amp;nbsp;&lt;i>-compile-custom&lt;/i>&amp;nbsp;and&amp;nbsp;&lt;i>-compile-command=path_to_script.sh&lt;/i>&amp;nbsp;that indicate to&amp;nbsp;&lt;i>bugpoint&lt;/i>&amp;nbsp;that it should use your own script to process the file. The other important part is the&amp;nbsp;&lt;i>-opt-command&lt;/i>&amp;nbsp;option that should point to the correct&amp;nbsp;&lt;i>opt&lt;/i>&amp;nbsp;that will be used to reduce the test case. Indeed by default&amp;nbsp;&lt;i>bugpoint&lt;/i>&amp;nbsp;will search in the path for&amp;nbsp;&lt;i>opt&lt;/i>&amp;nbsp;and may use an old system one that won't be able to process your IR properly, leading to some curious error message:&lt;br />&lt;br />&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">*** Debugging code generator crash!&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">Checking for crash with only these blocks:&amp;nbsp; diamond .preheader .lr.ph .end: error: Invalid type for value&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">simplifycfg failed!&lt;/div>&lt;div>&lt;br />&lt;/div>Considering such a script `check.sh`, running it with your original test case this way:&lt;br />&lt;br />&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">$ ./check.sh my_test_case.ll &amp;amp;&amp;amp; echo "NON-INTERESTING" || echo "INTERESTING"&lt;/div>&lt;br />should display&amp;nbsp;&lt;span style="background-color: black; color: whitesmoke; font-family: &amp;quot;monaco&amp;quot;; font-size: 12px;">INTERESTING&lt;/span>&amp;nbsp;before you try to use it with bugpoint, or you may very well be surprised. In fact&amp;nbsp;&lt;i>bugpoint&lt;/i>&amp;nbsp;considers the script as a compile command. If you start with an&amp;nbsp;&lt;span style="background-color: black; color: whitesmoke; font-family: &amp;quot;monaco&amp;quot;; font-size: 12px;">NON-INTERESTING&lt;/span>&amp;nbsp;test case and feed it to&amp;nbsp;&lt;i>bugpoint&lt;/i>, it will assume that the code compiles correctly, and will try to assemble it, link it, and execute it to get a reference result. This is where&amp;nbsp;&lt;i>bugpoint&lt;/i>&amp;nbsp;behavior can be confusing when it automatically switches mode, leaving the user with a confusing trace. A correct invocation should lead to a trace such as:&lt;br />&lt;br />&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">./bin/bugpoint&amp;nbsp; -compile-custom&amp;nbsp; -compile-command=./check.sh&amp;nbsp; -opt-command=./bin/opt slp.ll&amp;nbsp;&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">Read input file&amp;nbsp; &amp;nbsp; &amp;nbsp; : 'slp.ll'&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">*** All input ok&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">Initializing execution environment: Found command in: ./check.sh&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">Running the code generator to test for a crash:&amp;nbsp;&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">Error running tool:&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp; ./check.sh bugpoint-test-program-1aa0e1d.bc&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">*** Debugging code generator crash!&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">Checking to see if we can delete global inits: &amp;lt;crash&amp;gt;&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">*** Able to remove all global initializers!&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">Checking for crash with only these blocks:&amp;nbsp; &amp;nbsp; .lr.ph6.preheader .preheader .lr.ph.preheader .lr.ph .backedge&amp;nbsp; ._crit_edge.loopexit... &amp;lt;11 total&amp;gt;: &amp;lt;crash&amp;gt;&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">Checking for crash with only these blocks: .preheader .backedge .lr.ph6.preheader:&amp;nbsp;&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">Checking for crash with only these blocks: .lr.ph ._crit_edge:&amp;nbsp;&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">...&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">...&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">Checking instruction: &amp;nbsp; store i8 %16, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i64 0, i64 15), align 1, !tbaa !2&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">*** Attempting to perform final cleanups: &amp;lt;crash&amp;gt;&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">Emitted bitcode to 'bugpoint-reduced-simplified.bc'&lt;/div>&lt;div>&lt;br />&lt;/div>In practice the ability to write a custom script is very powerful, I will go over a few use cases I recently used&amp;nbsp;&lt;i>bugpoint&lt;/i>&amp;nbsp;with.&lt;br />&lt;h2 style="text-align: left;">Search For a String in the Output&lt;/h2>I recently submitted a patch (http://reviews.llvm.org/D14364) for a case where the loop vectorizer didn't kick-in on a quite simple test case. After fixing the underlying issue I needed to submit a test with my patch. The original IR was a few hundred lines. Since I believe it is good practice to reduce test cases as much as possible, bugpoint is often my best friend. In this case the analysis result indicates "Memory dependences are safe with run-time checks" on the output after my patch.&lt;br />&lt;br />Having compiled `opt` with and without my patch and copied each version in `/tmp/` I wrote this shell script:&lt;br />&lt;br />&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: #5330e1; font-family: Monaco; font-size: 12px; line-height: normal;">#!/bin/bash&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: #c33720; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">/tmp/opt.original&amp;nbsp;&lt;/span>&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">-loop-accesses&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">-analyze&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">$1&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;|&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">grep&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">"&lt;/span>Memory dependences are safe&lt;span style="color: #ce7924;">"&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bbc7; font-family: Monaco; font-size: 12px; line-height: normal;">res_original&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">=&lt;/span>&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">$?&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">/tmp/opt.patched&amp;nbsp;&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">-loop-accesses&lt;/span>&amp;nbsp;&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">-analyze&lt;/span>&amp;nbsp;&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">$1&lt;/span>&amp;nbsp;|&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">grep&lt;/span>&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">"&lt;/span>&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">Memory dependences are safe&lt;/span>&lt;span style="color: #ce7924;">"&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bbc7; font-family: Monaco; font-size: 12px; line-height: normal;">res_patched&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">=&lt;/span>&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">$?&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #d53bd3; font-family: Monaco; font-size: 12px; line-height: normal;">[[&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>$res_original&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">==&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">1&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>$res_patched&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">==&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">0&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>]]&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">exit&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">1&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #ce7924; font-family: Monaco; font-size: 12px; line-height: normal;">exit&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">0&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;/div>&lt;br />It first runs the bitcode supplied as argument to the script (the $1 above) through&amp;nbsp;&lt;i>opt&lt;/i>&amp;nbsp;and uses&amp;nbsp;&lt;i>grep&lt;/i>&amp;nbsp;to check for the presence of the expected string in the output. When&amp;nbsp;&lt;i>grep&lt;/i>&amp;nbsp;exits,&amp;nbsp;&lt;i>$?&lt;/i>&amp;nbsp;contains with 1 if the string is&amp;nbsp;&lt;b>not&lt;/b>&amp;nbsp;present in the output. The reduced test case is valid if the original&amp;nbsp;&lt;i>opt&lt;/i>&amp;nbsp;didn't produce the expected analysis but the new&amp;nbsp;&lt;i>opt&lt;/i>&amp;nbsp;did.&lt;br />&lt;h2>Reduce While a Transformation Makes Effects&lt;/h2>In another case (http://reviews.llvm.org/D13996), I patched the SLP vectorizer and I wanted to reduce the test case so that it didn't vectorize before my changes but vectorizes after:&lt;br />&lt;br />&lt;div style="background-color: black; color: #5330e1; font-family: Monaco; font-size: 12px; line-height: normal;">#!/bin/bash&lt;/div>&lt;div style="background-color: black; color: #ce7924; font-family: Monaco; font-size: 12px; line-height: normal;">set&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">-e&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">/tmp/opt.original&amp;nbsp;&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">-slp-vectorizer&lt;/span>&amp;nbsp;&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">-S&lt;/span>&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">&amp;gt;&lt;/span>&amp;nbsp;/tmp/original.ll&amp;nbsp;&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">$1&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">/tmp/opt.patched&amp;nbsp;&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">-slp-vectorizer&lt;/span>&amp;nbsp;&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">-S&lt;/span>&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">&amp;gt;&lt;/span>&amp;nbsp;/tmp/patched.ll&amp;nbsp;&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">$1&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">diff /tmp/original.ll /tmp/patched.ll &amp;amp;&amp;amp;&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">exit&lt;/span>&amp;nbsp;&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">0&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: #ce7924;">exit&lt;/span>&amp;nbsp;&lt;span style="color: #c33720;">1&lt;/span>&lt;/div>&lt;br />The use of a custom script offers flexibility and allows to run any complex logic to decide if a reduction is valid or not. I used it in the past to reduce crashes on a specific assertion and avoiding the reduction leading to a different crash, or to reduce for tracking instruction count regressions or any other metric.&lt;br />&lt;h2>Just Use FileCheck&lt;/h2>&lt;div>LLVM comes with a&amp;nbsp;&lt;a href="http://llvm.org/docs/CommandGuide/FileCheck.html">Flexible pattern matching file verifier&lt;/a>&amp;nbsp;(FileCheck) that the tests are using intensively. You can annotate your original test case and write a script that reduce it for your patch. Let's take an example from the public LLVM repository with commit&amp;nbsp;r252051&lt;i>&amp;nbsp;"&lt;/i>[SimplifyCFG] Merge conditional stores&lt;i>".&lt;/i>&amp;nbsp;The associated test in the validation is test/Transforms/SimplifyCFG/merge-cond-stores.ll ; and it already contains all the check we need, let's try to reduce it. For this purpose you'll need to process one function at a time, or bugpoint may not produce what you expect: because the check will fail for one function, bugpoint can do any transformation to another function and the test would still be considered "interesting". Let's extract the function test_diamond_simple from the original file:&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">$ ./bin/llvm-extract -func=test_diamond_simple test/Transforms/SimplifyCFG/merge-cond-stores.ll -S &amp;gt; /tmp/my_test_case.ll&lt;/div>&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>Then checkout and compile&amp;nbsp;&lt;i>opt&lt;/i>&amp;nbsp;for revision r252050 and r252051, and copy them in /tmp/opt.r252050&amp;nbsp;and /tmp/opt.r252051. The check.sh script is then based on the&amp;nbsp;&lt;i>CHECK&lt;/i>&amp;nbsp;line in the original test case:&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>&lt;div style="background-color: black; color: #5330e1; font-family: Monaco; font-size: 12px; line-height: normal;">#!/bin/bash&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: #5330e1; font-family: Monaco; font-size: 12px; line-height: normal;"># Process the test before the patch and check with FileCheck,&lt;br /># this is expected to fail.&lt;/div>&lt;div style="background-color: black; line-height: normal;">&lt;span style="color: whitesmoke; font-family: &amp;quot;monaco&amp;quot;;">&lt;span style="font-size: 12px;">/tmp/opt.r252050&amp;nbsp;&lt;/span>&lt;/span>&lt;span style="color: #d53bd3; font-family: &amp;quot;monaco&amp;quot;; font-size: 12px;">-simplifycfg&lt;/span>&amp;nbsp;&lt;span style="color: #d53bd3; font-family: &amp;quot;monaco&amp;quot;; font-size: 12px;">-instcombine&lt;/span>&amp;nbsp;&lt;span style="color: #d53bd3; font-family: &amp;quot;monaco&amp;quot;; font-size: 12px;">-phi-node-folding-threshold&lt;/span>&lt;span style="color: #ce7924; font-family: &amp;quot;monaco&amp;quot;; font-size: 12px;">=&lt;/span>&lt;span style="color: #c33720; font-family: &amp;quot;monaco&amp;quot;; font-size: 12px;">2&lt;/span>&amp;nbsp;&lt;span style="color: #d53bd3; font-family: &amp;quot;monaco&amp;quot;; font-size: 12px;">-S&lt;/span>&amp;nbsp;&lt;span style="color: #ce7924; font-family: &amp;quot;monaco&amp;quot;; font-size: 12px;">&amp;lt;&lt;/span>&amp;nbsp;&lt;span style="color: #d53bd3; font-family: &amp;quot;monaco&amp;quot;;">&lt;span style="font-size: 12px;">$1 | ./bin/FileCheck&amp;nbsp;merge-cons-stores.ll&lt;/span>&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bbc7; font-family: Monaco; font-size: 12px; line-height: normal;">original&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">=&lt;/span>&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">$?&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: #5330e1; font-family: Monaco; font-size: 12px; line-height: normal;"># Process the test after the patch and check with FileCheck,&lt;br /># this is expected to succeed.&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">/tmp/opt.r252051&amp;nbsp;&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">-simplifycfg&lt;/span>&amp;nbsp;&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">-instcombine&lt;/span>&amp;nbsp;&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">-phi-node-folding-threshold&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">=&lt;/span>&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">2&lt;/span>&amp;nbsp;&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">-S&lt;/span>&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">&amp;lt;&lt;/span>&amp;nbsp;&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">$1 |&amp;nbsp;&lt;/span>&lt;span style="color: #d53bd3;">./bin/FileCheck&amp;nbsp;merge-cons-stores.ll&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bbc7; font-family: Monaco; font-size: 12px; line-height: normal;">patched&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">=&lt;/span>&lt;span style="color: #d53bd3; font-variant-ligatures: no-common-ligatures;">$?&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: #5330e1; font-family: Monaco; font-size: 12px; line-height: normal;"># The test is interesting if FileCheck failed before and&lt;br /># succeed after the patch.&lt;/div>&lt;div style="background-color: black; color: #d53bd3; font-family: Monaco; font-size: 12px; line-height: normal;">[[&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>$original&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">!=&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">0&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>$patched&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">==&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">0&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>]]&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">exit&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">1&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #ce7924; font-family: Monaco; font-size: 12px; line-height: normal;">exit&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">0&lt;/span>&lt;/div>&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>I intentionally selected a very well written test to show you both the power of bugpoint and its limitation. If you look at the function we just extracted in&amp;nbsp;&lt;i>my_test_case.ll&lt;/i>&amp;nbsp;for instance:&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>&lt;div style="background-color: black; color: #5330e1; font-family: Monaco; font-size: 12px; line-height: normal;">; CHECK-LABEL: @test_diamond_simple&lt;/div>&lt;div style="background-color: black; color: #5330e1; font-family: Monaco; font-size: 12px; line-height: normal;">; This should get if-converted.&lt;/div>&lt;div style="background-color: black; color: #5330e1; font-family: Monaco; font-size: 12px; line-height: normal;">; CHECK: store&lt;/div>&lt;div style="background-color: black; color: #5330e1; font-family: Monaco; font-size: 12px; line-height: normal;">; CHECK-NOT: store&lt;/div>&lt;div style="background-color: black; color: #5330e1; font-family: Monaco; font-size: 12px; line-height: normal;">; CHECK: ret&lt;/div>&lt;div style="background-color: black; color: #34bbc7; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">define&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>@test_diamond_simple&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">(&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">*&amp;nbsp;&lt;/span>%p&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">*&amp;nbsp;&lt;/span>%q&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>%a&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>%b&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">) {&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #ce7924; font-family: Monaco; font-size: 12px; line-height: normal;">entry:&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%x1&lt;/span>&amp;nbsp;=&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">icmp&lt;/span>&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">eq&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%a&lt;/span>,&amp;nbsp;&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">0&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bd26; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">br&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>i1&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%x1&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>label&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%no1&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>label&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%yes1&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: #ce7924; font-family: Monaco; font-size: 12px; line-height: normal;">yes1:&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">store&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">0&lt;/span>,&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>*&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%p&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bbc7; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">br&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">label&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>%fallthrough&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: #ce7924; font-family: Monaco; font-size: 12px; line-height: normal;">no1:&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%z1&lt;/span>&amp;nbsp;=&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">add&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%a&lt;/span>,&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%b&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bbc7; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">br&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">label&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>%fallthrough&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: #ce7924; font-family: Monaco; font-size: 12px; line-height: normal;">fallthrough:&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%z2&lt;/span>&amp;nbsp;=&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">phi&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;[&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%z1&lt;/span>,&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%no1&lt;/span>&amp;nbsp;], [&amp;nbsp;&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">0&lt;/span>,&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%yes1&lt;/span>&amp;nbsp;]&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%x2&lt;/span>&amp;nbsp;=&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">icmp&lt;/span>&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">eq&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%b&lt;/span>,&amp;nbsp;&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">0&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bd26; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">br&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>i1&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%x2&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>label&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%no2&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>label&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%yes2&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: #ce7924; font-family: Monaco; font-size: 12px; line-height: normal;">yes2:&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">store&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">1&lt;/span>,&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>*&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%p&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bd26; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">br&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>label&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%end&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: #ce7924; font-family: Monaco; font-size: 12px; line-height: normal;">no2:&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%z3&lt;/span>&amp;nbsp;=&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">sub&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%z2&lt;/span>,&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%b&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bd26; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">br&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>label&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%end&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bd26; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">&lt;br />&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #ce7924; font-family: Monaco; font-size: 12px; line-height: normal;">end:&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #34bbc7;">%z4&lt;/span>&amp;nbsp;=&amp;nbsp;&lt;span style="color: #ce7924;">phi&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26;">i32&lt;/span>&amp;nbsp;[&amp;nbsp;&lt;span style="color: #34bbc7;">%z3&lt;/span>,&amp;nbsp;&lt;span style="color: #34bbc7;">%no2&lt;/span>&amp;nbsp;], [&amp;nbsp;&lt;span style="color: #c33720;">3&lt;/span>,&amp;nbsp;&lt;span style="color: #34bbc7;">%yes2&lt;/span>&amp;nbsp;]&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">ret&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%z4&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #5330e1; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">}&lt;/div>&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>The transformation introduced in this patch allows to merge the stores in the true branches&amp;nbsp;&lt;span style="background-color: black; color: #ce7924; font-family: &amp;quot;monaco&amp;quot;; font-size: 12px;">yes1&lt;/span>&amp;nbsp;and&amp;nbsp;&lt;span style="background-color: black; color: #ce7924; font-family: &amp;quot;monaco&amp;quot;; font-size: 12px;">yes2&lt;/span>:&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>&lt;div style="background-color: black; color: #ce7924; font-family: Monaco; font-size: 12px; line-height: normal;">declare&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">void&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">@f&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">()&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: #34bbc7; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">define&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>@test_diamond_simple&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">(&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">*&amp;nbsp;&lt;/span>%p&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">*&amp;nbsp;&lt;/span>%q&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>%a&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>%b&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">) {&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #ce7924; font-family: Monaco; font-size: 12px; line-height: normal;">entry:&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%x1&lt;/span>&amp;nbsp;=&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">icmp&lt;/span>&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">eq&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%a&lt;/span>,&amp;nbsp;&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">0&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%z1&lt;/span>&amp;nbsp;=&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">add&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%a&lt;/span>,&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%b&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%z2&lt;/span>&amp;nbsp;=&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">select&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i1&lt;/span>&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%x1&lt;/span>,&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%z1&lt;/span>,&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">0&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%x2&lt;/span>&amp;nbsp;=&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">icmp&lt;/span>&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">eq&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%b&lt;/span>,&amp;nbsp;&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">0&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%z3&lt;/span>&amp;nbsp;=&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">sub&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%z2&lt;/span>,&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%b&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%z4&lt;/span>&amp;nbsp;=&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">select&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i1&lt;/span>&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%x2&lt;/span>,&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%z3&lt;/span>,&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">3&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%0&lt;/span>&amp;nbsp;=&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">or&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%a&lt;/span>,&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%b&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%1&lt;/span>&amp;nbsp;=&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">icmp&lt;/span>&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">eq&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%0&lt;/span>,&amp;nbsp;&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">0&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bd26; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">br&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>i1&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%1&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>label&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%3&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>label&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%2&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: #5330e1; font-family: Monaco; font-size: 12px; line-height: normal;">; &amp;lt;label&amp;gt;:2 ; preds = %entry&lt;/div>&lt;div style="background-color: black; color: #34bbc7; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&amp;nbsp;&lt;/span>%simplifycfg.merge&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;=&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">select&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i1&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>%x2&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>%z2&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">1&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bbc7; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">store&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>%simplifycfg.merge&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">*&amp;nbsp;&lt;/span>%p&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">align&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">4&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bd26; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">br&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>label&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%3&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: #5330e1; font-family: Monaco; font-size: 12px; line-height: normal;">; &amp;lt;label&amp;gt;:3 ; preds = %entry, %2&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">ret&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%z4&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">}&lt;/div>&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>The original code seems pretty minimal, the variable and block names are explicit, it is easy to follow and you probably wouldn't think about reducing it. For the exercise, let's have a look at what bugpoint can do for us here:&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>&lt;div style="background-color: black; color: #34bbc7; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">define&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">void&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>@test_diamond_simple&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">(&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">*&amp;nbsp;&lt;/span>%p&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>%b&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">) {&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #ce7924; font-family: Monaco; font-size: 12px; line-height: normal;">entry:&lt;/div>&lt;div style="background-color: black; color: #34bbc7; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">br&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i1&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">undef&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">label&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>%fallthrough&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">label&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>%yes1&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">yes1:&lt;/span>&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: #5330e1; font-variant-ligatures: no-common-ligatures;">; preds = %entry&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">store&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">0&lt;/span>,&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>*&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%p&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bbc7; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">br&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">label&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>%fallthrough&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">fallthrough:&lt;/span>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: #5330e1; font-variant-ligatures: no-common-ligatures;">; preds = %yes1, %entry&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%x2&lt;/span>&amp;nbsp;=&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">icmp&lt;/span>&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">eq&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%b&lt;/span>,&amp;nbsp;&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">0&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bd26; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">br&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>i1&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%x2&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>label&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%end&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">,&amp;nbsp;&lt;/span>label&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%yes2&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;br />&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">yes2:&lt;/span>&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: #5330e1; font-variant-ligatures: no-common-ligatures;">; preds = %fallthrough&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">&amp;nbsp;&amp;nbsp;&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">store&lt;/span>&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>&amp;nbsp;&lt;span style="color: #c33720; font-variant-ligatures: no-common-ligatures;">1&lt;/span>,&amp;nbsp;&lt;span style="color: #34bd26; font-variant-ligatures: no-common-ligatures;">i32&lt;/span>*&amp;nbsp;&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%p&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bd26; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">br&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>label&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">%end&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bd26; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: #34bbc7; font-variant-ligatures: no-common-ligatures;">&lt;br />&lt;/span>&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal; min-height: 16px;">&lt;span style="color: #ce7924;">yes2:&lt;/span>&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style="color: #5330e1;">; preds = %yes2, %fallthrough&lt;/span>&lt;/div>&lt;div style="background-color: black; color: #34bd26; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="color: #ce7924; font-variant-ligatures: no-common-ligatures;">ret&lt;/span>&lt;span style="color: whitesmoke; font-variant-ligatures: no-common-ligatures;">&amp;nbsp;&lt;/span>void&lt;/div>&lt;div style="background-color: black; color: #34bbc7; font-family: Monaco; font-size: 12px; line-height: normal;">&lt;/div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">}&lt;/div>&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>Bugpoint figured out that the&amp;nbsp;&lt;i>no&lt;/i>&amp;nbsp;branches were useless for this test and removed them. The drawback is that bugpoint also has a tendency to introduce&amp;nbsp;&lt;i>undef&lt;/i>&amp;nbsp;or&amp;nbsp;&lt;i>unreachable&amp;nbsp;&lt;/i>here and there, which can make the test more fragile and harder to understand.&amp;nbsp;&amp;nbsp;&lt;/div>&lt;h2 style="text-align: left;">Not There Yet: Manual Cleanup&lt;/h2>&lt;div>At the end of the reduction, the test is small but probably not ready to be submitted with your patch "as is". Some cleanup is probably still needed: for instance bugpoint won't convert invoke into calls, &amp;nbsp;remove metadata, tbaa informations, personality function, etc. We also saw before that bugpoint can modify your test in unexpected way, adding&amp;nbsp;&lt;i>undef&lt;/i>&amp;nbsp;or&amp;nbsp;&lt;i>unreachable&lt;/i>.&amp;nbsp;Also you probably want to rename the variables to end up with a readable test case.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>Fortunately, having the&amp;nbsp;&lt;i>check.sh&lt;/i>&amp;nbsp;script at hand is helpful in this process, since you can just manually modify your test and run continuously the same command:&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>&lt;div style="background-color: black; color: whitesmoke; font-family: Monaco; font-size: 12px; line-height: normal;">$ ./check.sh my_test_case.ll &amp;amp;&amp;amp; echo "NON-INTERESTING" || echo "INTERESTING"&lt;/div>&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>While the result is &amp;nbsp;&lt;span style="background-color: black; color: whitesmoke; font-family: &amp;quot;monaco&amp;quot;; font-size: 12px;">INTERESTING&lt;/span>&amp;nbsp;you know you keep having a valid test and you can continue to proceed with your cleanup.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>Keep in mind that bugpoint can do far more, but hopefully this subset will be helpful to the ones that are still struggling with its command line options.&lt;br />&lt;br />Finally, I'm grateful to Manman Ren for her review of this post.&lt;/div>&lt;/div></description></item><item><title>LLVM Weekly - #97, Nov 9th 2015</title><link>https://blog.llvm.org/2015/11/llvm-weekly-97-nov-9th-2015.html</link><pubDate>Mon, 09 Nov 2015 08:28:00 +0000</pubDate><guid>https://blog.llvm.org/2015/11/llvm-weekly-97-nov-9th-2015.html</guid><description>&lt;p>Welcome to the ninety-seventh issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/97">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>A number of slide decks have started appearing from last week's LLVM Dev Meeting. The first set of videos made a brief appearance &lt;a href="https://www.youtube.com/playlist?list=PL_R5A0lGi1AA4Lv2bBFSwhgDaHvvpVU21">here&lt;/a> but apparently they weren't ready for distribution and have been taken down again. In the mean time, you might be interested in the slides for: &lt;a href="http://llvm.org/devmtg/2015-10/slides/RobinsonEdwards-LivingDownstreamWithoutDrowning.pdf">Living downstream without drowning&lt;/a>, &lt;a href="http://llvm.org/devmtg/2015-10/slides/Beyls-AutomatedPerformanceTrackingOfLlvmGeneratedCode.pdf">Automated performance tracking of LLVM-generated code&lt;/a>, &lt;a href="http://llvm.org/devmtg/2015-10/slides/Blaikie-OpaquePointerTypes.pdf">opaque pointer types&lt;/a>, and &lt;a href="http://llvm.org/devmtg/2015-10/slides/Blaikie-DebugInfoOnADiet.pdf">debug info on a diet&lt;/a>.&lt;/p>&lt;p>Pyston 0.4 has &lt;a href="http://blog.pyston.org/2015/11/03/102/">been released&lt;/a>. It now features a baseline JIT in addition to the LLVM JIT.&lt;/p>&lt;p>The LLVM-based ELLCC cross-compilation tool chain has had a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/091899.html">new release, version 0.1.18&lt;/a>. This release has been tested for building the Linux kernel.&lt;/p>&lt;p>There is going to be an LLVM devroom at FOSDEM 2016. Check &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/091906.html">here for the call for papers and participation&lt;/a>. The deadline for receiving submissions is December 1st.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>As loyal LLVM Weekly readers will know, for a long time now there's been a movement to replace autoconf in the LLVM build system with CMake. It's now at the point where Chris Bieneman suggests we should consider &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092150.html">deprecating autoconf&lt;/a>. His proposal suggests it is marked deprecated for the 3.8 release and removed after 3.8 branches from the main development tree. This proposal is getting a lot of positive feedback.&lt;/p>&lt;/li>&lt;li>&lt;p>After a discussion about the spotty use of the &lt;code>DEBUG_TYPE&lt;/code> in passes to prefix debug messages, Daniel Berlin makes the suggestion &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/091933.html">that a new &lt;code>DEBUG_MSG&lt;/code> macro be introduced&lt;/a> which will always include the &lt;code>DEBUG_TYPE&lt;/code>. Although there are a number of responses indicating how useful they find it when debug messages are prefixed with their source, there doesn't seem to yet be a consensus on whether it's worth replacing all &lt;code>DEBUG(dbgs() &amp;lt;&amp;lt; ..)&lt;/code> with something like this.&lt;/p>&lt;/li>&lt;li>&lt;p>George Burgess is &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2015-November/045935.html">seeking feedback for his proposal on performing nullability analysis in Clang&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Richard Diamond has written a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/091968.html">proposal on introducing an llvm.blackbox intrinsic&lt;/a> with the purpose of explicitly preventing certain optimisations. So far, there's some confusion about exactly what this intrinsic would do, and whether there's an alternative way to achieve the same aims.&lt;/p>&lt;/li>&lt;li>&lt;p>James Molloy &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092094.html">proposes adding a new norecurse attribute&lt;/a>. With no major exceptions, this has actually already been committed. See the commit summary below for more information.&lt;/p>&lt;/li>&lt;li>&lt;p>David Blaikie is planning to implement an llvm-dwp tool to support building a DWARF package file out of a number of .dwo split debug files. He is &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/092035.html">seeking feedback&lt;/a> on his plan.&lt;/p>&lt;/li>&lt;li>&lt;p>Chris Bieneman has been improving support with the CMake build system for bootstrapping a cross-compiler toolchain and has &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-November/091916.html">run in to issues involving compiler-rt and bootstrapping builtins&lt;/a>. There seems to be some support for the third of the proposed options, splitting the builtins and runtime libraries.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A new optimisation was added to SimplifyCFG to merge conditional stores. The commit message notes it has little impact on the standard LLVM test suite, but it apparently causes many changes in a third party suite. &lt;a href="http://reviews.llvm.org/rL252051">r252051&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Implicit conversions between ilist iterators and pointers are now disabled. All in-tree code has been updated to use explicit conversions, but out-of-tree developers may need to either revert this patch for now or update their code. &lt;a href="http://reviews.llvm.org/rL252380">r252380&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LoopLoadElimination pass was introduced, which can discover store-to-load forwarding opportunities. &lt;a href="http://reviews.llvm.org/rL251972">r251972&lt;/a>, &lt;a href="http://reviews.llvm.org/rL252017">r252017&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Work on operand bundles continues with the addition of a &lt;code>data_operand&lt;/code> abstraction. &lt;a href="http://reviews.llvm.org/rL252077">r252077&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM gained portable helper macros for packed struct definitions. &lt;a href="http://reviews.llvm.org/rL252099">r252099&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>DebugInfo has been modified so that a reference to a subprogram is stored in function-level metadata rather than subprograms containing a metadata reference to the function they describe. A script to update out-of-tree textual IR is &lt;a href="http://reviews.llvm.org/D14265">attached here&lt;/a>. &lt;a href="http://reviews.llvm.org/rL252219">r252219&lt;/a>, &lt;a href="http://reviews.llvm.org/rL252268">r252268&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>norecurse&lt;/code> attribute has been introduced. This indicates the function will never recurse into itself, either directly or indirectly, and can be used to demote global variables to locals. &lt;a href="http://reviews.llvm.org/rL252282">r252282&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>notail&lt;/code> marker for call instructions was added, which prevents tail or musttail markers being added by the optimizer. &lt;a href="http://reviews.llvm.org/rL252368">r252368&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The idea of 'module file extensions' has been introduced. These add additional information to a module file that can be queried when it's read, allowing tools built on Clang to stash their own data in module files. See &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2015-October/045740.html">the original mailing list RFC&lt;/a> for more details. &lt;a href="http://reviews.llvm.org/rL251955">r251955&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang now supports the &lt;code>__make_integer_seq&lt;/code> template. &lt;code>__make_integer_seq&amp;lt;std::integer_sequence, int, 90000&amp;gt;&lt;/code> takes 0.25 seconds while &lt;code>std::make_integer_sequence&amp;lt;int, 90000&amp;gt;&lt;/code> takes so long the patch author didn't wait for it to finish. &lt;a href="http://reviews.llvm.org/rL252036">r252036&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The newly-introduced VforkChecker will look for unsafe code in a vforked process. &lt;a href="http://reviews.llvm.org/rL252285">r252285&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLDB gained an initial Go expression parser. &lt;a href="http://reviews.llvm.org/rL251820">r251820&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>compiler-rt now supports 32-bit mingw-w64. &lt;a href="http://reviews.llvm.org/rL251928">r251928&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Some initial documentation has been written on &lt;a href="http://lldb.llvm.org/adding-language-support.html">adding programming language support to LLDB&lt;/a>. &lt;a href="http://reviews.llvm.org/rL251831">r251831&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB should now be able to directly launch processors on the iOS simulator. &lt;a href="http://reviews.llvm.org/rL252112">r252112&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #95, Oct 26th 2015</title><link>https://blog.llvm.org/2015/10/llvm-weekly-95-oct-26th-2015.html</link><pubDate>Mon, 26 Oct 2015 08:34:00 +0000</pubDate><guid>https://blog.llvm.org/2015/10/llvm-weekly-95-oct-26th-2015.html</guid><description>&lt;p>Welcome to the ninety-fifth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/95">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The C++ Standardization Committee just finished up their most recent meeting, and STL (Stephan T. Lavavej) has &lt;a href="https://www.reddit.com/r/cpp/comments/3q4agc/c17_progress_update_oct_2015/">provided a useful summary&lt;/a>. Herb Sutter has also &lt;a href="http://herbsutter.com/2015/10/25/2568/">posted a trip report&lt;/a>.&lt;/p>&lt;p>The HHVM team have posted an &lt;a href="http://hhvm.com/blog/10205/llvm-code-generation-in-hhvm">update on the status of LLVM code generation in HHVM&lt;/a>. They managed to get LLVM to equal the performance of their custom backend, but are not going to deploy the LLVM backend to production for now. They're no longer actively working on the LLVM backend, but hope to ensure it doesn't regress.&lt;/p>&lt;p>Hal Finkel is &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091612.html">proposing an LLVM social in Austin on the evening of November 15th&lt;/a>. There should be a high density of LLVM users due to the &lt;a href="http://llvm-hpc2-workshop.github.io/">LLVM in HPC workshop&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>The biggest discussion this week in the LLVM community is the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091536.html">proposed change to the Apache license&lt;/a>. One motivation is that some companies feel blocked from contributing due to the wording in the patent section of the LLVM developer policy, though see the linked message for a full summary. Concerns were raised about the fact that Apache 2 is incompatible with the GPLv2 and that &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091642.html">license complexity may put off contributors, such as the FreeBSD community&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Robert Cox has posted an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091687.html">RFC on adding the ability for LLVM to produce an inlining report&lt;/a>. This report would give details on where inlining has taken place and why. Initial feedback is positive.&lt;/p>&lt;/li>&lt;li>&lt;p>More information for birds of a feather sessions at the upcoming LLVM dev meeting has gone out. Kristof Beyls is running one on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091736.html">performance tracking and benchmarking infrastructure&lt;/a>, John Criswell on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091552.html">sophisticated program analysis on LLVM IR&lt;/a>, and Paul Robinson on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091546.html">living downstream without drowning&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Gaël Jobin has a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091685.html">fantastic answer&lt;/a> to a question about handling intrinsics in your backend.&lt;/p>&lt;/li>&lt;li>&lt;p>Louis Brandy is a Facebook employee who is &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2015-October/045706.html">starting to work on enabling Clang module support for their C++ codebase&lt;/a>. He's interested in experiences from anyone on incrementally adding module maps to a large codebase.&lt;/p>&lt;/li>&lt;li>&lt;p>A lot of work has been done to extend Clang's static analyzer to support interprocedural analysis. This thread &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2015-October/045665.html">discusses the current state and path forward&lt;/a>. It's not giving the improvement expected (in terms of detected bugs-per-second) and the thread discusses thoughts on why.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The &lt;code>TargetLowerBase::LibCall&lt;/code> LegalizeAction has been introduced. This allows backends to control whether they prefer expansion or conversion to a libcall. &lt;a href="http://reviews.llvm.org/rL250826">r250826&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Hexagon backend continues to accumulate sophisticated target-specific optimisations. HexagonBitSimplify continues a number of transformations to perform simplifications, redundant code elimination etc. &lt;a href="http://reviews.llvm.org/rL250868">r250868&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The new AliasAnalysis infrastructure gained an optional 'external' AA wrapper pass, to allow users to merge in external AA results. The unit test included in the patch gives a good example of how to use this. &lt;a href="http://reviews.llvm.org/rL250894">r250894&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>CodeGenPrepare can now transform select instructions into branches and sink expensive operands. &lt;a href="http://reviews.llvm.org/rL250743">r250743&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Loop rotation can now use profile data in making decisions during MachineBlockPlacement. &lt;a href="http://reviews.llvm.org/rL250754">r250754&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>ValueTracking now has a &lt;code>isKnownNonEqual&lt;/code> predicate. &lt;a href="http://reviews.llvm.org/rL251012">r251012&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Basic (currently parsing and basic semantic analysis) support for the anticipated C++1z coroutine feature was added. &lt;a href="http://reviews.llvm.org/rL250980">r250980&lt;/a>, &lt;a href="http://reviews.llvm.org/rL250985">r250985&lt;/a>, &lt;a href="http://reviews.llvm.org/rL250993">r250993&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;code>-fvisibility=internal&lt;/code> is now aliased to &lt;code>-fvisibility=hidden&lt;/code>, as LLVM doesn't currently support internal visibility. &lt;a href="http://reviews.llvm.org/rL250954">r250954&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang's static analyzer learnt to associate hashes with found issues. This hash aims to be resilient to code changes, so should be useful for suppressing false positives. &lt;a href="http://reviews.llvm.org/rL251011">r251011&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>lld gained support for lazy relocations on x86-64. &lt;a href="http://reviews.llvm.org/rL250808">r250808&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The new LLD ELF linker now supports the &lt;code>--gc-sections&lt;/code> parameter. This increases the time to link Clang by 8% bus reduces the size of the output binary by 4%. &lt;a href="http://reviews.llvm.org/rL251043">r251043&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB gained a REPL. &lt;a href="http://reviews.llvm.org/rL250753">r250753&lt;/a>, &lt;a href="http://reviews.llvm.org/rL250773">r250773&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>DWARF parsing in LLDB can now be multi-threaded, which can drastically incrase the speed of loading debug info. &lt;a href="http://reviews.llvm.org/rL251106">r251106&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #94, Oct 19th 2015</title><link>https://blog.llvm.org/2015/10/llvm-weekly-94-oct-19th-2015.html</link><pubDate>Mon, 19 Oct 2015 03:53:00 +0000</pubDate><guid>https://blog.llvm.org/2015/10/llvm-weekly-94-oct-19th-2015.html</guid><description>&lt;p>Welcome to the ninety-fourth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or @llvmweekly or @asbradbury on Twitter.&lt;/p>&lt;p>A good time was had by all at &lt;a href="http://openrisc.io/orconf/">ORConf&lt;/a> last week at CERN. We had over 100 open source hardware enthusiasts join us in Geneva. You can find my &lt;a href="https://speakerdeck.com/asb/an-update-on-the-lowrisc-open-source-system-on-chip">slides updating on lowRISC here&lt;/a>. Videos should appear on youtube in the next week or so.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/94">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>A &lt;a href="https://github.com/dotnet/llilc/blob/master/Documentation/llilc-at-six-months.md">six month retrospective of LLILC&lt;/a>, the project to produce an open source LLVM-based compiler for .NET, has been posted. It describes work still to be done for garbage collection and exception handling, code size and code quality, and JIT throughput.&lt;/p>&lt;p>The &lt;a href="http://devmtg15.llvm.org/">schedule for the 2015 LLVM Developers' Meeting&lt;/a> is now available.&lt;/p>&lt;p>The new ELF linker in LLD is &lt;a href="http://lists.llvm.org/pipermail/llvm-commits/Week-of-Mon-20151005/304675.html">looking pretty fast&lt;/a>. Right now it can link Clang in about half the time of binutils gold. However, the resulting binary is larger. It will be interesting to see how the performance compares when both are at feature parity, but this is looking promising.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Chandler Carruth, on behalf of the board of the LLVM Foundation has posted an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091218.html">RFC on introducing an LLVM Community Code of Conduct&lt;/a>. The proposal is based on the Django code of conduct and generated masses of discussion. A couple of days later, Chandler posted a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091408.html">second draft&lt;/a> incorporated feedback and answering many of the questions raised. The response appears to be good so far. I'll just highlight one of the questions and answers: "Q: Is this trying to change how the community behaves?" "A: I think the resounding answer is no, this is very much meant to formalize the existing extremely polite and respectful behavior that the LLVM community has had for many years."&lt;/p>&lt;/li>&lt;li>&lt;p>There is going to be a birds of a feather section about the future of LLVM's C APIs at the upcoming LLVM developers' meeting, and Justin Bogner has helpfully shared &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2015-October/045610.html">some notes in preparation for this&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Philip Reames has shared some &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091457.html">suggested topics for the managed languages birds of a feather meeting at the upcoming LLVM devmeeting&lt;/a>. Joe Ranieri &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091492.html">suggests some additional topics&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Chris Matthews has shared an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091454.html">adding background workers to LNT&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Diego Novillo is going to be hosting a birds of a feather on profile-guided optimisations at the upcoming dev meeting and &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091478.html">has shared a preliminary list of topics for discussion&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Sanjoy Das has &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091434.html">updated us on his work with operand bundles and gc transition arguments&lt;/a>, and is seeking input and opinions on his suggested ways forward.&lt;/p>&lt;/li>&lt;li>&lt;p>Zachary Turner has &lt;a href="http://lists.llvm.org/pipermail/lldb-dev/2015-October/008538.html">written about his efforts to support Python 3 with LLDB&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Evgenii Stepanov has posted an &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2015-October/045580.html">RFC on adding an internal linkage attribute&lt;/a>. The message explains why setting &lt;code>always_inline&lt;/code> and hidden symbol visibility is not enough.&lt;/p>&lt;/li>&lt;li>&lt;p>Arch Robison initiated a discussion on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091395.html">extending the SLP vectorizer to work with tuples in Julia&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Hexagon gained a new pass to merge adjacent stores. &lt;a href="http://reviews.llvm.org/rL250542">r250542&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Hexagon gained skeleton support for the 'HVX' extension instructions. &lt;a href="http://reviews.llvm.org/rL250600">r250600&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The loop vectorizer will now shrink integer operations into the smallest type possible. &lt;a href="http://reviews.llvm.org/rL250032">r250032&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Documentation has been added for binary sample profile encoding. &lt;a href="http://reviews.llvm.org/rL250309">r250309&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>RewriteStatpointsForGC is starting to make use of operand bundles. &lt;a href="http://reviews.llvm.org/rL250489">r250489&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang gained support for the &lt;code>-fdebug-prefix-map=&lt;/code> option as in GCC. &lt;a href="http://reviews.llvm.org/rL250094">r250094&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The PS4 toolchain definition has been added to Clang. &lt;a href="http://reviews.llvm.org/rL250262">r250262&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang now understands &lt;code>-flto=thin&lt;/code>. &lt;a href="http://reviews.llvm.org/rL250398">r250398&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The libc++ testing guide has been updated. &lt;a href="http://reviews.llvm.org/rL250323">r250323&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD got even faster at linking clang. &lt;a href="http://reviews.llvm.org/rL250315">r250315&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB gained preliminary NetBSD support. &lt;a href="http://reviews.llvm.org/rL250146">r250146&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #93, Oct 12th 2015</title><link>https://blog.llvm.org/2015/10/llvm-weekly-93-oct-12th-2015.html</link><pubDate>Mon, 12 Oct 2015 11:14:00 +0000</pubDate><guid>https://blog.llvm.org/2015/10/llvm-weekly-93-oct-12th-2015.html</guid><description>&lt;p>Welcome to the ninety-third issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>Apologies that this week's issue comes rather late in the day, my laptop gave up the ghost over the weekend while I was travelling leaving me with no way to write it. Now I'm back, I've managed to dust off an old desktop from my closet to write this issue (and to keep my unbroken streak). LLVM Weekly has been sent out every Monday since it started on the first Monday of January 2014. This weekend I was talking about &lt;a href="http://www.lowrisc.org">lowRISC&lt;/a> at &lt;a href="http://openrisc.io/orconf/">ORConf 2015&lt;/a>. You can find my slides &lt;a href="https://speakerdeck.com/asb/an-update-on-the-lowrisc-open-source-system-on-chip">here&lt;/a>. There was a wide array of talks on open source hardware, including many on lowRISC and RISC-V. The videos should hopefully be posted in the next week or so.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/93">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The LLVM project has hit 250,000 commits. The commit that managed to hit this milestone was &lt;a href="http://reviews.llvm.org/rL250000">this one-liner&lt;/a>.&lt;/p>&lt;p>A &lt;a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/docs/Introduction%20to%20type%20and%20resource%20safety.pdf">new paper&lt;/a> by Bjarne Stroustrup, Herb Sutter, and Gabriel Dos Reis gives more details on their plans for memory safety in C++.&lt;/p>&lt;p>Videos from CppCon2015 are &lt;a href="https://www.youtube.com/playlist?list=PLHTh1InhhwT75gykhs7pqcR_uSiG601oh">being posted to Youtube&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Ed Maste is taking a look at the feasibility of using the new LLD ELF linker for FreeBSD, and has shared &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091072.html">his initial findings&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>When is addrspacecast needed? Both &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091062.html">David Chisnall&lt;/a> and &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091063.html">Mats Petersson&lt;/a> have good answers.&lt;/p>&lt;/li>&lt;li>&lt;p>Vedant Kumar has posted an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091169.html">cleaning up the way optional Function data is stored&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Dehao Chen has shared an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091162.html">update on the AutoFDO project&lt;/a>, which allows the use of a perf.data profile for profile-guided optimisation. Clang built with &lt;code>-fprofile-sample-use&lt;/code> is about 10% faster than Clang built with &lt;code>-O3&lt;/code>.&lt;/p>&lt;/li>&lt;li>&lt;p>Larisse Voufo has &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091178.html">shared&lt;/a> a proposal for optimizing const C++ objects in LLVM.&lt;/p>&lt;/li>&lt;li>&lt;p>Chris Matthews has announced &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/091140.html">the open-sourcing of an llvm bisect tool&lt;/a>, for bisecting bugs using prebuilt LLVM and Clang revisions.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The Hexagon architecture gained an early if-conversion pass. &lt;a href="http://reviews.llvm.org/rL249423">r249423&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>ThinLTO has started to land, in particular support for function summary index bitcode sections and files. &lt;a href="http://reviews.llvm.org/rL249270">r249270&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Codegen for ARM's memcpy intrinsic has been modified to make better use of LDM/STM. &lt;a href="http://reviews.llvm.org/rL249322">r249322&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The llvm.eh.exceptioncode intrinsic was added. &lt;a href="http://reviews.llvm.org/rL249492">r249492&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>It is now possible to turn off MMX support without disabling SSE. &lt;a href="http://reviews.llvm.org/rL249731">r249731&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The policy for adding new style options to clang-format has been documented. &lt;a href="http://reviews.llvm.org/rL249289">r249289&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The libclang bindings have been extended with accessors for C++ function attributes (pure virtual, virtual, or const). &lt;a href="http://reviews.llvm.org/rL250008">r250008&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>GoLanguageRuntime was introduced to LLDB, which supports finding the runtime type for Go interfaces. &lt;a href="http://reviews.llvm.org/rL249456">r249456&lt;/a>, &lt;a href="http://reviews.llvm.org/rL249459">r249459&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The new LLD ELF linker now supports the &lt;code>--as-needed&lt;/code> option. &lt;a href="http://reviews.llvm.org/rL249998">r249998&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB for MIPS is now able to emulate microMIPS instructions. &lt;a href="http://reviews.llvm.org/rL249381">r249381&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>liblldb is working towards being able to work under both Python 2.x and 3.x. &lt;a href="http://reviews.llvm.org/rL249886">r249886&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #92, Oct 5th 2015</title><link>https://blog.llvm.org/2015/10/llvm-weekly-92-oct-5th-2015.html</link><pubDate>Mon, 05 Oct 2015 05:32:00 +0000</pubDate><guid>https://blog.llvm.org/2015/10/llvm-weekly-92-oct-5th-2015.html</guid><description>&lt;p>Welcome to the ninety-second issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/92">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Most of the presentation materials from CppCon2015 are &lt;a href="https://github.com/CppCon/CppCon2015">now online&lt;/a>. Talks that may be of particular interest include &lt;a href="https://github.com/CppCon/CppCon2015/blob/master/Presentations/Beyond%20Sanitizers/Beyond%20Sanitizers%20-%20Kostya%20Serebryany%20-%20CppCon%202015.pdf">Kostya Serebryany on fuzzing with libFuzzer&lt;/a>, &lt;a href="https://github.com/CppCon/CppCon2015/blob/master/Lightning%20Talks%20and%20Lunch%20Sessions/C++%20devirtualization%20in%20clang/C++%20devirtualization%20in%20clang%20-%20Piotr%20Padlewski%20-%20CppCon%202015.pdf">Piotr Padlewski on C++ devirtualization in Clang&lt;/a>, and &lt;a href="https://github.com/CppCon/CppCon2015/blob/master/Presentations/C++%20on%20the%20Web/C++%20on%20the%20Web%20-%20JF%20Bastien%20-%20CppCon%202015.pdf">JF Bastien talking about C++ on the web&lt;/a>.&lt;/p>&lt;p>Rafael Espíndola wrote in to share an impressive milestone for the new LLD ELF linker. It can now link itself and all of LLVM and Clang (though not all tests pass, and you must use &lt;code>LLVM_ENABLE_THREADS=OFF&lt;/code>). Things will of course get really interesting once LLD matures if it can compete with Gold in terms of speed.&lt;/p>&lt;p>The next Paris LLVM social will &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090813.html">take place on October 15th&lt;/a>. Calixte Denizet will be talking about Scilab's usage of LLVM.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>David Li has posted an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090860.html">update on efforts to reduce the overhead of profile-guided optimisation size overhead&lt;/a>. He's produced an initial implementation of one of the proposals, which reduces the size of a release clang binary with coverage mapping from 986MB to 569MB.&lt;/p>&lt;/li>&lt;li>&lt;p>It's a new month, so time for a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/090958.html">new update on CMake's ability to replace autoconf in LLVM&lt;/a>. As Chris says, we're getting very close now.&lt;/p>&lt;/li>&lt;li>&lt;p>Tom Stellard has posted a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/090992.html">proposed release schedule for LLVM/Clang 3.7.x&lt;/a> point releases. The deadline to propose patches for 3.7.1 is November 2nd and November 30th for 3.7.2. Tom is also asking that people nominate patches using Phabricator rather than email.&lt;/p>&lt;/li>&lt;li>&lt;p>Renato has kicked off a discussion on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-October/090945.html">buildbot noise&lt;/a> with a good summary of the issues and potential ways forward.&lt;/p>&lt;/li>&lt;li>&lt;p>Chris Matthews is &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090840.html">looking for feedback on how people are using orders in LNT&lt;/a>, so as to better understand how to improve things. As he explains, the 'Order' is the SVN revision of the compiler.&lt;/p>&lt;/li>&lt;li>&lt;p>Jeroen Ketema is asking if anyone has any &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090826.html">objections to a change to ARM's NEON vld and vst intrinsics&lt;/a>. The change would allow an address space to be associated with the pointer these intrinsics take.&lt;/p>&lt;/li>&lt;li>&lt;p>Jonas Paulsson is curious about &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090845.html">how to control selection of two-address vs three-address instruction forms&lt;/a>. Several responses suggest just allowing three-address forms to be selected and have a late pass that converts to the two-address form where possible. Jonas has an interesting followup questions as to whether the register allocator will produce the maximum number of opportunities for this conversion.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A scheduler for the MIPS P5600 processor landed. &lt;a href="http://reviews.llvm.org/rL248725">r248725&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Align metadata for the load instruction was introduced. &lt;a href="http://reviews.llvm.org/rL248721">r248721&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for windows exception handling continues with support in AsmPrinter for 'funclets'. &lt;a href="http://reviews.llvm.org/rL248824">r248824&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support landed for the HHVM JIT calling convention. &lt;a href="http://reviews.llvm.org/rL248832">r248832&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>clang-format's &lt;code>#include&lt;/code> sorting functionality has been extended. &lt;a href="http://reviews.llvm.org/rL248782">r248782&lt;/a>.&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The new ELF linker gained initial support for MIPS. &lt;a href="http://reviews.llvm.org/rL248779">r248779&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Some basic linker script support was added to the new ELF linker, enough to parse Linux's libc.so. &lt;a href="http://reviews.llvm.org/rL248918">r248918&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>.ARM.exidx and .ARM.extab unwind information is now supported by lldb. &lt;a href="http://reviews.llvm.org/rL248903">r248903&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #91, Sep 28th 2015</title><link>https://blog.llvm.org/2015/09/llvm-weekly-91-sep-28th-2015.html</link><pubDate>Mon, 28 Sep 2015 04:16:00 +0000</pubDate><guid>https://blog.llvm.org/2015/09/llvm-weekly-91-sep-28th-2015.html</guid><description>&lt;p>Welcome to the ninety-first issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/91">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Some slides and videos from cppcon have started to appear. See the &lt;a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/talks/Stroustrup%20-%20CppCon%202015%20keynote.pdf">slides from Bjarne Stroustrup's keynote&lt;/a> (which focus on the &lt;a href="https://github.com/isocpp/CppCoreGuidelines">Core Guidelines&lt;/a> project), as well as Herb Sutter's slides on &lt;a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/talks/Sutter%20-%20CppCon%202015%20day%202%20plenary%20.pdf">supporting ownership annotations in C++&lt;/a> (this will be familiar to anyone who has used Rust). Videos are starting to appear &lt;a href="https://www.youtube.com/playlist?list=PLHTh1InhhwT75gykhs7pqcR_uSiG601oh">on the CppCon Youtube channel&lt;/a>.&lt;/p>&lt;p>A Microsoft blog says something about &lt;a href="http://blogs.msdn.com/b/vcblog/archive/2015/09/25/rejuvenating-the-microsoft-c-c-compiler.aspx">their plans to rejuvenate MSVC&lt;/a>. "We will continue to invest in improving our compiler with a goal towards making it fully standards compliant".&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Jason Kim has posted a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090731.html">summary of a recent in-person meeting about ThreadSanitizer, Android, and AARch64&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Chris Matthews is planning to work on improving performance change tracking in LNT, and has posted an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090616.html">RFC on his plans&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The discussion/debate in the 'trouble with triples' thread has &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090665.html">rumbled on&lt;/a>. There's been a &lt;em>lot&lt;/em> of in-depth discussion, which I'm afraid I don't have the time to study and try to summarise fairly. Do dive in if this topic is important to you. Otherwise, I hope we'll see a summary/RFC once a way forward is found.&lt;/p>&lt;/li>&lt;li>&lt;p>Jia-Ju Bai is looking for &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090671.html">a way to extract basic loop information from LLVM IR&lt;/a>. There's a good range of suggested starting points: &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090672.html">LoopInfoWrapperPass&lt;/a>, &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090673.html">ScalarEvolution&lt;/a>, &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090717.html">InductiveRangeCheckElimination&lt;/a>, and &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090720.html">Polly&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Wolfgang Pieb is interested in &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090610.html">extending the liveness of the 'this' pointer for a better debugging experience&lt;/a>. His question is whether there's a better way of doing this than creating a new 'fake use' intrinsic. Kevin Smith suggests always storing the 'this' pointer in memory, but Wolfgang &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090644.html">is concerned about the overhead of this approach&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The AArch64 machine reassociation code has been refactored to be target-independent. &lt;a href="http://reviews.llvm.org/rL248164">r248164&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM's SafeStack now supports Android. &lt;a href="http://reviews.llvm.org/rL248405">r248405&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new target hook has been added for optimizing register copies. &lt;a href="http://reviews.llvm.org/rL248478">r248478&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Operand bundles are now supported for CallInst and InvokeInst. Initial support was also added to LLVM bitcode. &lt;a href="http://reviews.llvm.org/rL248527">r248527&lt;/a>, &lt;a href="http://reviews.llvm.org/rL248551">r248551&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The iOS/OSX localizability checks have been improved. &lt;a href="http://reviews.llvm.org/rL248350">r248350&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Some more PS4 toolchain code landed. &lt;a href="http://reviews.llvm.org/rL248546">r248546&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The new ELF linker should now be able to create binaries for FreeBSD. &lt;a href="http://reviews.llvm.org/rL248554">r248554&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The new ELF linker gained initial AArch64 support. &lt;a href="http://reviews.llvm.org/rL248641">r248641&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #90, Sep 21st 2015</title><link>https://blog.llvm.org/2015/09/llvm-weekly-90-sep-21st-2015.html</link><pubDate>Mon, 21 Sep 2015 05:10:00 +0000</pubDate><guid>https://blog.llvm.org/2015/09/llvm-weekly-90-sep-21st-2015.html</guid><description>&lt;p>Welcome to the ninetieth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/90">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The ISO C++ committee have started putting together a set of &lt;a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md">C++ Core Guidelines&lt;/a>. The document describes itself as a set of guidelines for using C++ well, with the intention that adherence to the rules could be checked by an analysis tool. Bjarne Stroustrup and Herb Sutter are acting as editors for this project.&lt;/p>&lt;p>A reddit user has posted a &lt;a href="https://www.reddit.com/r/gamedev/comments/3lh0ba/using_clang_to_generate_c_reflection_data/">detailed description of how they use libclang to generate reflection data for C++&lt;/a>.&lt;/p>&lt;p>Andrew Chambers has written a blog post about his use of &lt;a href="http://achacompilers.blogspot.co.uk/2015/09/calling-conventions-are-hard-fuzz-them.html">fuzzing to look for ABI bugs&lt;/a>.&lt;/p>&lt;p>This &lt;a href="http://www.kdab.com/use-static-analysis-improve-performance/">short and sweet blog post&lt;/a> introduces the &lt;a href="https://quickgit.kde.org/?p=scratch%2Fsmartins%2Fclazy.git">clazy static checker&lt;/a>, a simple checker for some common suboptimal uses of Qt types. There are plenty of ideas in the comments for further analyses that might be useful.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>The discussion on 'the trouble with triples' &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090432.html">has resumed&lt;/a>. Both &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090437.html">Daniel Sanders&lt;/a> and &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090439.html">Renato Golin&lt;/a> give examples of the kind of problems they're dealing with (yet again, naming things proves to be one of the great challenges in CS).&lt;/p>&lt;/li>&lt;li>&lt;p>Escha has been looking at &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090371.html">optimising passes using 'side-data'&lt;/a>. This might mean e.g. making use of a spare bit in Value to indicate liveness. The question is whether this is something we should be looking to do in LLVM. Daniel Berlin comments that optimising these kinds of cases &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090467.html">would be useful in the GVN rewrite&lt;/a>. Chris Lattner follows up with a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090499.html">sketch of how manipulation of a marker bit might be exposed&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Assert builds will now produce human-readable numbers to identify dumped SelectionDAG nodes. "0x7fcbd9700160: ch = EntryToken" becomes "t0: ch = EntryToken". &lt;a href="http://reviews.llvm.org/rL248010">r248010&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Basic support for reading GCC AutoFDO profiles has landed. &lt;a href="http://reviews.llvm.org/rL247874">r247874&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The llvm-mc-fuzzer tool has been documented. &lt;a href="http://reviews.llvm.org/rL247979">r247979&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The llvm.invariant.group.barrier intrinsic was born. &lt;a href="http://reviews.llvm.org/rL247711">r247711&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM default target triple can now be set to the empty string at configure time. &lt;a href="http://reviews.llvm.org/rL24675http://reviews.llvm.org/rL247775">r247775&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>AST matcher functions have been renamed to match the AST node names directly. This is a breaking change. &lt;a href="http://reviews.llvm.org/rL27885">r247885&lt;/a>, &lt;a href="http://reviews.llvm.org/rL247887">r247887&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The static analyzer gained a new Objective-C checker. DynamicTypeChecker will check for cases where the dynamic and static type of an object are unrelated. &lt;a href="http://reviews.llvm.org/rL248002">r248002&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The LLD COFF linker has gained some extra parallelisation. Self-link time has now improved from 1022ms to 654ms. &lt;a href="http://reviews.llvm.org/rL248038">r248038&lt;/a>, &lt;a href="http://reviews.llvm.org/rL248078">r248078&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support code was added to LLDB for recognising and printing Go types. &lt;a href="http://reviews.llvm.org/rL247629">r247629&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MemorySanitizer has been enabled for AArch64. &lt;a href="http://reviews.llvm.org/rL247809">r247809&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #89, Sep 14th 2015</title><link>https://blog.llvm.org/2015/09/llvm-weekly-89-sep-14th-2015.html</link><pubDate>Mon, 14 Sep 2015 08:03:00 +0000</pubDate><guid>https://blog.llvm.org/2015/09/llvm-weekly-89-sep-14th-2015.html</guid><description>&lt;p>Welcome to the eighty-ninth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/89">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>I didn't spot any new LLVM-related articles or news this week. As a reminder, I always welcome tips either via email or Twitter. Seeing as there's nothing new, now seems a good time to point you towards either Stephen Diehl's tutorial on &lt;a href="http://www.stephendiehl.com/llvm/">implementing a JIT compiled language with Haskell and LLVM&lt;/a> or Adrian Sampson's &lt;a href="http://adriansampson.net/blog/llvm.html">'LLVM for grad students'&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>James Knight is proposing to &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090300.html">deprecate and remove the old SelectionDAG scheduler&lt;/a>, given that machine schedulers are now the preferred approach. He notes that a number of in-tree targets still use the SelectionDAG scheduler. It seems there is &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090309.html">support for this plan&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Jauhien is curious about the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090120.html">availability of a C API for the ORC JIT&lt;/a>, with the motivating use case here being to provide a binding for Rust. The &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090155.html">main concern&lt;/a> is that the ORC API is not yet stable, meaning it's not feasible to provide stable C bindings. The proposal is they live in llvm/include/llvm-c/unstable.&lt;/p>&lt;/li>&lt;li>&lt;p>Joseph Tremoulet has a whole bunch of questions about addrspacecast semantics, and Chandler Carruth has &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090180.html">a whole bunch of answers&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>David Chisnall has a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090240.html">useful response&lt;/a> to a question about implementing LLVM intrinsics with multiple return values. As he points out, this is usually done by returning a struct.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A major modification of LLVM'a alias analysis manager has landed in order to port it to the new pass manager. See the commit message for full details. &lt;a href="http://reviews.llvm.org/rL247167">r247167&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The scalar replacement of aggregates (SROA) pass has been ported to the new pass manager. In the commit message, Chandler comments he hopes this serves as a good example of porting a transformation pass with non-trivial state to the new pass manager. &lt;a href="http://reviews.llvm.org/rL247501">r247501&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The GlobalsModRef alias analysis pass is now enabled by default. &lt;a href="http://reviews.llvm.org/rL247264">r247264&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Emacs users, rest your aching pinky fingers for a moment and rejoice. A range of improvements for the Emacs LLVM IR mode have landed. &lt;a href="http://reviews.llvm.org/rL247281">r247281&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The AArch64 backend can now select STNP, the non-temporal store instruction (this hints that the value need not be kept in cache). &lt;a href="http://reviews.llvm.org/rL247231">r247231&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Shrink wrapping optimisations are enabled on PPC64. &lt;a href="http://reviews.llvm.org/rL247237">r247237&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A whole bunch of StringRef functions have been sprinkled with the &lt;code>ALWAYS_INLINE&lt;/code> attribute so as to reduce the overhead of string operations even on debug LLVM builds. Chandler has also been making other changes to improve the performance of check-llvm with a debug build. &lt;a href="http://reviews.llvm.org/rL247253">r247253&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM performance tips document has been extended to detail the use of allocas and when to specify alignment. &lt;a href="http://reviews.llvm.org/rL247301">r247301&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>hasLoadLinkedStoreConditional&lt;/code> TargetLoweringInformation callback has now been split in to &lt;code>bool shouldExpandAtomicCmpXchgInIR(inst)&lt;/code> and &lt;code>AtomicExpansionKind shouldExpandAtomicLoadInIR(inst)&lt;/code>. &lt;a href="http://reviews.llvm.org/rL247429">r247429&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A new control-flow integrity variant has been introduced, indirect function call chacking (enabled with &lt;code>-fsanitize=cfi-icall&lt;/code>). This checks the dynamic type of the called function matches the static type used at the call. &lt;a href="http://reviews.llvm.org/rL247238">r247238&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new &lt;code>-analyzer-config&lt;/code> option is available to modify the size of function that the inliner considers as large. &lt;a href="http://reviews.llvm.org/rL247463">r247463&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang will now try much harder to preserve alignment information during IR-generation. &lt;a href="http://reviews.llvm.org/rL246985">r246985&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>__builtin_nontemporal_store&lt;/code> and &lt;code>__builtin_nontemporal_load&lt;/code> builtins have been introduced. &lt;a href="http://reviews.llvm.org/rL247104">r247104&lt;/a>, &lt;a href="http://reviews.llvm.org/rL247374">r247374&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>libcxx gained implementations of Boyer-Moore and Boyer-Moore-Horspool searchers (for the language fundamentals technical specification). &lt;a href="http://reviews.llvm.org/rL247036">r247036&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A trivial dynamic program linked with the new ELF lld now works with musl's dynamic linker. &lt;a href="http://reviews.llvm.org/rL247290">r247290&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD's COFF linker learned to merge cyclic graphs, which means self-linking now produces a 27.7MB rather than a 29.0MB executable. MSVC manages to produce a 27.1MB executable, so there is still room for improvement. &lt;a href="http://reviews.llvm.org/rL247387">r247387&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #88, Sep 7th 2015</title><link>https://blog.llvm.org/2015/09/llvm-weekly-88-sep-7th-2015.html</link><pubDate>Mon, 07 Sep 2015 10:57:00 +0000</pubDate><guid>https://blog.llvm.org/2015/09/llvm-weekly-88-sep-7th-2015.html</guid><description>&lt;p>Welcome to the eighty-eighth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/88">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The biggest news from the past week is of course the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/089935.html">release of LLVM and Clang 3.7&lt;/a>. See the &lt;a href="http://llvm.org/releases/3.7.0/docs/ReleaseNotes.html">LLVM release notes&lt;/a> and the &lt;a href="http://llvm.org/releases/3.7.0/tools/clang/docs/ReleaseNotes.html">Clang release notes&lt;/a> for more details.&lt;/p>&lt;p>Slides from the 2015 GNU Tools Cauldron are &lt;a href="https://gcc.gnu.org/wiki/cauldron2015#Slides_and_Notes">now available online&lt;/a>.&lt;/p>&lt;p>Version 1.12 of TCE, the TTA-based co-design environment &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090050.html">has been released&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>David Li has posted an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090039.html">RFC on reducing the size overhead for profile-guided optimisation&lt;/a>. He observes that right now, Clang's PGO instrumentation increases binary size by 4.6X compared to 2.8X or GCC.&lt;/p>&lt;/li>&lt;li>&lt;p>The Hip-Hop Virtual Machine team (a JITting virtual machine for PHP and Hack) have been looking at &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090030.html">utilising LLVM as a backend&lt;/a>. As part of this work, they've generated a number of patches that they're now looking to upstream. Sanjoy and Philip (Azul) have volunteered to help review the patches. With active work on Java (Azul), MSIL/C# (Microsoft), Python (Dropbox) and now PHP/Hack (Facebook) there seems to be a growing number of teams looking at improving LLVM when used for optimising higher-level languages.&lt;/p>&lt;/li>&lt;li>&lt;p>Dylan McKay has been maintaining and developing an AVR backend for LLVM out of tree, and is now &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/090038.html">interested in merging it upstream&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Steve King is &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089867.html">proposing a new LoopExitValues pass&lt;/a> which aims to remove recomputations of loop exit values. This &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/089992.html">follow-up message&lt;/a> perhaps makes it clearer what the pass does.&lt;/p>&lt;/li>&lt;li>&lt;p>Teresa Johnson continues to work on ThinLTO and has now &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/089925.html">shared a revamped ThinLTO file format document&lt;/a>. She's also created this &lt;a href="https://sites.google.com/site/llvmthinlto/">handy website&lt;/a> to track the current RFCs and patches for ThinLTO.&lt;/p>&lt;/li>&lt;li>&lt;p>John Regehr has &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-September/089904.html">shared some results from Souper&lt;/a> that point to areas where computeKnownBits could be improved.&lt;/p>&lt;/li>&lt;li>&lt;p>I missed this last week, but Ben Craig has been &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2015-August/044817.html">looking at ways to improve the speed of Clang's static analyzer&lt;/a>. Ted Kremenek gives some &lt;a href="http://lists.llvm.org/pipermail/cfe-dev/2015-August/044825.html">useful general guidance&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The LLVM plugin for the gold linker now supports parallel LTO code generation. &lt;a href="http://reviews.llvm.org/rL246584">r246584&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The 'unpredictable' metadata annotation is now supported. This can be used to signal that a branch or switch is unpredictable. &lt;a href="http://reviews.llvm.org/rL246888">r246888&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A tool built on libFuzzer to fuzz llvm-as has been added. &lt;a href="http://reviews.llvm.org/rL246458">r246458&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The FunctionAttrs pass learned to infer nonnull attributes on returns. &lt;a href="http://reviews.llvm.org/rL246476">r246476&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Work on Windows exception handling continues with the addition of the cleanupendpad instruction and the llvm.eh.exceptionpointer intrinsic. &lt;a href="http://reviews.llvm.org/rL246751">r246751&lt;/a>, &lt;a href="http://reviews.llvm.org/rL246752">r246752&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Basic support for the WebAssembly target landed in Clang. Basic codegen is supported, but not yet assembling or linking. &lt;a href="http://reviews.llvm.org/rL246814">r246814&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang will now warn when you reference object members from a handler of a constructor/destructor function-try-block. &lt;a href="http://reviews.llvm.org/rL246548">r246548&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang learnt the &lt;code>__builtin_unpredictable&lt;/code> builtin, which will generate the newly added unpredictable metadata. &lt;a href="http://reviews.llvm.org/rL246699">r246699&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The new ELF lld linker gained basic archive file support. &lt;a href="http://reviews.llvm.org/rL246886">r246886&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Language plugins in LLDB can now provide data formatters. &lt;a href="http://reviews.llvm.org/rL246568">r246568&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM 3.7 Release</title><link>https://blog.llvm.org/2015/09/llvm-37-release.html</link><pubDate>Tue, 01 Sep 2015 14:15:00 +0000</pubDate><guid>https://blog.llvm.org/2015/09/llvm-37-release.html</guid><description>&lt;p>It is my pleasure to announce that LLVM 3.7.0 is now available!&lt;/p> &lt;p>Get it here: &lt;a href="http://llvm.org/releases/">http://llvm.org/releases/&lt;/a>&lt;/p> &lt;p>This release contains the work of the LLVM community over the past six months: full OpenMP 3.1 support (behind a flag), the On Request Compilation (ORC) JIT API, a new backend for Berkeley Packet Filter (BPF), Control Flow Integrity checking, as well as improved optimizations, new Clang warnings, many bug fixes, and more.&lt;/p> &lt;p>For details on what's new, see the release notes [&lt;a href="http://llvm.org/releases/3.7.0/docs/ReleaseNotes.html">LLVM&lt;/a>, &lt;a href="http://llvm.org/releases/3.7.0/tools/clang/docs/ReleaseNotes.html">Clang&lt;/a>].&lt;/p> &lt;p>Many thanks to everyone who helped with testing, fixing, and getting the release into a good state!&lt;/p> &lt;p>Special thanks to the volunteer release builders and testers, without whom this release would not be possible: Dimitry Andric, Sebastian Dreßler, Renato Golin, Pavel Labath, Sylvestre Ledru, Ed Maste, Ben Pope, Daniel Sanders, and Nikola Smiljanić!&lt;/p> &lt;p>If you have any questions or comments about this release, please contact the community on the mailing lists. Onwards to 3.8!&lt;/p></description></item><item><title>LLVM Weekly - #87, Aug 31st 2015</title><link>https://blog.llvm.org/2015/08/llvm-weekly-87-aug-31st-2015.html</link><pubDate>Mon, 31 Aug 2015 05:03:00 +0000</pubDate><guid>https://blog.llvm.org/2015/08/llvm-weekly-87-aug-31st-2015.html</guid><description>&lt;p>Welcome to the eighty-seventh issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>It's a bank holiday weekend here in the UK, so apologies that you're reading this a few hours later than usual. As a quick reminder, if you're able to be in Geneva for the 9th-11th October then you should definitely &lt;a href="http://www.lowrisc.org/blog/2015/08/lowrisc-at-orconf-2015/">come along to ORConf&lt;/a>.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/87">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>At the time of writing, LLVM 3.7.0 has not yet seen its official release, &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089761.html">but it has been tagged&lt;/a>. The final release should be out within the next day or so. Congratulations to everyone involved.&lt;/p>&lt;p>The deadline for submissions to the LLVM in HPC workshop has been &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089572.html">extended to Friday, September 4th&lt;/a>.&lt;/p>&lt;p>Save the date! The next Cambridge LLVM Social will be &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089650.html">on Wednesday 30th September&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Jingyue Wu has shared a &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089845.html">design doc on NVPTX memory space inference&lt;/a> and on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089574.html">straight-line scalar optimisations&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>An RFC from Swaroop Sridhar on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089706.html">extending alloca to allow the specification of the address space of the allocation&lt;/a> has resulted in a lot of discussion and is well worth a read for those interested in the intricacies of supporting GC in LLVM. Or particular interest is this &lt;a href="https://docs.google.com/document/d/1H5am1PyY8n8hc1hIAisDQMgbZDmMgnjU8wdN25YqMbQ/edit">design doc from Philip Reames&lt;/a> on the interaction of stack-based allocation and GC in LLVM. See also this summary from Joseph Tremoulet of &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089843.html">his understanding of how LLILC is hoping to use address spaces&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>There's been some discussion on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089652.html">flaky buildbots&lt;/a>. Renato &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089657.html">details his concerns with simply ignoring these bots&lt;/a>. Some of the issues with the bots in question &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089753.html">may be due to the use of incremental builds&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The 'kaleidoscope' tutorial has seen a major update. Now, rather than introducing MCJIT it describes how to use ORC, building a custom JIT called KaleidoscopeJIT. &lt;a href="http://reviews.llvm.org/rL246002">r246002&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>WebAssembly backend implementation work has been continuing over the past few weeks. The individual commits tend to be small and focused (as good commits should be). I mainly wanted to include a mention to highlight how work is ongoing. e.g. this recent commit added support for emitting simple call s-expressions. &lt;a href="http://reviews.llvm.org/rL245986">r245986&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The documentation on statepoints now has more to say about base pointers and related assumptions and optimisations. &lt;a href="http://reviews.llvm.org/rL246103">r246103&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Constant propagation is enabled for more single precisions math functions, such as acosf, powf, logf. &lt;a href="http://reviews.llvm.org/rL246194">r246194&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The function &lt;code>llvm::splitCodeGen&lt;/code> has been introduced in order to support the implementation of parallel LTO code generation. It uses SplitModule to split the module in to linkable partitions that are distributed among threads to be codegenned. &lt;a href="http://reviews.llvm.org/rL246236">r246236&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>There's been another change to DebugInfo. DISubprogram definitions must now be marked as distinct. The commit message includes a suggested script for updating IR. &lt;a href="http://reviews.llvm.org/rL246327">r246327&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler has been doing some refactoring of the ARM target parsing code with the hope of making it more efficient. He's reduced the cases where the code is called, which has a noticeable effect on some LLVM timings (e.g. check-llvm with non-optimized builds is 15 seconds faster). &lt;a href="http://reviews.llvm.org/rL246370">r246370&lt;/a>, &lt;a href="http://reviews.llvm.org/rL246378">r246378&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>A NullabilityChecker has been introduced, which is designed to catch a number of nullability-related issues. &lt;a href="http://reviews.llvm.org/rL246105">r246105&lt;/a>.&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>ThreadSanitizer is now enabled for AArch64 with 42-bit virtual addressing on Linux. &lt;a href="http://reviews.llvm.org/rL246330">r246330&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libcxx now contains release goals for 3.8 in its TODO.txt. This includes the Filesystem TS and the asynchronous I/O TS. &lt;a href="http://reviews.llvm.org/rL245864">r245864&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD's ELF linker gained a basic AMDGPU ReaderWriter that enables it to emit binaries that can be consumed by the HSA runtime. &lt;a href="http://reviews.llvm.org/rL246155">r246155&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD's COFF linker gained support for parallel LTO code generation. &lt;a href="http://reviews.llvm.org/rL246342">r246342&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB now supports hardware watchpoints on ARM. &lt;a href="http://reviews.llvm.org/rL245961">r245961&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The concept of 'language plugins' was introduced to LLDB. These will provide language-specific data formatters or expression evaluation. &lt;a href="http://reviews.llvm.org/rL246212">r246212&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #86, Aug 24th 2015</title><link>https://blog.llvm.org/2015/08/llvm-weekly-86-aug-24th-2015.html</link><pubDate>Mon, 24 Aug 2015 02:56:00 +0000</pubDate><guid>https://blog.llvm.org/2015/08/llvm-weekly-86-aug-24th-2015.html</guid><description>&lt;p>Welcome to the eighty-sixth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/86">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The LLVM Foundation &lt;a href="http://blog.llvm.org/2015/08/llvm-foundation-granted-501c3-nonprofit.html">has been granted 501(c)(3) non-profit status&lt;/a>. This means contributions are tax-deductible for US tax payers.&lt;/p>&lt;p>LLVM 3.7-rc3 &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089468.html">has been tagged&lt;/a>. This is the final release candidate and 3.7.0 final is expected very shortly.&lt;/p>&lt;p>The paper &lt;a href="http://soarlab.org/2015/08/ase2015-ddr/">Fast and Precise Symbolic Analysis of Concurrency Bugs in Device Drivers&lt;/a> makes use of Clang and LLVM as part of its verification flow.&lt;/p>&lt;p>Good news everyone! The deadline for submissions for the 2015 LLVM Developers' meeting has been &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089376.html">extended&lt;/a> to August the 25th.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Edward Jones and Simon Cook at Embecosm have been developing an &lt;a href="https://github.com/embecosm/aap-llvm">LLVM backend for AAP&lt;/a>, a 16-bit architecture which aims to be representative of common deeply embedded microprocessors. They're &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089304.html">looking for feedback&lt;/a> on upstreaming it. The architecture reference can be found &lt;a href="http://www.embecosm.com/appnotes/ean13/ean13.html">here&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Alex Lorenz has shared an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089527.html">update on the status of Machine IR serialization&lt;/a>. There's also the beginnings of a &lt;a href="http://llvm.org/docs/MIRLangRef.html">reference manual&lt;/a> for it, which covers the syntax and how to use it in tests.&lt;/p>&lt;/li>&lt;li>&lt;p>'deadal nix' has posted an RFC on supporting &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089430.html">load and store for large aggregates&lt;/a>. The author gives more detail &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089460.html">here&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Lang Hames proposes &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089384.html">two changes to the llvm.memcpy and llvm.memmove intrinsics&lt;/a>. It seems that based on feedback, the plans is to &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089461.html">add alignment information via metadata&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Evgenii Stepanav has an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089466.html">RFC on a minor fix to codegen for AlwaysInline functions&lt;/a>. Right now, if an alwaysinline function is only called from dead code it may not be inlined.&lt;/p>&lt;/li>&lt;li>&lt;p>Rong Xu has shared some &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089425.html">interesting numbers&lt;/a> on his investigations regarding front-end vs middle-end instrumentation of binaries.&lt;/p>&lt;/li>&lt;li>&lt;p>Renato Golin &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089309.html">raises concerns about the introduction of 'hacks' in to LLVM&lt;/a>. In this particular instance, it's a patch for TheadSanitizer on AArch64 Android. He elaborated on his concerns &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089377.html">here&lt;/a> and &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089381.html">here&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>TransformUtils gained the module splitter, which splits a module into linkable partitions and is intended to be used for parallel LTO code generation. &lt;a href="http://reviews.llvm.org/rL245662">r245662&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MergeFunctions is now closer to being deterministic. &lt;a href="http://reviews.llvm.org/rL245762">r245762&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>ScalarEvolution has been ported to the new pass manager. &lt;a href="http://reviews.llvm.org/rL245193">r245193&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The 'kaleidoscope' tutorials on creating a language backend using LLVM are now partially updated to use C++11 features and idioms. &lt;a href="http://reviews.llvm.org/rL245322">r245322&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The peephole optimiser learned to look through PHIs to find additional register sources. &lt;a href="http://reviews.llvm.org/rL245479">r245479&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul> &lt;li>&lt;p>The ObjCGenericsChecker will catch type errors related to lightweight generics in Objective-C. &lt;a href="http://reviews.llvm.org/rL245646">r245646&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>compiler-rt has gained implementations of some of the missing ARM EABI runtime functions. &lt;a href="http://reviews.llvm.org/rL245648">r245648&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libcxx gained a whole bunch of Sphinx-based documentation. &lt;a href="http://reviews.llvm.org/rL245788">r245788&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Foundation Granted 501(c)(3) Nonprofit Status</title><link>https://blog.llvm.org/2015/08/llvm-foundation-granted-501c3-nonprofit.html</link><pubDate>Thu, 20 Aug 2015 08:16:00 +0000</pubDate><guid>https://blog.llvm.org/2015/08/llvm-foundation-granted-501c3-nonprofit.html</guid><description>The LLVM Foundation is proud to announce it has been officially approved as a public charity with tax-exempt status under Section 501(c)(3) of the United States Internal Revenue Code. Contributions donated to the LLVM Foundation are fully tax deductible, retroactive to the organization establishment date of May 5, 2014.&lt;br />&lt;br />The LLVM Foundation's primary mission is to provide accessible and informative educational tools for the LLVM Project and compiler technology to the general public. These educational tools include events such as the annual LLVM Developers' meeting. The LLVM Foundation also gives grants or scholarships to other nonprofit organizations and individuals (such as student travel to LLVM Foundation events). Lastly, the LLVM Foundation funds the infrastructure necessary to support the LLVM Project.&lt;br />&lt;br />We hope to begin accepting donations online before the end of the year. &amp;nbsp;If you are interested in contributing, please contact your employer: they may be willing to match contributions to a 501(c)(3) charity.&lt;br />&lt;br />The IRS letter granting the LLVM Foundation 501(c)(3) tax-exempt status is available upon request until we can get it posted online. Please contact Tanya Lattner (tanyalattner@llvm.org), President of the LLVM Foundation. &lt;br />&lt;br /></description></item><item><title>LLVM Weekly - #85, Aug 17th 2015</title><link>https://blog.llvm.org/2015/08/llvm-weekly-85-aug-17th-2015.html</link><pubDate>Mon, 17 Aug 2015 03:22:00 +0000</pubDate><guid>https://blog.llvm.org/2015/08/llvm-weekly-85-aug-17th-2015.html</guid><description>&lt;p>Welcome to the eighty-fifth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>If you're interested in open source hardware, lowRISC, RISC-V, OpenRISC, and more then consider &lt;a href="http://www.lowrisc.org/blog/2015/08/lowrisc-at-orconf-2015/">joining us at ORConf 2015 in October&lt;/a>. I'm also looking for talk submissions.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/85">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Videos from April's EuroLLVM &lt;a href="http://llvm.org/devmtg/2015-04/">are now online&lt;/a>.&lt;/p>&lt;p>The deadline for the 2015 LLVM Developer's Meeting &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88488">call for papers&lt;/a> is rapidly approaching. Get your proposal in by August 20th, 11:59PM PDT.&lt;/p>&lt;p>A new paper covering the AST generation techniques used in Polly in great detail has been published in the July issue of TOPLAS. You can read the preprint &lt;a href="http://www.grosser.es/publications/grosser-2015--polyhedral-AST-generation-is-more-than-scanning-polyhedra--paper.pdf">here&lt;/a>.&lt;/p>&lt;p>The &lt;a href="https://github.com/mapbox/cncc/">Customizable Naming Convention Checker (CNCC)&lt;/a> is a new Clang-based tool that can be used to validate class, field, variable, and namespace naming conventions against a chosen regular expression.&lt;/p>&lt;p>&lt;a href="http://akabe.github.io/evilml/">EvilML&lt;/a> is a deliciously terrifying compiler that compiles ML to C++ template language.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>With the 3.7 release on its way, it's important to &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089235.html">fix up the release notes&lt;/a> so they reflect the work that's been done over the past six months.&lt;/p>&lt;/li>&lt;li>&lt;p>Dylan MacKay proposes making the existing 'expand' action of the instruction selection legalizer &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089172.html">into split and expand&lt;/a>. Part of the motivation for this is the author's work on an AVR backend.&lt;/p>&lt;/li>&lt;li>&lt;p>Wang Nan has posted an RFC on &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089244.html">adding an llvm.typeid.for intrinsic&lt;/a>. This would be used with the BFP backend to specify the type for buffers passed to perf.&lt;/p>&lt;/li>&lt;li>&lt;p>Teresa Johnson has posted an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089222.html">update on her ThinLTO work&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Peter Collingbourne has proposed &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089136.html">a simple approach to parallelising parallel codegen for link-time optimisation&lt;/a>. This gives a speedup on a HP Z620 from 15m20s to 8m06s when 4 partitions are used. Speedup beyond that is limited (partially due to Amdahl's law).&lt;/p>&lt;/li>&lt;li>&lt;p>Sanjoy Day has shared an RFC for &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089070.html">adding operand bundles to call and invokes&lt;/a>. These would be used to help track state required for deoptimization, for instance by attaching a 'deopt' operand bundle to relevant calls which contans the cstate of the abstract virtual machine.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>MergeFunctions has been sped up substantially by hashing functions and comparing that hash before performing a full comparison. This results in a speedup of 46% for MergeFunctions in libxul and 117% for Chromium. &lt;a href="http://reviews.llvm.org/rL245140">r245140&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>i64 loads and stores are now supported for 32-bit SPARC. This is a little fiddly to support as the LDD/STD instructions need a consecutive even/odd pair of 32-bit registers. &lt;a href="http://reviews.llvm.org/rL244484">r244484&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Machine basic blocks are now serialized using custom syntax rather than YAML. A later commit documented this syntax. &lt;a href="http://reviews.llvm.org/rL244982">r244982&lt;/a>, &lt;a href="http://reviews.llvm.org/rL245138">r245138&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new TargetTransformInfo hook has been added for specifying per-target defaults for interleaved accesses. &lt;a href="http://reviews.llvm.org/rL244449">r244449&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The llvm.loop.unroll.enable metadata was introduced. This will cause a loop to be unrolled fully if the trip count is known at compiler time and partially if it isn't (unlike llvm.loop.unroll.full which won't unroll a loop if the trip count isn't known). &lt;a href="http://reviews.llvm.org/rL244466">r244466&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Rudimentary support for the new Windows exception handling instructions has been introduced. &lt;a href="http://reviews.llvm.org/rL244558">r244558&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Token types have been added to LLVM IR. &lt;a href="http://reviews.llvm.org/rL245029">r245029&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The BPF backend gained documentation and an instruction set description. &lt;a href="http://reviews.llvm.org/rL245105">r245105&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul> &lt;li>&lt;p>The WebKit brace style is now supported by clang-format. &lt;a href="http://reviews.llvm.org/rL244446">r244446&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul> &lt;li>&lt;p>Statistics collection in the OpenMP runtime has been tidied up and expanded. &lt;a href="http://reviews.llvm.org/rL244677">r244677&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #84, Aug 10th 2015</title><link>https://blog.llvm.org/2015/08/llvm-weekly-84-aug-10th-2015.html</link><pubDate>Mon, 10 Aug 2015 05:36:00 +0000</pubDate><guid>https://blog.llvm.org/2015/08/llvm-weekly-84-aug-10th-2015.html</guid><description>&lt;p>Welcome to the eighty-fourth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/84">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Adrian Sampson has written a fantastic &lt;a href="http://adriansampson.net/blog/llvm.html">introduction to LLVM&lt;/a>. It's titled LLVM for Grad Students, but it should be useful for anybody looking to use LLVM or just wanting to understand it better.&lt;/p>&lt;p>Brandon Holt has written up a short and helpful post giving &lt;a href="http://homes.cs.washington.edu/~bholt/posts/llvm-debugging.html">hints and tips on debugging LLVM&lt;/a>.&lt;/p>&lt;p>The move of the mailing lists from UIUC on to lists.llvm.org is now complete. All public LLVM-related mailing lists &lt;a href="http://lists.llvm.org/cgi-bin/mailman/listinfo">are shown here&lt;/a>. List addresses have now changed to listname@lists.llvm.org.&lt;/p>&lt;p>There's been some exciting activity in the world of GCC. Support for the draft C++ Concepts TS &lt;a href="https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=56c12fd4ba064759724236ad896232603b8797ed">has been committed&lt;/a>. A draft of the technical specification is &lt;a href="http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2015/n4377.pdf">available here&lt;/a>. Additionally, Nick Clifton has posted a useful summary of &lt;a href="https://gcc.gnu.org/ml/gcc/2015-08/msg00013.html">GNU toolchain developments for July/August&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Rong Xu has shared an &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089044.html">RFC for late instrumentation in LLVM&lt;/a>. The RFC describes (and quantifies) the performance cost of inserting instrumentation for profile-guided optimisation in the frontend and proposes approaches for adding instrumentation in the middle-end instead.&lt;/p>&lt;/li>&lt;li>&lt;p>Jingyue Wu kicked off a discussion about &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/089023.html">modifying the BasicAA alias analysis to understand whether there is aliasing between different address spaces&lt;/a>. &lt;/p>&lt;/li>&lt;li>&lt;p>Teresa Johnson has posted RFCs for the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/088920.html">ThinLTO file API and data structures&lt;/a> and the &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/088916.html">ThinLTO file format&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth is looking to enable the GlobalModsRef in the default pass pipeline. He's found it performance neutral in his tests so far, but would &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/088988.html">appreciate more people to try and benchmark it&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Asking for advice on how to get started with LLVM is very common. Few take as much time on detailing their background, motivations, and proposed plan as &lt;a href="http://lists.llvm.org/pipermail/llvm-dev/2015-August/088915.html">Arno Bastenhof in a recent message&lt;/a>. Probably because of this, his request has attracted some very high quality replies.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A handy new LLVM Support header was introduced. The TrailingObjects template class abstracts away &lt;code>reinterpret_cast&lt;/code>, pointer arithmetic, and size calculation needed for the case where a class has some other objects appended to the end of it. &lt;a href="http://reviews.llvm.org/rL244164">r244164&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Initial documentation for the Machine IR serialization format has been written. &lt;a href="http://reviews.llvm.org/rL244292">r244292&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Uniquable DICompilerUnits have been disallowed. Old bitcode will be automatically upgraded and the sed script in the commit message should be useful for updating out-of-tree testcases. &lt;a href="http://reviews.llvm.org/rL243885">r243885&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>All of the TargetTransformInfo cost APIs now use int rather than unsigned. &lt;a href="http://reviews.llvm.org/rL244080">r244080&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A new checker for code-level localizability issues on OSX/iOS was born. It will warn about the use of non-localized NSStrings passed to UI methods and about failing to include a comment in NSLocalizedString macros.&lt;br />&lt;a href="http://reviews.llvm.org/rL244389">r244389&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>New AST matchers have been introduced for constructors that are default, copy, or move. &lt;a href="http://reviews.llvm.org/rL244036">r244036&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The old COFF linker in LLD has been removed in favour of the new, faster, and simpler implementation. &lt;a href="http://reviews.llvm.org/rL244226">r244226&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>ThreadSanitizer is now enabled for AArch64. &lt;a href="http://reviews.llvm.org/rL244055">r244055&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #83, Aug 3rd 2015</title><link>https://blog.llvm.org/2015/08/llvm-weekly-83-aug-3rd-2015.html</link><pubDate>Mon, 03 Aug 2015 06:21:00 +0000</pubDate><guid>https://blog.llvm.org/2015/08/llvm-weekly-83-aug-3rd-2015.html</guid><description>&lt;p>Welcome to the eighty-third issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/83">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The CodeChecker static analysis infrastructure built on Clang Static Analyzer &lt;a href="https://github.com/Ericsson/codechecker">has been released&lt;/a>. The &lt;a href="http://llvm.org/devmtg/2015-04/slides/Clang_static_analysis_toolset_final.pdf">slides&lt;/a> from the talk at EuroLLVM earlier this year give a good overview.&lt;/p>&lt;p>LLVM/Clang 3.7 RC2 &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/44237">has been tagged&lt;/a>. Time to get testing.&lt;/p>&lt;p>The implementation of the &lt;a href="https://github.com/anssi-fr/picon">Picon&lt;/a> Control Flow Integrity protection mechanism has been released. See also the associated paper &lt;a href="https://www.sstic.org/media/SSTIC2015/SSTIC-actes/control_flow_integrity_on_llvm_ir/SSTIC2015-Article-control_flow_integrity_on_llvm_ir-fontaine_chifflier_coudray_esfrDAl.pdf">Picon: Control Flow Integrity on LLVM IR&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>There is a plan to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88947">jump to Windows 7 as the baseline requirement for LLVM&lt;/a>, which has been featured in LLVM Weekly previously many months ago. If such a move would cause a problem for you, now is the time to speak up. There's also a proposal to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88959">drop support for the old mingw.org toolchains&lt;/a> in favour of the maintained mingw-w64.&lt;/p>&lt;/li>&lt;li>&lt;p>James Molloy has prototyped &lt;a href="http://reviews.llvm.org/D11530">LoopEditor&lt;/a>, a high-level API for loop transformations in LLVM and is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.cvs/260989">seeking additional feedback&lt;/a>. The hope is that existing loop transformations could be rewritten and simplified to use it.&lt;/p>&lt;/li>&lt;li>&lt;p>Easwaran Raman has shared an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88929">RFC on speedup estimation for inlining cost analysis&lt;/a>. The idea is that the estimated speedup (reduction in dynamic instruction count) from performing the inlining should be used as part of the cost metric.&lt;/p>&lt;/li>&lt;li>&lt;p>Chris Bieneman has penned a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88859">CMake in LLVM roadmap&lt;/a> and &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88858">July CMake update&lt;/a>. There's even &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88906">hope the autoconf build system might be marked deprecated before the 3.8 branch&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Peter Collingbourne has shared a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88856">proposal for arbitrary relocations in constant global initialisers&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Try not to panic, but the LLVM mailing lists &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88811">will be down on August 4th&lt;/a> as they will be moving off the UIUC servers. Additionally, SVN access will be read-only and the LLVM bugzilla will be down.&lt;/p>&lt;/li>&lt;li>&lt;p>Mehdi Amini has issued a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88793">helpful notice for out-of-tree maintainers&lt;/a> on the removal of RegisterScheduler::setDefault.&lt;/p>&lt;/li>&lt;li>&lt;p>Lang Hames has written a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88773">whirlwind introduction to implementing lazy JITting support for a new architecture in Orc&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Michael Schlottke-Lakemper kicked off a discussion on the possibility of &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/7802">using lldb.so to create a stack trace&lt;/a>. Respondents pointed out a number of possible choices, including using the &lt;code>llvm::sys::printStackTrace()&lt;/code> function.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A new exception handling representation has been introduced for MSVC compatibility. The commit includes the appropriate updates to the LLVM language reference. &lt;a href="http://reviews.llvm.org/rL243766">r243766&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A test to check bitcode compatibility has been added. This will help ensure the bitcode format produced by an X.Y release is readable by the following X.Z releases. &lt;a href="http://reviews.llvm.org/rL243779">r243779&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The lli documentation has been updated and now better explains its purpose. &lt;a href="http://reviews.llvm.org/rL243401">r243401&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM gained a target-independent thread local storage (TLS) implementation. &lt;a href="http://reviews.llvm.org/rL243438">r243438&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A &lt;code>reverse(ContainerTy)&lt;/code> range adapter was added. &lt;a href="http://reviews.llvm.org/rL243581">r243581&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The method for emitting metadata for loop hint pragmas has been modified, using CGLoopInfo. &lt;a href="http://reviews.llvm.org/rL243315">r243315&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang learned to pass &lt;code>-Wa,-mfpu&lt;/code>, &lt;code>-Wa,-mhwdiv&lt;/code>, and &lt;code>-Wa,-mcpu&lt;/code> to the integrated assembler. &lt;a href="http://reviews.llvm.org/rL243353">r243353&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Initial support for Open MP 4.1's extended ordered clause was added. &lt;a href="http://reviews.llvm.org/rL243635">r243635&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul> &lt;li>&lt;p>lldb is starting to gain support for indicating when you are debugging a function that has been optimized. &lt;a href="http://reviews.llvm.org/rL243508">r243508&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #82, Jul 27th 2015</title><link>https://blog.llvm.org/2015/07/llvm-weekly-82-jul-27th-2015.html</link><pubDate>Mon, 27 Jul 2015 03:01:00 +0000</pubDate><guid>https://blog.llvm.org/2015/07/llvm-weekly-82-jul-27th-2015.html</guid><description>&lt;p>Welcome to the eighty-second issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>I'd just like to highlight how much I really do appreciate people sending me links for inclusion, e.g. LLVM-related blog posts or new releases of software using LLVM (feature releases rather than simple bugfix updates). I'm not omniescent - if an interesting blog post or software release goes unmentioned here, I probably just didn't know about it!&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/82">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88488">call for papers&lt;/a> for the 2015 LLVM Developers' meeting has now gone out. The submission deadline is August 20th. Registration is also &lt;a href="https://www.eventbrite.com/e/2015-llvm-developers-meeting-tickets-17756357744">now open&lt;/a>.&lt;/p>&lt;p>John Regehr and his collaborators working on Souper have &lt;a href="http://blog.regehr.org/archives/1252">shared some initial results from the synthesizing superoptimizer&lt;/a>. John is very interested in collecting representative IR from frontends other than Clang. There is also some discussion about these results &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88588">on the mailing list&lt;/a>.&lt;/p>&lt;p>Microsoft have &lt;a href="http://blogs.msdn.com/b/vcblog/archive/2015/07/20/source-now-available-for-gdb-lldb-debug-engine.aspx">open sourced their GDB/LLDB 'debug engine'&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Piotr Padlewski has &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/44022">shared a plan to improve Clang's devirtualization&lt;/a> which he will be working on with Richard Smith at Google this Summer. The hope is to reduce any remaining performance gap between LLVM/Clang and GCC (which has better devirtualization support). The Google Doc &lt;a href="https://docs.google.com/document/d/1f2SGa4TIPuBGm6y6YO768GrQsA8awNfGEJSBFukLhYA/edit">can be read here&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Rafael Espíndola has shared &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88499">some thoughts on handling ELF shared libraries in LLD&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Marshall Clow has kicked off a discussion on &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/43985">how C++ library TSes should be packaged&lt;/a>. David Chisnall gives the &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/44034">FreeBSD perspective on ABI and API compatibility in libc++&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Eric Fiselier has posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/43969">RFC on whether libc++ should support the atomic header in C++03&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>dsymutil gained support for one-definition-rule uniquing for C++ code. When linking the DWARF for a debug build of clang, it generates a 150M dwarf file instead of 700M. &lt;a href="http://reviews.llvm.org/rL242847">r242847&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The last remnant of the AliasAnalysis legacy update API have been removed. &lt;a href="http://reviews.llvm.org/rL242881">r242881&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LoopUnswitch can now unswitch multiple trivial conditions in a single pass invocation. &lt;a href="http://reviews.llvm.org/rL243203">r243203&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul> &lt;li>&lt;p>Clang gained the &lt;code>isFinal()&lt;/code> AST matcher. &lt;a href="http://reviews.llvm.org/rL243107">r243107&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A new ELF linker has been born, based on the PE/COFF linker. &lt;a href="http://reviews.llvm.org/rL243161">r243161&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libcxx gained a default searcher for &lt;code>std::experimental::search&lt;/code>. &lt;a href="http://reviews.llvm.org/rL242682">r242682&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #81, Jul 20th 2015</title><link>https://blog.llvm.org/2015/07/llvm-weekly-81-jul-20th-2015.html</link><pubDate>Mon, 20 Jul 2015 06:34:00 +0000</pubDate><guid>https://blog.llvm.org/2015/07/llvm-weekly-81-jul-20th-2015.html</guid><description>&lt;p>Welcome to the eighty-first issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>I'm "on holiday" (at EuroPython) this week in Bilbao, mostly helping out the Raspberry Pi team with the education track. Do say hello, particularly if you want to chat lowRISC, LLVM, or Raspberry Pi.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/81">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>LLVM 3.6.2 &lt;a href="http://llvm.org/releases/download.html#3.6.2">has been released&lt;/a>.&lt;/p>&lt;p>LLVM and Clang 3.7 &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88108">has been branched&lt;/a>.&lt;/p>&lt;p>The team behind Pyston, the LLVM-based Python JIT have written a blog post about &lt;a href="http://blog.pyston.org/2015/07/14/caching-object-code/">their new object code caching feature&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Teresa Johnson has posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88099">RFC on ThinLTO symbol linkage and renaming&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Robert Lougher has written up a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88092">very detailed analysis of a case of poor register allocation&lt;/a>, which may make interesting reading for some.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth has written up on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88070">RFC on stateful alias analysis in LLVM&lt;/a>. The plan assumes the new pass manager. GlobalsModRef is the trickiest case to handle, and Chandler has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88071">written a separate post about the problems with it&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Hal Finkel is interested in using new functionality introduced in C++11 (such as the final keyword) to &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/43824">improve devirtualization&lt;/a>. The proposal generated quite a lot of discussion.&lt;/p>&lt;/li>&lt;li>&lt;p>Juergen Ributzka kicked off a discussion on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88334">improving the maintenance and management of the LLVM C API&lt;/a>. Eric Christopher &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88357">suggests moving the C API to another project&lt;/a>, so those who want/require a stable API can take on the burden of keeping it up to date. He &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88413">elaborates on his proposal&lt;/a> in response from Chris Lattner. There seems to be &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88420">some support&lt;/a> for providing C bindings with the same stability guarantees as the C++ API (i.e. it might break between major releases).&lt;/p>&lt;/li>&lt;li>&lt;p>Hal Finkel has proposed an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/88200">RFC on defining infinite loops in LLVM&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The API to determine callee-save registers has been rewritten. &lt;a href="http://reviews.llvm.org/rL242165">r242165&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The 'debugger tuning' concept has been introduced, allowing the specification of the debugger the debug info should be optimised for. This defaults to lldb on OS X and FreeBSD and GDB for everything else (other than PS4, which defaults to the SCE debugger). &lt;a href="http://reviews.llvm.org/rL242388">r242388&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Intrinsics for absolute difference operations have been introduced. &lt;a href="http://reviews.llvm.org/rL242409">r242409&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The PostRAScheduler has been disabled for the Apple Swift CPU and MachineScheduler is used in place. The commit message argues PostRAScheduler is not a good fit for out-of-order architectures and suggests the same switch might be worth while for other ARM OoO CPUs. &lt;a href="http://reviews.llvm.org/rL242500">r242500&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Support for armv7-windows-gnu targets has been added to the Clang front-end. &lt;a href="http://reviews.llvm.org/rL242292">r242292&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The clang module container format is now selectable from the command line (raw or obj). &lt;a href="http://reviews.llvm.org/rL242499">r242499&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A minimal AMDGPU toolchain configuration has been added. &lt;a href="http://reviews.llvm.org/rL242601">r242601&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLD now supports MIPS big-endian targets. &lt;a href="http://reviews.llvm.org/rL242014">r242014&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB's gdbserver is moving towards being a single-threaded application. &lt;a href="http://reviews.llvm.org/rL242018">r242018&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The OpenMP CMake build system has been massively refactored. &lt;a href="http://reviews.llvm.org/rL242298">r242298&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #80, Jul 13th 2015</title><link>https://blog.llvm.org/2015/07/llvm-weekly-80-jul-13th-2015.html</link><pubDate>Mon, 13 Jul 2015 09:50:00 +0000</pubDate><guid>https://blog.llvm.org/2015/07/llvm-weekly-80-jul-13th-2015.html</guid><description>&lt;p>Welcome to the eightieth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/80">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The 2015 LLVM Developers' Meeting &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/87925">has been announced&lt;/a>. It will take place on October the 29th and 30th in San Jose, California. Registration information and a call for papers will be sent out later in the month.&lt;/p>&lt;p>LLVM/Clang 3.6.2 &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/43613">has been tagged&lt;/a>. All being well, we can expect 3.6.2 to be released soon.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Daniel Sanders has kicked off an amusingly named conversation on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/87804">the trouble with triples&lt;/a>. The thread gives context for a proposed change to move from ambiguous TargetTriple to unambiguous TargetTuples.&lt;/p>&lt;/li>&lt;li>&lt;p>Juergen Ributzka has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/87930">proposed a new StackMap format&lt;/a>. The feedback seems positive so far.&lt;/p>&lt;/li>&lt;li>&lt;p>The discussion regarding the &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/87279">analysis of responses to the C as used in practice survey&lt;/a> has rumbled on. Chris Lattner has shared &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/87749">some of his thoughts on the freedom undefined behaviour gives the compiler to optimise&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Christos Margiolas has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/87849">shared patches for his work on heterogeneous execution with LLVM&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The Hexagon backend gained a BitTracker class. This is intended to be target independent. As described at the top of BitTracker.cpp, this is intended to be used with a target-specific machine instruction evaluator. There have been some other large additions to the Hexagon backend this week too. I hope the authors will consider given another talk on their work at some point.&lt;br />&lt;a href="http://reviews.llvm.org/rL241595">r241595&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llc learnt the &lt;code>run-pass&lt;/code> option, which will run one specific code generation pass only. &lt;a href="http://reviews.llvm.org/rL241476">r241476&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM now has documentation on its inline assembly!&lt;br />&lt;a href="http://reviews.llvm.org/rL241698">r241698&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The llvm.frameescape and llvm.framerecover intrinsics have been renamed to localescape and localrecover. &lt;a href="http://reviews.llvm.org/rL241463">r241463&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Various refactoring commits have been made with the aim of having a single DataLayout used during compilation, owned by the module.&lt;br />&lt;a href="http://reviews.llvm.org/rL241775">r241775&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new llvm.canonicalize intrinsics has been introduced, intended to be used to canonicalize floating point values. &lt;a href="http://reviews.llvm.org/rL241977">r241977&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The new argmemonly attribute can be used to mark functions that can only access memory through its argument pointers. &lt;a href="http://reviews.llvm.org/rL241979">r241979&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A few patches landed in Clang improving Objective-C support. This includes parsing, semantic analysis, and AST support for Objective-C type parameters, support for Objective-C type arguments, the &lt;code>__kindof&lt;/code> type qualifier. Douglas Gregor has more to say about these changes &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/43614">on the mailing list&lt;/a>. &lt;a href="http://reviews.llvm.org/rL241541">r241541&lt;/a>, &lt;a href="http://reviews.llvm.org/rL241542">r241542&lt;/a>, &lt;a href="http://reviews.llvm.org/rL241548">r241548&lt;/a>, and more.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang will attached the readonly or readnone attributes when appropriate to inline assembly instructions, meaning the inline asm will not be treated as conservatively. e.g. in some cases an inline asm block could be hoisted out of a loop. &lt;a href="http://reviews.llvm.org/rL241930">r241930&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>PCH (pre-compiled headers) are now wrapped in an object file. &lt;a href="http://reviews.llvm.org/rL241690">r241690&lt;/a>, &lt;a href="http://reviews.llvm.org/rL241620">r241620&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang now recognises the GCC-compatible &lt;code>-fprofile-generate&lt;/code> and &lt;code>-fprofile-use&lt;/code> flags. &lt;a href="http://reviews.llvm.org/rL241825">r241825&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>libcxx add &lt;code>try_emplace&lt;/code> and &lt;code>insert_or_assign&lt;/code> to &lt;code>map&lt;/code> and &lt;code>unordered_map&lt;/code>, as specified in &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4279">N4279&lt;/a>. &lt;a href="http://reviews.llvm.org/rL241539">r241539&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The new LLD COFF linker now has basic support for x86 (it was previously x86-64 only). &lt;a href="http://reviews.llvm.org/rL241857">r241857&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #79, Jul 6th 2015</title><link>https://blog.llvm.org/2015/07/llvm-weekly-79-jul-6th-2015.html</link><pubDate>Mon, 06 Jul 2015 16:23:00 +0000</pubDate><guid>https://blog.llvm.org/2015/07/llvm-weekly-79-jul-6th-2015.html</guid><description>&lt;p>Welcome to the seventy-ninth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>Last week I was in Berkeley for the second RISC-V conference. If you weren't able to make it, worry not because I liveblogged both &lt;a href="http://www.lowrisc.org/blog/2015/06/second-risc-v-workshop-day-one/">day one&lt;/a> and &lt;a href="http://www.lowrisc.org/blog/2015/06/second-risc-v-workshop-day-two/">day two&lt;/a>.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/79">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Stephen Cross has &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/43502">released llvm-abi&lt;/a>, a library for generating LLVM IR that complies with platform ABIs.&lt;/p>&lt;p>This is a &lt;a href="http://blog.mattbierner.com/stupid-template-tricks-super-template-tetris/">rather cute implementation of Tetris in C++ header files&lt;/a>, compatible with Clang.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Kevin Atkinson &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/87565">asks whether to use MCJIT or ORCJIT&lt;/a>. It sounds like &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/87600">ORC is working out well for the LLILC team&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth has kicked off a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/87469">discussion about the AliasAnalysis update interface&lt;/a> and what should be done about it.&lt;/p>&lt;/li>&lt;li>&lt;p>In response to a question, Evgeny Astigeevich has given a useful guide to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/87416">finding the control dependence graph&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Manuel Klimek &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/43558">is updating the LLVM Phabricator install&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The initial skeleton of the WebAssembly backend has been committed. It is not yet functional. &lt;a href="http://reviews.llvm.org/rL241022">r241022&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>DIModule metadata nodes have been introduced. A DIModule is meant to be used to record modules importaed by the current compile unit. &lt;a href="http://reviews.llvm.org/rL241017">r241017&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>New exception handling intrinsics have been added for recovering and restoring parent frames. &lt;a href="http://reviews.llvm.org/rL241125">r241125&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang gained support for the x86 builtin &lt;code>__builtin_cpu_supports&lt;/code>. &lt;a href="http://reviews.llvm.org/rL240994">r240994&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Clang man pages have been converted to Sphinx (from .pod). &lt;a href="http://reviews.llvm.org/rL241037">r241037&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>libcxx gained &lt;code>shared_mutux&lt;/code>. &lt;a href="http://reviews.llvm.org/rL241067">r241067&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD has gained some generally applicable optimisations. e.g. devirtualizing SymbolBody and compacting its in-memory representation. &lt;a href="http://reviews.llvm.org/rL241001">r241001&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD's COFF linker can now link a working 64-bit debug build of Chrome. chrome.dll takes 24 seconds (vs 48 seconds for linking it with MSVC). &lt;a href="http://reviews.llvm.org/rL241318">r241318&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB grew an example of scripted steps in Python. &lt;a href="http://reviews.llvm.org/rL241216">r241216&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #78, June 29th 2015</title><link>https://blog.llvm.org/2015/06/llvm-weekly-78-june-29th-2015.html</link><pubDate>Mon, 29 Jun 2015 03:51:00 +0000</pubDate><guid>https://blog.llvm.org/2015/06/llvm-weekly-78-june-29th-2015.html</guid><description>&lt;p>Welcome to the seventy-eighth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>I'm in the Bay Area this week for the &lt;a href="http://riscv.org/workshop-jun2015.html">second RISC-V workshop&lt;/a> where my colleague and I will of course be talking about &lt;a href="http://www.lowrisc.org">lowRISC&lt;/a>. If you're not able to make it, keep an eye on the lowRISC blog which I intend to keep updating semi-live with notes from the talks and presentations.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/78">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Hans Wennborg has shared the &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2015-June/087060.html">release plan for LLVM/Clang 3.7&lt;/a>. This would see the release branch created on 14th July, with a final release targeted for 21st August.&lt;/p>&lt;p>A &lt;a href="http://www.cl.cam.ac.uk/~pes20/cerberus/notes50-2015-05-24-survey-discussion.html">detailed analysis&lt;/a> of the results of the "What is C in practice" survey has now been posted. The survey gained around 300 responses, and aims to help guide the definition of a formal model for the de facto standard of C (i.e. C as it is used rather than purely as specified in the ISO standard).&lt;/p>&lt;p>The 3.6.2-rc1 LLVM/Clang release &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2015-June/087111.html">has been tagged&lt;/a>. As always, testing is encouraged.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;p>Unfortunately at the time of writing GMANE seems to be having some problems, so for this week I'll be using links to the pipermail archives of the relevant mailing list posts.&lt;/p>&lt;ul>&lt;li>&lt;p>Adrian Prantl has a proposal for &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2015-June/087109.html">improving the quality of debug locations and of DbgValueHistoryCalculator&lt;/a>. This will involve adding new heuristics so DbgValueHistoryCalculator is smarter at creating ranges.&lt;/p>&lt;/li>&lt;li>&lt;p>Sanjoy Patel kicked off a discussion about &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2015-June/087225.html">conversion between bitwise AND and short-circuit evaluation for booleans&lt;/a>. In particularly, he's wanting to ensure that short circuit evaluation is not used (though as is pointed out in the thread, the benefit of saving the branch is highly microarchitecture dependent).&lt;/p>&lt;/li>&lt;li>&lt;p>Dan Liew has posted an RFC on &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2015-June/087246.html">improving the testing of exported LLVM CMake targets&lt;/a>. He has produced a &lt;a href="https://github.com/delcypher/llvmCMakeImportDemo">toy project&lt;/a> making use of these targets, which could be used to help ensure they stay in working shape.&lt;/p>&lt;/li>&lt;li>&lt;p>Bjarke Roune is proposing &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2015-June/087234.html">functionality to determine when a posion value is guaranteed to produce undefined behaviour&lt;/a>, with the aim of improving handling of nsw/inbounds and similar in LLVM passes such as scalar evolution.&lt;/p>&lt;/li>&lt;li>&lt;p>Philip Reames has responded to a question from Chandler Carruth with a good summary of the &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2015-June/087222.html">motivation for supporting inlining through statepoints and patchpoints&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The InterleavedAccess pass has been introduced to identify interleaved memory accesses so they can be transformed into target-specific intrinsics. &lt;a href="http://reviews.llvm.org/rL240751">r240751&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Initial serialisation of machine instructions has been added, representing MachineInstructions in YAML. &lt;a href="http://reviews.llvm.org/rL240295">r240295&lt;/a>, &lt;a href="http://reviews.llvm.org/rL240425">r240425&lt;/a>, and more.&lt;/p>&lt;/li>&lt;li>&lt;p>The CaptureTracking pass has been optimised to improve performance on very large basic blocks. &lt;a href="http://reviews.llvm.org/rL240560">r240560&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A parser for LLVM stackmap sections has been added and made available through llvm-readobj. &lt;a href="http://reviews.llvm.org/rL240860">r240860&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The recently added nullability attributes have been extensively documented. &lt;a href="http://reviews.llvm.org/rL240296">r240296&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>constexpr can now be specified in condition declarations. &lt;a href="http://reviews.llvm.org/rL240707">r240707&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The README for the COFF linker in LLD has been updated with new performance numbers. It's now 3.5 seconds to self-host (was previously 5 seconds), and this compared 7 seconds with the MSVC linker and 30 seconds with the old LLD. &lt;a href="http://reviews.llvm.org/rL240759">r240759&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The safestack TODO list in compiler-rt has been updated. &lt;a href="http://reviews.llvm.org/rL240473">r240473&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD gained support for thread-local storage in MachO objects. &lt;a href="http://reviews.llvm.org/rL240454">r240454&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Polly has had a meaningful improvement in compile time through enabling the small integer optimisation of the ISL (Integer Set Library). Polybench benchmarks on average take 20% less time to compile. &lt;a href="http://reviews.llvm.org/rL240689">r240689&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #77, Jun 22nd 2015</title><link>https://blog.llvm.org/2015/06/llvm-weekly-77-jun-22nd-2015.html</link><pubDate>Mon, 22 Jun 2015 04:52:00 +0000</pubDate><guid>https://blog.llvm.org/2015/06/llvm-weekly-77-jun-22nd-2015.html</guid><description>&lt;p>Welcome to the seventy-seventh issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>I'll be in California next week for the &lt;a href="http://riscv.org/workshop-jun2015.html">second RISC-V workshop&lt;/a>. Me and my colleague Wei will both be giving talks about recent &lt;a href="http://www.lowrisc.org/">lowRISC&lt;/a> progress. Say hi if you're going to be there. I might have some spare time towards the end of the week too if anyone wants to meet up.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/77">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>&lt;a href="https://github.com/WebAssembly/design">WebAssembly&lt;/a> has been announced. It is a new collaboration between browser vendors to define a new binary executable format that can be used as a compilation target. A good summary is available &lt;a href="https://groups.google.com/forum/#!topic/emscripten-discuss/k-egXO7AkJY">here on the emscripten mailing list&lt;/a>.&lt;/p>&lt;p>Tilmann Scheller has written up a &lt;a href="http://blogs.s-osg.org/an-introduction-to-accelerating-your-build-with-clang/">pair&lt;/a> &lt;a href="http://blogs.s-osg.org/a-conclusion-to-accelerating-your-build-with-clang/">of&lt;/a> blog posts about improving build times of Clang. He steps through a wide range of generic approaches (using Ninja, ccache, the gold linker, LTO+PGO in the host compiler etc etc) and some specific to Clang/LLVM.&lt;/p>&lt;p>The &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/43303">Cambridge LLVM Social&lt;/a> will be taking place on Wed 24th June, 7.30pm at the Blue.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Dan Gohman has posted an RFC for the &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86952">inclusion of a WebAssembly backend in LLVM&lt;/a>. It seems like everyone is in favour of the proposed approach.&lt;/p>&lt;/li>&lt;li>&lt;p>Yaxun Li has posted a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86950">revised RFC on adding a SPIR-V target to LLVM&lt;/a>. There still seems to be some push-back on the proposed approach. Chandler Carruth &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86966">makes an argument&lt;/a> that SPIR-V should make use of the existing SelectionDAG legalization layer.&lt;/p>&lt;/li>&lt;li>&lt;p>Igor Laevsky is seeking more feedback on adding an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/87017">attribute to mark that a function only accesses memory through its arguments&lt;/a>. Philip Reames point out in the thread that this isn't a new concept to LLVM, except right now &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/87070">such an attribute can only be specified on intrinsics&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Philip Reames is looking for feedback on his plan to implement &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86984">profile-guided inlining&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Diego Novillo has posted an RFC to enable the &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86970">-fprofile-generate and -fprofile-use Clang flags&lt;/a>. Unsurprisingly, people are in favour of supporting these flags for GCC compatibility.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Some initial support for 'fault maps' and a &lt;code>FAULTING_LOAD_OP&lt;/code>, intended for use in a managed language runtime, has been added. The new ImplicitNullChecks pass will fold null checks into nearby memory operations. &lt;a href="http://reviews.llvm.org/rL239740">r239740&lt;/a>, &lt;a href="http://reviews.llvm.org/rL239743">r239743&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;a href="http://dslab.epfl.ch/proj/cpi/">SafeStack&lt;/a> pass to protect against stack-based memory corruption errors has been added. &lt;a href="http://reviews.llvm.org/rL239761">r239761&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>All temporary symbols are now unnamed. This saves a small amount of memory. &lt;a href="http://reviews.llvm.org/rL240130">r240130&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>There's been some enhancement to the heuristics for switch lowering. &lt;a href="http://reviews.llvm.org/rL240224">r240224&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The &lt;code>-fsanitize-trap=&lt;/code> flag has been introduced, which will be used to control if the given sanitizer traps upon detecting an error. &lt;a href="http://reviews.llvm.org/rL240105">r240105&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Appropriate bitsets for use by LLVM's control flow integrity implementation can now be emitted for the Microsoft ABI. &lt;a href="http://reviews.llvm.org/rL240117">r240117&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Kernel AddressSanitizer now has basic support. &lt;a href="http://reviews.llvm.org/rL240131">r240131&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang learned to recognise type nullability specifiers. &lt;a href="http://reviews.llvm.org/rL240146">r240146&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLDB learnt how to use hardware watchpoints for MIPS. &lt;a href="http://reviews.llvm.org/rL239991">r239991&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Compression support has been added to LLDB's implementation of the gdb-remote protocol. &lt;a href="http://reviews.llvm.org/rL240066">r240066&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #76, Jun 15th 2015</title><link>https://blog.llvm.org/2015/06/llvm-weekly-76-jun-15th-2015.html</link><pubDate>Mon, 15 Jun 2015 09:49:00 +0000</pubDate><guid>https://blog.llvm.org/2015/06/llvm-weekly-76-jun-15th-2015.html</guid><description>&lt;p>Welcome to the seventy-sixth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/76">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The big news this week is that Apple have announced Swift 2.0 and, perhaps more importantly, that &lt;a href="https://developer.apple.com/swift/blog/?id=29">Swift will be open source later this year&lt;/a>. The intention is that iOS, OS X and Linux will be supported at release.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Quentin Colombet has posted a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86783">helpful clarification&lt;/a> on the restrictions of a MachineFunctionPass.&lt;/p>&lt;/li>&lt;li>&lt;p>Getting frustrated maintaining your out-of-tree LLVM backend? It's comforting for me at least to know things could be worse. Patrik Hägglund reports he and his colleague &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86730">maintain patches to support 16-bit bytes and 24/40-bit MachineValueTypes&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth is planning some &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86842">AliasAnalysis refactoring for the new pass manager&lt;/a>. He's asking for feedback the general plan as well as the all-important question of naming conventions.&lt;/p>&lt;/li>&lt;li>&lt;p>Zia Ansari has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86742">shared&lt;/a> an interesting summary of an investigation of performance swings on Intel architectures related to the post-decode micro-op cache. A &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/attachments/20150610/024ed87f/attachment-0001.pptx">PPTX-formatted summary is available here&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The loop vectorizer gained an optimisation for interleaved memory access. It is disabled by default but can be turned on using &lt;code>-enable-interleaved-mem-accesses=true&lt;/code>. An AArch64InterleavedAccess pass was also added. &lt;a href="http://reviews.llvm.org/rL239291">r239291&lt;/a>, &lt;a href="http://reviews.llvm.org/rL239514">r239514&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A prototype for 32-bit SEH (Structured Exception Handling) has been added. &lt;a href="http://reviews.llvm.org/rL239433">r239433&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM has grown LibDriver and llvm-lib, intended to provide a lib.exe compatible utility. &lt;a href="http://reviews.llvm.org/rL239434">r239434&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>x86 gained a new reassociation MachineCombiner optimisation to increase ILP. &lt;a href="http://reviews.llvm.org/rL239486">r239486&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The R600 backend has now been renamed to AMDGPU. &lt;a href="http://reviews.llvm.org/rL239657">r239657&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Support for C99 partial re-initialization behaviour has been implemented. &lt;a href="http://reviews.llvm.org/rL239446">r239446&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang gained support for the BPF backend. &lt;a href="http://reviews.llvm.org/rL239446">r239496&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The loop vectorize pragma now recognises &lt;code>assume_safety&lt;/code>. This will tell loop access analysis to skip memory dependency checking. &lt;a href="http://reviews.llvm.org/rL239572">r239572&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The target attribute is now supported. Much like GCC's target attribute, it allows adding subtarget features and changing the CPU for a particular function. &lt;a href="http://reviews.llvm.org/rL239579">r239579&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The COFF linker in LLD continues to get faster. &lt;a href="http://reviews.llvm.org/rL239332">r239332&lt;/a>, &lt;a href="http://reviews.llvm.org/rL239292">r239292&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD grew a TypeSystem interface to support adding non-clang languages (though it seems it's reverted for now). &lt;a href="http://reviews.llvm.org/rL239360">r239360&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #75, Jun 8th 2015</title><link>https://blog.llvm.org/2015/06/llvm-weekly-75-jun-8th-2015.html</link><pubDate>Mon, 08 Jun 2015 04:40:00 +0000</pubDate><guid>https://blog.llvm.org/2015/06/llvm-weekly-75-jun-8th-2015.html</guid><description>&lt;p>Welcome to the seventy-fifth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/75">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a>&lt;h3>News and articles from around the web&lt;/h3>&lt;p>Botond Ballo has posted a &lt;a href="https://botondballo.wordpress.com/2015/06/05/trip-report-c-standards-meeting-in-lenexa-may-2015/">wonderfully thorough summary of the recent Lenexa C++ standards meeting&lt;/a>, even including a table to summarise the status of various major proposals.&lt;/p>&lt;p>I have somehow neglected to mention the &lt;a href="http://crystal-lang.org/">Crystal language&lt;/a> previously. It is a statically typed language with syntax inspired by Ruby which (of course) compiles using LLVM. It was &lt;a href="https://news.ycombinator.com/item?id=9669166">discussed last week on Hacker News&lt;/a>.&lt;/p>&lt;p>icGrep has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86599">been released&lt;/a>. It makes use of the 'Parabix' text representation and LLVM for high performance regex matching. More details are available &lt;a href="http://parabix.costar.sfu.ca/wiki/ICgrep">at the icGrep homepage&lt;/a>.&lt;/p>&lt;p>The winners of the 7th Underhanded C Contest &lt;a href="http://www.underhanded-c.org/">have now been announced online&lt;/a>. Congratulations to the winner, Karen Pease, for creating such a monstrous piece of code.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Chandler Carruth has posted a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86607">summary of a recent in-person discussion about LLD's future and design&lt;/a>. It looks like this was a very positive meeting with agreement in important areas. The recently contributed experimental COFF linker is going to be evaluated to see if its linking model would be appropriate for Darwin. If so, the hope is work can focus on adopting that as the standard model. If not, more work will need to be done on refactoring LLD and making sure that code which makes sense to be shared is.&lt;/p>&lt;/li>&lt;li>&lt;p>Christos Margiolas has been working as an intern at the Qualcomm Innovation Center on support for heterogeneous compute, including transparent offloading of loops or functions to accelerators. He is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86569">asking for feedback&lt;/a> and looking to see if there is interest in getting this upstream. He has &lt;a href="https://drive.google.com/file/d/0B5GasMlWJhTOb2tXTDZsal9qclE/view">shared a slide deck&lt;/a> which gives more details.&lt;/p>&lt;/li>&lt;li>&lt;p>Woodrow Barlow is interested in &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86373">implementing a new PIC backend for LLVM&lt;/a>. Renato Golin gave a very thorough and helpful response about &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86375">how you might proceed&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Frank Winter is looking for a way to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86481">replace a sequence of repetitive code with a loop&lt;/a>. It was pointed out that the LLVM loop reroll pass should be helpful for this, but it does need to run on an existing loop. This would mean it requires modification or the IR should be modified to introduce a trivial loop before running the reroll pass.&lt;/p>&lt;/li>&lt;li>&lt;p>Philip Reames has posted an RFC on adding a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86407">liveoncall parameter attribute&lt;/a>. This would be used to leave an argument marked as live even if it isn't actually used (so it might be later inspected at runtime). Chris Lattner queried whether &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86522">adding an intrinsic might be a better approach&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLVM gained support for the new AArch64 v8.1a atomic instructions. &lt;a href="http://reviews.llvm.org/rL238818">r238818&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The MPX (Intel Memory Protection eXtensions) feature bit and bound registers are now supported on the X86 backend. &lt;a href="http://reviews.llvm.org/rL238916">r238916&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MIPS FastISel gained more instruction and intrinsic implementations. &lt;a href="http://reviews.llvm.org/rL238756">r238756&lt;/a>, &lt;a href="http://reviews.llvm.org/rL238757">r238757&lt;/a>, &lt;a href="http://reviews.llvm.org/rL238759">r238759&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>With the introduction of MCSymbolELF, the base MCSymbol size is now reduced to 48 bytes on x86-64. &lt;a href="http://reviews.llvm.org/rL238801">r238801&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Work has started on porting AliasAnalysis to the new pass manager. &lt;a href="http://reviews.llvm.org/rL239003">r239003&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The BPF backend now supports big and host endian, in addition to the previously supported little endian. &lt;a href="http://reviews.llvm.org/rL239071">r239071&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The naming and structure of the recently added unroll heuristics has been modified. &lt;a href="http://reviews.llvm.org/rL239164">r239164&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>&lt;code>-mcpu&lt;/code> for ARM will now ignore the case of its arguments for ARM. &lt;a href="http://reviews.llvm.org/rL239059">r239059&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A mass of predefined vector functions for PowerPC has been added. &lt;a href="http://reviews.llvm.org/rL239066">r239066&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The concept and requires keywords (as used in the C++ Concepts TS) are now lexed. Let's hope this starting point is followed up with work towards full concepts support in the coming months. &lt;a href="http://reviews.llvm.org/rL239128">r239128&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The lld COFF linker gained an initial implementation of link-time optimisation. &lt;a href="http://reviews.llvm.org/rL238777">r238777&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB gained support for software emulation of the MIPS64 branch instructions. &lt;a href="http://reviews.llvm.org/rL238820">r238820&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libiomp5 is now libomp. &lt;a href="http://reviews.llvm.org/rL238712">r238712&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #74, Jun 1st 2015</title><link>https://blog.llvm.org/2015/06/llvm-weekly-74-jun-1st-2015.html</link><pubDate>Mon, 01 Jun 2015 06:35:00 +0000</pubDate><guid>https://blog.llvm.org/2015/06/llvm-weekly-74-jun-1st-2015.html</guid><description>&lt;p>Welcome to the seventy-fourth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>You may be interested in the &lt;a href="https://blog.riscv.org/2015/04/registration-now-open-2nd-risc-v-workshop-june-29-30-2015/">second RISC-V workshop&lt;/a>, which will be held in Berkeley June 29-30. Early bird registration ends today, but academics can register for free. My colleague Wei and I will be there representing &lt;a href="http://www.lowrisc.org">lowRISC&lt;/a>.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/74">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a>&lt;h3>News and articles from around the web&lt;/h3>&lt;p>&lt;a href="https://github.com/0ax1/MPI-Checker">MPI-Checker&lt;/a>, a static analysis tool for MPI code has been released. It is of course implemented using Clang's &lt;a href="http://clang-analyzer.llvm.org/">Static Analyzer framework&lt;/a>.&lt;/p>&lt;p>The LLVM-HPC2 workshop will be held on November 15th, co-located with SC15. The &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86349">call for papers&lt;/a> has been published. Submissions are due by September 1st.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>The discussion about improving LLD has resumed. Rui Ueyama has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86306">written about his recent patch for a section-based PE/COFF linker&lt;/a>. Sean Silva argues that &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86333">refactoring might be a better approach&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Hans Wennborg has shared a &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/42972">preliminary release plan for LLVM/Clang 3.7&lt;/a>. This would see the codebase branched on the 14th of July with a release target of the end of August. Tom Stellard has also shared a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86175">schedule for the 3.6.2 release&lt;/a>. The deadline for patches is June 15 with the release date targeted for June 29th.&lt;/p>&lt;/li>&lt;li>&lt;p>Teresa Johnson has posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86282">updated RFC of her ThinLTO implementation plan&lt;/a>. There are still concerns about the wrapping of LLVM bitcode in ELF. Alex Rosenberg suggests &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86313">implementing an objcopy replacement for LLVM and extending bitcode as necessary&lt;/a> as an alternative approach.&lt;/p>&lt;/li>&lt;li>&lt;p>Chris Bieneman has posted a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86248">status update on the quest to replace the autoconf build system with CMake&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Quentin Colombet is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86222">seeking benchmark reports&lt;/a> (or indeed bugs!) for the recently added 'shrink wrapping'.&lt;/p>&lt;/li>&lt;li>&lt;p>Matthias Braun has left a quick note for maintainers of out-of-tree targets that &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86291">pristine register semantics have been modified slightly&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth has posted some thoughts on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86137">next steps for loop unrolling analysis&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Codegen for memcpy on Thumb2 has been improved to make use of load/store multiple (more details of how this works in the commit message, worth a read for those interested). &lt;a href="http://reviews.llvm.org/rL238473">r238473&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Popcount on x86 will now be implemented using a &lt;a href="http://wm.ite.pl/articles/sse-popcount.html">lookup table in register technique&lt;/a>. &lt;a href="http://reviews.llvm.org/rL238636">r238636&lt;/a>, &lt;a href="http://reviews.llvm.org/rL238652">r238652&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Work continues on reducing peak memory usage through optimisations to debug info. &lt;a href="http://reviews.llvm.org/rL238364">r238364&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Initial support for the &lt;code>convergent&lt;/code> attribute has landed. &lt;a href="http://reviews.llvm.org/rL238264">r238264&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The documentation about the current state of LLVM's Phabricator has been updated along with a call for volunteers to help develop necessary improvements and modifications to Phabricator's PHP codebase. &lt;a href="http://reviews.llvm.org/rL238295">r238295&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MCJIT gained support for MIPS64r2 and MIPS64r6. &lt;a href="http://reviews.llvm.org/rL238424">r238424&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang's handling of &lt;code>-fopenmp&lt;/code> has been rewritten. &lt;a href="http://reviews.llvm.org/rL235111">r238389&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The user documentation on profiling has been extended. &lt;a href="http://reviews.llvm.org/rL238504">r238504&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A new PE/COFF section-based linker has been added to lld. This follows on from discussions about the direction of lld and whether it makes sense to build on top of the atom model. The linker is able to self-link on Windows and is significantly faster than the current implementations (1.2 seconds vs 5 seconds, even without multi-threading). It also takes only 250MB of RAM to self-link vs 2GB. &lt;a href="http://reviews.llvm.org/rL238458">r238458&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB on Windows can now demangle Linux or Android symbols. &lt;a href="http://reviews.llvm.org/rL238460">r238460&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #73, May 25th 2015</title><link>https://blog.llvm.org/2015/05/llvm-weekly-73-may-25th-2015.html</link><pubDate>Mon, 25 May 2015 09:39:00 +0000</pubDate><guid>https://blog.llvm.org/2015/05/llvm-weekly-73-may-25th-2015.html</guid><description>&lt;p>Welcome to the seventy-third issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/73">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The LLVM blog has properly &lt;a href="http://blog.llvm.org/2015/05/openmp-support_22.html">announced&lt;/a> full support for OpenMP 3.1 in Clang.&lt;/p>&lt;p>The Clang-derived &lt;a href="http://www.zapcc.com/">Zapcc&lt;/a> has had &lt;a href="https://news.ycombinator.com/item?id=9592601">some attention&lt;/a> this week. It claims higher compilation speeds than the baseline Clang or other compilers. Yaron Keren, the principal developer has shared &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/42950">many more details about its implementation&lt;/a> on the Clang mailing list.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>The discussion about upstreaming the LLVM/SPIR-V converter has continued. Chandler Carruth has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86000">responded with feedback&lt;/a>, and Philip Reames has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86054">shared his concerns&lt;/a> about the merge proposal as-is. Neil Henning has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86056">responded to some of these concerns&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Adam Nemet has kicked off a thread about &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86024">alias-based loop versioning&lt;/a>, with the hope that others working in the area can chime in.&lt;/p>&lt;/li>&lt;li>&lt;p>Félix Cloutier queries why &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/86029">MemoryDependencyAnalysis reports dependencies between NoAlias pointers&lt;/a>. Daniel Berlin points to his very interesting looking work on &lt;a href="http://reviews.llvm.org/D7864">MemorySSA&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Duncan P.N. Exon Smith has posted an RFC on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85981">reducing the memory footprint of debug info entries&lt;/a>. The attached patches reduce peak memory usage from 920MB to 884MB for the tested workload.&lt;/p>&lt;/li>&lt;li>&lt;p>John Criswell has a helpful answer regarding &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85987">how to determine whether a branch instruction may depend on function parameters&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Andrew Kaylor has shared a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85926">detailed description of the work to be done for exception handling on Windows&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Andrew Bokhanko is looking for feedback on &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/42622">adding an option to control a level of OpenMP support in Clang&lt;/a>. Now that 3.1 support is complete, OpenMP 4.0 is the next target but this is likely to remain incomplete for some time. The question is whether those features which are implemented are available by default, or whether users should opt-in with a compiler flag while support remains incomplete.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The &lt;code>dereferenceable_or_null&lt;/code> attribute will now be exploited by the loop environment code motion pass. &lt;a href="http://reviews.llvm.org/rL237593">r237593&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Commits have started on the 'MIR serialization' project, which aims to print machine functions in a readable format. &lt;a href="http://reviews.llvm.org/rL237954">r237954&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A GCStrategy for CoreCLR has been committed alongside some documentation for it. &lt;a href="http://reviews.llvm.org/rL237753">r237753&lt;/a>, &lt;a href="http://reviews.llvm.org/rL237869">r237869&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libFuzzer gained some more documentation. &lt;a href="http://reviews.llvm.org/rL237836">r237836&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libFuzzer can now be used with user-supplied mutators. &lt;a href="http://reviews.llvm.org/rL238059">r238059&lt;/a>, &lt;a href="http://reviews.llvm.org/rL238062">r238062&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>&lt;code>-fopenmp&lt;/code> will turn on OpenMP support and link with libiomp5 (libgomp can alternatively be specified). &lt;a href="http://reviews.llvm.org/rL237769">r237769&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>-mrecip&lt;/code> flag has been added to match GCC. &lt;a href="http://reviews.llvm.org/rL238055">r238055&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>C++1z status for libcxx has been updated. &lt;a href="http://reviews.llvm.org/rL237606">r237606&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;code>std::bool_constant&lt;/code> and &lt;code>uninitialized_copy()&lt;/code> was added to libcxx. &lt;a href="http://reviews.llvm.org/rL237636">r237636&lt;/a>, &lt;a href="http://reviews.llvm.org/rL237699">r237699&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libcxx gained a TODO list. Plenty of tasks that might be interesting to new contributors. &lt;a href="http://reviews.llvm.org/rL237813">r237813&lt;/a>, &lt;a href="http://reviews.llvm.org/rL237988">r237988&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LDB has enabled debugging of multithreaded programs on Windows and gained support for attaching to process. &lt;a href="http://reviews.llvm.org/rL237637">r237637&lt;/a>, &lt;a href="http://reviews.llvm.org/rL237817">r237817&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>OpenMP Support</title><link>https://blog.llvm.org/2015/05/openmp-support_22.html</link><pubDate>Fri, 22 May 2015 08:23:00 +0000</pubDate><guid>https://blog.llvm.org/2015/05/openmp-support_22.html</guid><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on">&lt;div class="MsoNormal">&lt;span lang="EN-US">OpenMP support in Clang compiler is completed! Every pragma and clause from &lt;a href="http://www.openmp.org/mp-documents/OpenMP3.1.pdf">3.1 version of the standard&lt;/a>&amp;nbsp;is supported in full, including combined directives (like ‘#pragma omp parallel for’ and ‘#pragma omp parallel sections’). &amp;nbsp;In addition&lt;/span>, some elements of OpenMP 4.0 are supported as well. This includes “almost complete” support for ‘#pragma omp simd” and full support for ‘#pragma omp atomic’ &amp;nbsp;(combined pragmas and a couple of clauses are still missing).&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US">&lt;br />&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US">OpenMP enables Clang users to harness full power of modern multi-core processors with vector units. Pragmas from OpenMP 3.1 provide an industry standard way to employ task parallelism, while ‘#pragma omp simd’ is a simple yet flexible way to enable data parallelism (aka vectorization).&lt;/span>&lt;br />&lt;span lang="EN-US">&lt;br />&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US">Clang implementation of OpenMP standard relies on LLVM OpenMP runtime library, available at &lt;a href="http://openmp.llvm.org/">http://openmp.llvm.org/&lt;/a>. This runtime supports ARM® architecture processors, PowerPC™ processors, 32 and 64 bit X86 processors and provides ABI compatibility with GCC and Intel's existing OpenMP compilers.&lt;/span>&lt;br />&lt;span lang="EN-US">&lt;br />&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US">To enable OpenMP, just add ‘&lt;tt>-fopenmp&lt;/tt>’ to the command line and provide paths to OpenMP headers and library with ‘&lt;tt>-I &amp;lt;&lt;/tt>&lt;i>path to omp.h&lt;/i>&lt;tt>&amp;gt; -L &amp;lt;&lt;/tt>&lt;i>LLVM OpenMP library path&lt;/i>&lt;tt>&amp;gt;&lt;/tt>’.&lt;/span>&lt;br />&lt;span lang="EN-US">&lt;br />&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US">To run a compiled program you may need to provide a path to shared OpenMP library as well:&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;tt>$ export LD_LIBRARY_PATH=&amp;lt;OpenMP library path&amp;gt;:$LD_LIBRARY_PATH&lt;/tt>&lt;/div>or:&lt;br />&lt;div class="MsoNormal">&lt;tt>$ export DYLD_LIBRARY_PATH=&amp;lt;OpenMP library path&amp;gt;:$DYLD_LIBRARY_PATH&lt;/tt>&lt;/div>on Mac OS X.&lt;br />&lt;br />&lt;div class="MsoNormal">&lt;span lang="EN-US">You can confirm that the compiler works correctly by trying this simple parallel C program:&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US" style="font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;">#include &amp;lt;omp.h&amp;gt;&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US" style="font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;">#include &amp;lt;stdio.h&amp;gt;&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US" style="font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;">int main() {&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US" style="font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;">#pragma omp parallel&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US" style="font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;">&amp;nbsp;&amp;nbsp;&amp;nbsp; printf("Hello from thread %d, nthreads %d\n", omp_get_thread_num(), omp_get_num_threads());&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US">&lt;span style="font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;">}&lt;/span>&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US">Compile it (you should see no errors or warnings):&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US" style="font-family: &amp;quot;courier new&amp;quot;; font-size: 10.0pt;">&lt;span style="font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;">$ clang -fopenmp -I &amp;lt;path to omp.h&amp;gt; -L &amp;lt;LLVM OpenMP library path&amp;gt; hello_openmp.c -o hello_openmp&lt;/span>&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US">and execute: &lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US" style="font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif; font-size: 10.0pt;">$ &lt;span style="background: white; color: #222222;">export [DY]LD_LIBRARY_PATH=&amp;lt;OpenMP library path&amp;gt;:$[DY]LD_LIBRARY_PATH&lt;/span>&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US" style="font-family: &amp;quot;courier new&amp;quot;; font-size: 10.0pt;">&lt;span style="font-family: &amp;quot;trebuchet ms&amp;quot; , sans-serif;">$ ./hello_openmp&lt;/span>&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US">You will see more than one “Hello” line with different thread numbers (note that the lines may be mixed together). If you see only one line, try setting the environment variable OMP_NUM_THREADS to some number (say 4) and try again.&lt;/span>&lt;br />&lt;span lang="EN-US">&lt;br />&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US">Hopefully, you will enjoy using OpenMP and witness dramatic boosts of your applications’ performance!&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;/div></description></item><item><title>LLVM Weekly - #72, May 18th 2015</title><link>https://blog.llvm.org/2015/05/llvm-weekly-72-may-18th-2015.html</link><pubDate>Mon, 18 May 2015 05:56:00 +0000</pubDate><guid>https://blog.llvm.org/2015/05/llvm-weekly-72-may-18th-2015.html</guid><description>&lt;p>Welcome to the seventy-second issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>Some of you may be interested that over at the lowRISC project, we've announced the &lt;a href="http://www.lowrisc.org/blog/2015/05/summer-of-code-students-for-lowrisc/">full set of summer student projects&lt;/a> we're supporting.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/72">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a>&lt;h3>News and articles from around the web&lt;/h3>&lt;p>The Rust programming language, which of course uses LLVM as its compiler backend, has just &lt;a href="http://blog.rust-lang.org/2015/05/15/Rust-1.0.html">released version 1.0&lt;/a>.&lt;/p>&lt;p>The next Cambridge LLVM Social will &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/42786">take place on Wednesday 20th May&lt;/a> at the Cambridge Beer Festival.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Teresa Johnson has posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85628">RFC on her ThinLTO implementation plan&lt;/a>. It's seen a lot of feedback, too much for me to hope to summarise, though much of it was around emitting bitcode wrapped in ELF.&lt;/p>&lt;/li>&lt;li>&lt;p>Yaxun Liu is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85609">looking to upstream the Khronos Group LLM to SPIR-V converter&lt;/a>. There was some discussion as to whether SPIR-V makes most sense as a backend or as serialisation format alongside the LLVM bitcode output.&lt;/p>&lt;/li>&lt;li>&lt;p>Reid Kleckner has written up an RFC on a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85783">new exception handling representation for MSVC&lt;/a>, given that the Itanium EH representation has been found insufficient.&lt;/p>&lt;/li>&lt;li>&lt;p>Chris Matthews proposes &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85775">changing LNT's regression detection algorithm&lt;/a>, with the aim being to reduce the number of false positives to the extent that people will be motivated to investigate reported regressions.&lt;/p>&lt;/li>&lt;li>&lt;p>Matt Arsenault is proposing &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85616">upstreaming an LLVM backend for HSAIL&lt;/a>. HSAIL presents a virtual target machine (in a way similar to NVPTX), and is defined by the HSA Foundation.&lt;/p>&lt;/li>&lt;li>&lt;p>Owen Anderson proposes a new &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85633">convergent attribute&lt;/a> aiming to make LLVM more suitable for SPMD/SIMT programming models. So far, all feedback has been very positive.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The ARM backend has been updated to use AEABI aligned function variants. &lt;a href="http://reviews.llvm.org/rL237127">r237127&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The heuristic for estimating the effect of complete loop unrolling has been reimplemented. &lt;a href="http://reviews.llvm.org/rL237156">r237156&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Statepoints are now 'patchable'. &lt;a href="http://reviews.llvm.org/rL237214">r237214&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for function entry count metadata has been added. &lt;a href="http://reviews.llvm.org/rL237260">r237260&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new loop distribution pass has been born. It is off by default. &lt;a href="http://reviews.llvm.org/rL237358">r237358&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>New SelectionDAG nodes have been added for signed/unsigned min/max. &lt;a href="http://reviews.llvm.org/rL237423">r237423&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A simple speculative execution pass, targeted mainly at GPUs has been added. &lt;a href="http://reviews.llvm.org/rL237459">r237459&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The little endian SPARC target has been added to clang. &lt;a href="http://reviews.llvm.org/rL237001">r237001&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>clang-format's formatter has undergone some refactoring, which also led to a few bug fixes.&lt;a href="http://reviews.llvm.org/rL237104">r237104&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Documentation on adding new attributes has seen a significant update. &lt;a href="http://reviews.llvm.org/rL237268">r237268&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>libcxx learnt &lt;code>std::experimental::sample&lt;/code> &lt;a href="http://reviews.llvm.org/rL237264">r237264&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lldb has enabled multithreaded debugging on Windows. &lt;a href="http://reviews.llvm.org/rL237392">r237392&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lldb can now set and clear hardware watchpoints and breakpoints on AArch64. &lt;a href="http://reviews.llvm.org/rL237419">r237419&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lldb gained an assembly profiler for mips32. &lt;a href="http://reviews.llvm.org/rL237420">r237420&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #71, May 11th 2015</title><link>https://blog.llvm.org/2015/05/llvm-weekly-71-may-11th-2015.html</link><pubDate>Mon, 11 May 2015 02:42:00 +0000</pubDate><guid>https://blog.llvm.org/2015/05/llvm-weekly-71-may-11th-2015.html</guid><description>&lt;p>Welcome to the seventy-first issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/71">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The implementation of OpenMP 3.1 in Clang/LLVM is &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/42620">now complete&lt;/a>. Well done to everyone involved.&lt;/p>&lt;p>Most slides from the presentations at &lt;a href="http://llvm.org/devmtg/2015-04/">EuroLLVM 2015&lt;/a> are now online. Video is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85455">coming soon&lt;/a>.&lt;/p>&lt;p>Version 3.5.1 of Clang UPC, the Unified Parallel C compiler has &lt;a href="http://clangupc.github.io/2015/04/15/clang-upc-3-5-1-0-announcment/">been released&lt;/a>. The main change seems to be the move to Clang/LLVM 3.5.&lt;/p>&lt;p>The Pony Language, which features an LLVM backend has recently &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85486">been released&lt;/a>. It received quite a lot of &lt;a href="https://news.ycombinator.com/item?id=9482483">discussion on Hacker News&lt;/a>.&lt;/p>&lt;p>Many readers might be interested in this &lt;a href="http://www.reddit.com/r/cpp/comments/35g7f6/">update from the last C++ standardization committee meeting&lt;/a>.&lt;/p>&lt;p>IBM have posted some bounties for &lt;a href="https://www.bountysource.com/issues/11873163-enable-thread-sanitizer-for-ppc64">TSAN support&lt;/a> and &lt;a href="https://www.bountysource.com/issues/11872976-enable-memory-sanitizer-for-ppc64">MSAN support&lt;/a> for PPC64.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Renato Golin has been asking about interest in &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85385">improving the LLVM online code coverage report&lt;/a>. Joshua Cranmer shared the work he did on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85424">code coverage for Thunderbird and Firefox&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>John Criswell has followed up on an older thread about the LLVM DSA work giving &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85380">some useful insight&lt;/a>, and &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85461">some more&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Hubert Tong is interested in working on &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/42564">implementing the C++ Concepts Technical Specification in Clang&lt;/a>, and would like anyone who's interested in collaborating or has already made a start to get in touch.&lt;/p>&lt;/li>&lt;li>&lt;p>Quentin Colombet has posted a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85322">heads-up about his shrink-wrap pass work&lt;/a>, including details on how to enable support in your backend (in-tree or out-of-tree).&lt;/p>&lt;/li>&lt;li>&lt;p>Last week's discussion about improving LLD has rumbled on. Chris Lattner &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85298">suggested working on two linkers&lt;/a>, one to serve the needs of those who primarily want a usable BSD-licensed system linker and another a 'next generation' linker trying to meet the original aims of LLD, developed without the same constraints on compatibility. Alex Rosenberg gave a good &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85247">summary of the original aims of LLD&lt;/a> and how recent changes have moved it further from those aims. It looks like &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85483">a path forwards is being identified&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A new 'shrink-wrap' pass has been added. It attempts to insert the prologue and epilogue of a function somewhere other than the entry/exit blocks. See the commit message for a motivating example. &lt;a href="http://reviews.llvm.org/rL236507">r236507&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for the z13 processor and its vector capabilities have been added to the SystemZ backend. &lt;a href="http://reviews.llvm.org/rL236520">r236520&lt;/a>, &lt;a href="http://reviews.llvm.org/rL236521">r236521&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Documentation has been written for the new masked gather and scatter intrinsics. &lt;a href="http://reviews.llvm.org/rL236721">r236721&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The statepoint intrinsic has been extended to allow statepoints to be marked as tranditions from GC-aware code to nonGC-aware code. &lt;a href="http://reviews.llvm.org/rL236888">r236888&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang support for the z13 processor was added. &lt;a href="http://reviews.llvm.org/rL236531">r236531&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Thread-safe initialization using the MSVC 2015 ABI has been implemented. &lt;a href="http://reviews.llvm.org/rL236697">r236697&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>User-friendly &lt;code>-fsanitize-coverage=&lt;/code> flags are now available. &lt;a href="http://reviews.llvm.org/rL236790">r236790&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>libiomp's CMake has been integrated into the LLVM CMake build system, so you can now checkout libiomp and have it built alongside llvm, clang and so on. &lt;a href="http://reviews.llvm.org/rL236534">r236534&lt;/a>.&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #70, May 4th 2015</title><link>https://blog.llvm.org/2015/05/llvm-weekly-70-may-4th-2015.html</link><pubDate>Mon, 04 May 2015 05:33:00 +0000</pubDate><guid>https://blog.llvm.org/2015/05/llvm-weekly-70-may-4th-2015.html</guid><description>&lt;p>Welcome to the seventieth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/70">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Microsoft have announced their intention to make use of the &lt;a href="http://blogs.msdn.com/b/vcblog/archive/2015/05/01/bringing-clang-to-windows.aspx">Clang frontend on Windows&lt;/a>.&lt;/p>&lt;p>Bjarne Stroustrup has recently been &lt;a href="http://www.infoq.com/news/2015/04/stroustrup-cpp17-interview">talking about potential C++17 features&lt;/a>.&lt;/p>&lt;p>The Visual C++ developers are going to be open-sourcing their &lt;a href="http://blogs.msdn.com/b/vcblog/archive/2015/04/29/open-sourcing-visual-studio-s-gdb-lldb-debug-engine.aspx">GDB/LLDB debug engine&lt;/a>.&lt;/p>&lt;p>The projects accepted into Google Summer of Code for LLVM &lt;a href="https://www.google-melange.com/gsoc/org2/google/gsoc2015/llvm">have been announced&lt;/a>. Four student projects have been accepted.&lt;/p>&lt;p>The next Bay Area LLVM social is &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/7243">scheduled for&lt;/a> 7pm on Thursday the 7th of May. Please sign up if you are attending.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Rui Ueyama has been doing quite a lot of work on LLD of late and has proposed an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85190">LLD improvement plan&lt;/a>. In it, he proposes some major changes that would hopefully ease the path to LLD becoming a fully functional ELF, Mach-O, and PE-COFF linker. The two main proposals are to use the 'section' rather than the 'atom' model and to stop trying to bend the Unix model to work on other platforms, instead directly implementing the necessary native behaviour. There are understandably some concerns that this direction could result in LLD having to maintain essentially three linkers, but discussion is ongoing and much feedback seems positive.&lt;/p>&lt;/li>&lt;li>&lt;p>Alex, who will be interning at Apple this summer has posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/85003">RFC on a proposed machine level IR text serialisation format&lt;/a>. It came out a little mangled on Gmane so you may prefer to read the &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2015-April/084932.html">pipermail rendering&lt;/a>. A lot of the feedback revolves around the pros and cons of a YAML-based format..&lt;/p>&lt;/li>&lt;li>&lt;p>Andrey Bokhanko suggests &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/42449">replacing libgomp with libiomp&lt;/a> as the default OpenMP runtime library when using &lt;code>-fopenmp&lt;/code>. Ultimately there seems to be agreement and the only issue seems to be on the library naming.&lt;/p>&lt;/li>&lt;li>&lt;p>Nico Weber reports that although &lt;code>-gline-tables-only&lt;/code> makes debug info much smaller, they've &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/42419">found with Chromium the resulting stackframes aren't that usable without function parameters and namespaces&lt;/a>. The proposal is to add a new variant that does include function parameter info and namespace info.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The LLVM performance tips document has gained another two entries. &lt;a href="http://reviews.llvm.org/rL235825">r235825&lt;/a>, &lt;a href="http://reviews.llvm.org/rL235826">r235826&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-symbolizer now works on Windows. &lt;a href="http://reviews.llvm.org/rL235900">r235900&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>SelectionDAG, DAGCombiner and codegen support for masked scatter and gather has been added. &lt;a href="http://reviews.llvm.org/rL235970">r235970&lt;/a>, &lt;a href="http://reviews.llvm.org/rL236211">r236211&lt;/a>, &lt;a href="http://reviews.llvm.org/rL236394">r236394&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Debug locations have been added to all constant SelectionDAG nodes. &lt;a href="http://reviews.llvm.org/rL235989">r235989&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Dragonegg support has been dropped from the release script. &lt;a href="http://reviews.llvm.org/rL236077">r236077&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The debug info IR constructs have been renamed from &lt;code>MD*&lt;/code> to &lt;code>DI*&lt;/code>. Duncan suggests that if you're updating an out of tree target, it may be easiest to first get things compiling with the code from before this commit, then continue the merge. &lt;a href="http://reviews.llvm.org/rL236120">r236120&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang can now generate dependencies in the style accepted by the NMake and Jom build tools. &lt;a href="http://reviews.llvm.org/rL235903">r235903&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>New AVX-512 intrinsics have been added. &lt;a href="http://reviews.llvm.org/rL235986">r235986&lt;/a>, &lt;a href="http://reviews.llvm.org/rL236218">r236218&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang learned &lt;code>-Wpessimizing-move&lt;/code> and &lt;code>-Wredundant-move&lt;/code> warnings. &lt;a href="http://reviews.llvm.org/rL236075">r236075&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLDB gained support for the SysV ABI on ARM and AArch64. &lt;a href="http://reviews.llvm.org/rL236097">r236097&lt;/a>, &lt;a href="http://reviews.llvm.org/rL236098">r236098&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM test suite gained a &lt;code>frame_layout&lt;/code> test. &lt;a href="http://reviews.llvm.org/rL236085">r236085&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #69, Apr 27th 2015</title><link>https://blog.llvm.org/2015/04/llvm-weekly-69-apr-27th-2015.html</link><pubDate>Mon, 27 Apr 2015 05:41:00 +0000</pubDate><guid>https://blog.llvm.org/2015/04/llvm-weekly-69-apr-27th-2015.html</guid><description>&lt;p>Welcome to the sixty-ninth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/69">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Ed Jones at Embecosm has written about his work to &lt;a href="http://www.embecosm.com/2015/04/21/flexible-runtime-testing-of-llvm-on-embedded-systems/">use the GCC regression suite on Clang&lt;/a> and documented how to run the LLVM test suites on an embedded target.&lt;/p>&lt;p>GCC 5.1 has now &lt;a href="http://article.gmane.org/gmane.comp.gcc.devel/139625">been released&lt;/a>. Congratulations to the GCC team. The versioning scheme is potentially confusing - 5.0 is the development version which saw a stable release as 5.1. The next minor releases will be 5.2, 5.3 etc and the next major release will be 6.1 (referred to as 6.0 during development).&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Sanjoy Das has posted an RFC on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84837">supporting implicit null checks&lt;/a> in LLVM. This is intended to support managed languages like Java, C#, or Go where a null check is required before using pointers.&lt;/p>&lt;/li>&lt;li>&lt;p>Alex L interned at Apple last year, and is interning again this summer. He's &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84778">posted to the list&lt;/a> about his project, which is to develop a text-based human readable format that allows LLVM to serialize the machine-level IR. The intention is to make debug and testing easier. He welcomes any feedback or suggestions.&lt;/p>&lt;/li>&lt;li>&lt;p>libunwind is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84895">moving&lt;/a> to its own repository. Hopefully a git mirror will go live soon.&lt;/p>&lt;/li>&lt;li>&lt;p>Roel Jordans gave a talk at EuroLLVM this year about his software pipelining pass. He has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84852">posted to the mailing list&lt;/a> to give a few more details and share his source code.&lt;/p>&lt;/li>&lt;li>&lt;p>Tom Stellard is looking to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84728">increase the number of code owners&lt;/a>, i.e. the set of people who review patches or approve merge requests to stable branches on a certain part of the code. His plan is to start nominating new code owners based on git history whenever he gets a new stable merge request for an unowned component.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Functions can now have metadata attachments. &lt;a href="http://reviews.llvm.org/rL235785">r235785&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The stack object allocation for Hexagon has been completely overhauled. &lt;a href="http://reviews.llvm.org/rL235521">r235521&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The vim support files have been updated. Changes include a new indentation plugin for .ll files. &lt;a href="http://reviews.llvm.org/rL235369">r235369&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-link learned the &lt;code>-override&lt;/code> option to override linkage rules. &lt;a href="http://reviews.llvm.org/rL235473">r235473&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>There is now textual IR support for an explicit type parameter to the invoke instruction (much like for the call instruction). &lt;a href="http://reviews.llvm.org/rL235755">r235755&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Documentation has been added for SanitizerCoverage (simple code coverage using the Sanitizer tools). &lt;a href="http://reviews.llvm.org/rL235643">r235643&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang's &lt;code>__attribute__((aligned))&lt;/code> can now set alignment to a target-specific value, rather than just assuming 16 bytes on all platforms. &lt;a href="http://reviews.llvm.org/rL235397">r235397&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>lld now understands &lt;code>--discard-locals&lt;/code>. &lt;a href="http://reviews.llvm.org/rL235357">r235357&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lldb's 'operation' and 'monitor' threads on Linux have been merged in to one. &lt;a href="http://reviews.llvm.org/rL235304">r235304&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>It's now possible to build compiler-rt for MIPS with gcc. &lt;a href="http://reviews.llvm.org/rL235299">r235299&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libunwind seems to have been moved into its own project. &lt;a href="http://reviews.llvm.org/rL235759">r235759&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #68, Apr 20th 2015</title><link>https://blog.llvm.org/2015/04/llvm-weekly-68-apr-20th-2015.html</link><pubDate>Tue, 21 Apr 2015 01:52:00 +0000</pubDate><guid>https://blog.llvm.org/2015/04/llvm-weekly-68-apr-20th-2015.html</guid><description>&lt;p>Welcome to the sixty-eighth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/68">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Last week was of course &lt;a href="http://llvm.org/devmtg/2015-04/">EuroLLVM&lt;/a>. It was good to put faces to names for a number of you, or to meet people I've only communicated with over twitter. Slides and videos should be forthcoming, but in the meantime you can read the &lt;a href="http://llvmweekly.org/issue/67">liveblog&lt;/a> I maintained for the talks I was able to attend. A big thank you to the organisers and all those who presented.&lt;/p>&lt;p>The highest profile news for some time in the LLVM community is that &lt;a href="http://blog.llvm.org/2015/04/llilc-llvm-based-compiler-for-dotnet.html">Microsoft are working on an LLVM-based compiler for .NET CoreCLR&lt;/a>. What's more, LLILC (pronounced 'lilac') is open source, and they hope to contribute their LLVM changes upstream.&lt;/p>&lt;p>The &lt;a href="http://www.cl.cam.ac.uk/~pes20/cerberus/">Cerberus team&lt;/a> are trying to find an answer to the question '&lt;a href="http://tinyurl.com/csurvey2">What is C in practice?&lt;/a>, and you can help by filling out their survey.&lt;/p>&lt;p>Honza Hubička has posted a fantastic overview of the &lt;a href="http://hubicka.blogspot.it/2015/04/GCC5-IPA-LTO-news.html">improvements to link-time and inter-procedural optimisations in GCC5&lt;/a>, featuring figures from Firefox builds. It seems like impressive improvements have been made.&lt;/p>&lt;p>Simon Cook has written a blog post about &lt;a href="http://www.embecosm.com/2015/04/14/utilizing-tablegen-for-non-compiling-processes/">using TableGen outside of LLVM&lt;/a>, specifically for things like parameterisable SSH configs. Crazy? Genius? Why not both?&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Duncan P. N. Exon Smith has proposed an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84555/">RFC for metadata attachments to function definitions&lt;/a>. There's some concern about the effect this would have on the size of Function.&lt;/p>&lt;/li>&lt;li>&lt;p>Ivan Baev is proposing an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84678">indirect call promotion LLVM pass&lt;/a>. This mailing list post gives design notes on the implementation and outlines the shortcomings of the current version of the patch.&lt;/p>&lt;/li>&lt;li>&lt;p>Tom Stellard queries the &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84553">difference between Latency and ResourceCycles in MISched&lt;/a>. Andy Trick gives a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84574">very handy answer&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Paul Robinson is seeking feedback on &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/42233">adding a 'debugger target'&lt;/a>, arguing that currently the target platform is used to infer the desired debugger (and thus make choices on e.g. accelerator tables), but of course the choice of debugger doesn't necessarily follow from the platform.&lt;/p>&lt;/li>&lt;li>&lt;p>Colin LeMahieu is looking to contribute an assembler for the Hexagon DSP, but has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84541">questions about how its funky grammar should be handled&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The &lt;code>dereferenceable_or_null&lt;/code> attribute has been born. As described in the commit message, the motivation is for managed languages such as Java. &lt;a href="http://reviews.llvm.org/rL235132">r235132&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new layer was added to the Orc JIT API for applying arbitrary transforms to IR. &lt;a href="http://reviews.llvm.org/rL234805">r234805&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Memory intrinsics can now be tail calls. &lt;a href="http://reviews.llvm.org/rL234764">r234764&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A handy Python script has been added for generating C programs that have a control flow graph which is a ladder graph. The intent is to use it to test whether an algorithm expected to be linear time on the CFG really is. &lt;a href="http://reviews.llvm.org/rL234917">r234917&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The code for lowering switches and extracting jump tables has been rewritten, and should produce better results now. &lt;a href="http://reviews.llvm.org/rL235101">r235101&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Call can now take an explicit type parameter. &lt;a href="http://reviews.llvm.org/rL235145">r235145&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang learned &lt;code>-Wrange-loop-analysis&lt;/code>, which will warn when a range-based for loop makes copies of elements in the range. &lt;a href="http://reviews.llvm.org/rL234804">r234804&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>preserve-bc-uselistorder&lt;/code> option is no longer true by default, but Clang will set it for &lt;code>-emit-llvm&lt;/code> or &lt;code>-save-temps&lt;/code>. &lt;a href="http://reviews.llvm.org/rL234920">r234920&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM has had a lot of changes to the debug API in the last week. This commit updates Clang for them. &lt;a href="http://reviews.llvm.org/rL235112">r235112&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Reducing the amount of template use in LLD has reduced the size of AArch64TargetHandler.cpp.o to 4.1MB, down from 21MB. &lt;a href="http://reviews.llvm.org/rL234808">r234808&lt;/a>, &lt;a href="http://reviews.llvm.org/rL234931">r234931&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A large patchset has landed in lldb which adds a big chunk of the work necessary for supporting lldb on ARM. &lt;a href="http://reviews.llvm.org/rL234870">r234870&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title/><link>https://blog.llvm.org/2015/04/llilc-llvm-based-compiler-for-dotnet.html</link><pubDate>Tue, 14 Apr 2015 07:03:00 +0000</pubDate><guid>https://blog.llvm.org/2015/04/llilc-llvm-based-compiler-for-dotnet.html</guid><description>&lt;h2 id="-llilc-https-github-com-dotnet-llilc-an-llvm-based-compiler-for-dotnet-coreclr-" style="-webkit-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1; box-sizing: border-box; color: #373d49; font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 1.95312rem; line-height: 3rem; margin-bottom: 0.18358rem; margin-top: 0px; padding-top: 0.81642rem;">&lt;span style="background-color: #f3f3f3;">&lt;a href="https://github.com/dotnet/llilc" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: 0px 0px; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #a0aabf; cursor: pointer;">LLILC&lt;/a>&amp;nbsp;: An LLVM based compiler for dotnet CoreCLR.&lt;/span>&lt;/h2>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">The LLILC project (we pronounce it "lilac") is a new effort started at Microsoft to produce MSIL code generators based on LLVM and targeting the open source dotnet&amp;nbsp;&lt;a href="https://github.com/dotnet/coreclr" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: 0px 0px; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #a0aabf; cursor: pointer;">CoreCLR&lt;/a>. We are envisioning using the LLVM infrastructure for a number of scenarios, but our first tool is a Just in Time (JIT) compiler for CoreCLR. This new project is being developed on GitHub and you can check it out&amp;nbsp;&lt;a href="https://github.com/dotnet/llilc" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: 0px 0px; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #a0aabf; cursor: pointer;">here&lt;/a>. The rest of this post outlines the rational and goals for the project as well as our experience using LLVM.&lt;/span>&lt;/div>&lt;h4 id="why-a-new-jit-for-coreclr-" style="-webkit-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1; box-sizing: border-box; color: #373d49; font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 1.5625rem; line-height: 28px; margin-bottom: 0.54686rem; margin-top: 0px; padding-top: 0.45314rem;">&lt;span style="background-color: #f3f3f3;">Why a new JIT for CoreCLR?&lt;/span>&lt;/h4>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">While the CoreCLR already has JIT, we saw an opportunity to provide a new code generator that has the potential to run across all the targets and platforms supported by LLVM. To enable this, as part of our project we're opening an MSIL reader that operates directly against the same common JIT interface as the production JIT (RyuJIT). This new JIT will allow any C# program written for the .NET Core class libraries to run on any platform that CoreCLR can be ported to and that LLVM will target.&lt;/span>&lt;/div>&lt;h4 id="there-are-several-ongoing-efforts-to-compile-msil-in-the-llvm-community-sharplang-springs-to-mind-why-build-another-one-" style="-webkit-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1; box-sizing: border-box; color: #373d49; font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 1.5625rem; line-height: 28px; margin-bottom: 0.54686rem; margin-top: 0px; padding-top: 0.45314rem;">&lt;span style="background-color: #f3f3f3;">There are several ongoing efforts to compile MSIL in the LLVM community, SharpLang springs to mind. Why build another one?&lt;/span>&lt;/h4>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">When we started thinking about the fastest way to get a LLVM based code generation working we looked around at the current open source projects as well as the code we had internally. While a number of the OSS projects already targeted LLVM BitCode, no one had anything that was a close match for the CoreCLR interface. Looking at our options it was simplest for us to refactor a working MSIL reader to target BitCode then teach a existing project to support the contracts and APIs the CoreCLR uses for JITing MSIL. Using a existing MSIL reader let us quickly start using a number of building-block components that we think the community can take advantage of. This fast bootstrap for C# across multiple platforms was the idea that was the genesis of this project and the compelling reason to start a new effort. We hope LLILC will provide a useful example - and reusable components - for the community and make it easier for other projects to interoperate with the CoreCLR runtime.&lt;/span>&lt;/div>&lt;h4 id="why-llvm-" style="-webkit-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1; box-sizing: border-box; color: #373d49; font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 1.5625rem; line-height: 28px; margin-bottom: 0.54686rem; margin-top: 0px; padding-top: 0.45314rem;">&lt;span style="background-color: #f3f3f3;">Why LLVM?&lt;/span>&lt;/h4>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">Basically we think LLVM is awesome. It's already got great support across many platforms and chipsets and the community is amazingly active. When we started getting involved, just trying to stay current with the developer mailing list was a revelation! The ability for LLVM to operate as both a JIT and as an AOT compiler was especially attractive. By bringing MSIL semantics to LLVM we plan to construct a number of tools that can work against CoreCLR or some sub set of its components. We also hope the community will produce tools what we haven't thought of yet.&lt;/span>&lt;/div>&lt;h4 id="tool-roadmap" style="-webkit-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1; box-sizing: border-box; color: #373d49; font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 1.5625rem; line-height: 28px; margin-bottom: 0.54686rem; margin-top: 0px; padding-top: 0.45314rem;">&lt;span style="background-color: #f3f3f3;">Tool roadmap&lt;/span>&lt;/h4>&lt;ul style="box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 0.83999rem; padding-top: 0.16001rem;">&lt;li style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; margin-left: 1rem;">&lt;span style="background-color: #f3f3f3;">CoreCLR JIT&lt;/span>&lt;ul style="box-sizing: border-box; margin-bottom: 0px; padding-top: 0.16001rem;">&lt;li style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; margin-left: 1rem;">&lt;span style="background-color: #f3f3f3;">Just In Time - A classic JIT. This is expected to be throughput-challenged but will be correct and usable for bringup. Also possible to use with more optimization enabled as a higher tier JIT&lt;/span>&lt;/li>&lt;li style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; margin-left: 1rem;">&lt;span style="background-color: #f3f3f3;">Install-time JIT - What .NET calls NGen. This will be suitable for install-time JITing (LLVM is still slow in a runtime configuration)&lt;/span>&lt;/li>&lt;/ul>&lt;/li>&lt;li style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; margin-left: 1rem;">&lt;span style="background-color: #f3f3f3;">Ahead of Time compiler. A build lab compiler that produces standalone executables, using some shared components from CoreCLR. The AOT compiler will be used to improve startup time for important command line applications like the&amp;nbsp;&lt;a href="https://github.com/dotnet/roslyn" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: 0px 0px; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #a0aabf; cursor: pointer;">Roslyn Compiler&lt;/a>.&lt;/span>&lt;/li>&lt;/ul>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">The LLIC JIT will be a functionally correct and complete JIT for the CoreCLR runtime. It may not have sufficient throughput to be a first-tier jit, but is expected to produce high-quality code and so might make a very interesting second-tier or later JIT, or a good vehicle for prototyping codegen changes to feed back into RyuJIT.&lt;/span>&lt;/div>&lt;h2 id="what-s-actually-working" style="-webkit-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1; box-sizing: border-box; color: #373d49; font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 1.95312rem; line-height: 3rem; margin-bottom: 0.18358rem; margin-top: 0px; padding-top: 0.81642rem;">&lt;span style="background-color: #f3f3f3;">What's Actually Working&lt;/span>&lt;/h2>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">Today on Windows we have the MSIL reader &amp;amp; LLVM JIT implemented well enough to compile a significant number of methods in the JIT bring up tests included in CoreCLR. In these tests we compile about 90% the methods and then fall back to RyuJIT for cases we can't handle yet. The testing experience is pretty decent for developers. The tests we run can be seen in the CoreCLR&amp;nbsp;&lt;a href="https://github.com/dotnet/coreclr/tree/master/tests/src/JIT/CodeGenBringUpTests" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: 0px 0px; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #a0aabf; cursor: pointer;">test repo&lt;/a>.&lt;/span>&lt;/div>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">We've establish builds on Linux and Mac OSX and are pulling together mscorlib, the base .NET Core library from&amp;nbsp;&lt;a href="https://github.com/dotnet/corefx" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: 0px 0px; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #a0aabf; cursor: pointer;">CoreFx&lt;/a>, and test asset dependencies to get testing off-the-ground for those platforms.&lt;/span>&lt;/div>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">All tests run against the CoreCLR GC in conservative mode - which scans the frame for roots - rather than precise mode. We don't yet support Exception Handling.&lt;/span>&lt;/div>&lt;h2 id="architecture" style="-webkit-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1; box-sizing: border-box; color: #373d49; font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 1.95312rem; line-height: 3rem; margin-bottom: 0.18358rem; margin-top: 0px; padding-top: 0.81642rem;">&lt;span style="background-color: #f3f3f3;">Architecture&lt;/span>&lt;/h2>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">Philosophically LLILC is intended to provide a lean interface between CoreCLR and LLVM. Where possible we rely on preexisting technology.&lt;/span>&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="http://2.bp.blogspot.com/-5_tqqSVjMf4/VS0cQEhSHrI/AAAAAAAAAE0/kOOiDM4_XAs/s1600/JITArch.png" imageanchor="1" style="background-color: #f3f3f3; margin-left: 1em; margin-right: 1em;">&lt;img border="0" src="http://2.bp.blogspot.com/-5_tqqSVjMf4/VS0cQEhSHrI/AAAAAAAAAE0/kOOiDM4_XAs/s1600/JITArch.png" height="255" width="320" />&lt;/a>&lt;/div>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">&lt;br />&lt;/span>&lt;/div>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">For the JIT, when we are compiling on demand, we map the runtime types and MSIL into LLVM BitCode. From there compilation uses LLVM MCJIT infrastructure to produce compiled code that is output to buffers provided by CoreCLR.&lt;/span>&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="http://1.bp.blogspot.com/-NUl_WpPgYL8/VS0cWHeLVlI/AAAAAAAAAE8/0zJmQGulwc8/s1600/AOTArch.png" imageanchor="1" style="background-color: #f3f3f3; margin-left: 1em; margin-right: 1em;">&lt;img border="0" src="http://1.bp.blogspot.com/-NUl_WpPgYL8/VS0cWHeLVlI/AAAAAAAAAE8/0zJmQGulwc8/s1600/AOTArch.png" height="282" width="320" />&lt;/a>&lt;/div>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">&lt;br />&lt;/span>&lt;/div>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">Our AOT diagram is more tentative but the basic outline is that the code generator is driven using the same interface and the JIT but that there is a static type system behind it and we build up a whole program module with in LLVM and run in a LTO like mode. Required runtime components are emitted with the output objs and the platform linker then produces the target executable. There are still a number of open questions around issues like generics that need resolution but this is our first stake in the ground.&lt;/span>&lt;/div>&lt;h2 id="experience-with-llvm" style="-webkit-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1; box-sizing: border-box; color: #373d49; font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 1.95312rem; line-height: 3rem; margin-bottom: 0.18358rem; margin-top: 0px; padding-top: 0.81642rem;">&lt;span style="background-color: #f3f3f3;">Experience with LLVM&lt;/span>&lt;/h2>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">In the few months we've been using LLVM, we've had a really good experience but with a few caveats. Getting started with translating to BitCode has been a very straightforward experience and ramp-up time for someone with compiler experience has been very quick. The MCJIT, which we started with for our JIT, was easy to configure and get code compiled and returned to the runtime. Outside of the COFF issue discussed below, we only had to make adjustments in configuration or straightforward overrides of classes, like EEMemoryManager, to enable working code. Of the caveats, the first was simple, but the other two are going to require sustained work to bring up to the level we'd like. The first issue was a problem with Windows support in the DynamicRuntime of the MCJIT infrastructure. The last two, Precise Garbage Collection, and Exception Handling, arise because of the different semantics of managed languages. Luckily for us, people in the community have already started working in these areas so we don't have to start from zero.&lt;/span>&lt;/div>&lt;h4 id="coff-dynamic-loader-support" style="-webkit-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1; box-sizing: border-box; color: #373d49; font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 1.5625rem; line-height: 28px; margin-bottom: 0.54686rem; margin-top: 0px; padding-top: 0.45314rem;">&lt;span style="background-color: #f3f3f3;">COFF dynamic loader support&lt;/span>&lt;/h4>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">One of the additions we made to LLVM to unblock ourselves was to implement a COFF dynamic loader. (The patch to add RuntimeDyldCoff.{h,cpp} is through review and has been committed). This was the only addition we directly had to make to LLVM to enable bring-up of the code generator. Once this is in, we see a number of bugs in the database around Windows JIT support that should be easier to close.&lt;/span>&lt;/div>&lt;h4 id="precise-garbage-collection" style="-webkit-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1; box-sizing: border-box; color: #373d49; font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 1.5625rem; line-height: 28px; margin-bottom: 0.54686rem; margin-top: 0px; padding-top: 0.45314rem;">&lt;span style="background-color: #f3f3f3;">Precise Garbage Collection&lt;/span>&lt;/h4>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">Precise GC is central to the CoreCLR approach to memory management. Its intent is to keep the overhead of managed memory as low as possible. It is assumed by the runtime that the JIT will generate precise information about the GC ref lifetimes and provide it with the compiled code for execution. To support this we're beginning to use the&amp;nbsp;&lt;a href="http://llvm.org/docs/Statepoints.html" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: 0px 0px; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #a0aabf; cursor: pointer;">StatePoint&lt;/a>&amp;nbsp;approach, with additions to convert the standard output format to the custom format expected by CoreCLR. We share some of the same concerns that Philip Reames wrote about in the initial design of StatePoints. E.g. preservation of "GCness" through the optimizer is critical, but must not block optimizer transformations. Given this concern one of our open questions is how to enable testing to find GC holes that creep in, but also enable extra checking that can be opted into if the incoming IR contains GC pointers.&lt;/span>&lt;/div>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">There is a more detailed document included in our repo that outlines our more-specific GC plans&amp;nbsp;&lt;a href="https://github.com/dotnet/llilc/blob/master/Documentation/llilc-gc.md" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: 0px 0px; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #a0aabf; cursor: pointer;">here&lt;/a>.&lt;/span>&lt;/div>&lt;h4 id="exception-handling" style="-webkit-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1; box-sizing: border-box; color: #373d49; font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 1.5625rem; line-height: 28px; margin-bottom: 0.54686rem; margin-top: 0px; padding-top: 0.45314rem;">&lt;span style="background-color: #f3f3f3;">Exception Handling&lt;/span>&lt;/h4>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">The MSIL EH model is specific to the CLR as you'd expect, but it descends in part conceptually from Windows Structured Exception Handling (SEH). In particular, the implicit exception flow from memory accesses to implement null checks, and the use of filters and funclets in the handling of exceptions, mirrors SEH (&lt;a href="https://msdn.microsoft.com/en-us/library/ms173162.aspx" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: 0px 0px; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #a0aabf; cursor: pointer;">here&lt;/a>. is an outline of C# EH) Our plans at this point are to add all checks required by MSIL as explicit compare/branch/throw sequences to better match C++ EH as well as building on the SEH support currently being put into Clang. Then, once we have correctness, see if there is a reasonable way forward that improves performance.&lt;/span>&lt;/div>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;span style="background-color: #f3f3f3;">Like GC, there's a detailed doc outlining our specific issues and plans in the repo&amp;nbsp;&lt;a href="https://github.com/dotnet/llilc/blob/master/Documentation/llilc-jit-eh.md" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: 0px 0px; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #a0aabf; cursor: pointer;">here&lt;/a>&lt;/span>&lt;/div>&lt;h2 id="future-work" style="-webkit-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1; box-sizing: border-box; color: #373d49; font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 1.95312rem; line-height: 3rem; margin-bottom: 0.18358rem; margin-top: 0px; padding-top: 0.81642rem;">&lt;span style="background-color: #f3f3f3;">Future Work&lt;/span>&lt;/h2>&lt;ul style="box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 0.83999rem; padding-top: 0.16001rem;">&lt;li style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; margin-left: 1rem;">&lt;span style="background-color: #f3f3f3;">More platforms. Today we're running on Windows and starting to build for Linux and Mac OSX. We'd like more.&lt;/span>&lt;/li>&lt;li style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; margin-left: 1rem;">&lt;span style="background-color: #f3f3f3;">Complete JIT implementation&lt;/span>&lt;ul style="box-sizing: border-box; margin-bottom: 0px; padding-top: 0.16001rem;">&lt;li style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; margin-left: 1rem;">&lt;span style="background-color: #f3f3f3;">More MSIL opcodes supported&lt;/span>&lt;/li>&lt;li style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; margin-left: 1rem;">&lt;span style="background-color: #f3f3f3;">Precise GC support&lt;/span>&lt;/li>&lt;li style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; margin-left: 1rem;">&lt;span style="background-color: #f3f3f3;">EH support&lt;/span>&lt;/li>&lt;/ul>&lt;/li>&lt;li style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; margin-left: 1rem;">&lt;span style="background-color: #f3f3f3;">Specialized memory allocators for hosted solutions. CoreCLR has been used as a hosted solution (run in process by other programs) but to support this we need a better memory allocation story. The runtime should be able to provide a memory allocator that is used for all compilation.&lt;/span>&lt;/li>&lt;li style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; margin-left: 1rem;">&lt;span style="background-color: #f3f3f3;">AOT - Fully flesh out the AOT story.&lt;/span>&lt;/li>&lt;/ul>&lt;h4 id="links" style="-webkit-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1; box-sizing: border-box; color: #373d49; font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 1.5625rem; line-height: 28px; margin-bottom: 0.54686rem; margin-top: 0px; padding-top: 0.45314rem;">&lt;span style="background-color: #f3f3f3;">Links&lt;/span>&lt;/h4>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;a href="https://github.com/dotnet/llilc" style="background-attachment: initial; background-clip: initial; background-color: #f3f3f3; background-image: initial; background-origin: initial; background-position: 0px 0px; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #a0aabf; cursor: pointer;">LLILC&lt;/a>&lt;/div>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;a href="https://github.com/dotnet/coreclr" style="background-attachment: initial; background-clip: initial; background-color: #f3f3f3; background-image: initial; background-origin: initial; background-position: 0px 0px; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #a0aabf; cursor: pointer;">CoreCLR&lt;/a>&lt;/div>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;a href="https://github.com/dotnet/corefx" style="background-attachment: initial; background-clip: initial; background-color: #f3f3f3; background-image: initial; background-origin: initial; background-position: 0px 0px; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #a0aabf; cursor: pointer;">CoreFx&lt;/a>&lt;/div>&lt;div style="-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1; box-sizing: border-box; color: #373d49; font-family: Georgia, Cambria, serif; font-size: 14px; line-height: 28px; margin-bottom: 1.33999rem; padding-top: 0.66001rem;">&lt;a href="http://www.dotnetfoundation.org/" style="background-attachment: initial; background-clip: initial; background-color: #f3f3f3; background-image: initial; background-origin: initial; background-position: 0px 0px; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #a0aabf; cursor: pointer;">.NET Foundation&lt;/a>&lt;/div></description></item><item><title>LLVM Weekly - #67, Apr 13th 2015</title><link>https://blog.llvm.org/2015/04/llvm-weekly-67-apr-13th-2015.html</link><pubDate>Mon, 13 Apr 2015 05:25:00 +0000</pubDate><guid>https://blog.llvm.org/2015/04/llvm-weekly-67-apr-13th-2015.html</guid><description>&lt;p>Welcome to the sixty-seventh issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>&lt;a href="http://llvm.org/devmtg/2015-04/">EuroLLVM&lt;/a> is going on today and tomorrow in London. I hope to see a number of you there. Provided there's a reasonable internet connection, I hope to be live-blogging the event on the &lt;a href="http://llvmweekly.org/issue/67">llvmweekly.org version of this issue&lt;/a>.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/67">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>A new post on the LLVM Blog deatils &lt;a href="http://blog.llvm.org/2015/04/fuzz-all-clangs.html">how to use LLVM's libFuzzer for guided fuzzing of libraries&lt;/a>.&lt;/p>&lt;p>The Red Hat developer blog has an &lt;a href="http://developerblog.redhat.com/2015/04/07/jit-compilation-using-gcc-5-2/">article about libgccjit&lt;/a>, a new feature in GCC5, which may be of interest.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Rui Ueyama proposes &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84425">removing the 'native' file format from LLD&lt;/a>. The hope was the native file format could be shared between LLD and LLVM and provide higher performance than standard ELF. In the end, it didn't see much development so it's being deleted for now.&lt;/p>&lt;/li>&lt;li>&lt;p>Hal Finkel has some &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84460">questions for compiler developers on optimisations of atomics&lt;/a>. Answers will be fed back to the OpenMP standards committee, who are working to formalize their memory model and define its relationship to the C/C++ memory models.&lt;/p>&lt;/li>&lt;li>&lt;p>The document about a proposed OpenMP offload infrastructure &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84375">has been updated&lt;/a>. Comments and feedback are very welcome.&lt;/p>&lt;/li>&lt;li>&lt;p>Tom Stellard would like to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84363">remind you&lt;/a> that bug fixes for the upcoming 3.6.1 release must be merged by the 4th of May.&lt;/p>&lt;/li>&lt;li>&lt;p>Sanjoy Das is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84298">seeking some clarification on the semantics of shl nsw in the LLVM language reference&lt;/a>. It seems that Sanjoy and David Majnemer are reaching an agreement in the thread, but they welcome differing viewpoints.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The R600 backend gained an experimental integrated assembler. &lt;a href="http://reviews.llvm.org/rL234381">r234381&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The libFuzzer documentation has been extended to demonstrate how the Heartbleed vulnerability could have been found using it. &lt;a href="http://reviews.llvm.org/rL234391">r234391&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The preserve-use-list-order flags are now on by default. &lt;a href="http://reviews.llvm.org/rL234510">r234510&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM gained a pass to estimate when branches in a GPU program can diverge. &lt;a href="http://reviews.llvm.org/rL234567">r234567&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The ARM backend learnt to recognise the Cortex-R4 processor. &lt;a href="http://reviews.llvm.org/rL234486">r234486&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Lifetime markers for named temporaries are now always inserted. &lt;a href="http://reviews.llvm.org/rL234581">r234581&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The quality of error messages for assignments to read-only variables has been enhanced. &lt;a href="http://reviews.llvm.org/rL234677">r234677&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>clang-format's nested block formatting got a little better. &lt;a href="http://reviews.llvm.org/rL234304">r234304&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Support for the 'native' file format was removed from lld. &lt;a href="http://reviews.llvm.org/rL234641">r234641&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Remote debugging, the remote test suite, and the process to cross-compile lldb has been documented. &lt;a href="http://reviews.llvm.org/rL234317">r234317&lt;/a>, &lt;a href="http://reviews.llvm.org/rL234395">r234395&lt;/a>, &lt;a href="http://reviews.llvm.org/rL234489">r234489&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB gained initial runtime support for RenderScript. &lt;a href="http://reviews.llvm.org/rL234503">r234503&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>Simple guided fuzzing for libraries using LLVM's new libFuzzer</title><link>https://blog.llvm.org/2015/04/fuzz-all-clangs.html</link><pubDate>Thu, 09 Apr 2015 13:40:00 +0000</pubDate><guid>https://blog.llvm.org/2015/04/fuzz-all-clangs.html</guid><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;br />&lt;/div>&lt;span style="color: black; font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">Fuzzing (or &lt;a href="http://en.wikipedia.org/wiki/Fuzz_testing">fuzz testing&lt;/a>&lt;/span>&lt;span style="color: black; font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">) is becoming increasingly popular. Fuzzing Clang and fuzzing &lt;/span>&lt;span style="color: black; font-family: Arial; font-size: 15px; font-style: italic; vertical-align: baseline; white-space: pre-wrap;">with&lt;/span>&lt;span style="color: black; font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> Clang is not new: Clang-based &lt;a href="http://clang.llvm.org/docs/AddressSanitizer.html">AddressSanitizer&lt;/a>&lt;/span>&lt;span style="color: black; font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> has been used for fuzz-testing the Chrome browser for &lt;a href="http://blog.chromium.org/2012/04/fuzzing-for-security.html">several years&lt;/a>&lt;/span>&lt;span style="color: black; font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> and Clang itself has been extensively fuzzed using &lt;a href="https://embed.cs.utah.edu/csmith/">csmith&lt;/a> &lt;/span>&lt;span style="color: black; font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">and, more recently, using &lt;a href="http://lcamtuf.coredump.cx/afl/">AFL&lt;/a>.&lt;/span>&lt;span style="color: black; font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> Now we’ve closed the loop and started to fuzz parts of LLVM (including Clang) using LLVM itself.&lt;/span>&lt;br />&lt;br />&lt;span style="color: black; font-family: Arial; font-size: 15px; line-height: 1.38; vertical-align: baseline; white-space: pre-wrap;">&lt;a href="http://llvm.org/docs/LibFuzzer.html">LibFuzzer&lt;/a>&lt;/span>&lt;span style="color: black; font-family: Arial; font-size: 15px; line-height: 1.38; vertical-align: baseline; white-space: pre-wrap;">, recently added to the LLVM tree, is a library for in-process fuzzing that uses &lt;a href="https://code.google.com/p/address-sanitizer/wiki/AsanCoverage">Sanitizer Coverage instrumentation&lt;/a>&lt;/span>&lt;span style="color: black; font-family: Arial; font-size: 15px; line-height: 1.38; vertical-align: baseline; white-space: pre-wrap;"> to guide test generation. &lt;/span>&lt;span style="font-family: Arial; font-size: 15px; line-height: 1.38; vertical-align: baseline; white-space: pre-wrap;">With LibFuzzer one can implement a guided fuzzer for some library by writing one simple function:&amp;nbsp;&lt;/span>&lt;br />&lt;div dir="ltr" style="margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: Courier New, Courier, monospace;">extern "C" void TestOneInput(const uint8_t *Data, size_t Size);&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">We have implemented two fuzzers on top of LibFuzzer: &lt;a href="http://llvm.org/viewvc/llvm-project/cfe/trunk/tools/clang-format/fuzzer/ClangFormatFuzzer.cpp?view=markup">clang-format-fuzzer&lt;/a>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> and &lt;a href="http://llvm.org/viewvc/llvm-project/cfe/trunk/tools/clang-fuzzer/ClangFuzzer.cpp?view=markup">clang-fuzzer&lt;/a>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">. &lt;/span>&lt;span style="color: black; font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">Clang-format is mostly a lexical analyzer, so giving it random bytes to format worked perfectly and discovered &lt;a href="https://llvm.org/bugs/show_bug.cgi?id=23052">over 20 bugs&lt;/a>&lt;/span>&lt;span style="color: black; font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">. Clang however is more than just a lexer and giving it random bytes barely scratches the surface, so in addition to testing with random bytes we also fuzzed Clang in &lt;a href="http://llvm.org/docs/LibFuzzer.html#tokens">token-aware mode&lt;/a>&lt;/span>&lt;span style="color: black; font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">.&amp;nbsp;Both modes found &lt;a href="https://llvm.org/bugs/show_bug.cgi?id=23057">bugs&lt;/a>&lt;/span>&lt;span style="color: black; font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">; some of them were previously &lt;a href="http://lists.cs.uiuc.edu/pipermail/cfe-dev/2015-January/040705.html">detected &lt;/a>&lt;/span>&lt;span style="color: black; font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;a href="http://lists.cs.uiuc.edu/pipermail/cfe-dev/2015-January/040705.html">by AFL&lt;/a>, some others were not: we’ve run this fuzzer with AddressSanitizer and some of the bugs are not easily discoverable without it.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Just to give you the feeling, here are some of the input samples discovered by the token-aware clang-fuzzer starting from an empty test corpus: &lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: 'Courier New'; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;static void g(){}&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: 'Courier New'; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;signed*Qwchar_t;&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: 'Courier New'; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;overridedouble++!=~;inline-=}y=^bitand{;*=or;goto*&amp;amp;&amp;amp;k}==n&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: 'Courier New'; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;int XS/=~char16_t&amp;amp;s&amp;lt;=const_cast&amp;lt;Xchar*&amp;gt;(thread_local3+=char32_t &lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Fuzzing is not a one-off thing -- it shines when used continuously. We have set up a &lt;a href="http://lab.llvm.org:8011/builders/sanitizer-x86_64-linux-fuzzer">public build bot&lt;/a>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> that runs clang-fuzzer and clang-format-fuzzer 24/7. This way, the fuzzers keep improving the test corpus and will periodically find old bugs or fresh regressions (the bot has &lt;a href="http://reviews.llvm.org/D7871">caught&lt;/a> at least one such regression already&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">). &lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">The benefit of in-process fuzzing compared to out-of-process is that you can test more inputs per second. This is also a weakness: you can not effectively limit the execution time for every input. If some of the inputs trigger superlinear behavior, it may slow down or paralyze the fuzzing. Our fuzzing bot was nearly dead after it discovered &lt;a href="https://llvm.org/bugs/show_bug.cgi?id=23052#c3">exponential parsing time in clang-format&lt;/a>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">. You can workaround the problem by setting a timeout for the fuzzer, but it’s always better to fix superlinear behavior.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">It would be interesting to fuzz other parts of LLVM, but a requirement for in-process fuzzing is that the library does not crash on invalid inputs. This holds for clang and clang-format, but not for, e.g., the LLVM bitcode reader. &lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Help is more than welcome! You can start by fixing one of the existing bugs in clang or clang-format (see &lt;a href="https://llvm.org/bugs/show_bug.cgi?id=23057">PR23057&lt;/a>, &lt;a href="https://llvm.org/bugs/show_bug.cgi?id=23052">PR23052&lt;/a> and the &lt;a href="http://sli.dy.fi/~sliedes/clang-triage/triage_report.xhtml">results from AFL&lt;/a>)&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> or write your own fuzzer for some other part of LLVM or profile one of the existing fuzzers and try to make it faster by fixing performance bugs. &lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Of course, LibFuzzer can be used to test things outside of the LLVM project. As an example, and following &lt;a href="https://blog.hboeck.de/archives/868-How-Heartbleed-couldve-been-found.html">Hanno Böck’s blog post&lt;/a>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> on &lt;a href="http://en.wikipedia.org/wiki/Heartbleed">Heartbleed&lt;/a>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">, we’ve applied LibFuzzer to &lt;a href="https://www.openssl.org/">openssl&lt;/a> &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">and found Heartbleed in &lt;a href="http://llvm.org/docs/LibFuzzer.html#heartbleed">less than a minute&lt;/a>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">. Also, quite a few new bugs have been discovered in &lt;a href="http://www.pcre.org/">PCRE2&lt;/a>&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> (&lt;a href="http://www.exim.org/viewvc/pcre2/code/trunk/ChangeLog?r1=228&amp;amp;r2=227&amp;amp;pathrev=228">1&lt;/a>, &lt;a href="http://www.exim.org/viewvc/pcre2/code/trunk/ChangeLog?r1=231&amp;amp;r2=230&amp;amp;pathrev=231">2&lt;/a>, &lt;a href="http://www.exim.org/viewvc/pcre2?view=revision&amp;amp;revision=232">3&lt;/a>, &lt;a href="http://www.exim.org/viewvc/pcre2/code/trunk/ChangeLog?r1=233&amp;amp;r2=232&amp;amp;pathrev=233">4&lt;/a>, &lt;a href="http://www.exim.org/viewvc/pcre2/code/trunk/ChangeLog?r1=234&amp;amp;r2=233&amp;amp;pathrev=234">5&lt;/a>, &lt;a href="http://www.exim.org/viewvc/pcre2/code/trunk/ChangeLog?r1=235&amp;amp;r2=234&amp;amp;pathrev=235">6&lt;/a>, &lt;a href="http://www.exim.org/viewvc/pcre2/code/trunk/ChangeLog?r1=236&amp;amp;r2=235&amp;amp;pathrev=236">7&lt;/a>, &lt;a href="http://www.exim.org/viewvc/pcre2/code/trunk/ChangeLog?r1=237&amp;amp;r2=236&amp;amp;pathrev=237">8&lt;/a>, &lt;a href="http://www.exim.org/viewvc/pcre2/code/trunk/ChangeLog?r1=238&amp;amp;r2=237&amp;amp;pathrev=238">9&lt;/a>, &lt;a href="http://www.exim.org/viewvc/pcre2/code/trunk/ChangeLog?r1=241&amp;amp;r2=240&amp;amp;pathrev=241">10&lt;/a>, &lt;a href="http://www.exim.org/viewvc/pcre2/code/trunk/ChangeLog?r1=244&amp;amp;r2=243&amp;amp;pathrev=244">11&lt;/a>), &lt;a href="https://sourceware.org/glibc/wiki/FuzzingLibc">Glibc&lt;/a> &lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">and &lt;a href="http://musl-libc.org/">MUSL libc&lt;/a> (&lt;a href="http://git.musl-libc.org/cgit/musl/patch/?id=39dfd58417ef642307d90306e1c7e50aaec5a35c">1&lt;/a>, &lt;a href="http://git.musl-libc.org/cgit/musl/patch/?id=fc13acc3dcb5b1f215c007f583a63551f6a71363">2&lt;/a>)&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> .&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Fuzz testing, especially coverage-directed and sanitizer-aided fuzz testing, should directly compliment unit testing, integration testing, and system functional testing. We encourage everyone to start actively fuzz testing their interfaces, especially those with even a small chance of being subject to attacker-controlled inputs. We hope the LLVM fuzzing library helps you start leveraging our tools to better test your code, and let us know about any truly exciting bugs they help you find!&lt;/span>&lt;/div>&lt;/div></description></item><item><title>LLVM Weekly - #66, Apr 6th 2015</title><link>https://blog.llvm.org/2015/04/llvm-weekly-66-apr-6th-2015.html</link><pubDate>Mon, 06 Apr 2015 02:57:00 +0000</pubDate><guid>https://blog.llvm.org/2015/04/llvm-weekly-66-apr-6th-2015.html</guid><description>&lt;p>Welcome to the sixty-sixth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/66">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>&lt;code>color_coded&lt;/code>, a vim plugin for syntax highlighting using libclang is &lt;a href="https://github.com/jeaye/color_coded">now available&lt;/a>.&lt;/p>&lt;p>Ravi, a dialect of Lua with JIT compilation via LLVM has &lt;a href="https://github.com/dibyendumajumdar/ravi/releases">has its first alpha release&lt;/a>. The status of JIT compilation can be seen &lt;a href="http://the-ravi-programming-language.readthedocs.org/en/latest/ravi-jit-status.html">here&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>James Knight is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84258">asking for advice on supporting 64-bit load/store on a 32-bit arch&lt;/a>. Respondents point to examples from ARM and R600.&lt;/p>&lt;/li>&lt;li>&lt;p>Eric Christopher has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84144">kicked off another discussion on LTO and codegen options&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Katya Romanova &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/41911">proposes adding doxygen comments for intrinsics&lt;/a>. The intention is that the current documentation would be converted in an automated way. So far, people seem to be in favour.&lt;/p>&lt;/li>&lt;li>&lt;p>Douglas Gregor is &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/42046">stepping down as code owner of 'all parts of Clang not covered by someone else'&lt;/a>. Richard Smith will be taking over. Thank you Douglas for the years of hard work.&lt;/p>&lt;/li>&lt;li>&lt;p>Can you &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84251">cross-compile LLVM's test suite?&lt;/a>. The answer, is yes.&lt;/p>&lt;/li>&lt;li>&lt;p>Duncan P.N. Exon Smith proposes that &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84196">preserve-bc-use-list-order&lt;/a> be on by default.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>API migration has started for GEP constant factories. For now, nullptr can be passed for the pointee type, but you'll need to pass the type explicitly to be future-proof. &lt;a href="http://reviews.llvm.org/rL233938">r233938&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A proof of concept fuzzer based on DataFlowSanitizer has been added, as well as support for token-based fuzzing. &lt;a href="http://reviews.llvm.org/rL233613">r233613&lt;/a>, &lt;a href="http://reviews.llvm.org/rL233745">r233745&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>DebugLoc's API has been rewritten. &lt;a href="http://reviews.llvm.org/rL233573">r233573&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The SystemZ backend now supports transactional execution on the zEC12. &lt;a href="http://reviews.llvm.org/rL233803">r233803&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang gained a toolchain driver for targeting NaCl. &lt;a href="http://reviews.llvm.org/rL233594">r233594&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The size of various Stmt subclasses has been optimised on 64-bit targets. &lt;a href="http://reviews.llvm.org/rL233921">r233921&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Codegen was added for the OpenMP atomic update construct. &lt;a href="http://reviews.llvm.org/rL233513">r233513&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>LLDB system initialization has been reworked. &lt;a href="http://reviews.llvm.org/rL233758">r233758&lt;/a>.&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #65, Mar 30th 2015</title><link>https://blog.llvm.org/2015/03/llvm-weekly-65-mar-30th-2015.html</link><pubDate>Mon, 30 Mar 2015 02:49:00 +0000</pubDate><guid>https://blog.llvm.org/2015/03/llvm-weekly-65-mar-30th-2015.html</guid><description>&lt;p>Welcome to the sixty-fifth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/65">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The Z3 theorem prover from Microsoft Research is &lt;a href="https://github.com/Z3Prover/z3/">now on Github&lt;/a>, and more importantly now &lt;a href="https://github.com/Z3Prover/z3/commit/40269c8511ca343bc6848cae8c4f2d0f0455b949">released under the MIT license&lt;/a>. This is a true open source license allowing commercial use, unlike the previous non-commercial use only license. It's been used with LLVM in the &lt;a href="http://blog.regehr.org/archives/1170">ALIVe project&lt;/a>.&lt;/p>&lt;p>The &lt;a href="http://llvm.org/devmtg/2015-04/">schedule&lt;/a> for EuroLLVM has been published. There are still a number of &lt;a href="http://www.eventbrite.com/e/eurollvm-2015-tickets-15350278095">early registration tickets left&lt;/a>. If you can be in London on 13th and 14th of April then I'd highly recommend registering.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Tom Stellard, maintainer of the R600 backend has a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84045">question about manipulating the machine scheduler to intermix ALU instruction with loads&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Sanjoy Das is seeking feedback on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84037">an optimisation issue he's seeing due to &lt;code>llvm.$op.with.overflow&lt;/code> intrinsics&lt;/a>. There is some followup discussion on how this should be dealt with.&lt;/p>&lt;/li>&lt;li>&lt;p>Martin O'Riordan from Movidius &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84069">asks for guidance on submitting contributing changes back upstream&lt;/a>. Tom Stellard has a &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/41976">useful response&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Dylan McKay is working on an AVR backend port and is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/84057">seeking advice on lowering division calls&lt;/a>. The current version of his backend is &lt;a href="https://github.com/avr-llvm/llvm">here&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Benoit Belley writes in with &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/83985">an optimisation puzzle&lt;/a>, looking for an explanation for why an icmp isn't removed. Daniel Berlin responds just a couple of hours later with &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/83985">an explanation of the missed optimisation&lt;/a> as well as a path to fix it.&lt;/p>&lt;/li>&lt;li>&lt;p>Gordon Kaiser is looking for &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/83979">anyone interested in a backend for the Fujitsu FR-series processors&lt;/a>, now manufactured by Spansion.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The GlobalMerge pass will no longer run at O1 on AArch64+ARM, and instead will only be enabled at O3. &lt;a href="http://reviews.llvm.org/rL233024">r233024&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A float2int pass was added which, as the name suggests, attempts to demote from float to int where possible. &lt;a href="http://reviews.llvm.org/rL233062">r233062&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A simple Orc-based lazy JIT has been added to lli. &lt;a href="http://reviews.llvm.org/rL233182">r233182&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM gained support for PowerPC hardware transactional memory. &lt;a href="http://reviews.llvm.org/rL233204">r233204&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The ARMv8.1a architecture has been added along with some of its new instructions. &lt;a href="http://reviews.llvm.org/rL233290">r233290&lt;/a>, &lt;a href="http://reviews.llvm.org/rL233301">r233301&lt;/a>&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The on-disk hash table for modules should now have a stable representation. &lt;a href="http://reviews.llvm.org/rL233156">r233156&lt;/a>, &lt;a href="http://reviews.llvm.org/rL233249">r233249&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Intrinsics have been added for PowerPC hardware transaction memory support. &lt;a href="http://reviews.llvm.org/rL233205">r233205&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>An initial version of a clang-fuzzer has been added, making use of the LLVMFuzzer library. &lt;a href="http://reviews.llvm.org/rL233455">r233455&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>libclc gained more builtin implementations. &lt;a href="http://reviews.llvm.org/rL232977">r232977&lt;/a>, &lt;a href="http://reviews.llvm.org/rL232965">r232965&lt;/a>, &lt;a href="http://reviews.llvm.org/rL232964">r232964&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lld learnt how to understand the MIPS N64 relocation record format (which is described in the commit message). &lt;a href="http://reviews.llvm.org/rL233057">r233057&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lld's ARM support has improved with with the addition of indirect function handling and GOT relocations. &lt;a href="http://reviews.llvm.org/rL233383">r233383&lt;/a>, &lt;a href="http://reviews.llvm.org/rL233277">r233277&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #64, Mar 23rd 2015</title><link>https://blog.llvm.org/2015/03/llvm-weekly-64-mar-23rd-2015.html</link><pubDate>Mon, 23 Mar 2015 08:09:00 +0000</pubDate><guid>https://blog.llvm.org/2015/03/llvm-weekly-64-mar-23rd-2015.html</guid><description>&lt;p>Welcome to the sixty-fourth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/64">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Students have until Friday 27th March to get their applications in for Google Summer of Code. This gives the opportunity to get paid $5500 to work on open source over the summer, under the mentorship of someone from the community. See &lt;a href="https://www.google-melange.com/gsoc/org/list/public/google/gsoc2015?tag=llvm">here&lt;/a> for the list of mentoring organisations advertising LLVM-related projects. Please do help spread the word. I am biased, but I'd like to draw particular attention to the wide variety of &lt;a href="http://www.lowrisc.org/docs/gsoc-2015-ideas/">lowRISC GSoC ideas&lt;/a>, including a project to implement an LLVM pass using tagged memory to provide protection against control-flow hijacking.&lt;/p>&lt;p>GCC 5 is starting to &lt;a href="https://gcc.gnu.org/ml/gcc/2015-03/msg00241.html">get near to release&lt;/a>. The first release candidate is expected in the first week of April.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Peter Collingbourne has kicked off a thread on &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/41832">controlling the LTO optimization level&lt;/a>. Using LTO can cause a massive increase in compile-time. Peter argues that for some features, like the recently added control flow integrity checks in Clang, you require LTO for whole program visibility but perhaps would rather do much fewer optimisations in order to get a more reasonable compile time. He proposes a &lt;code>-flto-level&lt;/code> command line option.&lt;/p>&lt;/li>&lt;li>&lt;p>Eric Christopher has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/83858">written to the mailing list&lt;/a> about recent changes he's made to the TargetMachine::getSubtarget API.&lt;/p>&lt;/li>&lt;li>&lt;p>Dario Domizioli proposes &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/83665">adding target-specific defaults for options in the LLVM tools&lt;/a>. Response was mostly negative on the grounds that opt, llc, and friends are tools meant for LLVM developers rather than end-users. Sean Silva attempted to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/83746">clarify the difference between LLVM users, LLVM end-users, and LLVM developers&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The backend for the Hexagon DSP has continued to grow over the past few weeks. Most recently, support for vector instructions has been added. &lt;a href="http://reviews.llvm.org/rL232728">r232728&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM developer documentation grew guidance on writing commit messages. &lt;a href="http://reviews.llvm.org/rL232334">r232334&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM learnt to support the ARMv6k target. The commit message has a handy ascii art diagram to explain its position in the ARM family. &lt;a href="http://reviews.llvm.org/rL232468">r232468&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The size of a Release+Asserts clang binary has been reduced by ~400k by devirtualising Attr and its subclasses. &lt;a href="http://reviews.llvm.org/rL232726">r232726&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Work on MS ABI continues, with support for HandlerMap entries for C++ catch. &lt;a href="http://reviews.llvm.org/rL232538">r232538&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new warning, &lt;code>-Wpartial-ability&lt;/code> will warn when using decls that are not available on all deployment targets. &lt;a href="http://reviews.llvm.org/rL232750">r232750&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>C++14 sized deallocation has been disabled default due to compatibility issues. &lt;a href="http://reviews.llvm.org/rL232788">r232788&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Performance of a self-hosted lld link has again been improved. It's now down to 3 seconds on the patch author's machine (vs 5 seconds before, and 8 seconds for the GNU BFD linker). &lt;a href="http://reviews.llvm.org/rL232460">r232460&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libcxx gained the &lt;code>&amp;lt;experimental/tuple&amp;gt;&lt;/code> header which implements most of the tuple functionality specified in the library fundamentals TS. &lt;a href="http://reviews.llvm.org/rL232515">r232515&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD now supports the semantics of simple sections mappings in linker scripts and can handle symbols defined in them. &lt;a href="http://reviews.llvm.org/rL232402">r232402&lt;/a>, &lt;a href="http://reviews.llvm.org/rL232409">r232409&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Mips64 lldb gained an initial assembly profiler. &lt;a href="http://reviews.llvm.org/rL232619">r232619&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #63, Mar 16th 2015</title><link>https://blog.llvm.org/2015/03/llvm-weekly-63-mar-16th-2015.html</link><pubDate>Mon, 16 Mar 2015 08:35:00 +0000</pubDate><guid>https://blog.llvm.org/2015/03/llvm-weekly-63-mar-16th-2015.html</guid><description>&lt;p>Welcome to the sixty-third issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/63">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>LLVM is taking part in &lt;a href="https://developers.google.com/open-source/soc/">Google Summer of Code&lt;/a> as a mentoring organisation. Students can earn a $5500 stipend by working on open source projects over the summer, and applications upon today (March 16th). See &lt;a href="https://www.google-melange.com/gsoc/org/list/public/google/gsoc2015?tag=llvm">here&lt;/a> for the list of mentoring organisations advertising LLVM-related projects. Please do help spread the word. I am biased, but I'd like to draw particular attention to the wide variety of &lt;a href="http://www.lowrisc.org/docs/gsoc-2015-ideas/">lowRISC GSoC ideas&lt;/a>, including a project to implement an LLVM pass using tagged memory to provide protection against control-flow hijacking.&lt;/p>&lt;p>Version 0.11 of Pocl, the portable open-source OpenCL implementation &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/83457/">has been released&lt;/a>. Additions in this release include initial Android support and MIPS architecture support.&lt;/p>&lt;p>Version 1.11 of TCE, the TTA-based (Transport Triggered Architecture) Co-design Environment, which uses LLVM &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/83377">has been released&lt;/a>. This release adds support for LLVM 3.6.&lt;/p>&lt;p>There will be a &lt;a href="http://wiki.linuxplumbersconf.org/2015:llvm">LLVM microconference&lt;/a> at the Linux Plumbers Conference in August. There is a &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/41706">call for speakers&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>If you enjoy bikesheds, this thread may be for you. Renato Golin has kicked off a &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/41760/">thread on commit message policy&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Rui Ueyama has posted to the mailing list &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/83438">summarising his recent work on LLD performance improvements&lt;/a>. The follow up responses discuss potential remaining bottlenecks.&lt;/p>&lt;/li>&lt;li>&lt;p>William Moses is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/83236">interested in parallel extensions to LLVM IR&lt;/a>, and the thread spawned quite a few interesting responses.&lt;/p>&lt;/li>&lt;li>&lt;p>Mohammad Kazem's &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/83224">question about counting loads and stores of variables&lt;/a> elicited some useful responses.&lt;/p>&lt;/li>&lt;li>&lt;p>Will Dietz who has been maintaining the &lt;a href="https://github.com/llvm-mirror">unofficial LLVM Github mirror&lt;/a> for the past few years is interested in &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/83239">LLVM taking over the service 'officially'&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>As DataLayout is now mandatory, LLVM APIs have been updated to use references to DataLayout. &lt;a href="http://reviews.llvm.org/rL231740">r231740&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support was added for part-word atomics on PowerPC. &lt;a href="http://reviews.llvm.org/rL231843">r231843&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Initial work on enhancing ValueTracking to infer known bits of a value from known-true conditional expressions has landed. &lt;a href="http://reviews.llvm.org/rL231879">r231879&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The PowerPC READMEs have been updated to list potential future enhancements. &lt;a href="http://reviews.llvm.org/rL231946">r231946&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>llvm.eh.actions&lt;/code> intrinsic has been added. &lt;a href="http://reviews.llvm.org/rL232003">r232003&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The documentation for llvm-cov has been updated. &lt;a href="http://reviews.llvm.org/rL232007">r232007&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The getting started docs now describe CMake as the preferred way to build LLVM. &lt;a href="http://reviews.llvm.org/rL232135">r232135&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-vtabledump is now known as llvm-cxxdump. &lt;a href="http://reviews.llvm.org/rL232301">r232301&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The steady stream of OpenMP patches continues, with the addition of codegen support for the omp task directive and omp for. &lt;a href="http://reviews.llvm.org/rL231762">r231762&lt;/a>, &lt;a href="http://reviews.llvm.org/rL232036">r232036&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Copy-constructor closures for MS ABI support has been added. &lt;a href="http://reviews.llvm.org/rL231952">r231952&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLD gained support for linker script expression evaluation and parsing of the MEMORY and EXTERN commands. &lt;a href="http://reviews.llvm.org/rL231707">r231707&lt;/a>, &lt;a href="http://reviews.llvm.org/rL231928">r231928&lt;/a>, &lt;a href="http://reviews.llvm.org/rL232110">r232110&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB gained a &lt;code>CODE_OWNERS.txt&lt;/code> file. &lt;a href="http://reviews.llvm.org/rL231936">r231936&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #62, Mar 9th 2015</title><link>https://blog.llvm.org/2015/03/llvm-weekly-62-mar-9th-2015.html</link><pubDate>Mon, 09 Mar 2015 03:36:00 +0000</pubDate><guid>https://blog.llvm.org/2015/03/llvm-weekly-62-mar-9th-2015.html</guid><description>&lt;p>Welcome to the sixty-second issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/62">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>LLVM is taking part in &lt;a href="https://developers.google.com/open-source/soc/">Google Summer of Code&lt;/a> as a mentoring organisation. Students can earn a $5500 stipend by working on open source projects over the summer. See &lt;a href="https://www.google-melange.com/gsoc/org/list/public/google/gsoc2015?tag=llvm">here&lt;/a> for the list of mentoring organisations advertising LLVM-related projects. Please do help spread the word, applications open on Monday the 16th of March. I am biased, but I'd like to draw particular attention to the wide variety of &lt;a href="http://www.lowrisc.org/docs/gsoc-2015-ideas/">lowRISC GSoC ideas&lt;/a>, including a project to use tagged memory to provide protection against control-flow hijacking.&lt;/p>&lt;p>Ravi, a programming language based on Lua 5.3 has been &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/83199">announced&lt;/a>. It features JIT compilation using LLVM, though in the current &lt;a href="https://github.com/dibyendumajumdar/ravi">development version&lt;/a> only a fraction of the Lua bytecodes are JIT-compiled.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Douglas Gregor has posted an RFC on &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/41568">adding nullability qualifiers&lt;/a>. The mailing list post justifies the reason for adding new qualifiers despite the fact &lt;code>__attribute__((nonnull))&lt;/code> exists.&lt;/p>&lt;/li>&lt;li>&lt;p>Jonas Paulsson queries the &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/83077">current status of spilling support in the PBQP register allocator&lt;/a>. As Arnaud confirms, there's still &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/83079">work to be done&lt;/a> to improve things.&lt;/p>&lt;/li>&lt;li>&lt;p>Chris Bieneman has posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/83067">update on the CMake build system's ability to replace autoconf&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Tom Stellard has shared his proposed &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/83016">release schedule for 3.5.2 and 3.6.1&lt;/a>. This would see 3.5.2 released on the 25th of March and 3.6.1 on the 13th of May.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>An initial implementation of a loop interchange pass has landed. This will interchange loops to provide a more cache-friendly memory access. &lt;a href="http://reviews.llvm.org/rL231458">r231458&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A high-level support library for the new pass manager has been added. &lt;a href="http://reviews.llvm.org/rL231556">r231556&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM performance tips document has seen some new additions. &lt;a href="http://reviews.llvm.org/rL230995">r230995&lt;/a>, &lt;a href="http://reviews.llvm.org/rL231352">r231352&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>DenseMapIterators will now fail fast when compiled in debug mode. &lt;a href="http://reviews.llvm.org/rL231125">r231035&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LowerBitSets will now use byte arrays rather than bit sets to represent in-memory bit sets, which can be looked up with only a few instructions. &lt;a href="http://reviews.llvm.org/rL231043">r231043&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Another large portion of the DebugInfo changes has landed. &lt;a href="http://reviews.llvm.org/rL231082">r231082&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new optimisation for AddressSanitizer has been added that reduces the amount of instrumentation needed, eliminating it when accessing stack variables that can be proven to be inbounds. &lt;a href="http://reviews.llvm.org/rL231241">r231241&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm.frameallocate has been replaced with llvm.frameescape. &lt;a href="http://reviews.llvm.org/rL231386">r231386&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>When the &lt;code>-pedantic&lt;/code> flag is given, clang will warn when a format string uses &lt;code>%p&lt;/code> with non-&lt;code>void*&lt;/code> args. &lt;a href="http://reviews.llvm.org/rL231211">r231211&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Work on MS ABI support continues. Throwing a C++ exception under the MS ABI is now supported. &lt;a href="http://reviews.llvm.org/rL231328">r231328&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The lld resolver has had a significant performance optimisation. The commit message indicates linking chrome.dll now takes 30 seconds down from 70 seconds. &lt;a href="http://reviews.llvm.org/rL231434">r231434&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The static binary size of lldb-server has been reduced due to a reduction in the number of initialised components. &lt;a href="http://reviews.llvm.org/rL230963">r230963&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #61, Mar 2nd 2015</title><link>https://blog.llvm.org/2015/03/llvm-weekly-61-mar-2nd-2015.html</link><pubDate>Mon, 02 Mar 2015 03:12:00 +0000</pubDate><guid>https://blog.llvm.org/2015/03/llvm-weekly-61-mar-2nd-2015.html</guid><description>&lt;p>Welcome to the sixty-first issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/61">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The biggest headline this week is undoubtedly the release of LLVM/Clang 3.6. See the &lt;a href="http://llvm.org/releases/3.6.0/docs/ReleaseNotes.html">LLVM 3.6 release notes&lt;/a> and the &lt;a href="http://llvm.org/releases/3.6.0/tools/clang/docs/ReleaseNotes.html">Clang 3.6 release notes&lt;/a> for a full run-down of the major changes.&lt;/p>&lt;p>The &lt;a href="http://www.llvmsharp.org/">LLVMSharp&lt;/a> C# and .NET bindings to LLVM have been released.&lt;/p>&lt;p>Pyston, the LLVM-based Python JIT developed by Dropbox has had its &lt;a href="http://blog.pyston.org/2015/02/24/pyston-0-3-self-hosting-sufficiency/">0.3 release&lt;/a>. It is now minimally self-hosting. You can also see &lt;a href="http://speed.pyston.org/comparison/">performance results&lt;/a> online.&lt;/p>&lt;p>Readers may enjoy this &lt;a href="http://www.wilfred.me.uk/blog/2015/02/21/my-first-llvm-compiler/">walkthrough of creating a basic compiler with LLVM&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Diego Novillo has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/82814">announced Google's intention to work on PGO profiling support in LLVM&lt;/a>. We can expect a document soon to give more detail on the plans and stimulate further discussion.&lt;/p>&lt;/li>&lt;li>&lt;p>Ashutosh Nema is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/82883">proposing a new loop versioning optimisation&lt;/a>. This is where multiple versions of the loop are generated and the implementation chosen based on runtime memory aliasing tests. It was suggested that some recent work on Loop Access Analysis provides some of this functionality.&lt;/p>&lt;/li>&lt;li>&lt;p>Philip Reames has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/82740">suggested writing a performance guide for frontend authors&lt;/a>. Unsurprisingly, the idea is popular.&lt;/p>&lt;/li>&lt;li>&lt;p>Zachary Turner has suggested &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/6686">separating embedded Python from the rest of LLDB&lt;/a>. As detailed in the post, it is difficult to provide compatibility with the standard Python binary build for Windows and precompiled Python modules.&lt;/p>&lt;/li>&lt;li>&lt;p>Ahmed Bougacha started a discussion on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/82870">disabling GlobalMerge&lt;/a>, which is currently enabled for ARM and AARch64. Much of the ensuing discussion centers around understanding why there seems to be a performance degradation when using GlobalMerge with LTO.&lt;/p>&lt;/li>&lt;li>&lt;p>Katya Romanova moved a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/82730">discussion on a jump threading optimisation bug&lt;/a> to llvm-dev. The issue is due to the fact an unreachable block is generated with ill-formed instruction, and there is a lot of follow on discussion about whether passes should generate unreachable blocks.&lt;/p>&lt;/li>&lt;li>&lt;p>Dibyendu Majumdar wrote to the list to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/82698">ask about issues eliminating redundant loads&lt;/a>. He managed to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/82816">work out the issue&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Work has started on the move towards opaque pointer types. See the commit messages for more details and help on migrating existing textual IR. &lt;a href="http://reviews.llvm.org/rL230786">r230786&lt;/a>, &lt;a href="http://reviews.llvm.org/rL230794">r230794&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The PlaceSafepoints and RewriteGCForStatepoints passes have been documented. &lt;a href="http://reviews.llvm.org/rL230420">r230420&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The GC statepoints documentation has been cleaned up and extended with example IR, assembly, and stackmaps. &lt;a href="http://reviews.llvm.org/rL230601">r230601&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The loop-invariant code motion pass has been refactored to expose its core functionality as utility functions that other transformations could use. &lt;a href="http://reviews.llvm.org/rL230178">r230178&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Implementation of support for alloca on MIPS fast-isel has started. &lt;a href="http://reviews.llvm.org/rL230300">r230300&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The PowerPC backend gained support for the QPX vector instruction set. &lt;a href="http://reviews.llvm.org/rL230413">r230413&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>InductiveRangeCheckElimination can now handle loops with decreasing induction variables. &lt;a href="http://reviews.llvm.org/rL230618">r230618&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Among other improvements, llvm-pdbdump gained colorized output. &lt;a href="http://reviews.llvm.org/rL230476">r230476&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Forward Control Flow Integrity Pass has been removed as it is being rethought and is currently unused. &lt;a href="http://reviews.llvm.org/rL230780">r230780&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Performance Tips for Frontend Authors document was born. &lt;a href="http://reviews.llvm.org/rL230807">r230807&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>The control flow integrity design docs has been updated to document optimisations. &lt;a href="http://reviews.llvm.org/rL230458">r230458&lt;/a>, &lt;a href="http://reviews.llvm.org/rL230588">r230588&lt;/a>.&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Remote testing support was added to the libc++ and libc++abi test suites. &lt;a href="http://reviews.llvm.org/rL230592">r230592&lt;/a>, &lt;a href="http://reviews.llvm.org/rL230643">r230643&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD learned to understand .gnu.linkonce input sections. &lt;a href="http://reviews.llvm.org/rL230194">r230194&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM 3.6 Release</title><link>https://blog.llvm.org/2015/02/llvm-36-release.html</link><pubDate>Fri, 27 Feb 2015 12:48:00 +0000</pubDate><guid>https://blog.llvm.org/2015/02/llvm-36-release.html</guid><description>&lt;p>LLVM 3.6 is now available!&lt;/p> &lt;p>Get it here: &lt;a href="http://llvm.org/releases/">http://llvm.org/releases/&lt;/a>&lt;/p> &lt;p>This release contains the work of the LLVM community over the past six months: many many bug fixes, optimization improvements, support for more proposed C++1z features in Clang, better native Windows compatibility, embedding LLVM IR in native object files, Go bindings, and more. For details, see the release notes [&lt;a href="http://llvm.org/releases/3.6.0/docs/ReleaseNotes.html">LLVM&lt;/a>, &lt;a href="http://llvm.org/releases/3.6.0/tools/clang/docs/ReleaseNotes.html">Clang&lt;/a>].&lt;/p> &lt;p>Many thanks to everyone who helped with testing, fixing, and getting the release into a good state!&lt;/p> &lt;p>Special thanks to the volunteer release builders and testers, without whom this release would not be possible: Dimitry Andric, Sebastian Dreßler, Renato Golin, Sylvestre Ledru, Ben Pope, Daniel Sanders, and Nikola Smiljanić!&lt;/p> &lt;p>If you have any questions or comments about this release, please contact the community on the mailing lists. Onwards to 3.7!&lt;/p></description></item><item><title>LLVM Weekly - #60, Feb 23rd 2015</title><link>https://blog.llvm.org/2015/02/llvm-weekly-60-feb-23rd-2015.html</link><pubDate>Mon, 23 Feb 2015 03:05:00 +0000</pubDate><guid>https://blog.llvm.org/2015/02/llvm-weekly-60-feb-23rd-2015.html</guid><description>&lt;p>Welcome to the sixtieth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/60">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>LLVM/Clang 3.6.0-rc4 is &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/41432/">now available for testing&lt;/a>.&lt;/p>&lt;p>A new LLVM-based tainted flow analysis tool &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/82660/">has been created&lt;/a>. It's a tool designed to help detect timing attack vulnerabilities. An &lt;a href="http://cuda.dcc.ufmg.br/flowtracker/">online demo&lt;/a> is available.&lt;/p>&lt;p>The March bay-area LLVM social &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/6599/">will take place on Thursday 5th March&lt;/a>, along with the Game Developer's Conference.&lt;/p>&lt;p>The Cambridge LLVM social will take place &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/41374/">on Wednesday 25th Feb&lt;/a>.&lt;/p>&lt;p>HHVM, the optimised PHP virtual machine from Facebook &lt;a href="http://hhvm.com/blog/8405/coming-soon-in-hhvm">plan to integrate an LLVM-based optimisation phase&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Lefteris Ioannidis has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/82321">introduced himself&lt;/a> on the mailing list. He is working on propagating parallelism at the IR level, with a hope to ultimately upstream his work. He's interested in chatting to anyone working in this area.&lt;/p>&lt;/li>&lt;li>&lt;p>Eric Fiselier &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/41444/">asks when libc++ can list Linux as an officially supported platform&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Hans Wennborg is &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.scm/117060">asking for people to flesh out the 3.6 release notes&lt;/a> with more details.&lt;/p>&lt;/li>&lt;li>&lt;p>Hayden Livingston is working on a tool to help understand how LLVM IR changes after optimization passes are run and &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/82398">wonders about adding a new API to support this use case&lt;/a>. Greg Fitzgerald points to his &lt;a href="https://github.com/garious/diffdump">handy diffdump tool&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Bruce Mitchener suggests &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/6570">adding SWIG bindings to LLDB for JS and other languages&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Zephyr Zhao has &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/6546">shared his work on a GUI frontend to LLDB&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The coding standards document has been updated now that MSVC 2012 support has been dropped. &lt;a href="http://reviews.llvm.org/rL229369">r229369&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Orc API continues to evolve. The JITCompileCallbackManager has been added to create and manage JIT callbacks. &lt;a href="http://reviews.llvm.org/rL229461">r229461&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new pass, the bit-tracking dead code elimination pass has been added. It tracks dead bits of integer-valued instructions and removes them when all bits are set. &lt;a href="http://reviews.llvm.org/rL229462">r229462&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The SystemZ backend now supports all TLS access models. &lt;a href="http://reviews.llvm.org/rL229652">r229652&lt;/a>, &lt;a href="http://reviews.llvm.org/rL229654">r229654&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new pass for constructing gc.statepoint sequences with explicit relocations was added. The pass will be further developed and bugfixed in-tree. &lt;a href="http://reviews.llvm.org/rL229945">r229945&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The old x86 vector shuffle lowering code has been removed (the new shuffle lowering code has been the default for ages and known regressions have been fixed). &lt;a href="http://reviews.llvm.org/rL229964">r229964&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new bitset metadata format and lowering pass has been added. In the future, this will be used to allow a C++ program to efficiently verify that a vtable pointer is in the set of valid vtable pointers for the class or its derived classes. &lt;a href="http://reviews.llvm.org/rL230054">r230054&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>clang-format gained support for JS type annotations and classes. &lt;a href="http://reviews.llvm.org/rL229700">r229700&lt;/a>, &lt;a href="http://reviews.llvm.org/rL229701">r229701&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Most of the InstrProf coverage mapping generation code has been rewritten. &lt;a href="http://reviews.llvm.org/rL229748">r229748&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang learnt how to analyze FreeBSD kernel printf extensions. &lt;a href="http://reviews.llvm.org/rL229921">r229921&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support has been added to Clang for a form of Control Flow Integrity for virtual function calls. It verifies the vptr of the correct dynamic type is being used. &lt;a href="http://reviews.llvm.org/rL230055">r230055&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>ThreadSanitizer gained support for MIPS64. &lt;a href="http://reviews.llvm.org/rL229972">r229972&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lldb now supports process language on Android from lldb-gdbserver. &lt;a href="http://reviews.llvm.org/rL229371">r229371&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>OpenMP gained a new user-guided lock API. &lt;a href="http://reviews.llvm.org/rL230030">r230030&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #59, Feb 16th 2015</title><link>https://blog.llvm.org/2015/02/llvm-weekly-59-feb-16th-2015.html</link><pubDate>Mon, 16 Feb 2015 03:15:00 +0000</pubDate><guid>https://blog.llvm.org/2015/02/llvm-weekly-59-feb-16th-2015.html</guid><description>&lt;p>Welcome to the fifty-ninth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/59">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a>&lt;h3>News and articles from around the web&lt;/h3>&lt;p>Reminder, the EuroLLVM 2015 call for papers submission deadline is &lt;em>TODAY&lt;/em>. See &lt;a href="http://llvm.org/devmtg/2015-04/#callfor">here&lt;/a> for details.&lt;/p>&lt;p>LLVM and Clang 3.6-rc3 &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/41186">has been tagged&lt;/a>, any help with testing is greatly appreciated.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>The discussion about &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81923">moving towards a singular pointer type&lt;/a> has continued. It seems everyone is in favour.&lt;/p>&lt;/li>&lt;li>&lt;p>Philip Reames has proposed &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/82186">an attribute that indicates the value is either null or dereferenceable&lt;/a>. The intended use case is for Java, though it may be useful for various other higher level languages.&lt;/p>&lt;/li>&lt;li>&lt;p>Duncan P.N. Exon Smith is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/82185">concerned that llc is becoming less useful as a debugging tool&lt;/a> and proposes modifying Clang to store target defaults on a module.&lt;/p>&lt;/li>&lt;li>&lt;p>Alexey Samsonov &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/82213">proposes dropping support for building the sanitizers with autotools&lt;/a>. The autotools build system never reached feature parity with CMake for the sanitizers and is undertested, there seem to be no objections.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The biggest chunk of internal refactoring of debug metadata has landed, with the addition of specialized debug info metadata nodes. &lt;a href="http://reviews.llvm.org/rL228640">r228640&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>New intrinsics llvm.eh.begincatch and llvm.eh.endcatch intrinsics have been added to support Windows exception handling. &lt;a href="http://reviews.llvm.org/rL228733">r228733&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A DebugInfoPDB implementation using the MS Debug Interface Access SDK has landed. &lt;a href="http://reviews.llvm.org/rL228747">r228747&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>SimplifyCFG will now use TargetTransformInfo for cost analysis. &lt;a href="http://reviews.llvm.org/rL228826">r228826&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A profitability heuristic has been added for the x86 mov-to-push optimisation. &lt;a href="http://reviews.llvm.org/rL228915">r228915&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>PassManager.h is now LegacyPassManager.h. As described in the commit message, if you are an out of tree LLVM user you may need to update your includes. &lt;a href="http://reviews.llvm.org/rL229094">r229094&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul> &lt;li>&lt;p>The &lt;code>/volatile:ms&lt;/code> semantics have been implemented, turning volatile loads and stores into atomic acquire and release operations. &lt;a href="http://reviews.llvm.org/rL229082">r229082&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>C++14's sized deallocation functions have been implemented in libcxx. &lt;a href="http://reviews.llvm.org/rL229281">r229281&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lld learnt to handle the &lt;code>--wrap&lt;/code> option. &lt;a href="http://reviews.llvm.org/rL228906">r228906&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lldb gained the concept of "runtime support values". &lt;a href="http://reviews.llvm.org/rL228791">r228791&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The remote-android platform has been added to lldb. &lt;a href="http://reviews.llvm.org/rL228943">r228943&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #58, Feb 9th 2015</title><link>https://blog.llvm.org/2015/02/llvm-weekly-58-feb-9th-2015.html</link><pubDate>Mon, 09 Feb 2015 08:33:00 +0000</pubDate><guid>https://blog.llvm.org/2015/02/llvm-weekly-58-feb-9th-2015.html</guid><description>&lt;p>Welcome to the fifty-eighth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/58">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The Red Hat developer blog has a post about the plan to &lt;a href="http://developerblog.redhat.com/2015/02/05/gcc5-and-the-c11-abi/">change the G++ ABI along with GCC 5&lt;/a>. This is required for full C++11 compatibility. Unlike the last ABI change where the libstdc++ soname was changed, it will stay the same and instead different mangled names will be used for symbols.&lt;/p>&lt;p>Quarks lab have a tutorial on how to &lt;a href="http://blog.quarkslab.com/turning-regular-code-into-atrocities-with-llvm.html">add a simple obfuscation pass to LLVM&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>It is currently planned to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81596">raise the LLVM minimum required MSVC to 2013&lt;/a>. If you are using MSVC 2012 to build LLVM and this would cause significant hardship to you for some reason, now is the time to speak up.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth has shared a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81659">handy cheatsheet&lt;/a> for those maintaining an out-of-tree target on how to adjust to the recent TargetTransformInfo changes.&lt;/p>&lt;/li>&lt;li>&lt;p>The idea of dropping pointer types in LLVM IR has been brought up a few times recently. David Blaikie is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81923">interested in volunteering to do the necessary work&lt;/a>. Much of the ensuing discussion is about how this might be done in an incremental way, without causing too many problems for people with out of tree passes. Chandler Carruth &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81945">proposes a rough work-plan&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>James Molloy has posted an RFC on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81848">inlining of recursive functions&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Chris Bieneman has summarised progress on brining the &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81741">CMake buildsystem to the point it can replace autoconf&lt;/a> in LLVM/Clang.&lt;/p>&lt;/li>&lt;li>&lt;p>Karthik Bat has posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81854">RFC on adding a LoopInterchange pass to LLVM&lt;/a>. This is a pass targeted at improving performance through cache locality.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A straight-line strength reduction pass has been introduced. This is intended to simplify statements that are generated after loop unrolling. It is enabled only for NVPTX for the time being. &lt;a href="http://reviews.llvm.org/rL228016">r228016&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A MachineInstruction pass that converts stack-relative moves of function arguments to use the X86 push instruction. This is only enabled when optimising for code size. &lt;a href="http://reviews.llvm.org/rL227752">r227752&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The BasicAA will now try to disambiguate GetElementPtr through arrays of structs into different fields. &lt;a href="http://reviews.llvm.org/rL228498">r228498&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Work on improving support in LLVM for GC continues, with the addition of a pass for inserting safepoints into arbitrary IR. &lt;a href="http://reviews.llvm.org/rL228090">r228090&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>(Very) minimal support for the newly announced ARM Cortex-A72 landed. For now, the A72 is modeled as an A57. &lt;a href="http://reviews.llvm.org/rL228140">r228140&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new heuristic has been added for complete loop unrolling, which looks at what loads might be made constant if the loop is completely unrolled. &lt;a href="http://reviews.llvm.org/rL228265">r228265&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A pass to exploit PowerPC's pre-increment load/store support has been added. &lt;a href="http://reviews.llvm.org/rL228328">r228328&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A platform-independent interface to a PDB reader has landed. &lt;a href="http://reviews.llvm.org/rL228428">r228428&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM learnt to recognise masked gather and scatter intrinsics. &lt;a href="http://reviews.llvm.org/rL228521">r228521&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang learnt the 'novtable' attribute (for MS ABI support). &lt;a href="http://reviews.llvm.org/rL227796">r227796&lt;/a>, &lt;a href="http://reviews.llvm.org/rL227838">r227838&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>New functionality has been added for thread safety analysis, before/after annotations can now be used on mutexes. &lt;a href="http://reviews.llvm.org/rL227997">r227997&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A whole bunch of work on LLDB with multithreaded applications on Linux has landed. &lt;a href="http://reviews.llvm.org/rL227909">r227909&lt;/a>, &lt;a href="http://reviews.llvm.org/rL227912">r227912&lt;/a>, &lt;a href="http://reviews.llvm.org/rL227913">r227913&lt;/a>, and more.&lt;/p>&lt;/li>&lt;li>&lt;p>The default Polly build is now completely free of GPL dependencies. The isl and imath dependencies have been imported into the codebase to make it easier to build with a known-good revision. &lt;a href="http://reviews.llvm.org/rL228193">r228193&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #57, Feb 2nd 2015</title><link>https://blog.llvm.org/2015/02/llvm-weekly-57-feb-2nd-2015.html</link><pubDate>Mon, 02 Feb 2015 05:52:00 +0000</pubDate><guid>https://blog.llvm.org/2015/02/llvm-weekly-57-feb-2nd-2015.html</guid><description>&lt;p>Welcome to the fifty-seventh issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>I've been at FOSDEM this weekend in Brussels (which is why this week's issue is perhaps a little shorter than usual!). Most talks were recorded and I'll be linking to the videos from the LLVM devroom once they're up. For those interested, you can &lt;a href="https://speakerdeck.com/asb/lowrisc-the-path-to-an-open-source-soc">see the slides from my lowRISC talk here&lt;/a>. If you want to chat about the project, you may want to join #lowRISC on irc.oftc.net.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/57">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Eli Bendersky has written a useful &lt;a href="http://eli.thegreenplace.net/2015/building-and-using-llvmlite-a-basic-example/">introduction to using the llvmlite Python to LLVM binding&lt;/a>, which was borne out of the Numba project.&lt;/p>&lt;p>LLVM/Clang 3.6-rc2 &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81600">has been tagged&lt;/a> and is ready for testing.&lt;/p>&lt;p>The next LLVM bay-area social is taking place &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/41012/">on Feb 5th at 7pm&lt;/a>.&lt;/p>&lt;p>The EuroLLVM &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/6413/">call for papers&lt;/a> closes on Feb 16th.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>David Majneer has attempted to describe the often confusing 'poison' semantics for LLVM, and &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81383">submitted an RFC&lt;/a>. Masses of discussion follows.&lt;/p>&lt;/li>&lt;li>&lt;p>Dylan McKay has been working on an LLVM backend for AVR and has come to the mailing list with two questions on instruction encoding in the last week. They're interesting questions with useful answers - &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81531">how to modify the encoding based on target features&lt;/a> and &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81613/">how to encode instructions with inconsistent formats&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Saleem Abdulrasool &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81577">kicked off a long discussion on where libunwind should live&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Andrew Kaylor has posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81284">RFC on adding support for native windows C++ exception handling&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Matt Arsenault has posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81443">RFC on adding and ISD node for fused multiply add operations&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A question about the &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81323">meaning of RAUW&lt;/a> is a good opportunity to highlight the existence of the very handy &lt;a href="http://llvm.org/docs/Lexicon.html">LLVM lexicon&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A simple in-process fuzzer was added to LLVM. &lt;a href="http://reviews.llvm.org/rL227252">r227252&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The programmer's manual gained a section about type hierarchies, polymorphism, and virtual dispatch. &lt;a href="http://reviews.llvm.org/rL227292">r227292&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The upstreaming of Sony's patches for their PS4 compiler started with the addition of the PS4 target triple. &lt;a href="http://reviews.llvm.org/rL227060">r227060&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>DataLayout now lives again in the TargetMachine rather than the TargetSubtagertInfo. &lt;a href="http://reviews.llvm.org/rL227113">r227113&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>RuntimeDyld learned to support weak symbols. &lt;a href="http://reviews.llvm.org/rL227228">r227228&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM gained a new tool, llvm-pdbdump to dump the contents of Microsoft PDB ('Program DataBase') files, including debug tables. &lt;a href="http://reviews.llvm.org/rL227241">r227241&lt;/a>, &lt;a href="http://reviews.llvm.org/rL227257">r227257&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The loop vectorizer now supports an arbitrary constant step for its induction variables, rather than just -1 or +1. &lt;a href="http://reviews.llvm.org/rL227557">r227557&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The clang-format-fuzzer tool was added, which builds on the LLVM fuzzer lib. &lt;a href="http://reviews.llvm.org/rL227354">r227354&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MS ABI work continues with proper support for setjmp. &lt;a href="http://reviews.llvm.org/rL227426">r227426&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang started to learn about the PS4 target triple. &lt;a href="http://reviews.llvm.org/rL227194">r227194&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>The PowerPC ELF target was dropped from lld. &lt;a href="http://reviews.llvm.org/rL227320">r227320&lt;/a>.&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #56, Jan 26th 2015</title><link>https://blog.llvm.org/2015/01/llvm-weekly-56-jan-26th-2015.html</link><pubDate>Mon, 26 Jan 2015 06:56:00 +0000</pubDate><guid>https://blog.llvm.org/2015/01/llvm-weekly-56-jan-26th-2015.html</guid><description>&lt;p>Welcome to the fifty-sixth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>I'll be talking the &lt;a href="http://lowrisc.org/">lowRISC&lt;/a> project to produce a fully open-source SoC at FOSDEM this coming weekend. Do come and see my &lt;a href="https://fosdem.org/2015/schedule/event/lowrisc/">main track talk&lt;/a> and read my &lt;a href="https://fosdem.org/2015/interviews/2015-alex-bradbury/">speaker interview&lt;/a> for more background. There is of course an &lt;a href="https://fosdem.org/2015/schedule/track/llvm_toolchain/">LLVM toolchain devroom&lt;/a>on the Sunday.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/56">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Stephen Diehl has written an absolutely fantastic tutorial on &lt;a href="http://dev.stephendiehl.com/numpile/">writing an LLVM specializer for Python&lt;/a>, guiding you through the process of creating something like &lt;a href="https://github.com/numba/numba">Numba&lt;/a>.&lt;/p>&lt;p>A new tool, &lt;a href="http://pmachata.github.io/dwgrep/">Dwgrep&lt;/a> (DWARF Grep) may be of interest to many LLVM Weekly readers. This &lt;a href="http://developerblog.redhat.com/2015/01/22/querying-dwarf-for-fun-and-profit/">blog post&lt;/a> gives an intro to using it.&lt;/p>&lt;p>Paul Smith has a blog post on &lt;a href="https://pauladamsmith.com/blog/2015/01/how-to-get-started-with-llvm-c-api.html">getting started with the LLVM C API&lt;/a>.&lt;/p>&lt;p>A post on the official LLVM Blog announces that &lt;a href="http://blog.llvm.org/2015/01/lldb-is-coming-to-windows.html">LLDB is coming to Windows&lt;/a>, announcing to a wider audience that it is now possible to debug simple programs with LLDB on Windows and giving a rationale for investing effort into porting LLDB to Windows and adding support for the MS debug format. The post also features a todo list indicating what's next for Windows support.&lt;/p>&lt;p>A draft version 0.1 of the IA-32 psABI (processor specific application binary interface) is &lt;a href="https://github.com/hjl-tools/x86-psABI/tree/hjl/x86/master">available&lt;/a>. This aims to supplement the existing System V ABI with conventions relevant to newer features such as SSE1-4 and AVX. Comments &lt;a href="https://groups.google.com/forum/#!topic/ia32-abi/nq6cvH_VVV4">are welcome&lt;/a>.&lt;/p>&lt;p>LLVM/Clang 3.6-rc1 is now &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81014">available&lt;/a>. Get testing and filing bugs.&lt;/p>&lt;p>ELLCC 0.1.8 &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/40797">has been released&lt;/a>. ELLCC is an LLVM/Clang-based cross compilation toolchain.&lt;/p>&lt;p>LLDB now &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/6352">has it's own IRC channel&lt;/a>. You'll want to join #lldb on irc.oftc.net.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Chandler Carruth has posted a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81056">canonicalization-related RFC&lt;/a>. He demonstrates a case where a trivial function is compiled to two equivalent IR sequences. This was &lt;a href="http://reviews.llvm.org/rL226781">later committed&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Michael Zolotukhin has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81173">proposed an RFC on adding a heuristic for complete loop unrolling&lt;/a>. Currently, the loop unrolling heuristics don't take account of any new optimisations that maybe enabled by unrolling the loop. Changing that would allow for the profitability of the unroll to be more accurately approximated.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/81143">getting ready to turn on by default the next part of his vector shuffle work&lt;/a>. Now is a good time to benchmark and report any regressions you see with &lt;code>-x86-experimental-vector-shuffle-legality&lt;/code> on your codebases.&lt;/p>&lt;/li>&lt;li>&lt;p>Ahmed Bougacha has been having &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80941">problems with the cost model calculations for saturation instructions&lt;/a>. The cost is over-estimated because a number of the individual IR instructions fold-away later in lowering. He suggests adding a new method to TargetTransformInfo for multi-instruction cost computation. There hasn't been much feedback thus far.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth has been &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80958">looking through the LLD libraries&lt;/a> and trying to work out the current layering, as well as what a potential future layering might be. He proposes offering a basic library offering basic functionality and a second library offering a higher-level interface for actually doing linking.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A backend targeting the extended BPF (Berkeley Packet Filter) interpreter/JIT in the Linux kernel has been added. See &lt;a href="http://lwn.net/Articles/603983/">this LWN article&lt;/a> for more background. &lt;a href="http://reviews.llvm.org/rL227008">r227008&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The initial version of the new ORC JIT API has landed. &lt;a href="http://reviews.llvm.org/rL226940">r226940&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>There's been a flurry of work on the new pass manager this week. One commit I will choose to pick out is the port of InstCombine to the new pass manager, which seems like a milestone or sorts. &lt;a href="http://reviews.llvm.org/rL226987">r226987&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM learnt how to use the GHC calling convention on AArch64. &lt;a href="http://reviews.llvm.org/rL226473">r226473&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>InstCombine will now canonicalize loads which are only ever stored to always use a legal integer type if one is available. &lt;a href="http://reviews.llvm.org/rL226781">r226781&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>llvm_any_ty&lt;/code> type for intrinsics has been born. &lt;a href="http://reviews.llvm.org/rL226857">r226857&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-objdump now understands &lt;code>-indirect-symbols&lt;/code> to dump the Mach-O indirect symbol table. &lt;a href="http://reviews.llvm.org/rL226848">r226848&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang now supports SPIR calling conventions. &lt;a href="http://reviews.llvm.org/rL226548">r226548&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>It's now possible to set the stack probe size on the command line. &lt;a href="http://reviews.llvm.org/rL226601">r226601&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang gained initial support for Win64 SEH IR emission. &lt;a href="http://reviews.llvm.org/rL226760">r226760&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Sun Solaris users, now is the time to celebrate. libc++ will now build on your platform of choice. &lt;a href="http://reviews.llvm.org/rL226947">r226947&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A minimal implementation of ARM static linking landed in lld. &lt;a href="http://reviews.llvm.org/rL226643">r226643&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Basic support for PPC was added to openmp. &lt;a href="http://reviews.llvm.org/rL226479">r226479&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLDB is Coming to Windows</title><link>https://blog.llvm.org/2015/01/lldb-is-coming-to-windows.html</link><pubDate>Tue, 20 Jan 2015 10:48:00 +0000</pubDate><guid>https://blog.llvm.org/2015/01/lldb-is-coming-to-windows.html</guid><description>We've spoken in the &lt;a href="http://blog.llvm.org/2014/07/clangllvm-on-windows-update.html">past&lt;/a>&amp;nbsp;about teaching Clang to fully support Windows and be compatible with MSVC. &amp;nbsp;Until now, a big missing piece in this story has been debugging the clang-generated executables. &amp;nbsp;Over the past 6 months, we've started working on making LLDB work well on Windows and support debugging both regular Windows programs and those produced by Clang.&lt;br />&lt;div>&lt;br />&lt;/div>&lt;div>Why not use an existing debugger such as GDB, Visual Studio's, or WinDBG? &amp;nbsp;There are a lot of factors in making this kind of decision. &amp;nbsp;For example, while GDB understands the DWARF debug information produced by Clang on Windows, it doesn't understand the Microsoft C++ ABI or debug information format. &amp;nbsp;On the other hand, neither Visual Studio nor WinDBG understand the DWARF debug information produced by Clang. &amp;nbsp;With LLDB, we can teach it to support &lt;i>both&lt;/i> of these formats, making it usable with a wider range of programs. &amp;nbsp;There are also other reasons why we're really excited to work on LLDB for Windows, such as the tight integration with Clang which lets it support all of the same C++ features in its expression parser that Clang supports in your source code. &amp;nbsp;We're also looking to continue adding new functionality to the debugging experience going forward, and having an open source debugger that is part of the larger LLVM project makes this really easy.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>The past few months have been spent porting LLDB's core codebase to Windows. &amp;nbsp;We've been fixing POSIX assumptions, enhancing the OS abstraction layer, and removing platform specific system calls from generic code. &amp;nbsp;Sometimes we have needed to take on significant refactorings to build abstractions where they are necessary to support platform specific differences. &amp;nbsp;We have also worked to port the test infrastructure to Windows and set up build bots to ensure things stay green.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>This preliminary bootstraping work is mostly complete, and you can use LLDB to debug simple executables generated with Clang on Windows today. &amp;nbsp;Note the use of the word "simple". &amp;nbsp;At last check, approximately 50% of LLDB's tests fail on Windows. &amp;nbsp;Our baseline, however, which is a single 32-bit executable (i.e. no shared libraries), single-threaded application built and linked with Clang and LLD using DWARF debug information, works today. &amp;nbsp;We've tested all of the fundamental functionality such as:&lt;/div>&lt;div>&lt;ol>&lt;li>Various methods of setting breakpoints (address, source file+line, symbol name, etc)&lt;/li>&lt;li>Stopping at and continuing from breakpoints&lt;/li>&lt;li>Process inspection while stopped, such as stack unwinding, frame setting, memory examination, local variables, expression evaluation, stepping, etc &amp;nbsp;(one notable exception to this is that step-over doesn't yet work well in the presence of limited symbol information).&lt;/li>&lt;/ol>&lt;div>Of course, there is still more to be done. &amp;nbsp;Here are some of the areas we're planning to work on next:&lt;/div>&lt;/div>&lt;div>&lt;ol>&lt;li>Fixing low hanging fruit by improving the pass-rate of the test suite.&lt;/li>&lt;li>Better support for debugging multi-threaded applications.&lt;/li>&lt;li>Support for debugging crash dumps.&lt;/li>&lt;li>Support for debugging x64 binaries.&lt;/li>&lt;li>Enabling stepping through shared libraries.&lt;/li>&lt;li>Understanding PDB (for debugging system libraries, and executables generated with MSVC). &amp;nbsp;Although the exact format of PDB is undocumented, Microsoft still provides a rich API for querying PDB in the form of the DIA SDK.&lt;/li>&lt;li>Adding debugging commands familiar to users of WinDBG (e.g. !handle, !peb, etc)&lt;/li>&lt;li>Remote debugging&lt;/li>&lt;li>Symbol server support&lt;/li>&lt;li>Visual Studio integration&lt;/li>&lt;/ol>&lt;div>If you're using Clang on Windows, we would encourage you to &lt;a href="http://lldb.llvm.org/build.html#BuildingLldbOnWindows">build LLDB&lt;/a> (it should be in the Windows &lt;a href="http://llvm.org/builds/">LLVM installer&lt;/a> soon) and let us know your thoughts by posting them to &lt;a href="http://lists.cs.uiuc.edu/mailman/listinfo/lldb-dev">lldb-dev&lt;/a>. &amp;nbsp;Make sure you &lt;a href="http://llvm.org/bugs/enter_bug.cgi?product=lldb">file bugs&lt;/a> against LLDB if you notice anything wrong, and we would love for you to dive into the code and help out. &amp;nbsp;If you see something wrong, dig in and try to fix it, and post your patch to &lt;a href="http://lists.cs.uiuc.edu/mailman/listinfo/lldb-commits">lldb-commits&lt;/a>.&lt;/div>&lt;/div></description></item><item><title>LLVM Weekly - #55, Jan 19th 2015</title><link>https://blog.llvm.org/2015/01/llvm-weekly-55-jan-19th-2015.html</link><pubDate>Mon, 19 Jan 2015 09:58:00 +0000</pubDate><guid>https://blog.llvm.org/2015/01/llvm-weekly-55-jan-19th-2015.html</guid><description>&lt;p>Welcome to the fifty-fifth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>It seems to have been a very busy week in the world of LLVM, particularly with regards to discussion on the mailing list. Due to travel etc and the volume of traffic, I haven't been able to do much summarisation of mailing list discussion I'm afraid.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/55">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>LLM/Clang 3.6 &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80665">has been branched&lt;/a> and subsequently, 3.6 RC1 &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/40736">has been tagged&lt;/a>.&lt;/p>&lt;p>LLVM/Clang 3.5.1 seems to have been &lt;a href="http://llvm.org/releases/download.html#3.5.1">quietly released&lt;/a>.&lt;/p>&lt;p>Registration for &lt;a href="http://llvm.org/devmtg/2015-04/">EuroLLVM 2015&lt;/a>, to be held at Goldsmiths College in London, UK on April 13-14th is &lt;a href="http://www.eventbrite.com/e/eurollvm-2015-tickets-15350278095">now open&lt;/a>.&lt;/p>&lt;p>All slides and videos from the last LLVM Developers' meeting are &lt;a href="http://llvm.org/devmtg/2014-10/">now live&lt;/a>, including those from Apple employees.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Ahmed Bougacha has posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80678">RFC on adding integer saturation intrinsics&lt;/a> to LLVM. There are various questions in the ensuing thread about whether adding an intrisc is necessary and the best way to go about this. i.e. whether it is possible to just pattern match later on in the compilation flow.&lt;/p>&lt;/li>&lt;li>&lt;p>In response to a question about using LLDB when attached to a system that may switch between AARch32 and AArch64, Colin Riley has written a good description of &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/6184">current support and potential future support for multiple targets in one debugger session&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Jonathan Ragan-Kelley &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80499">asks about emitting IR in older formats&lt;/a> due to a requirement to emit 3.2-compatible bitcode for Nvidia's libNVVM. Several replies suggest looking at SPIR.&lt;/p>&lt;/li>&lt;li>&lt;p>Do you wonder what the difference is between the multiple ways of querying operation costs? &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80705">Wonder no more&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Duncan P.N. Exon Smith has posted on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80563">RFC on first-class debug info in IR&lt;/a>. There have been a few changes since the previous proposal.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth has written a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80841">summary of alias analysis pass ordering in LLVM and Clang&lt;/a>. This details both the current situation as well as Chandler's views on how it should change in the future.&lt;/p>&lt;/li>&lt;li>&lt;p>Philip Reames is seeking wider feedback on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80849/">two implementation issues for GCStrategy&lt;/a>. The two key questions are whether GC-specific properties should be checked in the IR verifier and what the access model for GCStrategy should be. No responses yet, so now is the time to dive in.&lt;/p>&lt;/li>&lt;li>&lt;p>Ramshankar Ramanarayanan has posted a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80798">proof of concept for a loop fusion pass&lt;/a>. Meanwhile, Adam Nemet has an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80528">RFC for a loop distribution pass&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Lang Hanes has posted &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80639">a proposed new JIT API&lt;/a> with a catchy name (ORC: On Request Compilation). The aim is to cleanly support a wider range of JIT uses cases, and to be clear this higher level API would not replace the existing MCJIT.&lt;/p>&lt;/li>&lt;li>&lt;p>Bjoern Haase has been spending some time examining generated code for armv6 microcontroller targets such as the Cortex M0. He has a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80497">series of suggestions for tweaking default optimizer settings for this target&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A new code diversity feature is now available. The NoopInsertion pass will add random no-ops to x86 binaries to try to make ROP attacks more difficult by increasing diversity. &lt;a href="http://reviews.llvm.org/rL225908">r225908&lt;/a>. I highly recommend reading up on the &lt;a href="http://www.scs.stanford.edu/brop/">blind ROP&lt;/a> attack published last year. It would also be interesting to see an implementation of &lt;a href="http://seclab.tuwien.ac.at/papers/gfree.pdf">G-Free&lt;/a> for producing binaries without simple gadgets. The commit was later reverted for some reason.&lt;/p>&lt;/li>&lt;li>&lt;p>A nice summary of recent MIPS and PowerPC target developments, as well as the OCaml bindings is now there in the form of the 3.6 release notes. &lt;a href="http://reviews.llvm.org/rL225607">r225607&lt;/a>, &lt;a href="http://reviews.llvm.org/rL225695">r225695&lt;/a>, &lt;a href="http://reviews.llvm.org/rL225779">r225779&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM learned the llvm.frameallocate and llvm.framerecover intrinsics, which allow multiple functions to share a single stack allocation from one function's call frame. &lt;a href="http://reviews.llvm.org/rL225746">r225746&lt;/a>, &lt;a href="http://reviews.llvm.org/rL225752">r225752&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>An experimental (disabled by default) 'inductive range check elimination' pass has landed. This attempts to eliminates range checks of the form &lt;code>0 &amp;lt;= A*I + B &amp;lt; Length&lt;/code>. &lt;a href="http://reviews.llvm.org/rL226201">r226201&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>StackMap/PatchPoint support is now available for the PowerPC target. &lt;a href="http://reviews.llvm.org/rL225808">r225808&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Initial support for Win64 SEH catch handlers has landed. See the commit message for current missing functionality. &lt;a href="http://reviews.llvm.org/rL225904">r225904&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new utility script has been started to help update simple regression tests. It needs some work to generalise it beyond x86. &lt;a href="http://reviews.llvm.org/rL225618">r225618&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>TargetLibraryInfo has been moved into the Analysis library. &lt;a href="http://reviews.llvm.org/rL226078">r226078&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The new &lt;code>-fno-inline-asm&lt;/code> flag has been added to disallow all inline asm. If it exists in the input code it will be reported as an error.&lt;br />&lt;a href="http://reviews.llvm.org/rL226340">r226340&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;code>-fsanitize-recover&lt;/code> command line flags are again supported. &lt;a href="http://reviews.llvm.org/rL225719">r225719&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The integrated assembler is now used by default on 32-bit PowerPC and SPARC. &lt;a href="http://reviews.llvm.org/rL225958">r225958&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The libcxx build system learnt how to cross-compile. &lt;a href="http://reviews.llvm.org/rL226237">r226237&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD gained a nice speedup by speculative instantiating archive file members. This shaves off a second or two for linking lld with lld. &lt;a href="http://reviews.llvm.org/rL226336">r226336&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD learnt the &lt;code>--as-needed&lt;/code> flag (previously this was the default behaviour). &lt;a href="http://reviews.llvm.org/rL226274">r226274&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>OpenMP gained an AARch64 port. &lt;a href="http://reviews.llvm.org/rL225792">r225792&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #54, Jan 12th 2015</title><link>https://blog.llvm.org/2015/01/llvm-weekly-54-jan-12th-2015.html</link><pubDate>Mon, 12 Jan 2015 18:10:00 +0000</pubDate><guid>https://blog.llvm.org/2015/01/llvm-weekly-54-jan-12th-2015.html</guid><description>&lt;p>Welcome to the fifty-fourth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>As you receive this week's issue, I should be on my way to California where I'll be presenting &lt;a href="http://www.lowrisc.org">lowRISC&lt;/a> at the RISC-V workshop in Monterey and having a few mother meetings. I'm in SF Fri-Sun and somewhat free on the Saturday if anyone wants to meet and chat LLVM or lowRISC/RISC-V.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/54">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Euro LLVM 2015 will be held on April 13th-14th in London, UK. The &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80291">call for papers&lt;/a> is now open with a deadline of 16th Feb.&lt;/p>&lt;p>Talks for the &lt;a href="https://fosdem.org/2015/schedule/track/llvm_toolchain/">LLVM devroom at FOSDEM&lt;/a>have been announced. The LLVM devroom is on Sunday 1st Feb. Readers will be pleased to know this doesn't clash with &lt;a href="https://fosdem.org/2015/schedule/event/lowrisc/">my talk on lowRISC&lt;/a> which is on the Saturday.&lt;/p>&lt;p>Google now use &lt;a href="http://blog.llvm.org/2015/01/using-clang-for-chrome-production.html">Clang for production Chrome builds on Linux&lt;/a>. They were previously using GCC 4.6. Compared to that baseline, performance stayed roughly the same while binary size decreased by 8%. It would certainly have been interesting to compare to a more recent GCC baseline. The blog post indicates they're hopeful to use Clang in the future for building Chrome for Windows.&lt;/p>&lt;p>Philip Reames did an interesting back of the envelope calculation about the &lt;a href="http://www.philipreames.com/Blog/2015/01/10/how-much-does-it-cost-to-maintain-llvm/">cost of maintaining LLVM&lt;/a>. He picked out commits which seems like they could be trivially automated and guesstimated a cost based on developer time. The figure he arrives at is $1400 per month.&lt;/p>&lt;p>The next LLVM social for Cambridge, UK will be &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80341">on Wed 21st Jan at 7:30pm&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>LLVM 3.6 will be &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80447">branching soon&lt;/a>, on 14th January.&lt;/p>&lt;/li>&lt;li>&lt;p>Philip Reames asks &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80355">whether address space 1 is reserved on any architecture&lt;/a>. It seems the answer is no, though the thread resulted in some discussion on the use of address spaces and the ability to reserve some. Philip &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80370">had a strawman proposal&lt;/a> for meanings of different address space numbers.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth has suggested &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80430">new IR features are needed to represent the cases global metadata is currently used for&lt;/a>. Metadata was intended to be used to hold information that can be safely dropped, though this isn't true for e.g. module flags.&lt;/p>&lt;/li>&lt;li>&lt;p>Arch Robinson kicked off a discussion about &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80381">floating point range checks in LLVM&lt;/a>. This isn't currently supported, though there's agreement it could be useful as well as a fair amount of discussion on some of the expected subtleties.&lt;/p>&lt;/li>&lt;li>&lt;p>If you're wondering about alias instructions, Bruce Hoult has a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80402">good explanation&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Note to out-of-tree backend maintainers, &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80385">get/setLoadExtAction now takes another parameter&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Right now, LLDB will compile entered expressions in C++ mode. As &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/6141">noted on the lldb mailing list&lt;/a> this can be problematic when e.g. debugging a C function which has a local variable called 'this'. Greg Clayton &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/6142">points out how helpful supporting C++ expressions can be&lt;/a>, even when debugging C code.&lt;/p>&lt;/li>&lt;li>&lt;p>A thread about the &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80418">design of the new pass manager&lt;/a> has been revived. Both Chandler Carruth and Philip Reames suggest &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80424">BasicBlockPasses should die&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Philip Reames is seeking feedback on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80386">a transformation which would convert a loop to a loop nest&lt;/a> if it contains infrequently executed slow paths. There's some interesting discussion in the thread, and it's also worth reading Duncan P.N. Exon Smith's &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80472">clarification of branch weight, branch probability, block frequency, and block bias&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>An option &lt;code>hoist-cheap-insts&lt;/code> has been added to the machine loop invariant code motion pass to enable hosting even cheap instructions (as long as register pressure is low). This is disabled by default. &lt;a href="http://reviews.llvm.org/rL225470">r225470&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The calculation of the unrolled loop size has been fixed. Targets may want to re-tune their default threshold. &lt;a href="http://reviews.llvm.org/rL225565">r225565&lt;/a>, &lt;a href="http://reviews.llvm.org/rL225566">r225566&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>DIE.h (datastructures for DWARF info entries) is now a public CodeGen header rather than being private to the AsmPrinter implementation. dsymutil will make use of it. &lt;a href="http://reviews.llvm.org/rL225208">r225208&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The new pass manager now has a handy utility for generating a no-op pass that forces a usually lazy analysis to be run. &lt;a href="http://reviews.llvm.org/rL225236">r225236&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>There's been a minor change to the .ll syntax for comdats. &lt;a href="http://reviews.llvm.org/rL225302">r225302&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>There have been some minor improvements to the emacs packages for LLVM and tablegen mode. &lt;a href="http://reviews.llvm.org/rL225356">r225356&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>An example GCStrategy using the new statepoint infrastructure has been added. &lt;a href="http://reviews.llvm.org/rL225365">r225365&lt;/a>, &lt;a href="http://reviews.llvm.org/rL225366">r225366&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A &lt;code>Wself-move&lt;/code> warning has been introduced. Similar to &lt;code>-Wself-assign&lt;/code>, it will warn you when your code tries to move a value to itself. &lt;a href="http://reviews.llvm.org/rL225581">r225581&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The I, J, K, M, N, O inline assembly constraints are now checked. &lt;a href="http://reviews.llvm.org/rL225244">r225244&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The libcxx test infrastructure has been refactored into separate modules. &lt;a href="http://reviews.llvm.org/rL225532">r225532&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The effort to retire InputElement in lld continues. Linker script files are no longer represented as an InputElement. &lt;a href="http://reviews.llvm.org/rL225330">r225330&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Polly has gained a &lt;a href="http://polly.llvm.org/changelog.html">changelog&lt;/a> in preparation of the next release.&lt;a href="http://reviews.llvm.org/rL225264">r225264&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Polly has also gained a &lt;a href="http://polly.llvm.org/todo.html">TODO list&lt;/a> for its next phase of development. &lt;a href="http://reviews.llvm.org/rL225388">r225388&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>Using clang for Chrome production builds on Linux</title><link>https://blog.llvm.org/2015/01/using-clang-for-chrome-production.html</link><pubDate>Mon, 05 Jan 2015 10:39:00 +0000</pubDate><guid>https://blog.llvm.org/2015/01/using-clang-for-chrome-production.html</guid><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on">&lt;div>&lt;span style="font-family: inherit;">Chrome 38 was released early October 2014. It is the first release where the Linux binaries shipped to users are built by clang. Previously, this was done by gcc 4.6. As you can read in the &lt;a href="http://lists.cs.uiuc.edu/pipermail/cfe-dev/2014-November/039929.html">announcement email&lt;/a>, the switch happened without many issues. Performance stayed roughly the same, binary size decreased by about 8%. In this post I'd like to discuss the motivation for this switch.&lt;/span>&lt;/div>&lt;h3 style="text-align: left;">&lt;span style="font-family: inherit;">Motivation&lt;/span>&lt;/h3>&lt;span style="font-family: inherit;">There are two reasons for the switch.&lt;/span>&lt;br />&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;span style="font-family: inherit;">1. Many Chromium developers already used clang on Linux. We've supported &lt;a href="https://code.google.com/p/chromium/wiki/Clang">opting in&lt;/a> to clang for since &lt;a href="http://llvm.org/devmtg/2011-11/Weber_Wennborg_UsingClangInChromium.pdf">before clang supported C++&lt;/a>&amp;nbsp;– because of this, we have a process in place for shipping new clang binaries to all developers and bots every few weeks. Because of clang's good diagnostics (&lt;a href="http://lists.cs.uiuc.edu/pipermail/cfe-commits/Week-of-Mon-20110530/042515.html">some&lt;/a> of &lt;a href="http://lists.cs.uiuc.edu/pipermail/cfe-commits/Week-of-Mon-20120227/054412.html">which&lt;/a> we &lt;a href="http://lists.cs.uiuc.edu/pipermail/cfe-commits/Week-of-Mon-20110613/042785.html">added&lt;/a> due to bugs in Chromium we thought the compiler should catch), speed, and because of our &lt;a href="http://www.chromium.org/developers/coding-style/chromium-style-checker-errors">Chromium-specific clang plugin&lt;/a>, many Chromium developers switched to clang over the years. Making clang the default compiler removes a stumbling block for people new to the project.&lt;/span>&lt;br />&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;span style="font-family: inherit;">2. We want to use modern C++ features in Chromium. This requires a recent toolchain – we figured we needed at least gcc 4.8. For Chrome for Android and Chrome for Chrome OS, we updated our gcc compilers to 4.8 (and then 4.9) – easy since these ports use a non-system gcc already. Chrome for Mac has been using Chromium's clang since Chrome 15 and was already in a good state. Chrome for iOS uses Xcode 5's clang, which is also new enough. Chrome for Windows uses Visual Studio 2013 Update 4. On Linux, switching to clang was the easiest way forward.&lt;/span>&lt;br />&lt;h3 style="text-align: left;">Keeping up with C++'s evolution in a large, multi-platform project&lt;/h3>&lt;span style="font-family: inherit;">C++ had been static for many years. C++11 is the first real update to the C++ language since the original C++ standard (approved on July 27 1998). C++98 predated the founding of Google, YouTube, Facebook, Twitter, the releases of Mac OS X and Windows XP, and x86 SSE instructions. The time between the two standards saw the rise and fall of the iPod, several waves of social networks, and the smartphone explosion.&lt;/span>&lt;br />&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;span style="font-family: inherit;">The time between C++11 and C++14 was three years, and the next major iteration of the language is speculated to be finished in 2017, three years from C++14. This is a dramatic change, and it has repercussions on how to build and ship C++ programs. It took us 3+ years to get to a state where we can use C++11 in Chromium; C++14 will hopefully take us less long. (If you're targeting fewer platforms, you'll have an easier time.)&lt;/span>&lt;br />&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;span style="font-family: inherit;">There are two parts to C++11: New language features, and new library features. The language features just require a modern compiler at build time on build machines, the library features need a new standard library at runtime on the user's machine.&lt;/span>&lt;br />&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;span style="font-family: inherit;">Deploying a new compiler is conceptually relatively simple. If your developers are on Ubuntu LTS releases and you make them use the newest LTS release, they get new compilers every two years – so just using the default system compiler means you're up to two years behind. There needs to be some process to relatively transparently deploy new toolchains to your developers – an "evergreen compiler". We now have this in place for Chromium – on Linux, by using clang. (We still accept patches to keep Chromium buildable with gccs &amp;gt;= 4.8 for people who prefer compiling locally over using precompiled binaries, and we still use gcc as the target compiler for Chrome for Android and Chrome OS.)&lt;/span>&lt;br />&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;span style="font-family: inherit;">The library situation is slightly more tricky: On Linux and Mac OS X, programs are usually linked against the system C++ library. Chrome wants to support Mac OS X 10.6 a bit longer (our users seem to love this OS X release), and the only C++ library this ships with is libstdc++ 4.2 – which doesn't have any C++11 bits. Similarly, Ubuntu Precise only has libstdc++ 4.6. It seems that with C++ updating more often, products will have to either stop supporting older OS versions (even if they still have many users on these old versions), adopt new C++ features very slowly, or ship with a bundled C++ standard library. The latter implies that system libraries shouldn't have a C++ interface for ABI reasons – luckily, this is mostly already the case.&lt;/span>&lt;br />&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;span style="font-family: inherit;">To make things slightly more complicated, gcc and libstdc++ expect to be updated at the same time. gcc 4.8 links to libstdc++ 4.8, so upgrading gcc 4.8 while still linking to Precise's libstdc++ 4.6 isn't easy. clang &lt;a href="http://lists.cs.uiuc.edu/pipermail/cfe-commits/Week-of-Mon-20140630/109151.html">explicitly supports&lt;/a> building with older libstdc++ versions.&lt;/span>&lt;br />&lt;span style="font-family: inherit;">&lt;br />&lt;/span>&lt;span style="font-family: inherit;">For Chromium, we opted to enable C++11 language features now, and then allow C++11 library features later once we have figured out the story there. This allows us to &lt;a href="https://groups.google.com/a/chromium.org/forum/#!msg/chromium-dev/xMscQuYBwyc">incrementally adopt&lt;/a> &lt;a href="http://chromium-cpp.appspot.com/">C++11 features in Chromium&lt;/a>,&amp;nbsp;but it's not without risks:&lt;/span>&amp;nbsp;&lt;span style="font-family: Courier New, Courier, monospace;">vector&amp;lt;int&amp;gt; v0{42}&lt;/span> for example means something different with an old C++ library and a new C++ library that has a &lt;span style="font-family: Courier New, Courier, monospace;">vector&lt;/span> constructor taking an &lt;span style="font-family: Courier New, Courier, monospace;">initializer_list&lt;/span>. We disallow using uniform initialization for now because of this.&lt;br />&lt;br />Since bundling a C++ library seems to become more common with this new C++ update cadence, it would be nice if compiler drivers helped with this. Just statically linking libstdc++ / libc++ isn't enough if you're shipping a product consisting of several executables or shared libraries – they need to dynamically link to a shared C++ library with the right rpaths, the C++ library probably needs mangled symbol names that don't conflict with the system C++ library which might be loaded into the same process due to other system libraries using it internally (for example, maybe using an inline namespace with an application-specific name), etc.&lt;br />&lt;h3 style="text-align: left;">Future directions&lt;/h3>As mentioned above, we're trying to figure out the C++ library situation. The tricky cases are Chrome for Android (which currently uses STLport) and Chrome for Mac. We're hoping to switch Chrome for Android to libc++ (while still using gcc as compiler). On Mac, we'll likely bundle libc++ with Chrome too.&lt;br />&lt;br />We're &lt;a href="http://blog.llvm.org/2014/07/clangllvm-on-windows-update.html">working&lt;/a> &lt;a href="http://llvm.org/devmtg/2014-10/#talk15">on&lt;/a> making clang &lt;a href="http://llvm.org/devmtg/2014-04/PDFs/Talks/clang-cl.pdf">usable&lt;/a> for compiling Chrome for Windows. The main motivations for this are using &lt;a href="http://llvm.org/devmtg/2014-10/Slides/ASan%20for%20Windows.pdf">AddressSanitizer&lt;/a>, providing a compiler with great diagnostics for developers, and getting our &lt;a href="https://code.google.com/p/chromium/wiki/ClangToolRefactoring">tooling infrastructure&lt;/a> working on Windows (used for example&amp;nbsp;&lt;a href="http://crbug.com/417463">automated large-scale cross-OS refactoring&lt;/a>&amp;nbsp;and for building our &lt;a href="https://code.google.com/p/chromium/codesearch#chromium/src/apps/launcher.h&amp;amp;sq=package:chromium&amp;amp;type=cs&amp;amp;l=18&amp;amp;rcl=1419953261">code search index&lt;/a>&amp;nbsp;– try clicking a few class names; at the moment only code built on Linux is hyperlinked). We won't use clang as a production compiler on Windows unless it produces a chrome binary that's competitive with Visual Studio's on both binary size and performance. (From an open-source perspective, it &lt;i>is&lt;/i> nice being able to use an open-source compiler to compile an open-source program.)&lt;br />&lt;br />You can reach us at&amp;nbsp;clang@chromium.org&lt;/div></description></item><item><title>LLVM Weekly - #53, Jan 5th 2015</title><link>https://blog.llvm.org/2015/01/llvm-weekly-53-jan-5th-2015.html</link><pubDate>Mon, 05 Jan 2015 06:30:00 +0000</pubDate><guid>https://blog.llvm.org/2015/01/llvm-weekly-53-jan-5th-2015.html</guid><description>&lt;p>Welcome to the fifty-third issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>I'm going to be in California next week for the &lt;a href="http://riscv.org/workshop">RISC-V workshop&lt;/a>. I'm arriving at SFO on Monday 12th and leaving on Sunday the 18th. Do let me know if you want to meet and talk &lt;a href="http://www.lowrisc.org">lowRISC&lt;/a>/RISC-V or LLVM, and we'll see what we can do.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/53">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>I was getting ready to break out gitstats for some analysis of the LLVM repo and I find to my delight that Phoronix has saved me the trouble and has &lt;a href="http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=MTg3OTA">shared some stats on activity in the LLVM repo over the past year&lt;/a>.&lt;/p>&lt;p>Tom Stellard has made a blog post &lt;a href="http://www.stellard.net/tom/blog/?p=69">announcing some recent RadeonSI performance improvements&lt;/a> on his LLVM development branch. This includes 60% improvement in one OpenCL benchmark and 10-25% in a range of other OpenCL tests.&lt;/p>&lt;p>Gaëtan Lehmann has written a blog post about &lt;a href="http://blog.glehmann.net/2014/12/29/Playing-with-libclang/">getting started with libclang using the Python bindings&lt;/a>.&lt;/p>&lt;p>The C++ Filesystem Technical Specification, based on the Boost.Filesystem library &lt;a href="http://article.gmane.org/gmane.comp.lib.boost.devel/256220">has been approved&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Virgile Bello has some questions on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80215">how he can control the calling convention in LLVM&lt;/a>. In this case, he has an CLR frontend and is trying to pass an object on the CLR stack to a native Win32 function. Reid Kleckner &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80217">suggests&lt;/a> the best way may be to just link with Clang and use its implementation. In another followup, he links to the &lt;a href="http://llvm.org/devmtg/2014-10/Slides/Skip%20the%20FFI.pdf">talk on this topic&lt;/a> at the last LLVM dev meeting.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/40426">Is anybody using the ModuleBuilder class in Clang?&lt;/a>. If so, now is the time to speak up as it's slated to be removed.&lt;/p>&lt;/li>&lt;li>&lt;p>Sami Liedes has &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/40474">set up a new bot to test Clang with fuzzed inputs&lt;/a>. A report from the bot is available &lt;a href="http://sli.dy.fi/~sliedes/clang-triage/triage_report.xhtml">here&lt;/a> and the code is &lt;a href="https://github.com/sliedes/clang-triage">here&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The release of LLVM/Clang 3.5.1 may be slightly delayed due to the addition of new patches late in the process. Chandler Carruth &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80202">points out&lt;/a> that there are some unpleasant bugs in InstCombine in the current 3.5.1 release candidate. If there is a release candidate 3, the patch in question will definitely make it in.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Instruction selection for bit-permuting operations on PowerPC has been improved. &lt;a href="http://reviews.llvm.org/rL225056">r225056&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The scalar replacement of aggregates (SROA) pass has started to learn how to more intelligently handle split loads and stores. As explained in detail in the commit message, the old approach lead to complex IR that can be difficult for the optimizer to work with. SROA is now also more aggressive in its splitting of loads. &lt;a href="http://reviews.llvm.org/rL225061">r225061&lt;/a>, &lt;a href="http://reviews.llvm.org/rL225074">r225074&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>InstCombine will now try to transform &lt;code>A-B &amp;lt; 0&lt;/code> in to &lt;code>A &amp;lt; B&lt;/code>. &lt;a href="http://reviews.llvm.org/rL225034">r225034&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Hexagon (a Qualcomm DSP) backend has seen quite a lot of work recently. Interested parties are best of flicking through the commit log of lib/Target/Hexagon. &lt;a href="http://reviews.llvm.org/rL225005">r225005&lt;/a>, &lt;a href="http://reviews.llvm.org/rL225006">r225006&lt;/a>, etc.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>More crash bugs have been uncovered and fixed by the &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79491">naive fuzzing technique&lt;/a> previously covered in LLVM Weekly. e.g. &lt;a href="http://reviews.llvm.org/rL224915">r224915&lt;/a>.&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>The lldb website has been updated with more information about LLDB on windows, including &lt;a href="http://lldb.llvm.org/build.html#BuildingLldbOnWindows">build instructions&lt;/a>. &lt;a href="http://reviews.llvm.org/rL225023">r225023&lt;/a>.&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #52, Dec 29th 2014</title><link>https://blog.llvm.org/2014/12/llvm-weekly-52-dec-29th-2014.html</link><pubDate>Mon, 29 Dec 2014 02:20:00 +0000</pubDate><guid>https://blog.llvm.org/2014/12/llvm-weekly-52-dec-29th-2014.html</guid><description>&lt;p>Welcome to the fifty-second issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>This issue marks the end of one full year of LLVM Weekly. It's a little shorter than usual as the frenetic pace of LLVM/Clang development has slowed over the holiday period. Surprising even to me is that we managed to make it full all 52 weeks with an issue every Monday as promised. This requires a non-trivial amount of time each week (2-3+ hours), but I am intending to keep it going into 2015. I'd like to give a big thank you to everyone who's said hi at a conference, sent in corrections or tips on content, or just sent a random thank you. It's been very helpful in motivation. I don't currently intend to change anything about the structure or content of each issue for next year, but if you have any ideas then please let me know.&lt;/p>&lt;p>I can't make it to 31C3 due to the awkward timing of the event, but do let me know if there are any LLVM/Clang related talks worth sharing. There was a &lt;a href="https://events.ccc.de/congress/2014/Fahrplan/events/6050.html">talk about Code Pointer Integrity&lt;/a> which has previously been covered in LLVM Weekly and is working towards upstreaming. The video is &lt;a href="http://streaming.media.ccc.de/relive/6050">here&lt;/a>. If you're interested in &lt;a href="http://www.lowrisc.org">lowRISC&lt;/a> and at 31C3, Bunnie is leading a &lt;a href="https://events.ccc.de/congress/2014/wiki/Session:LowRISC_Discussion">discussion about it&lt;/a>at 2pm on Monday (today).&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/52">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>There doesn't seem to have been any LLVM or Clang related news over the past week. Everyone seems to be busy with non-LLVM related activities over the christmas break. If you're looking for a job though, Codeplay tell me they have two vancancies: one for a &lt;a href="https://www.codeplay.com/company/jobs/view.html?uid=15#.VJft5P84JA">debugger engineer&lt;/a> and another for a &lt;a href="https://www.codeplay.com/company/jobs/view.html?uid=12#.VJft7_84JA">compiler engineer&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>David Li has shared some &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80167">early info on Google's plans for LTO&lt;/a>. He describes the concept of 'peak optimization performance' and some of the objectives of the new design. This includes the ability to handle programs 10x or 100x the size of Firefox. We can expect more information in 2015, maybe as early as January.&lt;/p>&lt;/li>&lt;li>&lt;p>The discussion on possible approaches to reducing the size of libLLVM has continued. Chris Bieneman has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80096">shared some more size stats&lt;/a>. These gains come from removing unused intrinsics. Chandler Carruth has followed up with a pleasingly thought-provoking argument on a different approach: &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80130">target-specific intrinsics shouldn't exist in the LLVM front or middle-end&lt;/a>. He describes the obvious issues with this, with the most fiddly probably being instruction selection converting appropriate IR to the right target-specific functionality.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The SROA (scalar replacement of aggregates) pass has seen some refactoring to, in the future, allow for more intelligent rewriting. &lt;a href="http://reviews.llvm.org/rL224742">r224742&lt;/a>, &lt;a href="http://reviews.llvm.org/rL224798">r224798&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The masked load and store intrinsics have been documented. &lt;a href="http://reviews.llvm.org/rL224832">r224832&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>CodeGenPrepare learned to speculate calls to llvm.cttz/ctlz (count trailing/leading zeroes) if &lt;code>isCheapToSpeculateCtlz/isCheapToSpeculatCttz&lt;/code> in TargetLowering return true. &lt;a href="http://reviews.llvm.org/rL224899">r224899&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>The Clang internals manual has been extended with stub sections on Parse, Sema, and CodeGen. &lt;a href="http://reviews.llvm.org/rL224894">r224894&lt;/a>.&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>The libcxx LIT test-suite has seen a number of new configuration options. Even better, these are &lt;a href="http://libcxx.llvm.org/lit_usage.html">now documented&lt;/a>. &lt;a href="http://reviews.llvm.org/rL224728">r224728&lt;/a>.&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #51, Dec 22nd 2014</title><link>https://blog.llvm.org/2014/12/llvm-weekly-51-dec-22nd-2014.html</link><pubDate>Mon, 22 Dec 2014 02:57:00 +0000</pubDate><guid>https://blog.llvm.org/2014/12/llvm-weekly-51-dec-22nd-2014.html</guid><description>&lt;p>Welcome to the fifty-first issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>Last week as part of the &lt;a href="http://www.lowrisc.org/">lowRISC project&lt;/a> I was involved in &lt;a href="http://www.lowrisc.org/docs/memo-2014-001-tagged-memory-and-minion-cores/">sharing our plans for tagged memory and 'minion' cores&lt;/a> in the initial version. We've almost made it a full year of LLVM Weekly with no interruption of service!&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/51">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>3.5.1-rc2 &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/80017">has been tagged&lt;/a>, time to get testing again.&lt;/p>&lt;p>Version 0.15.1 of LDC, the LLVM D Compiler &lt;a href="http://forum.dlang.org/thread/zpjjzbkwlisjemoxutms@forum.dlang.org">has been released&lt;/a>. The most prominent feature is probably the addition of preliminary support for MSVC on Win64.&lt;/p>&lt;p>SN Systems (part of Sony) have written a blog post &lt;a href="http://www.snsystems.com/technology/2014/12/18/abi-bugs-are-a-nightmare/">describing their recently contributed ABI test suite&lt;/a>.&lt;/p>&lt;p>Peter Wilmott has &lt;a href="https://p8952.info/ruby/2014/12/12/benchmarking-ruby-with-gcc-and-clang.html">benchmarked Ruby across various GCC and Clang releases&lt;/a>. The &lt;a href="https://news.ycombinator.com/item?id=8762654">discussion at HN&lt;/a> may be of interest.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Elena Demikhovsky has posted a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79936">proposal for indexed load and store intrinsics&lt;/a>. These are intended for AVX-512 or AVX2 gather/scatter instructions which allow read/write access to multiple memory addresses.&lt;/p>&lt;/li>&lt;li>&lt;p>Chad Rosier kicked off a discussion on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79849">lowering switch statements in the presence of data from profile guided optimisation&lt;/a>. There's some quite detailed discussion about when to use a Huffman tree vs a jump table.&lt;/p>&lt;/li>&lt;li>&lt;p>Andrew Kaylor has posted &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79965">his impression of what needs to be done for MSVC exception handling support&lt;/a>. Reid Kleckner's &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79997">response&lt;/a> is informative.&lt;/p>&lt;/li>&lt;li>&lt;p>Ulrich Weigand is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79912">taking over ownership of the SystemZ port&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM/Clang 3.6 is expected to branch in January. Marshall Clow has shared a &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/40292">summary of the timings of releases over the past few years&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Sean Silva has shared some &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79962">thorough notes on the use of standard deviation and benchmarking in general&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Metadata is now typeless in assembly. &lt;a href="http://reviews.llvm.org/rL224257">r224257&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>PowerPC instruction selection for bit-permuting operations has been improved. &lt;a href="http://reviews.llvm.org/rL224318">r224318&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>An optimisation has been added to move sign/zero extends close to loads which causes performance improvements of 2-3% on a few benchmarks on x86. &lt;a href="http://reviews.llvm.org/rL224351">r224351&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>More overflow arithmetic intrinsics are strength reduced into regular arithmetic operations if possible. &lt;a href="http://reviews.llvm.org/rL224417">r224417&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Codegen for 'omp for' has started to be committed. &lt;a href="http://reviews.llvm.org/rL224233">r224233&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;code>-save-temps&lt;/code> will now emit unoptimized bitcode files. &lt;a href="http://reviews.llvm.org/rL224688">r224688&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The libcxx test suite can be run with ccache now. &lt;a href="http://reviews.llvm.org/rL224603">r224603&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Breakpoints can now be tagged with a name in lldb. &lt;a href="http://reviews.llvm.org/rL224392">r224392&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #50, Dec 15th 2014</title><link>https://blog.llvm.org/2014/12/llvm-weekly-50-dec-15th-2014.html</link><pubDate>Mon, 15 Dec 2014 03:29:00 +0000</pubDate><guid>https://blog.llvm.org/2014/12/llvm-weekly-50-dec-15th-2014.html</guid><description>&lt;p>Welcome to the fiftieth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>I'll be at &lt;a href="http://www.microarch.org/micro47/">MICRO-47&lt;/a> this week. If you're there do say hi, especially if you want to chat about LLVM or lowRISC/RISC-V.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/50">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The videos and slides from the 2014 LLVM dev meeting went online last week. I already linked to them then, but there's enough interesting stuff there I think I can justify &lt;a href="http://llvm.org/devmtg/2014-10/">linking again&lt;/a>.&lt;/p>&lt;p>LLVM/Clang 3.5.1-rc1 &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79743">has been tagged&lt;/a>. Volunteer testers are very welcome.&lt;/p>&lt;p>Clang UPC 3.4.1 &lt;a href="http://clangupc.github.io/2014/11/03/clang-upc-3-4-1-1-announcement/">has been released&lt;/a>. This is a Unified Parallel C compiler that can target SMP systems or &lt;a href="http://clangupc.github.io/portals4/">Portals4&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Discussion has continued on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79435">future plans for GC in LLVM&lt;/a> with input from &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79567">Russel Hadley at Microsoft&lt;/a> and &lt;a href="article.gmane.org/gmane.comp.compilers.llvm.devel/79581">Ben Karel&lt;/a>, who seems to be the most extensive user of the existing GC infrastructure with his &lt;a href="https://code.google.com/p/foster/">Foster language&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Chris Bieneman started a discussion about &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79657">supporting stripping out unused instrinsics&lt;/a> with the aim of reducing the size of libLLVM. The proposed patches reduce binary size by &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79736">~500k&lt;/a>, which he later points out is more significant in the context of their already size-reduced build.&lt;/p>&lt;/li>&lt;li>&lt;p>Marshall Clow has shared a &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/40061">proposal on how to manage ABI changes in libc++&lt;/a>. The proposal involves introducing macros to enable ABI-breaking changes.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The LLVM Kaleidoscope tutorial has been extended with an 8th chapter, describing how to add debug information using DWARF And DIBuilder. &lt;a href="http://reviews.llvm.org/rL223671">r223671&lt;/a>. A rendered version can be found &lt;a href="http://llvm.org/docs/tutorial/LangImpl8.html">here&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Extensive documentation has been added for the MergeFunctions pass. &lt;a href="http://reviews.llvm.org/rL223931">r223931&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A monster commit to split Metadata from the Value class hierarchy has landed. &lt;a href="http://reviews.llvm.org/rL223802">r223802&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>InstrProf has been born. This involves the &lt;code>llvm.instrprof_increment&lt;/code> instrinsic and the &lt;code>-instrprof&lt;/code> pass. This moves logic from Clang's CodeGenPGO into LLVM. &lt;a href="http://reviews.llvm.org/rL223672">r223672&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>With the addition of support for SELECT nodes, the MIPS backend now supports codegen of MIPS-II targets on the LLVM test-suite. Code generation has also been enabled for MIPS-III. &lt;a href="http://reviews.llvm.org/rL224124">r224124&lt;/a>, &lt;a href="http://reviews.llvm.org/rL224128">r224128&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Work has started on an LLVM-based dsymutil tool, with the aim to replace Darwin's dsymutil (a DWARF linker). &lt;a href="http://reviews.llvm.org/rL224134">r223793&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LiveInterval has gained support to track the liveness of subregisters. &lt;a href="http://reviews.llvm.org/rL223877">r223877&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Work has started on converting moves to pushes on X86 when appropriate. &lt;a href="http://reviews.llvm.org/rL223757">r223757&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Print and verify passes are now added after each MachineFunctionPass by default, rather than on some arbitrarily chosen subset. &lt;a href="http://reviews.llvm.org/rL224059">r224042&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM now requires Python 2.7. Previously 2.5 was required. &lt;a href="http://reviews.llvm.org/rL224129">r224129&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The &lt;code>__builtin_call_with_static_chain&lt;/code> GNU extension has been implemented. &lt;a href="http://reviews.llvm.org/rL224167">r224167&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang's CodeGenPGO has moved to using the new LLVM &lt;code>-instrprof&lt;/code> pass. &lt;a href="http://reviews.llvm.org/rL223683">r223683&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang now accepts Intel microarchitecture names as the &lt;code>-march&lt;/code> argument. &lt;a href="http://reviews.llvm.org/rL223776">r223776&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>libcxx gained relational operators in std::experimental::optional. &lt;a href="http://reviews.llvm.org/rL223775">r223775&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libcxx can now be built as a 32-bit library. &lt;a href="http://reviews.llvm.org/rL224096">r224096&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The lldb unwinder has learned to use unwind information from the compact-unwind section for x86-64 and i386 on Darwin. &lt;a href="http://reviews.llvm.org/rL223625">r223625&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #49, Dec 8th 2014</title><link>https://blog.llvm.org/2014/12/llvm-weekly-49-dec-8th-2014.html</link><pubDate>Mon, 08 Dec 2014 08:14:00 +0000</pubDate><guid>https://blog.llvm.org/2014/12/llvm-weekly-49-dec-8th-2014.html</guid><description>&lt;p>Welcome to the forty-ninth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/49">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Most of the 2014 LLVM Developers' Meeting videos and slides are &lt;a href="http://llvm.org/devmtg/2014-10/index.html">now online&lt;/a>. Sadly, there are no videos from the talks by Apple employees yet. Hopefully they'll be appearing later.&lt;/p>&lt;p>QuarksLab has a rather nice write-up of &lt;a href="http://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html">deobfuscating an OLLVM-protected program&lt;/a>.&lt;/p>&lt;p>The LLVM-based ELLCC has been making progress on &lt;a href="http://ellcc.org/blog/?p=22979">ELK, a bare-metal POSIX-like environment&lt;/a>.&lt;/p>&lt;p>Support for statepoints landed in LLVM this week, and Philip Reames has a blog post detailing &lt;a href="http://www.philipreames.com/Blog/2014/12/04/statepoint-patches-have-landed/">some notes and caveats&lt;/a>. See also the mailing list discussion linked to below about future plans for GC in LLVM.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Sami Liedes &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79491">shares his workflow for using afl-fuzz with the Clang test suite&lt;/a>. In 11 hours of testing he managed to find 34 distinct assertion failures and at least one segmentation fault.&lt;/p>&lt;/li>&lt;li>&lt;p>Duncan P.N. Exon Smith has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79437">shared an updated on his work on the metadata-value split&lt;/a>, detailing the new semantic restrictions this will entail.&lt;/p>&lt;/li>&lt;li>&lt;p>Philip Reames has a post &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79435">detailing his future plans for GC in LLVM&lt;/a>. Comments are invited. The aim is to eventually delete the existing gcroot lowering code. If you are actively using this, please do speak up.&lt;/p>&lt;/li>&lt;li>&lt;p>John Yates, who worked on the compiler for the Apollo Computer's DN10K has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79416">shared a description of how that compiler would have handled one of the recent examples from the Souper work&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>How can you reproduce Clang's &lt;code>-O3&lt;/code> using &lt;code>opt&lt;/code>? The &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79367">answer&lt;/a>, thanks for Tobias Grosser, is &lt;code>clang -O3 -mllvm -disable-llvm-optzns&lt;/code> followed by &lt;code>opt -O3&lt;/code>.&lt;/p>&lt;/li>&lt;li>&lt;p>Tobias Grosser is seeking community feedback on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79366">where in the pipeline the Polly loop optimiser should run&lt;/a>. The post is well worth a read for the discussion of expected trade-offs.&lt;/p>&lt;/li>&lt;li>&lt;p>Rafael Espíndola has been working on type merging during LTO and ultimately &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.cvs/218148">proposes moving to a single pointer type in LLVM IR&lt;/a>. There seems to be positive feedback on the idea, given that pointer types don't convey useful information to the optimizer and don't really provide safety.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The statepoint infrastructure for garbage collection has landed. See the final patch in the series for documentation. &lt;a href="http://reviews.llvm.org/rL223078">r223078&lt;/a>, &lt;a href="http://reviews.llvm.org/rL223085">r223085&lt;/a>, &lt;a href="http://reviews.llvm.org/rL223137">r223137&lt;/a>, &lt;a href="http://reviews.llvm.org/rL223143">r223143&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM assembler gained support for ARM's funky modified-immediate assembly syntax. &lt;a href="http://reviews.llvm.org/rL223113">r223113&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The OCaml bindings now has a CMake buildsystem. &lt;a href="http://reviews.llvm.org/rL223071">r223071&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The PowerPC backend gained support for readcyclecounter on PPC32. &lt;a href="http://reviews.llvm.org/rL223161">r223161&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for 'prologue' metadata on functions has been added. This can be used for inserting arbitrary code at a function entrypoint. This was previously known as prefix data, and that term has been recycled to be used for inserting data just before the function entrypoint. &lt;a href="http://reviews.llvm.org/rL223189">r223189&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>PowerPC gained a Power8 instruction schedule definition &lt;a href="http://reviews.llvm.org/rL223257">r223257&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLVM IR for vtable addresses now uses the type of the field being pointed to, to enable more optimisations. &lt;a href="http://reviews.llvm.org/rL223267">r223267&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>New attributes have been added to specify AMDGPU register limits. This is a performance hint that can be used to attempt to limit the number of used registers. &lt;a href="http://reviews.llvm.org/rL223384">r223384&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang gained the &lt;code>__has_declspec_attribute&lt;/code> preprocessor macro. &lt;a href="http://reviews.llvm.org/rL223467">r223467&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;code>__has_attribute&lt;/code> now only looks for GNU-style attributes. You should be able to use &lt;code>__has_cpp_atribute&lt;/code> or &lt;code>__has_declspec_attribute&lt;/code> instead. &lt;a href="http://reviews.llvm.org/rL223468">r223468&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>DataFlowSanitizer is now supported for MIPS64. &lt;a href="http://reviews.llvm.org/rL223517">r223517&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libcxx now supported &lt;code>std::random_device&lt;/code> on (P)NaCl. &lt;a href="http://reviews.llvm.org/rL223068">r223068&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>An effort has started in lld to reduce abstraction around InputGraph, which has been found to get in the way of new features due to excessive information hiding. &lt;a href="http://reviews.llvm.org/rL223330">r223330&lt;/a>. The commit has been temporarily reverted due to breakage on Darwin and ELF.&lt;/p>&lt;/li>&lt;li>&lt;p>A large chunk of necessary code for Clang module support has been added to LLDB. &lt;a href="http://reviews.llvm.org/rL223433">r223433&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB now has &lt;a href="http://lldb.llvm.org/lldb-coding-conventions.html">documented coding conventions&lt;/a>. &lt;a href="http://reviews.llvm.org/rL223543">r223543&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #48, Dec 1st 2014</title><link>https://blog.llvm.org/2014/12/llvm-weekly-48-dec-1st-2014.html</link><pubDate>Mon, 01 Dec 2014 06:57:00 +0000</pubDate><guid>https://blog.llvm.org/2014/12/llvm-weekly-48-dec-1st-2014.html</guid><description>&lt;p>Welcome to the forty-eighth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/48">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>John Regehr has posted an &lt;a href="http://blog.regehr.org/archives/1192">update on the Souper superoptimizer&lt;/a> which he and his collaborators have been working on. They have implemented a reducer for Souper optimizations that tries to reduce the optimization to something more minimal. There current results given ~4000 distinct optimisations of which ~1500 LLVM doesn't know how to do. Of course many of these may in fact be covered by a single rule or pass. One of the next steps for Souper is to extend Souper to support the synthesis of instruction sequences. See also the &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79104">discussion on the llvm mailing list&lt;/a>.&lt;/p>&lt;p>The LLVM Blog features a summary of &lt;a href="http://blog.llvm.org/2014/11/loop-vectorization-diagnostics-and.html">recent advances in loop vectorization for LLVM&lt;/a>. This includes diagnostics remarks to get feedback on why loops which aren't vectorized are skipped, the loop pragma directive in Clang, and performance warnings when the directive can't be followed.&lt;/p>&lt;p>The LLVM Haskell Compiler (LHC) has been &lt;a href="http://lhc-compiler.blogspot.co.uk/2014/11/the-new-lhc.html">newly reborn&lt;/a> along with &lt;a href="http://lhc-compiler.blogspot.co.uk/2014/11/very-minimal-hello-world.html">its blog&lt;/a>. The next steps in development are to provide better support for Haskell2010, give reusable libraries for name resolution and type checking, and to produce human-readable compiler output.&lt;/p>&lt;p>The next LLVM Social in Paris &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/5830">will take place on December 9th&lt;/a>.&lt;/p>&lt;p>Intel have published a blog post &lt;a href="https://software.intel.com/en-us/blogs/2014/11/24/what-is-new-for-x86-in-upcoming-gcc-50">detailing new X86-specific optimisations in GCC 5.0&lt;/a>. You may also be interested in the &lt;a href="https://news.ycombinator.com/item?id=8675274">discussion of this post on Hacker News&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Hal Finkel has posted an RFC suggesting the &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79192">removal of the BBVectorize pass&lt;/a> on the basis that it hasn't progressed to production quality while the SLP vectorizer exists and has been enabled for some time and it has various bugs and code fixmes. If you feel differently, now is the time to speak up.&lt;/p>&lt;/li>&lt;li>&lt;p>Yichao Yu is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79113">curious about the current state of MCJIT for ARM&lt;/a>. Several people responded to say they've been using it with few problems on ARM, though Renato Golin &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79147">would like to see a few more success stories&lt;/a> before marking it as 'supported' on the appropriate status page.&lt;/p>&lt;/li>&lt;li>&lt;p>Tom Stellard is planning to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79059">start the 3.5.1 release cycle&lt;/a> shortly. Let him know if you'd like to help with testing.&lt;/p>&lt;/li>&lt;li>&lt;p>When developing a non-upstreamed LLVM backend, &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79145">should you do it as a loadable module or just apply to a cloned LLVM repo&lt;/a>? Rafael Auler has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/79191">tried the approach of building his backend as a loadable module&lt;/a> and feels it would have been better to fork LLVM and rebase when necessary. This is the approach your esteemed editor has taken (though admittedly it's been far too long since he rebased...).&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Support for &lt;code>-debug-ir&lt;/code> (emitting the LLVM IR in debug data) was removed. There's no real justification or explanation in the commit message, but it's likely it was unfinished/unused/non-functional. &lt;a href="http://reviews.llvm.org/rL222945">r222945&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>InstCombine will now canonicalize toward the value type being stored rather than the pointer type. The rationale (explained in more detail in the commit message) is that memory does not have a type, but operations and the values they produce do. &lt;a href="http://reviews.llvm.org/rL222748">r222748&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The documentation for &lt;code>!invariant.load&lt;/code> metadata has been clarified. &lt;a href="http://reviews.llvm.org/rL222700">r222700&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>In tablegen, neverHasSideEffects=1 is now hasSideEffects=0. &lt;a href="http://reviews.llvm.org/rL222801">r222801&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Four new ASTMatchers have been added: typedefDecl, isInMainFile, isInSystemFile, and isInFileMatchinName. &lt;a href="http://reviews.llvm.org/rL222646">r222646&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The documentation on MSVC compatibility has been updated to represent the current state of affairs. Clang has also gained support for rethrowing MS C++ exceptions. &lt;a href="http://reviews.llvm.org/rL222731">r222731&lt;/a>, &lt;a href="http://reviews.llvm.org/rL222733">r222733&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Initial tests have been added for lldb-mi (the LLDB machine interface). &lt;a href="http://reviews.llvm.org/rL222750">r222750&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libcxxabi can now be built and tested without threads using CMake. &lt;a href="http://reviews.llvm.org/rL222702">r222702&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The compact-unwind-dumper tool now has complete support for x86-64 and i386 binaries. &lt;a href="http://reviews.llvm.org/rL222951">r222951&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>Loop Vectorization: Diagnostics and Control</title><link>https://blog.llvm.org/2014/11/loop-vectorization-diagnostics-and.html</link><pubDate>Mon, 24 Nov 2014 15:12:00 +0000</pubDate><guid>https://blog.llvm.org/2014/11/loop-vectorization-diagnostics-and.html</guid><description>&lt;span style="font-weight: normal;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif;">&lt;a href="http://llvm.org/docs/Vectorizers.html" style="letter-spacing: 0px; text-align: justify;">&lt;span style="letter-spacing: 0px;">Loop vectorization&lt;/span>&lt;/a>&lt;span style="letter-spacing: 0px; text-align: justify;"> was first introduced in LLVM 3.2 and turned on by default in LLVM 3.3. It has been discussed previously on this blog in &lt;/span>&lt;a href="http://blog.llvm.org/2012/12/new-loop-vectorizer.html" style="letter-spacing: 0px; text-align: justify;">&lt;span style="letter-spacing: 0px;">2012&lt;/span>&lt;/a>&lt;span style="letter-spacing: 0px; text-align: justify;"> and &lt;/span>&lt;a href="http://blog.llvm.org/2013/05/llvm-33-vectorization-improvements.html" style="letter-spacing: 0px; text-align: justify;">&lt;span style="letter-spacing: 0px;">2013&lt;/span>&lt;/a>&lt;span style="letter-spacing: 0px; text-align: justify;">, as well as at &lt;/span>&lt;a href="https://archive.fosdem.org/2014/schedule/event/llvmautovec/" style="letter-spacing: 0px; text-align: justify;">&lt;span style="letter-spacing: 0px;">FOSDEM 2014&lt;/span>&lt;/a>&lt;span style="letter-spacing: 0px; text-align: justify;">, and at&amp;nbsp;&lt;/span>&lt;a href="http://llvm.org/devmtg/2013-11/#talk10" style="letter-spacing: 0px; text-align: justify;">&lt;span style="letter-spacing: 0px;">Apple's WWDC 2013&lt;/span>&lt;/a>&lt;span style="letter-spacing: 0px; text-align: justify;">. The LLVM loop vectorizer combines multiple iterations of a loop to improve performance. Modern processors can exploit the independence of the interleaved instructions using advanced hardware features, such as multiple execution units and out-of-order execution, to improve performance.&lt;/span>&lt;/span>&lt;/span>&lt;br />&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif; letter-spacing: 0px;">Unfortunately, when loop vectorization is not possible or profitable the loop is silently skipped. This is a problem for many applications that rely on the performance vectorization provides. Recent updates to LLVM provide command line arguments to help diagnose vectorization issues and new a pragma syntax for tuning loop vectorization, interleaving, and unrolling.&lt;/span>&lt;/div>&lt;h2>&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif; font-size: large; letter-spacing: 0px;">&lt;b>New Feature: Diagnostics Remarks&lt;/b>&lt;/span>&lt;/h2>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif;">&lt;span style="letter-spacing: 0px; text-decoration: underline;">&lt;a href="http://llvm.org/docs/Vectorizers.html#diagnostics">Diagnostic remarks&lt;/a>&lt;/span>&lt;span style="letter-spacing: 0px;"> provide the user with an insight into the behavior of the behavior of LLVM’s optimization passes including unrolling, interleaving, and vectorization. They are enabled using the &lt;a href="http://clang.llvm.org/docs/UsersManual.html#options-to-emit-optimization-reports">&lt;span style="letter-spacing: 0px;">Rpass command line arguments&lt;/span>&lt;/a>. Interleaving and vectorization diagnostic remarks are produced by specifying the ‘loop-vectorize’ pass. For example, specifying ‘-Rpass=loop-vectorize’ tells us the following loop was vectorized by 4 and interleaved by 2.&lt;/span>&lt;span style="letter-spacing: 0px;">&lt;span style="letter-spacing: 0px;">&lt;/span>&lt;/span>&lt;/span>&lt;/div>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">void test1(int *List, int Length) {&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; int i = 0;&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; while(i &amp;lt; Length) {&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; &amp;nbsp; List[i] = i*2;&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; &amp;nbsp; i++;&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; }&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">}&lt;/span>&lt;/div>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">clang -O3 &lt;/span>&lt;span style="color: #ae1916; letter-spacing: 0.0px;">-Rpass=loop-vectorize &lt;/span>&lt;span style="letter-spacing: 0.0px;">-S test1.c -o /dev/null&lt;/span>&lt;/span>&lt;/div>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">test1.c:4:5: &lt;/span>&lt;span style="color: #5330e1; letter-spacing: 0.0px;">remark:&amp;nbsp;&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #5330e1; letter-spacing: 0.0px;">&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>&lt;/span>&lt;span style="letter-spacing: 0.0px;">vectorized loop (vectorization factor: 4, unrolling interleave factor: 2)&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; &amp;nbsp; &lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">while(i &amp;lt; Length) {&lt;/span>&lt;/div>&lt;div style="color: #34bd26;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0px;">&amp;nbsp; &amp;nbsp; &lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>&lt;/span>&lt;span style="color: #01a900; letter-spacing: 0px;">^&lt;/span>&lt;/span>&lt;/div>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif; letter-spacing: 0.0px;">Many loops cannot be vectorized including loops with complicated control flow, unvectorizable types, and unvectorizable calls. For example, to prove it is safe to vectorize the following loop we must prove that array ‘A’ is not an alias of array ‘B’. However, the bounds of array ‘A’ cannot be identified.&lt;/span>&lt;/div>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">void test2(int *A, int *B, int Length) {&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; for (int i = 0; i &amp;lt; Length; i++)&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; &amp;nbsp; A[B[i]]++;&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">}&lt;/span>&lt;/div>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0px;">clang -O3 &lt;/span>&lt;span style="color: #ae1916; letter-spacing: 0px;">-Rpass-analysis=loop-vectorize &lt;/span>&lt;span style="letter-spacing: 0px;">-S test2.c -o /dev/null&lt;/span>&lt;/span>&lt;/div>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">test2.c:3:5: &lt;/span>&lt;span style="color: #5330e1; letter-spacing: 0.0px;">remark:&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #5330e1; letter-spacing: 0.0px;">&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>&lt;/span>&lt;span style="letter-spacing: 0.0px;">loop not vectorized: cannot identify array bounds&lt;/span>&lt;/span>&lt;br />&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">for (int i = 0; i &amp;lt; Length; i++)&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>&amp;nbsp; &amp;nbsp; &lt;/span>&lt;span style="color: #01a900; letter-spacing: 0.0px;">^&lt;/span>&lt;/span>&lt;/div>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif; letter-spacing: 0px;">Control flow and other unvectorizable statements are reported by the '-Rpass-analysis' command line argument. For example, many uses of ‘break’ and ‘switch’ are not vectorizable.&lt;/span>&lt;br />&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif; letter-spacing: 0px;">&lt;br />&lt;/span>&lt;/div>&lt;table align="center" style="border-collapse: collapse; width: 90%;">&lt;thead>&lt;tr style="background-color: silver;">&lt;th width="300px">&lt;span style="letter-spacing: 0px;">&lt;span style="font-family: Courier New, Courier, monospace; font-size: small;">C/C++ Code&lt;/span>&lt;/span>&lt;/th>&lt;th>&lt;span style="font-family: Courier New, Courier, monospace;">-Rpass-analysis=loop-vectorize&lt;/span>&lt;/th>&lt;/tr>&lt;/thead>&lt;tbody>&lt;tr style="background-color: #e8e8e8;">&lt;td>&lt;div>&lt;span style="letter-spacing: 0px;">&lt;span style="font-family: Courier New, Courier, monospace;">for (int i = 0; i &amp;lt; Length; i++) {&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="letter-spacing: 0px;">&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; if (A[i] &amp;gt; 10.0)&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="letter-spacing: 0px;">&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; break;&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="letter-spacing: 0px;">&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; A[i] = 0;&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;span style="letter-spacing: 0px;">&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/span>&lt;/div>&lt;/td>&lt;td>&lt;div style="text-align: justify;">&lt;div style="text-align: left;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0px;">control_flow.cpp:5:9:&amp;nbsp;&lt;/span>&lt;span style="color: #5330e1; letter-spacing: 0px;">remark:&amp;nbsp;&lt;/span>&lt;span style="letter-spacing: 0px;">loop not vectorized: loop control flow is not understood by vectorizer&lt;/span>&lt;/span>&lt;/div>&lt;/div>&lt;div style="text-align: justify;">&lt;div style="text-align: left;">&lt;span style="letter-spacing: 0px;">&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; if (A[i] &amp;gt; 10.0)&lt;/span>&lt;/span>&lt;/div>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;div style="text-align: left;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0px;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="color: #578726; letter-spacing: 0px;">^&lt;/span>&lt;/span>&lt;/div>&lt;/div>&lt;/td>&lt;/tr>&lt;tr style="background-color: #d7d7d7;">&lt;td>&lt;div>&lt;span style="letter-spacing: 0px;">&lt;span style="font-family: Courier New, Courier, monospace;">for (int i = 0; i &amp;lt; Length; i++) {&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="letter-spacing: 0px;">&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; switch(A[i]) {&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="letter-spacing: 0px;">&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; case 0: B[i] = 1; break;&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="letter-spacing: 0px;">&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; case 1: B[i] = 2; break;&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="letter-spacing: 0px;">&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; default: B[i] = 3;&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="letter-spacing: 0px;">&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; }&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;span style="letter-spacing: 0px;">&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/span>&lt;/div>&lt;/td>&lt;td>&lt;div style="text-align: justify;">&lt;div style="text-align: left;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0px;">no_switch.cpp:4:5:&amp;nbsp;&lt;/span>&lt;span style="color: #5330e1; letter-spacing: 0px;">remark:&amp;nbsp;&lt;/span>&lt;span style="letter-spacing: 0px;">loop not vectorized: loop contains a switch statement&lt;/span>&lt;/span>&lt;/div>&lt;/div>&lt;div style="text-align: justify;">&lt;div style="text-align: left;">&lt;span style="letter-spacing: 0px;">&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; switch(A[i]) {&lt;/span>&lt;/span>&lt;/div>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;div style="text-align: left;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0px;">&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="color: #578726; letter-spacing: 0px;">^&lt;/span>&lt;/span>&lt;/div>&lt;/div>&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>&lt;br />&lt;h2>&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif; font-size: large; letter-spacing: 0px;">&lt;b>New Feature: Loop Pragma Directive&lt;/b>&lt;/span>&lt;/h2>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif;">&lt;span style="letter-spacing: 0px;">Explicitly control over the behavior of vectorization, interleaving and unrolling is necessary to fine tune the performance. For example, when compiling for size (-Os) it's a good idea to vectorize the hot loops of the application to improve performance. Vectorization, interleaving, and unrolling can be explicitly specified using the &lt;/span>&lt;a href="http://clang.llvm.org/docs/LanguageExtensions.html#extensions-for-loop-hint-optimizations" style="letter-spacing: 0px;">&lt;span style="letter-spacing: 0px;">#pragma clang loop&lt;/span>&lt;/a>&lt;span style="letter-spacing: 0px;">&amp;nbsp;&lt;/span>directive&lt;span style="letter-spacing: 0px;">&amp;nbsp;prior to any for, while, do-while, or c++11 range-based for loop. For example, the vectorization width and interleaving count is explicitly specified for the following loop using the loop pragma directive.&lt;/span>&lt;span style="letter-spacing: 0px;">&lt;span style="letter-spacing: 0px;">&lt;/span>&lt;/span>&lt;/span>&lt;/div>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">void test3(float *Vx, float *Vy, float *Ux, float *Uy, float *P, int Length) {&lt;/span>&lt;/div>&lt;div style="color: #ae1916;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">#pragma clang loop vectorize_width(4) interleave_count(4)&lt;/span>&lt;/div>&lt;div style="color: #ae1916;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">#pragma clang loop unroll(disable)&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; for (int i = 0; i &amp;lt; Length; i++) {&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; &amp;nbsp; float A = Vx[i] * Ux[i];&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; &amp;nbsp; float B = A + Vy[i] * Uy[i];&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; &amp;nbsp; P[i] = B;&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp;&amp;nbsp; }&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">}&lt;/span>&lt;/div>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">clang -O3 &lt;/span>&lt;span style="color: #ae1916; letter-spacing: 0.0px;">-Rpass=loop-vectorize &lt;/span>&lt;span style="letter-spacing: 0.0px;">-S test3.c -o /dev/null&lt;/span>&lt;/span>&lt;/div>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">test3.c:5:5: &lt;/span>&lt;span style="color: #5330e1; letter-spacing: 0.0px;">remark:&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #5330e1; letter-spacing: 0.0px;">&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>&lt;/span>&lt;span style="letter-spacing: 0.0px;">vectorized loop (vectorization factor: 4, unrolling interleave factor: 4)&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">for (int i = 0; i &amp;lt; Length; i++) {&lt;/span>&lt;/div>&lt;div style="color: #34bd26;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0px;">&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>&amp;nbsp; &amp;nbsp; &lt;/span>&lt;span style="color: #01a900; letter-spacing: 0px;">^&lt;/span>&lt;/span>&lt;/div>&lt;h3>&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif; font-size: large; letter-spacing: 0px;">&lt;b>Integer Constant Expressions&lt;/b>&lt;/span>&lt;/h3>&lt;div style="text-align: justify;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif; letter-spacing: 0px;">The options vectorize_width, interleave_count, and unroll_count take an integer constant expression. So it can be computed as in the example below.&lt;/span>&lt;/div>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">template &amp;lt;int ArchWidth, int ExecutionUnits&amp;gt;&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">void test4(float *Vx, float *Vy, float *Ux, float *Uy, float *P, int Length) {&lt;/span>&lt;/div>&lt;div style="color: #ae1916;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">#pragma clang loop vectorize_width(ArchWidth)&lt;/span>&lt;/div>&lt;div style="color: #ae1916;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">#pragma clang loop interleave_count(ExecutionUnits * 4)&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; for (int i = 0; i &amp;lt; Length; i++) {&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; &amp;nbsp; float A = Vx[i] * Ux[i];&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; &amp;nbsp; float B = A + Vy[i] * Uy[i];&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; &amp;nbsp; P[i] = B;&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp;&amp;nbsp; }&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">}&lt;/span>&lt;/div>&lt;div style="min-height: 13px;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">void compute_test4(float *Vx, float *Vy, float *Ux, float *Uy, float *P, int Length) {&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; const int arch_width = 4;&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; const int exec_units = 2;&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; test4&amp;lt;arch_width, exec_units&amp;gt;(Vx, Vy, Ux, Uy, P, Length);&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">}&lt;/span>&lt;/div>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">clang -O3 &lt;/span>&lt;span style="color: #ae1916; letter-spacing: 0.0px;">-Rpass=loop-vectorize &lt;/span>&lt;span style="letter-spacing: 0.0px;">-S test4.cpp -o /dev/null&lt;/span>&lt;/span>&lt;/div>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">test4.cpp:6:5: &lt;/span>&lt;span style="color: #5330e1; letter-spacing: 0.0px;">remark:&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #5330e1; letter-spacing: 0.0px;">&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>&lt;/span>&lt;span style="letter-spacing: 0.0px;">vectorized loop (vectorization factor: 4, unrolling interleave factor: 8)&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">for (int i = 0; i &amp;lt; Length; i++) {&lt;/span>&lt;/div>&lt;div style="color: #34bd26;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0px;">&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>&amp;nbsp; &amp;nbsp; &lt;/span>&lt;span style="color: #01a900; letter-spacing: 0px;">^&lt;/span>&lt;/span>&lt;/div>&lt;h3>&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif; font-size: large; letter-spacing: 0.0px;">&lt;b>Performance Warnings&lt;/b>&lt;/span>&lt;/h3>&lt;div style="text-align: justify;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif; letter-spacing: 0px;">Sometimes the loop transformation is not safe to perform. For example, vectorization fails due to the use of complex control flow. If vectorization is explicitly specified a warning message is produced to alert the programmer that the directive cannot be followed. For example, the following function which returns the last positive value in the loop, cannot be vectorized because the ‘last_positive_value’ variable is used outside the loop.&lt;/span>&lt;/div>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">int test5(int *List, int Length) {&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; int last_positive_index = 0;&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; #pragma clang loop vectorize(enable)&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; for (int i = 1; i &amp;lt; Length; i++) {&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; &amp;nbsp; if (List[i] &amp;gt; 0) {&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; &amp;nbsp; &amp;nbsp; last_positive_index = i;&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; &amp;nbsp; &amp;nbsp; continue;&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; &amp;nbsp; }&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; &amp;nbsp; List[i] = 0;&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; }&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; return last_positive_index;&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">}&lt;/span>&lt;/div>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">clang -O3 -g -S test5.c -o /dev/null&lt;/span>&lt;/div>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="letter-spacing: 0.0px;">test5.c:5:9: &lt;/span>&lt;span style="color: #d53bd3; letter-spacing: 0.0px;">warning:&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #d53bd3; letter-spacing: 0.0px;">&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>&lt;/span>&lt;span style="letter-spacing: 0.0px;">loop not vectorized: failed explicitly specified loop vectorization&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">for (int i = 1; i &amp;lt; Length; i++) {&lt;/span>&lt;/div>&lt;div style="color: #34bd26;">&lt;span style="font-family: Courier New, Courier, monospace; letter-spacing: 0.0px;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ^&lt;/span>&lt;/div>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif;">&lt;span style="letter-spacing: 0.0px;">&lt;/span>&lt;br />&lt;/span>&lt;/div>&lt;div style="text-align: justify;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif; letter-spacing: 0px;">The debug option ‘-g’ allows the source line to be provided with the warning.&lt;/span>&lt;/div>&lt;h3>&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif; font-size: large; letter-spacing: 0.0px;">&lt;b>Conclusion&lt;/b>&lt;/span>&lt;/h3>&lt;div style="min-height: 13px; text-align: justify;">&lt;span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif; letter-spacing: 0px;">Diagnostic remarks and the loop pragma directive are two new features that are useful for feedback-directed-performance tuning. Special thanks to all of the people who contributed to the development of these features. Future work includes adding diagnostic remarks to the SLP vectorizer and an additional option for the loop pragma directive to declare the memory operations as safe to vectorize. Additional ideas for improvements are welcome.&lt;/span>&lt;/div></description></item><item><title>LLVM Weekly - #47, Nov 24th 2014</title><link>https://blog.llvm.org/2014/11/llvm-weekly-47-nov-24th-2014.html</link><pubDate>Mon, 24 Nov 2014 06:00:00 +0000</pubDate><guid>https://blog.llvm.org/2014/11/llvm-weekly-47-nov-24th-2014.html</guid><description>&lt;p>Welcome to the forty-seventh issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/47">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Version 3.0 of the Capstone disassembly framework &lt;a href="http://capstone-engine.org/Version-3.0.html">has been released&lt;/a>. Python bindings have been updated to support Python 3, and this release also adds support for Sparc, SystemZ and XCore. It also has performance improvements.&lt;/p>&lt;p>Herb Sutter has penned a &lt;a href="https://isocpp.org/blog/2014/11/trip-report-fall">trip report&lt;/a> of the recent ISO C++ meeting.&lt;/p>&lt;p>Emscripten has &lt;a href="https://groups.google.com/forum/#!topic/emscripten-discuss/y1_efkXYIQM">updated to use LLVM 3.4 from the PNaCl team&lt;/a>. There's more work to be done to rebase on top of 3.5.&lt;/p>&lt;p>Woboq has written a blog post &lt;a href="http://woboq.com/blog/cpp14-in-qt.html">detailing C++14 features of interest to Qt programmers&lt;/a>, though I suspect the article has a wider potential audience than that. Recent Clang of course has &lt;a href="http://clang.llvm.org/cxx_status.html#cxx14">good support&lt;/a> for the new C++14 features.&lt;/p>&lt;p>There is going to be an LLVM Devroom at FOSDEM 2015, and the &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/5757">submission deadline for presentations/talks/tutorials is on Dec 1st&lt;/a>.&lt;/p>&lt;p>Apple's LLVM Source Tools and Program Analysis teams are &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/39769">looking for interns for Summer 2015&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>If you're wondering how the process of adding OpenMP support to Clang is going, the &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/39749">answer&lt;/a> is that it's still ongoing and there's hope it will be done by the 3.6 release, depending on the speed of code reviews.&lt;/p>&lt;/li>&lt;li>&lt;p>Siva Chandra kicked off a discussion on the mailing list about &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/5765">how to better manage breakages caused by LLVM or Clang API changes&lt;/a>. Siva suggests LLDB should be developed against a known-good version of LLVM/Clang that gets periodically bumped. Vince Harron says that he is &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/5780">looking to add a continuous build on curated versions of Clang/LLVM&lt;/a> in addition to a continuous build on top of tree for everything. This should help improve the signal to noise ratio and make it easier for LLDB developers to tell when a breaking change is due to their addition or a change elsewhere. Reid Kleckner &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/5783">suggests lldb should be treated part of the same project as Clang/LLDB&lt;/a> and more pressure should be put on developers to fix breakages, presumably in the same way that API changes in LLVM almost always come with an associated patch to fix Clang.&lt;/p>&lt;/li>&lt;li>&lt;p>Peter Collingbourne has proposed &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78981">adding the llgo frontend to the LLVM project&lt;/a>. Chris Lattner is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78982">in favour of this&lt;/a>, but would like to see the GPLv3+runtime exception dependencies rewritten before being checked in. Some people in the thread expressed concern that the existing base of LLVM/Clang reviewers know C++ and may not be able to review patches in Go, though it looks like a non-zero of existing LLVM reviewers are appropriately multilingual.&lt;/p>&lt;/li>&lt;li>&lt;p>Brett Simmers is working on HHVM and &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78971">is interested if there are ways to control where a BasicBlock ends up in memory&lt;/a>, with the motivation to make best of the instruction cache by keeping frequently executed pieces of code closer together. There's general agreement this would be a great feature to have, but it doesn't sound like this is easily supported in LLVM right now.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A small doc fix has the honour of being &lt;a href="http://reviews.llvm.org/rL222222">commit 222222&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A nice little optimisation has been committed which replaces a switch table with a mul and add if there is a linear mapping between index and output. &lt;a href="http://reviews.llvm.org/rL222121">r222121&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The SeparateConstOffsetFromGEP, EarlyCSE, and LICM passes have been enabled on AArch64. This has &lt;a href="http://reviews.llvm.org/D5864">measurable gains for some SPEC benchmarks&lt;/a>. &lt;a href="http://reviews.llvm.org/rL222331">r222331&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The description of the noalias attribute has been clarified. &lt;a href="http://reviews.llvm.org/rL222497">r222497&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MDNode is being split into two classes, GenericMDNode and MDNodeFwdDecl. &lt;a href="http://reviews.llvm.org/rL222205">r222205&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM CMake-based build system learned to support &lt;code>LLVM_USE_SANITIZER=Thread&lt;/code>. &lt;a href="http://reviews.llvm.org/rL222258">r222258&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The R600 backend gained the SIFoldOperands pass which attempts to fold source operands of mov and copy instructions into their uses. &lt;a href="http://reviews.llvm.org/rL222581">r222581&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang now distinguishes between &lt;code>-fpic&lt;/code> and &lt;code>-fPIC&lt;/code>. &lt;a href="http://reviews.llvm.org/rL222227">r222227&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>-Wuninitialized&lt;/code> warning will now trigger when accessing an uninitialized base class in a constructor. &lt;a href="http://reviews.llvm.org/rL222503">r222503&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLDB can now perform basic debugging operations on Windows. &lt;a href="http://reviews.llvm.org/rL222474">r222474&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB's line editing support was been completely rewritten. &lt;a href="http://reviews.llvm.org/rL222163">r222163&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MemorySanitizer gained support for MIPS64. &lt;a href="http://reviews.llvm.org/rL222388">r222388&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A sample tool was added to lldb to extract and dump unwind information from Darwin's compact unwind section. &lt;a href="http://reviews.llvm.org/rL222127">r222127&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #46, Nov 17th 2014</title><link>https://blog.llvm.org/2014/11/llvm-weekly-46-nov-17th-2014.html</link><pubDate>Tue, 18 Nov 2014 05:43:00 +0000</pubDate><guid>https://blog.llvm.org/2014/11/llvm-weekly-46-nov-17th-2014.html</guid><description>&lt;p>Welcome to the forty-sixth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/46">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Chrome on Linux &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/39700">now uses Clang for production builds&lt;/a>. Clang has of course been used on OS X Chrome for quite some time. The switch saw reduction in binary size of ~8%, but this was vs GCC 4.6 rather than something more up-to-date.&lt;/p>&lt;p>The LLVM in HPC workshop at SC14 is taking place on Monday and the full agenda with abstracts &lt;a href="http://llvm-hpc-workshop.github.io/">is available online&lt;/a>&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Duncan P.N. Exon Smith has posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78738">RFC on splitting out metadata from the Value hierarchy&lt;/a>. There seems to be general support for the idea. If you have concerns, now is the time to speak up.&lt;/p>&lt;/li>&lt;li>&lt;p>Tom Stellard has posted a proposed &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78752">LLVM/Clang 3.5.1 release schedule&lt;/a>. RC1 is currently planned for November 26th.&lt;/p>&lt;/li>&lt;li>&lt;p>Zachary Turner raised the issue &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/5710">referencing Apple rdar bugs in commit messages&lt;/a>. The concern is that sometimes the commit messages are hard to work out without the context of the bug, which many of us do not have access to.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Work on call lowering for MIPS FastISel has started. &lt;a href="http://reviews.llvm.org/rL221948">r221948&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Work has started on an assembler for the R600 backend. &lt;a href="http://reviews.llvm.org/rL221994">r221994&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A pass implementing forward control-flow integrity as been added. &lt;a href="http://reviews.llvm.org/rL221708">r221708&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A whole slew of patches that made MDNode a Value have been reverted due to a change in plan. The aim is now to separate metadata from the Value hierarchy. &lt;a href="http://reviews.llvm.org/rL221711">r221711&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>There are two ways to inform the optimizer the result of a load is never null. Either with metadata or via assume. The latter is now canonicalized into the former. &lt;a href="http://reviews.llvm.org/rL221737">r221737&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;code>vec_vsx_ld&lt;/code> and &lt;code>vec_vsx_st&lt;/code> intrinsics have been added for PowerPC. &lt;a href="http://reviews.llvm.org/rL221767">r221767&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>PowerPC gained support for small-model PIC. &lt;a href="http://reviews.llvm.org/rL221791">r221791&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The llvm.arm.space intrinsic was added to make it easier to write tests for ARM ConstantIslands. &lt;a href="http://reviews.llvm.org/rL221903">r221903&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The constant trickle of OpenMP patches continues. Codegen for threadprivate variables has been added. &lt;a href="http://reviews.llvm.org/rL221663">r221663&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for &lt;code>__has_cpp_attribute&lt;/code> is now present. &lt;a href="http://reviews.llvm.org/rL221991">r221991&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Breakpoint stop/resume has been implemented on Windows for LLDB. &lt;a href="http://reviews.llvm.org/rL221642">r221642&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;a href="http://libcxx.llvm.org/cxx1z_status.html">libcxx status page&lt;/a> has been updated with the current state of C++1z support. &lt;a href="http://reviews.llvm.org/rL221601">r221601&lt;/a>).&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #45, Nov 10th 2014</title><link>https://blog.llvm.org/2014/11/llvm-weekly-45-nov-10th-2014.html</link><pubDate>Mon, 10 Nov 2014 05:11:00 +0000</pubDate><guid>https://blog.llvm.org/2014/11/llvm-weekly-45-nov-10th-2014.html</guid><description>&lt;p>Welcome to the forty-fifth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/45">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Adrian Sampson has posted a &lt;a href="http://homes.cs.washington.edu/~asampson/blog/quala-codegen.html">status update on his Quala project&lt;/a> to add custom type annotations to C and C++ in Clang/LLVM.&lt;/p>&lt;p>Bruce Mitchener has posted to the Dylan blog describing &lt;a href="http://dylanfoundry.org/2014/11/05/integrating-with-llvm/">how Dylan integrates with LLVM&lt;/a>. Interestingly, Dylan doesn't link with the LLVM libraries and instead generates bitcode files directly.&lt;/p>&lt;p>The Numba project has released &lt;a href="https://github.com/numba/llvmlite">llvmlite&lt;/a>, lightweight python bindings to LLVM for writing JIT compilers. This was developed based on experience using the old llvmpy bindings.&lt;/p>&lt;p>Obfuscator-LLVM &lt;a href="https://twitter.com/ollvm/status/529687887529656321">has been updated to work with LLVM 3.5&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Arnaud A. de Grandmaison kicked off a discussion on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78544">the semantics of lifetime.start and lifetime.end intrinsics&lt;/a>. Right now, if lifetime intrinsics are enabled for smaller objects a self-hosted build is broken. The question is whether this is due to a misunderstanding of the lifetime spec or just a hidden bug. Reid Kleckner &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78568">suggests different intrinsics for the simple case of stack allocated data&lt;/a>. He also clarifies what he means by &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78619">stack colouring&lt;/a>. This is followed by some in-depth back-and-forth discussion on the validity of transformations involving lifetime.start/lifetime.end and whether new intrinsics are required.&lt;/p>&lt;/li>&lt;li>&lt;p>James Molloy has been experimenting with the scheduling model on the Cortex-A57 and &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78492">found some oddities&lt;/a>. I noted the MicroOpBufferSize is currently set to 128, and reducing it right down to 2 seems to have no effect. Andrew Trick responded with some suggetions on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78603">implementing a custom scheduling strategy&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Volodymyr Kuznetsov and his collaborators are &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78512">asking for feedback on their patchset to implement their recently published work on control flow hijacking protection&lt;/a>. The OSDI paper is &lt;a href="http://dslab.epfl.ch/pubs/cpi.pdf">available here&lt;/a>. The current patchset covers the stack protection aspect of the paper, providing stronger protection than stack cookies at a lower overhead.&lt;/p>&lt;/li>&lt;li>&lt;p>Frédéric Riss is interested in &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78706">reimplementing Darwin's dsymutil as an lld helper&lt;/a>. dsymutil is a standalone DWARF linker which is used to load merge and optimize dwarf debug info and write it out to a .dSYM file.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The PBQP register allocator has had its spill costs and coalescing benefits tweaked. This apparently results in a few percent improvement on benchmarks such as EEMBC and SPEC. &lt;a href="http://reviews.llvm.org/rL221292">r221292&lt;/a>, &lt;a href="http://reviews.llvm.org/rL221293">r221293&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The new SymbolRewriter pass is an IR to IR transformation allowing adjustment of symbols during compilation. It is intended to be used for symbol interpositioning in sanitizers and performance analysis tools. &lt;a href="http://reviews.llvm.org/rL221548">r221548&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Hexagon gained a basic ELF object emitter. &lt;a href="http://reviews.llvm.org/rL221465">r221465&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-vtabledump gained support for the Itanium ABI. &lt;a href="http://reviews.llvm.org/rL221133">r221133&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM's CMake build system gained the &lt;code>LLVM_BUILD_STATIC&lt;/code> option. &lt;a href="http://reviews.llvm.org/rL221345">r221345&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The usage of Inputs/ for extra test files has been documented. &lt;a href="http://reviews.llvm.org/rL221406">r221406&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The MIPS backend has reached a milestone in support for the N32/N64 ABI. This commit fixes all known bugs for this ABI and the first 10000 tests generated by ABITest.py pass. &lt;a href="http://reviews.llvm.org/rL221534">r221534&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>clang-format gained various improvements for formatting Java code. &lt;a href="http://reviews.llvm.org/rL221104">r221104&lt;/a>, &lt;a href="http://reviews.llvm.org/rL221109">r221109&lt;/a>, and others.&lt;/p>&lt;/li>&lt;li>&lt;p>Support was added for C++1z nested namespace definitions, u8 character literals, and attributes on namespaces or enumerators. &lt;a href="http://reviews.llvm.org/rL221574">r221574&lt;/a>, &lt;a href="http://reviews.llvm.org/rL221576">r221576&lt;/a>, &lt;a href="http://reviews.llvm.org/rL221580">r221580&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLD learned how to parse most linker scripts. Before getting too excited, do note this is parsing only, semantic actions will come in the future. &lt;a href="http://reviews.llvm.org/rL221126">r221126&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The common Sanitizer code gained a generic stack frame renderer. This allows the user to control the format of stack frame output. &lt;a href="http://reviews.llvm.org/rL221409">r221409&lt;/a>, &lt;a href="http://reviews.llvm.org/rL221469">r221469&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The basic framework for live debugging on Windows was added to LLDB. It will detect changes such as DLL loads and unloads etc, but these need to be propagated through LLDB properly. &lt;a href="http://reviews.llvm.org/rL221207">r221207&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lldb-gdbserver now supports the Android target. &lt;a href="http://reviews.llvm.org/rL221570">r221570&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #44, Nov 3rd 2014</title><link>https://blog.llvm.org/2014/11/llvm-weekly-44-nov-3rd-2014.html</link><pubDate>Mon, 03 Nov 2014 03:29:00 +0000</pubDate><guid>https://blog.llvm.org/2014/11/llvm-weekly-44-nov-3rd-2014.html</guid><description>&lt;p>Welcome to the forty-fourth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/44">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The &lt;a href="http://llvm.org/devmtg/2014-10/">2014 LLVM Dev meeting&lt;/a> was held last week. I couldn't make it, but it seems like there was a great selection of talks. Sadly the keynote about Swift's high-level IR &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvm-devmeeting/2014-October/000176.html">was cancelled&lt;/a>. No word yet on when we can expect slides and videos online. However, slides by Philip Reames and Sanjoy Das from their talk on on implementing fully relocating garbage collection in LLVM &lt;a href="http://www.playingwithpointers.com/llvm-dev-2014-slides.pdf">are online&lt;/a>.&lt;/p>&lt;p>&lt;a href="http://whitequark.org/">Peter Zotov&lt;/a> has been doing lots of work on the LLVM OCaml bindings recently, and is looking for additional help. Recently, he's closed almost all open bugs for the bindings, migrated them to ocamlfind, fixed &lt;code>Lllvm_executionengine&lt;/code>, and ensured pretty much the whole LLM-C API is exposed. Tasks on the todo list include writing tests in OUnit2 format, migrating the Kaleidoscope tutorial off camlp4, and splitting up and adding OCaml bindings to &lt;a href="http://reviews.llvm.org/D2176">this patch&lt;/a>. More ambitiously, it would be interesting to writing LLVM passes in OCaml and to represent LLVM IR as pure AST. If any of this interests you, do get in touch with Peter. He's able to review any patches, but could do with help on working through this list of new features.&lt;/p>&lt;p>The LLVM Bay Area monthly social is &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/39524">going to be held on 6th November&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Reid Kleckner has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78419">proposed dropping support for running LLVM on Windows XP&lt;/a>. This would allow the use of system APIs only available in Vista and above. Thus far all responses have been positive, with one even suggesting raising the minimum to Windows 7.&lt;/p>&lt;/li>&lt;li>&lt;p>Tom Stellard suggests &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78453">deprecating the autoconf build system&lt;/a>. Right now there is both an autotools based system and a CMake system, though CMake seems most used by developers for LLVM at least. Bob Wilson &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78459">points out&lt;/a> that the effort required to keep the existing makefiles working is much less than what might be needed to update the CMake build to support all uses cases. Though other replies make it seems that the CMake build supports pretty much all configurations people use now. If there are people who actually enjoy fiddling with build systems (far-fetched, I know), it seems like a little effort could go a long way and allow the makefile system to be jettisoned.&lt;/p>&lt;/li>&lt;li>&lt;p>Betul Buyukkurt has posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78415">RFC on indirect call target profiling&lt;/a>. The goal is to use the collected data for optimisation. Kostya Serebryany &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/39563">described how it can be used to provide feedback to fuzzers&lt;/a> and detailed properties that would be useful for this usecase.&lt;/p>&lt;/li>&lt;li>&lt;p>Chris Matthews &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78319">announces&lt;/a> that a new Jenkins-based OSX build cluster is up and running. This includes multiple build profiles and an O3 LTO performance tracker. The Jenkins config should be committed to zorg soon.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Support for writing sampling profiles has been committed. In the future, support to read (and maybe write) profiles in GCC's gcov format will be added, and llvm-profdata will get support to manipulate sampling profiles. &lt;a href="http://reviews.llvm.org/rL220915">r220915&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A comment has been added to X86AsmInstrumentation to describe how asm instrumentation works. &lt;a href="http://reviews.llvm.org/rL220670">r220670&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Microsoft vectorcall calling convention has been implemented for x86 and x86-64. &lt;a href="http://reviews.llvm.org/rL220745">r220745&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The C (and OCaml) APIs gained functions to query and modify branches, and to obtain the values for floating point constants. There have been a whole bunch of additional commits related to the OCaml bindings, too many to pick out anything representative. &lt;a href="http://reviews.llvm.org/rL220814">r220814&lt;/a>, &lt;a href="http://reviews.llvm.org/rL220815">r220815&lt;/a>, &lt;a href="http://reviews.llvm.org/rL220817">r220817&lt;/a>, &lt;a href="http://reviews.llvm.org/rL220818">r220818&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The loop and SLP (superword level parallelism) vectorizers are now enabled in the Gold plugin. &lt;a href="http://reviews.llvm.org/rL220886">r220886&lt;/a>, &lt;a href="http://reviews.llvm.org/rL220887">r220887&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>A refactoring of libTooling to reduce required dependencies means that clang-format's binary is now roughly half the size. &lt;a href="http://reviews.llvm.org/rL220867">r220867&lt;/a>.&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>lldb has started to adopt the StringPrinter API. &lt;a href="http://reviews.llvm.org/rL220894">r220894&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Initial support for PowerPC/PowerPC64 on FreeBSD has been added to LLDB. &lt;a href="http://reviews.llvm.org/rL220944">r220944&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #43, Oct 27th 2014</title><link>https://blog.llvm.org/2014/10/llvm-weekly-43-oct-27th-2014.html</link><pubDate>Mon, 27 Oct 2014 04:02:00 +0000</pubDate><guid>https://blog.llvm.org/2014/10/llvm-weekly-43-oct-27th-2014.html</guid><description>&lt;p>Welcome to the forty-third issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>This week it's the LLVM Developers' Meeting in San Jose. Check out the &lt;a href="http://llvm.org/devmtg/2014-10/">schedule&lt;/a>. Unfortunately I won't be there, so I'm looking forward to the slides and videos going online.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/43">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a>&lt;h3>News and articles from around the web&lt;/h3>&lt;p>Philip Reames has written up a detailed &lt;a href="http://www.philipreames.com/Blog/2014/10/21/statepoints-vs-gcroot-for-representing-call-safepoints/">discussion of statepoints vs gcroot&lt;/a> for representing call safepoints. The aim is to clearly explain how the safepoint functionality provided by the &lt;a href="http://reviews.llvm.org/D5683">patches currently up for review&lt;/a> differ to the current gc.root support.&lt;/p>&lt;p>The Haskell community have put together a &lt;a href="https://ghc.haskell.org/trac/ghc/wiki/ImprovedLLVMBackend">proposal for an improved LLVM backend to GHC&lt;/a>. They intend to ship GHC with its own local LLVM build.&lt;/p>&lt;p>CoderGears have published a blog post about &lt;a href="http://www.codergears.com/Blog/?p=246">using Clang to get better warnings in Visual C++ projects&lt;/a>.&lt;/p>&lt;p>There is going to be a dedicated LLVM devroom at FOSDEM 2015. Here is the &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/39450">call for speakers and participation&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Elena Demikhovsky has asked for comments on a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78160">proposal to add masked vector load and store intrinsics&lt;/a>. Essentially all feedback so far is positive on the idea.&lt;/p>&lt;/li>&lt;li>&lt;p>Renato Golin &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78099">proposes moving libunwind into compiler-rt&lt;/a>. One of the subtleties is hat libunwind isn't fully compatible with GCC's unwind implementation (due to different data structure layouts), which means they can't be mixed.&lt;/p>&lt;/li>&lt;li>&lt;p>Kristof Beyls has posted some &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/78068">notes in preparation for the benchmarking infrastructure BoF at the LLVM dev meeting&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The &lt;code>nonnull&lt;/code> metadata has been introduced for Load instructions. &lt;a href="http://reviews.llvm.org/rL220240">r220240&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>minnum and maxnum intrinsics have been added. &lt;a href="http://reviews.llvm.org/rL220341">r220341&lt;/a>, &lt;a href="http://reviews.llvm.org/rL220342">r220342&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Hexagon backend gained a basic disassembler. &lt;a href="http://reviews.llvm.org/rL220393">r220393&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>PassConfig gained usingDefaultRegAlloc to tell if the default register allocator is being used. &lt;a href="http://reviews.llvm.org/rL220321">r220321&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>An llvm-go tool has been added. It is intended to be used to build components such as the Go frontend in-tree. &lt;a href="http://reviews.llvm.org/rL220462">r220462&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>C compilation defaults to C11 by default, matching the behaviour of GCC 5.0. &lt;a href="http://reviews.llvm.org/rL220244">r220244&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang should now be better at finding Visual Studio in non-standard setups. &lt;a href="http://reviews.llvm.org/rL220226">r220226&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Windows toolchain is now known as MSVCToolChain, to allow the addition a CrossWindowsToolChain which will use clang/libc++/lld. &lt;a href="http://reviews.llvm.org/rL220362">r220362&lt;/a>, &lt;a href="http://reviews.llvm.org/rL220546">r220546&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>The libcxxabi gained support for running libc++abi tests with sanitizers. &lt;a href="http://reviews.llvm.org/rL220464">r220464&lt;/a>.&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #42, Oct 20th 2014</title><link>https://blog.llvm.org/2014-10-20-llvm-weekly-42-oct-20th-2014.html</link><pubDate>Mon, 20 Oct 2014 04:31:00 +0000</pubDate><guid>https://blog.llvm.org/2014-10-20-llvm-weekly-42-oct-20th-2014.html</guid><description>&lt;p>Welcome to the forty-second issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>If you're local to London, you may be interested to know that I'll be talking about &lt;a href="http://www.lowrisc.org">lowRISC&lt;/a> at the &lt;a href="http://oshug.org/event/36">Open Source Hardware User Group on Thursday&lt;/a>.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/42">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>ELLCC, the LLVM-based cross-compilation toolchain &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/39439">now has pre-built binaries for all LLVM tools&lt;/a>.&lt;/p>&lt;p>Eli Bendersky's repository of examples for using LLVM and Clang as libraries and for building new passes aren't new, but they are incredibly useful for newcomers to LLVM/Clang and I haven't featured them before. If you want to build something using LLVM or Clang, the &lt;a href="https://github.com/eliben/llvm-clang-samples">llvm-clang-samples repos&lt;/a> is one of the best places to start.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>If you enjoy bikeshedding, I have the perfect thread for you. &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/77786">Should LLVM change its naming convention for variables&lt;/a>? There actually seems to be a lot of consensus that the current approach of using capitalized variable names is weird.&lt;/p>&lt;/li>&lt;li>&lt;p>Richard Smith has proposed &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/39379">switching the default C language mode from gnu99 to gnu11&lt;/a>. GNU trunk has just switched from gnu89 by default to gnu11. There seems to be almost universal support for gnu11 by default.&lt;/p>&lt;/li>&lt;li>&lt;p>Junio Cezar writes to the mailing list &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/77757">to share his experiments on time taken in various LLVM passes&lt;/a>. His webpage has &lt;a href="http://homepages.dcc.ufmg.br/~juniocezar/llvm/">plots of time taken in each stage for csmith-generated programs&lt;/a>. Hal Finkel had some &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/77758">suggestions on improving the analysis&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Bill Wendling is &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/39357">stepping down as LLVM release manager&lt;/a>. He nominated Tom Stellard and Hans Wennborg as his replacements, who have been accepted by unanimous agreement.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/77997">suggests making DataLayout non-optional&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Go LLVM bindings have been committed. &lt;a href="http://reviews.llvm.org/rL219976">r219976&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Invoking patchpoint intrinsics is now supported. &lt;a href="http://reviews.llvm.org/rL220055">r220055&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM gained a workaround for a Cortex-A53 erratum. &lt;a href="http://reviews.llvm.org/rL219603">r219603&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Basic support for ARM Cortex-A17 was added. &lt;a href="http://reviews.llvm.org/rL219606">r219606&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The C API has been extended with the LLVMWriteBitcodeToMemoryBuffer function. &lt;a href="http://reviews.llvm.org/rL219643">r219643&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>NumOperands has been moved from User to Value. On 64-bit host architectures this reduces &lt;code>sizeof(User)&lt;/code> and subclasses by 8. &lt;a href="http://reviews.llvm.org/rL219845">r219845&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVMParseCommandLineOptions was added to the C API. &lt;a href="http://reviews.llvm.org/rL219975">r219975&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Constant expressions can now be used in pragma loop hints. &lt;a href="http://reviews.llvm.org/rL219589">r219589&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The libclang API gained a function to retrieve the storage class of a declaration. &lt;a href="http://reviews.llvm.org/rL219809">r219809&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>With the &lt;code>-fsanitize-address-field-padding&lt;/code> flag, Clang can insert poisoned paddings between fields in C++ classes to allow AddressSanitizer to find intra-object overflow bugs. &lt;a href="http://reviews.llvm.org/rL219961">r219961&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>lldb now supports a gdb-style batch mode. &lt;a href="http://reviews.llvm.org/rL219654">r219654&lt;/a>.&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #41, Oct 13th 2014</title><link>https://blog.llvm.org/2014/10/llvm-weekly-41-oct-13th-2014.html</link><pubDate>Tue, 14 Oct 2014 03:59:00 +0000</pubDate><guid>https://blog.llvm.org/2014/10/llvm-weekly-41-oct-13th-2014.html</guid><description>&lt;p>Welcome to the forty-first issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>I've been in Munich for ORCONF this weekend. Slides from my talk about &lt;a href="http://www.lowrisc.org">lowRISC&lt;/a> are available &lt;a href="https://speakerdeck.com/asb/lowrisc-a-first-look">here&lt;/a>.&lt;/p>&lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/41">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>ELLCC, the LLVM/Clang-based cross development toolkit &lt;a href="http://ellcc.org/blog/?p=18096">now has Windows binaries available&lt;/a>.&lt;/p>&lt;p>IBM have &lt;a href="https://www.bountysource.com/issues/5136793-addresssanitizer-tests-fail-for-powerpc64">posted a bounty&lt;/a> on fixing the AddressSanitizer tests that fail on PowerPC.&lt;/p>&lt;p>GCC needs you! A large number of &lt;a href="https://gcc.gnu.org/ml/gcc/2014-10/msg00040.html">potential starting points for new contributors&lt;/a> has been posted to the GCC mailing list.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Hayden Livingston is curious about &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/77745">examples of LLVM usage for whole program optimisations&lt;/a>, mentioning LLVM JIT functionality and GC as areas of interest. Philip Reames &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/77750">responded&lt;/a> with a good description of the current state and also noted his patchset for &lt;a href="http://reviews.llvm.org/D5683">GC statepoint intrinsics&lt;/a> is up for review and should hopefully be merged in the coming weeks. Filip Pizlo who worked on Apple's FTL JS JIT &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/77753">responded to advocate use of a Bartlett-style mostly-copying collector&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Peter Collingbourne has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/77678">proposed official Go bindings be added to the LLVM project&lt;/a>. Thus far all replies seem positive.&lt;/p>&lt;/li>&lt;li>&lt;p>Saleem Abdulrasool points out that &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/77537">lld doesn't conform to the LLVM/Clang coding style&lt;/a>. As you can imagine, few topics attract more feedback from developers than whitespace and variable naming conventions so the thread is rather long. There's general agreement that it would be better if lld used the LLVM style, though unease about moving over in a single large patch on the basis that this would dirty commit history and make git/svn blame less useful. A patch was submitted to git some years ago to &lt;a href="http://git.661346.n2.nabble.com/PATCH-blame-can-specify-shas-of-commits-to-ignore-on-command-line-td5001395.html">implement the ability to ignore certain shas in git blame&lt;/a> but it seems the feature was never added.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Switches with only two cases and a default are now optimised to a couple of selects. &lt;a href="http://reviews.llvm.org/rL219223">r219223&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-symbolizer will now be used to symbolize LLVM/Clang crash dumps. &lt;a href="http://reviews.llvm.org/rL219534">r219534&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The calculation of loop trip counts for loops with multiple exits has been de-pessimized. &lt;a href="http://reviews.llvm.org/rL219517">r219517&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MIPS fast-isel learnt integer and floating point compare and conditional branches. &lt;a href="http://reviews.llvm.org/rL219518">r219518&lt;/a>, &lt;a href="http://reviews.llvm.org/rL219530">r219530&lt;/a>, &lt;a href="http://reviews.llvm.org/rL219556">r219556&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>R600 gained a load/store machine optimizer pass. &lt;a href="http://reviews.llvm.org/rL219533">r219533&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The integrated assembler has been turned on by default for ppc64 and ppc64le. &lt;a href="http://reviews.llvm.org/rL219129">r219129&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>clang-format's interpretation of special comments to disable formatting within a delimited range has been documented. &lt;a href="http://reviews.llvm.org/rL219204">r219204&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The integrated assembler has been turned on by default for SystemZ. &lt;a href="http://reviews.llvm.org/rL219426">r219426&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>lld gained support for 'fat' mach-o archives. &lt;a href="http://reviews.llvm.org/rL219268">r219268&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The lldbtk example has seen some further development. &lt;a href="http://reviews.llvm.org/rL219219">r219219&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lldb-gdbserver can now be used for local-process Linux debugging. &lt;a href="http://reviews.llvm.org/rL219457">r219457&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The disassembly format for lldb can now be customized. &lt;a href="http://reviews.llvm.org/rL219544">r219544&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #40, Oct 6th 2014</title><link>https://blog.llvm.org/2014/10/llvm-weekly-40-oct-6th-2014.html</link><pubDate>Mon, 06 Oct 2014 05:49:00 +0000</pubDate><guid>https://blog.llvm.org/2014/10/llvm-weekly-40-oct-6th-2014.html</guid><description>&lt;p>Welcome to the fortieth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>I'll be in Munich next weekend for the &lt;a href="http://tum-lis.github.io/orconf2014/">OpenRISC conference&lt;/a> where I'll be presenting on the &lt;a href="http://lowrisc.org/">lowRISC&lt;/a> project to produce an open-source SoC. I'll be giving a similar talk in London at the Open Source Hardware User Group &lt;a href="http://oshug.org/event/36">on 23rd October&lt;/a>.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/40">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Capstone 3.0 RC1 &lt;a href="http://capstone-engine.org/Version-3.0-RC1.html">has been released&lt;/a> Capstone is an open source disassembly engine, based initially on code from LLVM. This release features support for Sparc, SystemZ and XCore as well as the previously supported architectures. Among other changes, the Python bindings are now compatible with Python 3.&lt;/p>&lt;p>An interesting paper from last year came up on the mailing list. From EPFL, it proposes &lt;a href="http://dslab.epfl.ch/pubs/overify.pdf">adding -OVERIFY to optimise programs for fast verification&lt;/a>. The performance of symbolic execution tools is improved by reducing the number of paths to explore and the complexity of branch conditions. They managed a maximum 95x reduction in total compilation and analysis time.&lt;/p>&lt;p>The next Cambridge (UK) social &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/77453">will take place on Wed 8th Oct at 7.30 pm&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Reid Kleckner has posted an RFC on &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/39152">approaches to representing structured exception handling (SEH) in LLVM IR&lt;/a>. This is the exception handling model used on Windows.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth has written to the list to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/77439">announce his new x86 vector shuffle lowering path is now enabled by default&lt;/a>. This code path has seen extensive fuzz testing. The performance improvement is largest on AMD chips with older SSE versions. If anyone is able to find a performance regression, you are encouraged to report it.&lt;/p>&lt;/li>&lt;li>&lt;p>Richard Pennington who maintains the Clang/LLVM ELLCC cross-development toolchain is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/77431">considering dropping support for Microblaze&lt;/a>. The Microblaze backend was dropped from LLVM last year, but Richard has been maintaining it out of tree. However there seems to be very little actual interest. If somebody wants to pick it up, now is the time to jump in.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The expansion of atomic loads/stores for PowerPC has been improved. &lt;a href="http://reviews.llvm.org/rL218922">r218922&lt;/a>. The documentation on atomics has also been updated. &lt;a href="http://reviews.llvm.org/rL218937">r218937&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>For the past few weeks, Chandler Carruth has been working on a new vector shuffle lowering implementation. There have been too many commits to summarise, but the time has come and the new codepath is now enabled by default. It claims 5-40% improvements in the right conditions (when the loop vectorizer fires in the hot path for SSE2/SSE3). &lt;a href="http://reviews.llvm.org/rL219046">r219046&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Cortex-A57 scheduling model has been refined. &lt;a href="http://reviews.llvm.org/rL218627">r218627&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>SimplifyCFG now has a configurable threshold for folding branches with common destination. Changing this threshold can be worthwhile for GPU programs where branches are expensive. &lt;a href="http://reviews.llvm.org/rL218711">r218711&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Basic support for the newly-announced Cortex-M7 has been added. &lt;a href="http://reviews.llvm.org/rL218747">r218747&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>As discussed on the mailing list last week, the sqrt intrinsic will now return undef when given a negative input. &lt;a href="http://reviews.llvm.org/rL218803">r218803&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-readobj learnt &lt;code>-coff-imports&lt;/code> which will print out the COFF import table. &lt;a href="http://reviews.llvm.org/rL218891">r218891&lt;/a>, &lt;a href="http://reviews.llvm.org/rL218915">r218915&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Support for the &lt;code>align_value&lt;/code> attribute has been added, matching the behaviour of the attribute in the Intel compiler. The commit message explains why this attribute is useful in addition to &lt;code>aligned&lt;/code>. &lt;a href="http://reviews.llvm.org/rL218910">r218910&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A rather useful diagnostic has been added. &lt;code>-Winconsistent-missing-override&lt;/code> will warn if override is missing on an overridden method if that class has at least one override specified on its methods. &lt;a href="http://reviews.llvm.org/rL218925">r218925&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for MS ABI continues. &lt;code>thread_local&lt;/code> is now supported for global variables. &lt;a href="http://reviews.llvm.org/rL219074">r219074&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Matcher and DynTypedMatcher saw some nice performance tweaking, resulting in a 14% improvement on a clang-tidy benchmark and compilation of Dynamic/Registry.cpp sped up by 17%. &lt;a href="http://reviews.llvm.org/rL218679">r218616&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lifetime.start and lifetime.end markers are now emitted for unnamed temporary objects. &lt;a href="http://reviews.llvm.org/rL218865">r218865&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>__sync_fetch_and_nand&lt;/code> intrinsic was re-added. See the commit message for a history of its removal. &lt;a href="http://reviews.llvm.org/rL218905">r218905&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang gained its own implementation of C11 &lt;code>stdatomic.h&lt;/code>. The system header will be used in preference if present. &lt;a href="http://reviews.llvm.org/rL218957">r218957&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang now understands &lt;code>-mthread-model&lt;/code> to specify the thread model to use, e.g. posix, single (for bare-metal and single-threaded targets). &lt;a href="http://reviews.llvm.org/rL219027">r219027&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>libcxxabi should now work with the ARM Cortex-M0. &lt;a href="http://reviews.llvm.org/rL218869">r218869&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lldb gained initial support for scripting stepping. This is the ability to add new stepping modes implemented by python classes. The example in the follow-on commit has a large comment at the head of the file to explain its operation. &lt;a href="http://reviews.llvm.org/rL218642">r218642&lt;/a>, &lt;a href="http://reviews.llvm.org/rL218650">r218650&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #39, Sep 29th 2014</title><link>https://blog.llvm.org/2014/09/llvm-weekly-39-sep-29th-2014.html</link><pubDate>Mon, 29 Sep 2014 05:23:00 +0000</pubDate><guid>https://blog.llvm.org/2014/09/llvm-weekly-39-sep-29th-2014.html</guid><description>&lt;p>Welcome to the thirty-ninth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/39">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>An implementation of Common Lisp with an LLVM backend, Clasp, &lt;a href="http://drmeister.wordpress.com/2014/09/18/announcing-clasp/">has been announced&lt;/a>. There's a lot of work to be done on performance, but development is &lt;a href="https://github.com/drmeister/clasp">very active on Github&lt;/a>.&lt;/p>&lt;p>A backend for the educational 'y86' instruction set architecture has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/77236">been started&lt;/a>. The source is &lt;a href="https://github.com/ltcmelo/llvm">on Github&lt;/a>.&lt;/p>&lt;p>A new binary snopshot of the ELLCC cross compilation toolchain is &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/39063">now available&lt;/a>. Pre-compiled binaries are available for ARM, MIPS, PPC, and x86. All tarballs contain header files and runtime libraries for all targets to allow you to build for any supported target.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Bill Schmidt started off an interesting discussion about &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/77238">whether sqrt of a negative number should be optimised to 0 or NaN&lt;/a>. The xalanc benchmark in SPEC CPU2006 relies on it returning a NaN apparently.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth has posted an RFC proposing that &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/77148">LLVM should require a working C++11 thread, mutex, and atomic&lt;/a> with the intention being that support for MinGW and win32threads is dropped. Switching to MinGW-win64 seems like a feasible path forwards.&lt;/p>&lt;/li>&lt;li>&lt;p>Wondering how to use noalias and alias.scope metadata notations? Hal Finkel &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/77174">has the answer&lt;/a> for you.&lt;/p>&lt;/li>&lt;li>&lt;p>Should the LLVM project standardise on a &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/39017">commit message policy&lt;/a>? Renato Golin suggests trying to keep the first line short followed by some number of 80 character paragraphs. It seems there's massive agreement on this sort of guidance.&lt;/p>&lt;/li>&lt;li>&lt;p>Richard Pennington has posted a &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/39084">size comparison of bzip2 compiled for different architectures&lt;/a>. All executables are statically linked with musl and compiler-rt.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Segmented stacks support for the x32 ABI has been fixed. &lt;a href="http://reviews.llvm.org/rL218247">r218247&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Robin Morisset's work on optimisation of atomics continues. AtomicExpandPass now inserts fences itself rather than SelectionDAGBuilder. &lt;a href="http://reviews.llvm.org/rL218329">r218329&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM's libSupport gained a type-safe alternative to &lt;code>llvm::format()&lt;/code>. &lt;a href="http://reviews.llvm.org/rL218463">r218463&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-vtabledump learned how to dump RTTI structures for the MS ABI. &lt;a href="http://reviews.llvm.org/rL218498">r218498&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The &lt;code>assume_aligned&lt;/code> function attribute is now supported. &lt;a href="http://reviews.llvm.org/rL218500">r218500&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The thread safety analysis documentation has seen a hefty update. &lt;a href="http://reviews.llvm.org/rL218420">r218420&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MS compatibility is further improved with support for the &lt;code>__super&lt;/code> scope specifier. &lt;a href="http://reviews.llvm.org/rL218484">r218484&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>ASan in compiler-rt gained the start of a debugging API. &lt;a href="http://reviews.llvm.org/rL218538">r218538&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB gained the beginnings of an example Tk UI. &lt;a href="http://reviews.llvm.org/rL218279">r218279&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #38, Sep 22nd 2014</title><link>https://blog.llvm.org/2014/09/llvm-weekly-38-sep-22nd-2014.html</link><pubDate>Mon, 22 Sep 2014 08:57:00 +0000</pubDate><guid>https://blog.llvm.org/2014/09/llvm-weekly-38-sep-22nd-2014.html</guid><description>&lt;p>Welcome to the thirty-eighth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>I've been at PyConUK this past weekend so I'm afraid it's another slightly shorter than normal issue. I've been talking about &lt;a href="http://www.pyland.org">Pyland&lt;/a>, a programming game that aims to teach children programming in Python (and of course, runs on Raspberry Pi).&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/38">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>A paper has recently been published about &lt;a href="http://arcade.cs.columbia.edu/harmony">Harmony&lt;/a>. In the words of the authors "Harmony is an open source tool (built as an LLVM pass) that creates a new kind of application profile called Parallel Block Vectors, or PBVs. PBVs track dynamic program parallelism at basic block granularity to expose opportunities for improving hardware design and software performance." Their most recent &lt;a href="http://arcade.cs.columbia.edu/parashares-europar14.pdf">paper on ParaShares&lt;/a> describes how they find the most 'important' basic blocks in multithreaded programs.&lt;/p>&lt;p>Richard Pennington has written up &lt;a href="http://ellcc.org/blog/?p=13246">some more thoughts on cross compilation configuration for Clang&lt;/a>.&lt;/p>&lt;p>&lt;a href="https://github.com/combinatorylogic/clike">Clike&lt;/a> is a low-level programming language with an extensible syntax based on C. It of course targets LLVM.&lt;/p>&lt;p>If you want your Emacs editor to automatically disassemble LLVM bitcode inside Emacs buffers, then &lt;a href="https://github.com/gbalats/autodisass-llvm-bitcode">autodisass-llvm-bitcode&lt;/a> is for you.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Stephen Wu has published an RFC regarding &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/77010">exhaustive bitcode compatibility tests for IR features&lt;/a>. The proposal involves testing every existing IR feature so that backward compatibility can be tested and it will become obvious when it is broken inadvertently.&lt;/p>&lt;/li>&lt;li>&lt;p>If you're wondering about the current status of compiling glibc with Clang/LLVM, Kostya Serebryany &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/77025">has the answer&lt;/a>. There are about ten instances of nested functions and four of VLAIS, with some patches waiting to be reviewed by upstream.&lt;/p>&lt;/li>&lt;li>&lt;p>Daniel Stewart has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/76915">suggested postponing various passes to the linking stage when using LTO&lt;/a>. There's agreement on this, suggesting that vectorisation and inlining should be delayed.&lt;/p>&lt;/li>&lt;li>&lt;p>Christophe Duvernois &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/76887">asks whether LLVM link against miniz rather than zlib&lt;/a>. If you're interested in a long discussion about the disadvantages of checking in dependencies locally to a codebase, this is the thread for you.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The LLVM MC layer can now write BigObj-style COFF object files. &lt;a href="http://reviews.llvm.org/rL217812">r217812&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>X86AtomicExpandPass has been removed in favour of using the generic AtomicExpandHooks (which now has the necessary hooks). &lt;a href="http://reviews.llvm.org/rL217928">r217928&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-cov's internal API has been reworked. &lt;a href="http://reviews.llvm.org/rL217975">r217975&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang can now use 'response files' when calling other tools when the length of the command line exceeds system limits. &lt;a href="http://reviews.llvm.org/rL217792">r217792&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>-Wbind-to-temporary-copy&lt;/code> warning is no longer on by default. &lt;a href="http://reviews.llvm.org/rL218008">r218008&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang's thread safety analysis gained &lt;code>-Wthread-safety-reference&lt;/code> which warns when a guarded variable is passed by reference as a function argument. &lt;a href="http://reviews.llvm.org/rL218087">r218087&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>libcxx gained some support for using newlib as its C library. &lt;a href="http://reviews.llvm.org/rL218144">r218144&lt;/a>.&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #37, Sep 15th 2014</title><link>https://blog.llvm.org/2014/09/llvm-weekly-37-sep-15th-2014.html</link><pubDate>Mon, 15 Sep 2014 07:01:00 +0000</pubDate><guid>https://blog.llvm.org/2014/09/llvm-weekly-37-sep-15th-2014.html</guid><description>&lt;p>Welcome to the thirty-seventh issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>This week's issue comes to you from sunny Tenerife. Yes, my dedication to weekly LLVM updates is so great that I'm writing it on holiday. Enjoy! I'll also note that I'm at PyCon UK next week where I'll be &lt;a href="http://pyconuk.net/Schedule">presenting&lt;/a> on the results of a project we had some interns working on over the summer creating a programming game for the Raspberry Pi.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/37">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Not only does Pyston have a shiny new blog, they've also &lt;a href="http://blog.pyston.org/2014/09/11/9/">released version 0.2&lt;/a>. Pyston is an implementation of Python using LLVM, led by Dropbox. This release supports a range of language features that weren't supported in 0.1, including support for the native C API. The plan is to focus on performance during the development cycle for 0.3.&lt;/p>&lt;p>Sylvestre Ledru has posted a &lt;a href="http://sylvestre.ledru.info/blog/2014/09/11/rebuild-of-debian-using-clang-3-5">report of progress in building Debian with Clang&lt;/a> following the completion of this year's Google Summer of Code projects. Now with Clang 3.5.0 1261 packages fail to build with Clang. Sylvestre describes how they're attacking the problem from both sides, by submitting patches to upstream projects as well as to Clang where appropriate (e.g. to ignore some unsupported optimisation flags rather than erroring out).&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Philip Reames has started a discussion on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/76702">adding optimisation hints for 'constant' loads&lt;/a>. A common case is where a field is initialised exactly once and then is never modified. If this invariant could be expressed, it could improve alias analysis as the AA pass would never consider that field to MayAlias with something else (Philip reports that the obvious approach of using type-based alias analysis isn't quite enough).&lt;/p>&lt;/li>&lt;li>&lt;p>Hal Finkel has posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/76647">RFC on attaching attributes to values&lt;/a>. Currently, attributes such as noalias and nonnull can be attached to function parameters, but in cases such as C++11 lambdas these can be packed up into a structure and the attributes are lost. Some followup discussion focused on whether these could be represented as metadata. The problem there of course is that metadata is intended to be droppable (i.e. is semantically unimportant). I very much like the &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/76700">suggestion&lt;/a> from Philip Reames that the test suite should run with a pass that forcibly drops metadata to verify it truly is safe to drop.&lt;/p>&lt;/li>&lt;li>&lt;p>Robin Morisset has posted a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/76800">proposal on implementing a fence elimination algorithm&lt;/a>. The proposed algorithm is based on partial redundancy elimination. He's looking for feedback on the suggested implementation approach.&lt;/p>&lt;/li>&lt;li>&lt;p>There's been a little bit of discussion on the topic of &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/76679">rekindling work on VMKit&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The start of the llvm.assume infrastructure has been committed, as well as an AlignmentFromAssumptions pass. See &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/74941">the original RFC&lt;/a> for a refresher on the llvm.assume intrinsic. &lt;a href="http://reviews.llvm.org/rL217342">r217342&lt;/a>, &lt;a href="http://reviews.llvm.org/rL217344">r217344&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM's sample profile reader has been refactored into lib/ProfileData. &lt;a href="http://reviews.llvm.org/rL217437">r217437&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The AMD 16H Jaguar microarchitecture now has a scheduling model. &lt;a href="http://reviews.llvm.org/rL217457">r217457&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The 'bigobj' COFF variant can now be read. &lt;a href="http://reviews.llvm.org/rL217496">r217496&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The &lt;code>__builtin_assume&lt;/code> and &lt;code>__builtin_assume_aligned&lt;/code> intrinsics have been added. &lt;a href="http://reviews.llvm.org/rL217349">r217349&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The thread safety TIL (Typed Intermediate Language) has seen a major update. &lt;a href="http://reviews.llvm.org/rL217556">r217556&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>LLD gained support for AArch64 Mach-O. &lt;a href="http://reviews.llvm.org/rL217469">r217469&lt;/a>.&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #36, Sep 8th 2014</title><link>https://blog.llvm.org/2014/09/llvm-weekly-36-sep-8th-2014.html</link><pubDate>Mon, 08 Sep 2014 07:51:00 +0000</pubDate><guid>https://blog.llvm.org/2014/09/llvm-weekly-36-sep-8th-2014.html</guid><description>&lt;p>Welcome to the thirty-sixth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/36">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The biggest news this week is of course undoubtedly the long-awaited &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvm-announce/2014-September/000055.html">release of LLVM/Clang 3.5&lt;/a>. See the &lt;a href="http://llvm.org/releases/3.5.0/docs/ReleaseNotes.html">release notes&lt;/a> for a full breakdown of what's changed.&lt;/p>&lt;p>&lt;a href="https://github.com/artagnon/rhine">Rhine&lt;/a>, a Clojure-inspired Lisp with an LLVM JIT backend has been released (or at least, I wasn't aware of it before). There's plenty of discussion about it &lt;a href="https://news.ycombinator.com/item?id=8277410">over at HN&lt;/a>.&lt;/p>&lt;p>Intel have &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/76551">released a new version&lt;/a> of their &lt;a href="http://cilkplus.github.io/">CilkPlus LLVM-basd compiler&lt;/a>. This releases implements support for version 1.2 of Intel's Cilk Plus Language Extension Specification.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Hal Finkel is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/76487">calling for testers&lt;/a> of the new contrext-free language pointer aliasing analysis algorithm. As well as some speedup, there are some benchmark slowdowns which sound worth of further investigation.&lt;/p>&lt;/li>&lt;li>&lt;p>Richard Pennington is &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/38774">seeking feedback&lt;/a> on his proposal for a cross compiler config file format for Clang. The initial prototype spec is &lt;a href="http://ellcc.org/blog/?p=11877">described over at his blog&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Balaram Makam triggered an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/76467">interesting discussion on whether a particular case of loop-invariant code motion can be considered safe&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLVM gained a new alias analysis implementation, the CFL (Context-free language) alias analysis algorithm. When bootstrapping LLVM, this pass gives 7-8% NoAlias responses to queries that TBAA and BasicAA couldn't answer. &lt;a href="http://reviews.llvm.org/rL216970">r216970&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The old JIT has finally been removed. &lt;a href="http://reviews.llvm.org/rL216982">r216982&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>FastISel gained the option to skip target-independent instruction selection. This is now used by AARch64, which uses target-dependent instruction selection only. &lt;a href="http://reviews.llvm.org/rL216947">r216947&lt;/a>, &lt;a href="http://reviews.llvm.org/rL216955">r216955&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MCAnalysis has been removed. The code was judged to be buggy and poorly tested. &lt;a href="http://reviews.llvm.org/rL216983">r216983&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>AArch64 gained a pass to try to remove redundant comparison operations. &lt;a href="http://reviews.llvm.org/rL217220">r217220&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>FastISel has seen some spring cleaning. &lt;a href="http://reviews.llvm.org/rL217060">r217060&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>&lt;code>VariantMatcher::MatcherOps&lt;/code> was modified to reduce the amount of generated code. This reduces object size and compilation time. &lt;a href="http://reviews.llvm.org/rL217152">r217152&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for the 'w' and 'h' length modifiers in MS format strings was added. &lt;a href="http://reviews.llvm.org/rL217195">r217195&lt;/a>, &lt;a href="http://reviews.llvm.org/rL217196">r217196&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new warning is born. &lt;code>-Wunused-local-typedef&lt;/code> will warn about unused local typedefs. &lt;a href="http://reviews.llvm.org/rL217298">r217298&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLDB has gained initial support for 'type validators'. To quote the commit message, "Type Validators have the purpose of looking at a ValueObject, and making sure that there is nothing semantically wrong about the object's contents For instance, if you have a class that represents a speed, the validator might trigger if the speed value is greater than the speed of light". &lt;a href="http://reviews.llvm.org/rL217277">r217277&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>It is now possible to build libc++ on systems without POSIX threads. &lt;a href="http://reviews.llvm.org/rL217271">r217271&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A &lt;code>target.process.memory-cache-line-size&lt;/code> option has been added to LLDB which changes the size of lldb's internal memory cache chunks read from the remote system. &lt;a href="http://reviews.llvm.org/rL217083">r217083&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #35, Sep 1st 2014</title><link>https://blog.llvm.org/2014/09/llvm-weekly-35-sep-1st-2014.html</link><pubDate>Mon, 01 Sep 2014 10:48:00 +0000</pubDate><guid>https://blog.llvm.org/2014/09/llvm-weekly-35-sep-1st-2014.html</guid><description>&lt;p>Welcome to the thirty-fifth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects.LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>As I mentioned in a previous issue, I am involved in the &lt;a href="http://lowrisc.org">lowRISC&lt;/a> projects to produce a fully open-source SoC. Just a quick reminder that &lt;a href="http://www.jobs.cam.ac.uk/job/4665/">we are hiring&lt;/a>, and you have just over a week to get your application in.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/35">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>LLVM/Clang 3.5 is inching ever closer to release. The fourth and hopefully final release candidate is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/76370">available for testing&lt;/a>.&lt;/p>&lt;p>Quarks Lab have published a &lt;a href="http://blog.quarkslab.com/scaf-source-code-analysis-framework-based-on-clang-pre-alpha-preview.html">preview of SCAF&lt;/a>, a Source Code Analysis Framework built on Clang. It promises a release soon.&lt;/p>&lt;p>The &lt;a href="http://vmkit.llvm.org/">VMKit project website&lt;/a> has this week been &lt;a href="http://reviews.llvm.org/rL216831">updated&lt;/a> to mark the project as retired. VMKit was a project to implement virtual machines such as a JVM on top of LLVM. People interested in restarting the project are encouraged to get in touch with Gaël Thomas.&lt;/p>&lt;p>AMD and Microsoft have &lt;a href="http://sdtimes.com/amd-announces-heterogeneous-c-amp-language-developers/">released a C++ AMP compiler targeting version 1.2 of the specification&lt;/a>. The C++ AMP (Accelerated Massive Parallelism) compiler is of course based on LLVM and Clang, and can be &lt;a href="https://bitbucket.org/multicoreware/cppamp-driver-ng/wiki/Home">found here&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Manuel Klimek has provided a &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/38657">quick run-down of the state of his work on Clang C++ refactoring tools&lt;/a>. He reports there are a number of standalone, single-use refacotring tools but more work needs to be done on generalising and integrating them. The plan is to push more of these tools to tools-extra (where clang-rename lives), make them integratable as a library, integrate them into libclang and then integrate them into projects like &lt;a href="https://github.com/Valloric/ycmd">ycmd&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Robin Morisset has been working on optimisations for lowering of atomics and has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/76400">asked for input on a fence elimination algorithm&lt;/a> he's been thinking about. He has outlined two possible implementation routes he would like feedback on.&lt;/p>&lt;/li>&lt;li>&lt;p>A discussion about &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/76278">improving llvm-objdump&lt;/a>, kicked offed by Steve King, makes an interesting read. I'm looking forward to a future with a more featureful llvm-objdump that prints symbols of branch targets by default.&lt;/p>&lt;/li>&lt;li>&lt;p>David Blaikie has started a discussion about &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/76341">supporting -gmlt in LLVM/Clang&lt;/a>. Vital to having any chance of understanding this thread is to know that gmlt refers to debug info containing 'minimal line tables', a feature that &lt;a href="https://gcc.gnu.org/ml/gcc-patches/2011-04/msg02075.html">was added to GCC a while back&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>I linked last week to the mailing list thread on removing static initializers for command line options and regrettably was unable to summarise the extensive discussion. The bad news is discussion has continued at a rapid pace, but thankfully Chandler Carruth has rather helpfully &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/76279">sumarised the main outcomes of the discussion&lt;/a>. It's also worth reading &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/76382">this thread&lt;/a> for an idea of what the new infrastructure might look like.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The AArch64 backend learned about v4f16 and v8f16 operations, &lt;a href="http://reviews.llvm.org/rL216555">r216555&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM CMake build system now includes support for building with UndefinedBehaviourSanitizer. &lt;a href="http://reviews.llvm.org/rL216701">r216701&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The &lt;code>-fdevirtualize&lt;/code> and &lt;code>-fdevirtualize-speculatively&lt;/code> flags are now recognised (and ignored) for compatibility with GCC. &lt;a href="http://reviews.llvm.org/rL216477">r216477&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Some Google Summer of Code work has started to land. In particular, the Clang static analyzer gained initial infrastructure to support for synthesizing function implementations from external model files. See the commit message for full details on the intent of this feature. &lt;a href="http://reviews.llvm.org/rL216550">r216550&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support was added for capturing variable length arrays in C++11 lambda expressions. &lt;a href="http://reviews.llvm.org/rL216649">r216649&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLDB gained documentation on its internal register numbering scheme. &lt;a href="http://reviews.llvm.org/rL216372">r216372&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB is making progress towards AArch64 support. &lt;a href="http://reviews.llvm.org/rL216737">r216736&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #34, Aug 25th 2014</title><link>https://blog.llvm.org/2014/08/llvm-weekly-34-aug-25th-2014.html</link><pubDate>Mon, 25 Aug 2014 12:28:00 +0000</pubDate><guid>https://blog.llvm.org/2014/08/llvm-weekly-34-aug-25th-2014.html</guid><description>&lt;p>Welcome to the thirty-fourth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects.LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>.Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/34">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The third release candidate for LLVM/Clang 3.5 is &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/38553">now available&lt;/a>. As ever, test it on your codebases and report any regressions.&lt;/p>&lt;p>Adrian Sampson has written a &lt;a href="https://homes.cs.washington.edu/~asampson/blog/quala.html">blog post about Quala&lt;/a>, a tool for implementing pluggable type systems for C/C++ using Clang. The example type systems are a system allowing nullable and non-nullable pointers as well as an information flow tracking system. In the future, Adrian wants to connect type annotations to LLVM IR.&lt;/p>&lt;p>C++14 is &lt;a href="http://isocpp.org/blog/2014/08/we-have-cpp14">now done&lt;/a>. A quick look at the &lt;a href="http://clang.llvm.org/cxx_status.html#cxx14">Clang C++14 implementation status&lt;/a>confirms that Clang support is in pretty good shape.&lt;/p>&lt;p>Santiago Fernandez has been an intern on the .NET team at Microsoft this summer. In this MSDN Channel9 posting, Beth Massi &lt;a href="http://channel9.msdn.com/Blogs/funkyonex/Fun-with-the-Interns-Santiago-Fernandez-on-LLVM-Based-Optimizer-for-MSIL">interviews him about his work on using LLVM in the .NET native code generator&lt;/a>.&lt;/p>&lt;p>The next Cambridge (UK) LLVM social &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75952">will be held on Weds 27th August, 7.30pm&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>There is a &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/4887">proposal&lt;/a> to move the minimum supported Visual Studio version for compiling LLVM/Clang up to 2013 from 2012. LLVM/Clang 3.6 would be the first stable release with this requirement assuming there are no objections. With the introduction of C++11 features into the LLVM/Clang codebases, MSVC2012 support is troublesome due to a number of unsupported constructs. If this change would effect you negatively, now is the time to pipe up.&lt;/p>&lt;/li>&lt;li>&lt;p>Richard Carback &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75943">reports&lt;/a> that two of his interns at Draper Laboratories have been working on resurrecting the LLVM C Backend, with &lt;a href="https://github.com/draperlaboratory/llvm-cbe">source on Github&lt;/a>. If this is to make it back into the mainstream repository, somebody will have to volunteer to maintain it which &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75974">Richard has kindly done&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Diego Novillo has posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/76135">update on his plans for supporting profile data from Perf in LLVM&lt;/a>. He is now planning on keeping conversion to Perf's format out-of-tree. The current LLVM representation can be used as an exchange format, but Diego will be submitting a more compact representation for internal use.&lt;/p>&lt;/li>&lt;li>&lt;p>Chris Bieneman has posted an RFC on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75954">removing static initializers for command line options&lt;/a>. This would make it easier for LLVM clients like WebKit and Mesa. There is a lot of discussion about this proposal that I'm afraid I don't have time to summarise.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>X86 Haswell gained a detailed scheduling model. &lt;a href="http://reviews.llvm.org/rL215094">r215094&lt;/a>, &lt;a href="http://reviews.llvm.org/rL215095">r215905&lt;/a>, and more.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM's code coverage mapping format gained extensive documentation. &lt;a href="http://reviews.llvm.org/rL215990">r215990&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>FastISel for AArch64 saw yet more changes, this time optimisations for ADDS/SUBS emission and support for variable shifts. &lt;a href="http://reviews.llvm.org/rL216033">r216033&lt;/a>, &lt;a href="http://reviews.llvm.org/rL216242">r216242&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The MIPS assembler gained support for &lt;code>.set arch=x&lt;/code>. &lt;a href="http://reviews.llvm.org/rL215978">r215978&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The PeepholeOptimizer has been improved to take advantage of the recently added isRegSequence, isExtractSubreg, and isInsertSubreg properties. &lt;a href="http://reviews.llvm.org/rL216088">r216088&lt;/a>, &lt;a href="http://reviews.llvm.org/rL216136">r216136&lt;/a>, &lt;a href="http://reviews.llvm.org/rL216144">r216144&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A thread-model option has been added along with the 'single' option for lowering atomics on baremetal and single-threaded systems. &lt;a href="http://reviews.llvm.org/rL216182">r216182&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The gold plugin has been rewritten in order to fix &lt;a href="http://llvm.org/bugs/show_bug.cgi?id=19901">bug 19901&lt;/a>. &lt;a href="http://reviews.llvm.org/rL216215">r216215&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>C++1y is now called C++14. &lt;a href="http://reviews.llvm.org/rL215982">r215982&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>CGcall (code generation for function call) has been refactored. &lt;a href="http://reviews.llvm.org/rL216251">r216251&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The libcxx build and test system gained support for &lt;code>LLCM_USE_SANITIZER&lt;/code>. &lt;a href="http://reviews.llvm.org/rL215872">r215872&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libcxxabi/libunwind now supports baremetal ARM. &lt;a href="http://reviews.llvm.org/rL216202">r216202&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #33, Aug 18th 2014</title><link>https://blog.llvm.org/2014/08/llvm-weekly-33-aug-18th-2014.html</link><pubDate>Mon, 18 Aug 2014 05:07:00 +0000</pubDate><guid>https://blog.llvm.org/2014/08/llvm-weekly-33-aug-18th-2014.html</guid><description>&lt;p>Welcome to the thirty-third issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects.LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>.Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/33">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Binaries for LLVM/Clang 3.5RC2 are now &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75752">available for testing&lt;/a>. Try it on your codebases, and be sure to report any regressions.&lt;/p>&lt;p>LDC 0.14.0 &lt;a href="https://github.com/ldc-developers/ldc/releases/tag/v0.14.0">has been released&lt;/a>. LDC is an LLVM-based compiler for the D programming language. There's a mixture of new features and bug fixes, see the release notes for full details of what's changed.&lt;/p>&lt;p>Viva64, who sell the PVS-Studio static analyzer has written up their experiences of &lt;a href="http://www.viva64.com/en/b/0270/">using the Clang static analyzer on the PVS-Studio codebase&lt;/a>. It managed to find 12 issues which the blog author considers genuine bugs.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Matt Arsenault has written on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.cvs/201804">RFC on adding fmin/fmax intrinsics&lt;/a>. Both the R600 and AArch64 platforms support fmin/fmax instructions with semantics that match the libm functions.&lt;/p>&lt;/li>&lt;li>&lt;p>Chris Matthews writes that Apple are &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75776">working on bringing up a new Darwin build cluster and switching from Buildbot to Jenkins&lt;/a>. There was an amount of followup discussion on Buildbot vs Jenkins, and David Chisnall has &lt;a href="http://reviews.llvm.org/D4901">shared a patch&lt;/a> that makes lit produce JUnit XML output that Jenkins can consume.&lt;/p>&lt;/li>&lt;li>&lt;p>Arch Robinson has written a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75769">proposal for llvm.mem.vectorize.safelen metadata&lt;/a>. This allows the user to bless a loop as having no memory dependences that prevent vectorization.&lt;/p>&lt;/li>&lt;li>&lt;p>Daniel Berlin has written a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75731">very brief summary of LLVM's TypeBasedAliasAnalysis&lt;/a> in response to a question, that others may find enlightening.&lt;/p>&lt;/li>&lt;li>&lt;p>Hans Wennborg &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75707">shares his results from profiling the run-time sizes of SmallVector and similar classes&lt;/a>. The intention is to see if there are cases where they are misused (i.e. a heap allocation always results so there is no benefit from being initially allocated on the stack).&lt;/p>&lt;/li>&lt;li>&lt;p>There has been some &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/38411">discussion about an extended Clang API&lt;/a>. The initial discussion frames this as an 'ABI support library'. An extended Clang API could be used for automatically generating bindings to C or even C++ code (which right now Julia is using private interfaces to do).&lt;/p>&lt;/li>&lt;li>&lt;p>Renato Golin has started a discussion about &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/38465">a target specific parsing API&lt;/a>. The &lt;a href="http://llvm.org/bugs/show_bug.cgi?id=20683">bug report&lt;/a> describes the problem more fully, which is duplication of code which performs the same parsing task (e.g. &lt;code>-mfpu&lt;/code> on command line and the &lt;code>.fpu&lt;/code> assembly directive).&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>FastISel for AArch64 will now make use of the zero register when possible and supports more addressing modes. &lt;a href="http://reviews.llvm.org/rL215591">r215591&lt;/a>, &lt;a href="http://reviews.llvm.org/rL215597">r215597&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MIPS gained support for the .end, .end, .frame, .mask, and .fmask assembler directives. &lt;a href="http://reviews.llvm.org/rL215359">r215359&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>ARM gained the MRS/MSR system instructions. &lt;a href="http://reviews.llvm.org/rL215700">r215700&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Documentation has been added describing how the Language options in .clang-format files works. &lt;a href="http://reviews.llvm.org/rL215443">r215443&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Prefetch intrinsics were added for ARM and AArch64. &lt;a href="http://reviews.llvm.org/rL215568">r215568&lt;/a>, &lt;a href="http://reviews.llvm.org/rL215569">r215569&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The logic for the &lt;code>-include&lt;/code> command line parameter is now properly implemented. &lt;a href="http://reviews.llvm.org/rL215433">r215433&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLD now has initial support for ELF/AArch64. &lt;a href="http://reviews.llvm.org/rL215544">r215544&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>UndefinedBehaviourSanitizer gained a returns-nonnull sanitizer. This verifies that functions annotated with &lt;code>returns_nonnull&lt;/code> do return nonnull pointers. &lt;a href="http://reviews.llvm.org/rL215485">r215485&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A number of lldb tests now compile on Windows. &lt;a href="http://reviews.llvm.org/rL215562">r215562&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #32, Aug 11th 2014</title><link>https://blog.llvm.org/2014/08/llvm-weekly-32-aug-11th-2014.html</link><pubDate>Mon, 11 Aug 2014 04:15:00 +0000</pubDate><guid>https://blog.llvm.org/2014/08/llvm-weekly-32-aug-11th-2014.html</guid><description>&lt;p>Welcome to the thirty-second issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>.Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>Some readers may be interested to know that &lt;a href="http://lowrisc.org/">lowRISC&lt;/a>, a project to produce a fully open-source SoC started by a number of us at the University of Cambridge Computer Lab has been announced. &lt;a href="http://www.jobs.cam.ac.uk/job/4665/">We are hiring&lt;/a>.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/32">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Codeplay contributed the LLDB MI (Machine Interface) frontend a while ago, and have now committed some additional features. To coincide with that, they've published a &lt;a href="http://lists.cs.uiuc.edu/pipermail/lldb-dev/2014-August/004768.html">series of blog posts&lt;/a> covering the MI driver's implementation, how to set it up from within Eclipse, and how to add support for new MI commands.&lt;/p>&lt;p>McSema, a framework for transforming x86 programs to LLVM bitcode has &lt;a href="http://blog.trailofbits.com/2014/08/07/mcsema-is-officially-open-source/">now been open-sourced&lt;/a>. The talk about McSema from the ReCON conference is also now online.&lt;/p>&lt;p>Registration for the LLVM Developer's Meeting 2014 is &lt;a href="http://llvm.org/devmtg/2014-10/#registration">now open&lt;/a>. The event will take place in San Jose on October 28th-29th. You have until September 1st to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75567">submit your talk/BoF/poster/tutorial proposal&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Robin Morisset, currently an intern at Google has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75534">written about his plan to optimize C11/C++11 atomics in LLVM&lt;/a>. This resulted in a discussion on &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-August/075573.html">whether some of these transformation should be done at the IR level&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Dan Liew has written a long post about &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75575">re-organising and improving zorg&lt;/a> (LLVM's testing and buildbot infrastructure).&lt;/p>&lt;/li>&lt;li>&lt;p>Eric Christopher has written to the mailing list to warn us of &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75475">incoming API changes&lt;/a>. These changes include modifying getSubtarget/getSubtargetImpl to take a Function/MachineFunction, so sub-targets could be used based on attributes on the function.&lt;/p>&lt;/li>&lt;li>&lt;p>Sergey Ostanevich from Intel has &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-August/075606.html">shared&lt;/a> a &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/attachments/20140809/cd6c7f7a/attachment-0001.pdf">proposal for the implementation of OpenMP offloading in LLVM&lt;/a>. This proposal was created by contributors from IBM, Intel, ANL, TI, and AMD. The example given would allow code to be offloaded to e.g. a Xeon Phi co-processor if present, or a GPU.&lt;/p>&lt;/li>&lt;li>&lt;p>Delesley Hutchins has &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/38248">shared an update on his work on thread safety analysis&lt;/a>. This details the recently added negative capabilities patch. He is looking for feedback on how to limit the propagation of negative capabilities.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Initial work on the MachineCombiner pass landed. This estimates critical path length of the original instruction sequence vs a transformed (combined) instruction sequence and chooses the faster code. An example given in the commit message is choosing between add+mul vs madd on AArch64, and a followup commit implements MachineCombiner for this target. &lt;a href="http://reviews.llvm.org/rL214666">r214666&lt;/a>, &lt;a href="http://reviews.llvm.org/rL214669">r214669&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A few useful helper functions were added to the LLVM C API: &lt;code>LLVM{IsConstantString, GetAsString, GetElementAsConstant}&lt;/code>. &lt;a href="http://reviews.llvm.org/rL214676">r214976&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A whole load of AVX512 instructions were added. &lt;a href="http://reviews.llvm.org/rL214719">r214719&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>FastISel for AArch64 now support basic argument lowering. &lt;a href="http://reviews.llvm.org/rL214846">r214846&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A flag has been added to experiment with running the loop vectorizer before the SLP vectorizer. According to the commit message, eventually this should be the default. &lt;a href="http://reviews.llvm.org/rL214963">r214963&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The old JIT is almost dead, it has been removed (for those not paying close attention, 3.5 has already been branched so still contains the old JIT). However, the patch was then reverted, so it's in zombie status. &lt;a href="http://reviews.llvm.org/rL215111">r215111&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>AArch64 gained a load balancing pass for the Cortex-A57, which tries to make maximum use of available resources by balancing use of even and odd FP registers. &lt;a href="http://reviews.llvm.org/rL215199">r215199&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Thread safety analysis gained support for negative requirements to be specified. &lt;a href="http://reviews.llvm.org/rL214725">r214725&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Coverage mapping generation has been committed. The &lt;code>-fcoverage-mapping&lt;/code> command line option can be used to generate coverage mapping information, which can then be combined with execution counts from instrumentation-based profiling to perform code coverage analysis. &lt;a href="http://reviews.llvm.org/rL214752">r214752&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A command line option to limit the alignment that the compiler can assume for an arbitrary pointer. &lt;a href="http://reviews.llvm.org/rL214911">r214911&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLDB's FileSpec class learned to understand Windows paths. &lt;a href="http://reviews.llvm.org/rL215123">r215123&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB learned a whole bunch of new commands and features for its Machine Interface. &lt;a href="http://reviews.llvm.org/rL215223">r215223&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>OpenMP gained PowerPC64 support. &lt;a href="http://reviews.llvm.org/rL215093">r215093&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #31, Aug 4th 2014</title><link>https://blog.llvm.org/2014/08/llvm-weekly-31-aug-4th-2014.html</link><pubDate>Mon, 04 Aug 2014 09:20:00 +0000</pubDate><guid>https://blog.llvm.org/2014/08/llvm-weekly-31-aug-4th-2014.html</guid><description>&lt;p>Welcome to the thirty-first issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/31">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Renato Golin has posted a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75207">summary of feedback from his talk on LLVM and GCC collaboration at the GNU Tools Cauldron&lt;/a>. This both summarises the main areas he's looking for collaboration, and the feedback that people gave at the event or afterwards.&lt;/p>&lt;p>This blog post describes &lt;a href="http://fuzion24.github.io/android/obfuscation/ndk/llvm/o-llvm/2014/07/27/android-obfuscation-o-llvm-ndk/">how to use Obfuscator-LLVM to to obfuscate Android NDK binaries&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Johannes Kapfhammer, a Google Summer of Code student has &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/38105">posted an RFC on adding a fuzzy parser for highlighting C++&lt;/a>. The Clang parser can't be used for this as it may be highlighting incomplete snippets where not all types or functions are included. It was pointed out in responses that this is similar to clang-format's parser, but apparently this parser is not easily reusable and very tied to the clang-format implementation.&lt;/p>&lt;/li>&lt;li>&lt;p>In response to a query about whether there is interest in a performance tracking BOF at the LLVM Dev meeting, Renato Golin has posted a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75410">summary of related issues discussed at the last meeting and progress made on them&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>John Kåre Alsaker posted a question about &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75230">adding a stack probe function attribute&lt;/a>. This would be used for languages like Rust that attempt to detect stack overflow with the use of a guard page. Philip Reames responded with &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75399">a number of thoughts on this feature&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Daniel Stewart has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75350">implemented ELF/AArch64 support for lld&lt;/a> and is looking for how to upstream it. People are happy for a single patch to be posted for review.&lt;/p>&lt;/li>&lt;li>&lt;p>In response to a question about documentation for adding builders to the LLVM buildbot service, Dan Liew has posted a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75355">summary of how he has done it&lt;/a>. He's looking for feedback on whether this is the best way to do things.&lt;/p>&lt;/li>&lt;li>&lt;p>John Kåre Alsaker has asked for feedback on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75231">enhancing BasicAliasAnalysis for Rust&lt;/a>. Rust's restrictions on aliasing are not currenly fully taken advantage of. Both &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75260">Hal Finkel&lt;/a> and &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75286">Cameron Zwarich&lt;/a> respond with thoughts on how to proceed.&lt;/p>&lt;/li>&lt;li>&lt;p>Tom Stellard &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75214">proposes renaming the R600 target to AMDGPU&lt;/a>. The motivation is that the backend has the name since the R600 was the first AMD GPU targeted, but it has added support for all AMD GPUs since then. There seems to be agreement this would be a sensible renaming.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>FastISel for AArch64 saw a number of improvements, including support for shift-immediate, arithmetic with overflow intrinsics. &lt;a href="http://reviews.llvm.org/rL214345">r214345&lt;/a>, &lt;a href="http://reviews.llvm.org/rL214348">r214348&lt;/a>, and more.&lt;/p>&lt;/li>&lt;li>&lt;p>The SLPVectorizer has seen a largeish commit that implements an "improved scheduling algorithm". Sadly the commit message offers no further details. &lt;a href="http://reviews.llvm.org/rL214494">r214494&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>TargetInstrInfo gained &lt;code>isAsCheapAsMove&lt;/code> which takes a MachineInstruction and returns true if that instruction is as cheap as a move instruction. &lt;a href="http://reviews.llvm.org/rL214158">r214158&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM libraries can now be exported as importable CMake targets, making it easier for those building LLVM-based projects. This is now documented. &lt;a href="http://reviews.llvm.org/rL214077">r214077&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Release notes for PowerPC changes during 3.5 development have been committed. &lt;a href="http://reviews.llvm.org/rL214403">r214403&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Initial work towards supporting debug locations for fragmented variables (e.g. by-value struct arguments passed in registers) has been committed. &lt;a href="http://reviews.llvm.org/rL214576">r214576&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Work on support for the MSVC ABI continues. Clang will now consider required alignment constraints on fields. &lt;a href="http://reviews.llvm.org/rL214274">r214274&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>AddressSanitizer now passes source-level information from Clang to ASan using metadata rather than by creating global variables. &lt;a href="http://reviews.llvm.org/rL214604">r214604&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The PowerPC backend now support selection of the ELFv1/ELFv2 ABI via the &lt;code>-mabi=&lt;/code> option. &lt;a href="http://reviews.llvm.org/rL214074">r214074&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>lld gained support for interworking between thumb and ARM code with Mach-O binaries. &lt;a href="http://reviews.llvm.org/rL214140">r214140&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A massive ABI testsuite (contributed by Sony) has been committed to the test-suite repo. &lt;a href="http://reviews.llvm.org/rL214126">r214126&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #30, Jul 28th 2014</title><link>https://blog.llvm.org/2014/07/llvm-weekly-30-jul-28th-2014.html</link><pubDate>Mon, 28 Jul 2014 12:55:00 +0000</pubDate><guid>https://blog.llvm.org/2014/07/llvm-weekly-30-jul-28th-2014.html</guid><description>&lt;p>Welcome to the thirtieth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/30">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a>&lt;h3>News and articles from around the web&lt;/h3>&lt;p>Nuno Lopes, David Menendez, Santosh Nagarakatte, and John Regehr have &lt;a href="http://blog.regehr.org/archives/1170">written about ALIVe&lt;/a>. This is a very promising tool that aims to aid the specification and proof of peephole optimisations (such as those currently found in LLVM's InstCombine). It uses an SMT solver in order to prove optimisations correct (and if incorrect, provides a counter-example).&lt;/p>&lt;p>Source and binaries for the first LLVM/Clang 3.5 Release Candidate &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/37969">are now available&lt;/a>. If you like your LLVM releases to be on-time and regression-free, do your part and test them on your codebases.&lt;/p>&lt;p>Thomas Ströder and colleagues have recently published a paper "Proving Termination and Memory Safety for Programs with Pointer Arithmetic" which creates symbolic execution graphs from LLVM IR in order to perform its analysis. The preprint is &lt;a href="http://verify.rwth-aachen.de/giesl/papers/IJCAR14-LLVM.pdf">available here&lt;/a>.&lt;/p>&lt;p>The next Cambridge (UK) LLVM Social will be on the &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/37979">30th July, at 7.30 pm&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Amin Shali from Google has posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/38026">RFC on adding a rename refactoring tool to Clang&lt;/a>. The proposed feature addition would consist of a command-line tool to semantically rename a symbol and an API that could be used by IDEs/editors to do the same.&lt;/p>&lt;/li>&lt;li>&lt;p>Lang Hames &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75175">reminds LLVM users to switch to MCJIT&lt;/a>. The old JIT infrastucture will be removed after 3.5, so now is the time to look at porting to MCJIT if you haven't already.&lt;/p>&lt;/li>&lt;li>&lt;p>Rekha R &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75099">posed a question about the semantics of add nsw&lt;/a> which elicited some useful responses that might help clarify things if you too have found it unclear.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Support for scoped noalias metadata has been added. The motivation for this is to preserve noalias function attribute information when inlining and to model block-scope C99 restrict pointers. &lt;a href="http://reviews.llvm.org/rL213864">r213864&lt;/a>, &lt;a href="http://reviews.llvm.org/rL213948">r213948&lt;/a>, &lt;a href="http://reviews.llvm.org/rL213949">r213949&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The llvm-vtabledump tool is born. This will dump vtables inside object files. Right now it only supports MS ABI, but will in the future support Itanium ABI vtables as well. &lt;a href="http://reviews.llvm.org/rL213903">r213903&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The llvm.assume intrinsic has been added. This can be used to provide the optimizer with a condition it may assume to be true. &lt;a href="http://reviews.llvm.org/rL213973">r213973&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The loop vectorizer has been extended to make use of the alias analysis infrastructure. &lt;a href="http://reviews.llvm.org/rL213486">r213486&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Various additions have been made to support the PowerPC ELFv2 ABI. &lt;a href="http://reviews.llvm.org/rL213489">r213489&lt;/a>, &lt;a href="http://reviews.llvm.org/rL213490">r213490&lt;/a>, and more.&lt;/p>&lt;/li>&lt;li>&lt;p>The R600 backend gained an instruction shrinking pass, which will convert 64-bit instructions to 32-bit when possible. &lt;a href="http://reviews.llvm.org/rL213561">r213561&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The llvm.loop.vectorize.unroll metadata has been renamed to llvm.loop.interleave.count. &lt;a href="http://reviews.llvm.org/rL213588">r213588&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM 3.5 release notes for MIPS have been committed, if you're interested in seeing a summary of work in the last development cycle. &lt;a href="http://reviews.llvm.org/rL213749">r213749&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The IR backward compatibility policy is now documented. &lt;a href="http://reviews.llvm.org/rL213813">r213813&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Support for &lt;code>#pragma unroll&lt;/code> was added. &lt;a href="http://reviews.llvm.org/rL213574">r213574&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang learned a range of AVX-512 intrinsics. &lt;a href="http://reviews.llvm.org/rL213641">r213641&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Work on MS ABI support continues. &lt;a href="http://reviews.llvm.org/rL214004">r214004&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A dynamic loader for the Hexagon DSP was committed to lldb as well as an ABI description. &lt;a href="http://reviews.llvm.org/rL213565">r213565&lt;/a>, &lt;a href="http://reviews.llvm.org/rL213566">r213566&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new fast-path implementation of C++ demangling has been added to lldb. It promises significantly better performance. &lt;a href="http://reviews.llvm.org/rL213671">r213671&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #29, Jul 21st 2014</title><link>https://blog.llvm.org/2014/07/llvm-weekly-29-jul-21st-2014.html</link><pubDate>Mon, 21 Jul 2014 03:31:00 +0000</pubDate><guid>https://blog.llvm.org/2014/07/llvm-weekly-29-jul-21st-2014.html</guid><description>&lt;p>Welcome to the twenty-ninth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects.LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>.Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>This is a special extended issue which I'm choosing to subtitle "LLVM Weekly visits the GNU Tools Cauldron". The &lt;a href="https://gcc.gnu.org/wiki/cauldron2014">event&lt;/a> took place over the weekend and had a wide range of interesting talks. You can find my notes at the end of this newsletter. Talks were recorded and the videos should be made available in the next month or two.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/29">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The eighth annual LLVM Developers meeting has been &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/74893">announced&lt;/a> and will take place on October 28th and 29th in San Jose, CA. It is looking for sponsors and talk/poster submissions.&lt;/p>&lt;p>A new blog post as been published on the LLVM Blog giving &lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html">more details on FTL: WebKit's LLVM-based JIT&lt;/a>.&lt;/p>&lt;p>A tentative &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/37785">schedule for the release of LLVM/Clang 3.5&lt;/a> has been posted.&lt;/p>&lt;p>Botond Ballo has posted a &lt;a href="http://botondballo.wordpress.com/2014/07/17/trip-report-c-standards-committee-meeting-in-rapperswil-june-2014/">summary of June's C++ Standards Committee Meeting&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Hal Finkel has posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/74941">RFC on adding an IR-level intrinsic to LLVM to represent invariants&lt;/a>. These are conditions that the optimizer is allowed to assume will be valid during the execution of the program. The post also comes with a complete set of patches implementing the concept. An issue raised by Philip Reames is that by representing the invariant as an IR instruction, this may affect profitability heuristics in optimisation passes. Chandler Carruth followed up with a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/74946">clear description of the trade-offs&lt;/a> which it seems people mostly agree with.&lt;/p>&lt;/li>&lt;li>&lt;p>Yuri Gribov has re-opened a previously discussed issue, that &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/74863">LLVM and GCC set the frame pointer to point to different stack slots on ARM&lt;/a>. Renato Golin &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/74908">responded&lt;/a> with an explanation of how GCC ended up doing things differently. The AddressSanitizer people would prefer things to be unified so they can use knowledge of the layout to perform unwinding without using tables (a speed optimisation). It doesn't seem likely that either LLVM or GCC will be changing though.&lt;/p>&lt;/li>&lt;li>&lt;p>Diego Novillo is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/74881">soliciting feedback on integrating his autofdo tool into LLVM&lt;/a>. AutoFDO is a tool that converts data collected from Linux perf to a format that can be used by LLVM.&lt;/p>&lt;/li>&lt;li>&lt;p>Philip Reames &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/74887">asks whether anyone has implemented a framework for asking liveness questions for SSA values in the IR&lt;/a>. The lack of an immediate answer suggests they have not, though Andrew Trick points to &lt;a href="http://hal.inria.fr/docs/00/58/53/03/PDF/RR-7503.pdf">Computing Liveness Sets for SSA-Form Programs&lt;/a> while Dibyendu Das points to &lt;a href="http://hal.inria.fr/docs/00/64/73/69/PDF/ramakrishna_taco.pdf">Efficient Liveness Computation Using Merge Sets and DJ-Graphs&lt;/a> which is along the same lines.&lt;/p>&lt;/li>&lt;li>&lt;p>Tim Northover has written an RFC suggesting that &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/37777">llvm.convert.to.fp16 and related intrinsics should be dropped&lt;/a>. Instead the 'half' type can be used in combination with fpext/fptrunc.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth has written an RFC regarding &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/75018">legalizing operations and post-legalization DAG combining&lt;/a>. It's only just been posted so there's no feedback yet.&lt;/p>&lt;/li>&lt;li>&lt;p>Andrew Kaylor has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/74930">proposed&lt;/a> that Lang Hames take over from him as code owner for MCJIT, RuntimeDyld, and JIT event listener. This was agreed and &lt;code>CODE_OWNERS.txt&lt;/code> has been updated appropriately.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A dereferenceable attribute was added. This indicates that the parameter or return pointer is dereferenceable (i.e. can be loaded from speculatively without a risk of trapping). This is subtly different to the nonnull attribute which doesn't necessarily imply dereferenceability (you might for instance have a pointer to one element past the end of an array). &lt;a href="http://reviews.llvm.org/rL213385">r213385&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new subtarget hook was added to allow targets to opt-out of register coalescing.&lt;a href="http://reviews.llvm.org/rL213078">r213078&lt;/a>, &lt;a href="http://reviews.llvm.org/rL213188">r213188&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A MergedLoadStoreMotion pass was added. &lt;a href="http://reviews.llvm.org/rL213396">r213396&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>RegionInfo has been templatified to it works on MachineBasicBlocks. &lt;a href="http://reviews.llvm.org/rL213456">r213456&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A monster patch from Nvidia adds a whole bunch of surface/texture intrinsics to the NVPTX backend. &lt;a href="http://reviews.llvm.org/rL213256">r213256&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support was added for emitting warnings if vectorization is forced and fails. &lt;a href="http://reviews.llvm.org/rL213110">r213110&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Improvements to FastISel continue with the implementation of the FastLowerCall hook for X86. This actually reproduces what was already being done in X86, but is refactored against the target independent call lowering. &lt;a href="http://reviews.llvm.org/rL213049">r213049&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The ARM dmb, dsb and isb intrinsics have been implemented for AARch64. &lt;a href="http://reviews.llvm.org/rL213247">r213247&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang's rewrite engine is now a core feature (i.e. it can not be disabled at configure time). &lt;a href="http://reviews.llvm.org/rL213171">r213171&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Error recovery when the programmer mistypes &lt;code>::&lt;/code> as &lt;code>:&lt;/code> was improved. &lt;a href="http://reviews.llvm.org/rL213120">r213120&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The AARch64 Clang CLI interface proposal for &lt;code>-march&lt;/code> has been implemented. See the commit message for details. &lt;a href="http://reviews.llvm.org/rL213353">r213353&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>OpenMP work continues with the addition of initial parsing and semantic analysis for the &lt;code>final&lt;/code>, &lt;code>untied&lt;/code> and other clauses, and the &lt;code>master&lt;/code> directive. &lt;a href="http://reviews.llvm.org/rL213232">r213232&lt;/a>, &lt;a href="http://reviews.llvm.org/rL213257">r213257&lt;/a>, &lt;a href="http://reviews.llvm.org/rL213237">r213237&lt;/a>, and more.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>The 'Kalimba' platform is now supported by lldb (presumably this refers to the CSR processor). &lt;a href="http://reviews.llvm.org/rL213158">r213158&lt;/a>.&lt;/li>&lt;/ul>&lt;h3>LLVM Weekly at the GNU Tools Cauldron&lt;/h3>&lt;p>For full details on the conference and details on the speakers for the talks I've summarised below see the &lt;a href="https://gcc.gnu.org/wiki/cauldron2014">GNU Tools Cauldron 2014 web page&lt;/a>. Apologies for any inaccuracies, please do get in touch if you spot anything I may have noted incorrectly. LLVM followers may be particularly interested in Renato Golin's talk on collaboration between the GCC and LLVM communities.&lt;/p>&lt;h4>Glibc BoF&lt;/h4>&lt;ul>&lt;li>2.20 is in "slushy" freeze mode. What else is left? fmemopen, fd locking, some &lt;code>-Wundef&lt;/code> work&lt;/li>&lt;li>Anyone planning to check in something big for 2.21?&lt;ul>&lt;li>Mentor Graphics planning to check in a NIOS II port. They won't be accepted until Linux kernel patches are in a kernel release.&lt;/li>&lt;li>A desire for AArch64 ILP32 ABI to get in. Kernel patches currently in review, compiler work is ready.&lt;/li>&lt;li>OpenRISC&lt;/li>&lt;li>NaCl (nptl)&lt;/li>&lt;/ul>&lt;/li>&lt;li>Benchmarking glibc? Does anyone have a good approach. There is a preload library approach (see notes from Ondrej's talk).&lt;/li>&lt;li>Glibc has been built with AddressSanitizer, help needed to get it integrated into the build system. There was a comment this would be nice to get in to distributions.&lt;/li>&lt;li>Red Hat are working on supporting alternate libm implementations, including a low-precision and high-precision implementation. Intel are looking to add math functions that work on small vectors.&lt;/li>&lt;/ul>&lt;h4>Abigail: toward ABI taming&lt;/h4>&lt;ul>&lt;li>Want to determine if changes to your shared library break apps for users, and users want to know whether an updated library remains compatible with their code. The bidiff tool will tell you the differences in terms of ABI given two object files as its input.&lt;/li>&lt;li>libabi consists of modules such as a DWARF reader, the comparison engine. Tools such as bidiff are built on this API&lt;/li>&lt;li>What's next for libabigail?&lt;ul>&lt;li>bicompat will help application authors determine whether their application A is still compatibile with an updated version of a given library L by examining the undefined symbols of A that are resolved by L.&lt;/li>&lt;li>More amenable to automation (such as integration into build systems)&lt;/li>&lt;li>Support for un-instantiated templates. This would require declarations of uninstantiated templates to be represented in DWARF.&lt;/li>&lt;/ul>&lt;/li>&lt;li>A first official release (though source is available at &lt;a href="https://sourceware.org/libabigail/">https://sourceware.org/libabigail/&lt;/a>)&lt;/li>&lt;/ul>&lt;h4>Writing VMs in Java and debugging them with GDB&lt;/h4>&lt;ul>&lt;li>Oracle Labs have been working on various dynamic language implementations in Java (e.g. Ruby, Python, R, JS, ...).&lt;/li>&lt;li>FastR is a reimplementation of R in Java featuring an interpreter (Truffle) and dynamic compiler (Graal).&lt;/li>&lt;li>Truffle and Graal starts with an AST interpreter. The first time a node is evaluated it is specialised to the type that was seen at runtime. Later the tree is compiled using partial evaluation.&lt;/li>&lt;li>It may be deployed on standard HotSpot (no compilation), GraalVM, or the SubstrateVM (SVM) which uses Graal to ahead-of-time compile the language implementation. Debugging the SVM is difficult as Java debugging tools are not available. The solution is to generate DWARF information in the SVM's output.&lt;/li>&lt;li>Truffle and Graal are open source, the SubstrateVM is not (yet?).&lt;/li>&lt;/ul>&lt;h4>GCC and LLVM collaboration&lt;/h4>&lt;ul>&lt;li>Good news: license issues, personal grudges and performance are off-topic.&lt;/li>&lt;li>Users should be protected from whatever disagreements take place. In the future we should have more pro-active discussions on various issues as opposed to reactive discussions regarding e.g. compiler flags that have been noticed to be arbitrarily different after the fact.&lt;/li>&lt;li>Renato lists common projects that we may collaborate on: binutils, glibc, sanitizers. Sanitizers are a collaboration success story.&lt;/li>&lt;li>Can we agree on a (new?) common user interface?&lt;/li>&lt;li>There's a surprising amount of confusion about &lt;code>-march&lt;/code>, &lt;code>-mtune&lt;/code>, and &lt;code>-mcpu&lt;/code> considering we're in a room of compiler developers. It sounds like there's not much support for re-engineering the set of compiler flags as the potential gain is not seen as being great enough.&lt;/li>&lt;li>Can we agree to standardise on attributes, C/C++ extensions, builtins, ASM, the linker API?&lt;/li>&lt;li>GCC docs have just been rewritten, so some criticisms about how difficult it is to dig in are no longer valid.&lt;/li>&lt;/ul>&lt;h4>Machine Guided Energy Efficient Compilation&lt;/h4>&lt;ul>&lt;li>Initial investigations in 2012 found that compiler flags can have a meaningful effect on energy consumption. This raises the question of how to determine which flags to use.&lt;/li>&lt;li>MAGEEC will target both GCC and LLVM initially. It is implemented as a compiler plugin which performs feature extraction and allows the output of the machine learning algorithm to change the sequence of passes which are run. Fractional Factorial Design is used to reduce the optimisation space to explore.&lt;/li>&lt;li>Turning passes on/off arbitrarily can often result in internal compiler errors. Should the machine learning algorithm learn this, or should GCC better document pass requirements?&lt;/li>&lt;li>It would be useful to MAGEEC if the (currently internal) plugin API could be stabilized. They also currently have to use a hacked up Clang as it doesn't provide plugin hooks.&lt;/li>&lt;li>The project has produced a low cost energy measurement board as well as their own benchmark suite (Bristol/Embecosm Embedded Benchmark Suite, or BEEBS). BEEBS 2.0 is schedule for release by 31st August 2014 with a much wider range of benchmarks (currently 93). Jeremy showed a rather pleasing live demo where you can run a benchmark on a microcontroller development board and immediately find the number of mJ consumed in running it.&lt;/li>&lt;li>The current state of the project has it not achieving better results than GCC O2, but this is expected to change over the coming months.&lt;/li>&lt;/ul>&lt;h4>Just-in-time compilation using GCC&lt;/h4>&lt;ul>&lt;li>&lt;a href="https://gcc.gnu.org/wiki/JIT">libgccjit.so&lt;/a> is an experimental branch of GCC which allows you to build GCC as a shared library and embed it in other programs in order to allow in-process code generation at runtime.&lt;/li>&lt;li>A dedicated API for JIT will allow better stability guarantees. It provides a high-level API designed for ease of use.&lt;/li>&lt;li>The API doesn't offer solutions for type inference, escape analysis, unboxing, inline caching, etc.&lt;/li>&lt;li>It has a C++ API wich includes some cunning operator overloading to massively reduce verbosity, and a Python API.&lt;/li>&lt;li>David Malcolm has written &lt;a href="https://github.com/davidmalcolm/coconut">Coconut&lt;/a>, a JIT compiler for Python using libgccjit.so. It is incomplete and experimental.&lt;/li>&lt;li>Drawback: currently have to write out a .s to a file and invoke gcc on it.&lt;br />Some might make a cheeky comment about the benefits of architecting a compiler so it can be used as a library, but I of course wouldn't dare. The good news is the speaker is actively looking at what would be needed to use GAS and GNU ld as a library.&lt;/li>&lt;/ul>&lt;h4>Introduction to new Intel SIMD ISA and its impact on GCC&lt;/h4>&lt;ul>&lt;li>AVX-512 offers 64 simple precision or 32 double precision floating point operations per cycle. It also has 8x64-bit mask registers.&lt;/li>&lt;li>Rounding modes can be set on a per-instruction process&lt;/li>&lt;li>Basic support is available from GCC 4.9.x.&lt;/li>&lt;/ul>&lt;h4>News from Sanitizers&lt;/h4>&lt;ul>&lt;li>MemorySanitizer detects use of uninitialized memory. Increases CPU by about 2.5x and RAM by 2x. Was released in LLVM in 2013. It is currently Linux/x86-64 only.&lt;/li>&lt;li>History growth is limited by limiting the history depth and the number of new history nodes per stack trace.&lt;/li>&lt;li>MSan has found hundreds of bugs across Google internal code, Chromium, LLVM, etc. It was more challenging for Chromium due to the number of system libs that had to be rebuilt.&lt;/li>&lt;li>AddressSanitizer annotations allows you to detect access to the regions of e.g. &lt;code>std::vector&amp;lt;&amp;gt;&lt;/code> which has been allocated as part of its capacity but not yet been used (i.e. will start to be used in the next &lt;code>push_back&lt;/code>). Next is to do the same for &lt;code>std::string&lt;/code> and &lt;code>std::deque&lt;/code>.&lt;/li>&lt;li>Glibc uses GNU-C instead of ANSI C which currently prevents compilation with Clang (nested functions in particular are problematic). It can however be built with ASan by GCC.&lt;/li>&lt;li>Evgeniy comments that the lack of standardisation between Clang and GCC for things like &lt;code>__has_feature(address_sanitizer)&lt;/code> vs &lt;code>__SANITIZE_ADDRESS__&lt;/code> is irritating. This is just the sort of thing Renato was talking about yesterday of course.&lt;/li>&lt;/ul>&lt;h4>glibc performance tuning&lt;/h4>&lt;ul>&lt;li>Use memset as an example. Look at 3 variants.&lt;/li>&lt;li>Writing a useful benchmark is more difficult than you might think. Simply running &lt;code>memset&lt;/code> many times in a loop is not a good benchmark when using the same memory locations due to the processor's load-store forwarding. Even when fixing this, the branch predictor may perform much better than it would when memset is used in a real world scenario and lead to unrepresentative results.&lt;/li>&lt;li>To move beyond microbenchmarks, Ondrej has been using &lt;code>LD_PRELOAD&lt;/code> to link against instrumented versions of the functions which record details about the time taken.&lt;/li>&lt;li>See &lt;a href="http://kam.mff.cuni.cz/~ondra/benchmark_string/i7_nehalem/memset_profile/results_gcc/result.html">here&lt;/a>for memset benchmarks and &lt;a href="http://kam.mff.cuni.cz/~ondra/benchmark_string/i7_nehalem/memset_profile/results_gcc/doc/properties.html">here&lt;/a> for more background.&lt;/li>&lt;li>strcmp was the most frequently called glibc function in Ondrej's testing (when running Firefox).&lt;/li>&lt;/ul>&lt;h4>Devirtualization in GCC&lt;/h4>&lt;ul>&lt;li>This is a special case of indirect call removal, and although the talk is given in the context of C++ the techniques apply to other languages too. Some basic cases are handled in the front-end and even specified by the language standard.&lt;/li>&lt;li>It is a special case of constant propagation across aggregates, which is already done by Global Value Numbering and Interprocedural Constant Propagation. But these passes only catch a tiny number of possible cases.&lt;/li>&lt;li>Loss of information between the frontend and middle end can make some cases almost impossible. The intermediate language can be extended with explicit representations of base types, locations of virtual table pointers, and vtables. Also annotate polymorphic calls specifying instance and polymorphic call type and flags to denote constructors/destructors.&lt;/li>&lt;li>I'm not able to summarise details on the GCC devirt implementation better than the slides do. Hopefully they'll be made available online.&lt;/li>&lt;li>A particular challenge is to match types between different compilation units. The C++ One Definition Rule is used.&lt;/li>&lt;li>It can be used to strengthen unreachable function removal.&lt;/li>&lt;li>Feedback-directed devirtualization was extended in GCC 4.9 to work inter-module with LTO.&lt;/li>&lt;/ul></description></item><item><title>FTL: WebKit’s LLVM based JIT</title><link>https://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html</link><pubDate>Wed, 16 Jul 2014 23:00:00 +0000</pubDate><guid>https://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html</guid><description>Over the past year, the WebKit project made tremendous progress on the ability to optimize JavaScript applications. A major part of that effort was the introduction of the Fourth Tier LLVM (FTL) JIT. The Fourth Tier JIT targets long-running JavaScript content and performs a level of optimization beyond WebKit's interpreter, baseline JIT, and high-level optimizing JIT. See the FTL Optimization Strategy section below for more on WebKit's tiered optimizations. The engineering advancements within WebKit that made the FTL possible were described by Filip Pizlo in the Surfin' Safari Blog post, &lt;a href="http://www.webkit.org/blog/3362/introducing-the-webkit-ftl-jit/">Introducing the WebKit FTL JIT&lt;/a>. On April 29, 2014, the WebKit team enabled FTL by default on trunk: &lt;a href="http://trac.webkit.org/changeset/167958">r167958&lt;/a>. &lt;p/>This achievement also represents a significant milestone for the LLVM community. FTL makes it clear that LLVM can be used to accelerate a dynamically type checked languages in a competitive production environment. This in itself is a tremendous success story and shows the advantage of the highly modular and flexible design of LLVM. It is the first time that the LLVM infrastructure has supported self-modifying code, and the first time profile guided information has been used inside the LLVM JIT. Even though this project pioneered new territory for LLVM, it was in no way an academic exercise. To be successful, FTL must perform at least as well as non-FTL JavaScript engines in use today across a range of workloads without compromising reliability. This post describes the technical aspects of that accomplishment that relate to LLVM and future opportunities for LLVM to improve JIT compilation and the LLVM infrastructure overall. &lt;p/> Read on for more information.&lt;br />&lt;a name='more'>&lt;/a> &lt;ul>&lt;li>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html#ftl-performance">FTL Performance&lt;/a> &lt;/li>&lt;li>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html#ftl-optimization-strategy">FTL Optimization Strategy&lt;/a> &lt;/li>&lt;li>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html#llvm-patch-points">LLVM Patch Points&lt;/a> &lt;/li>&lt;li>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html#ftl-style-llvm-ir">FTL-Style LLVM IR&lt;/a> &lt;/li>&lt;li>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html#mcjit-and-the-llvm-c-api">MCJIT and the LLVM C API&lt;/a> &lt;/li>&lt;li>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html#linking-webkit-with-llvm">Linking WebKit with LLVM&lt;/a> &lt;/li>&lt;li>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html#ftl-efficiency">FTL Efficiency&lt;/a> &lt;/li>&lt;li>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html#optimization-improvements">Optimization Improvements&lt;/a> &lt;/li>&lt;li>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html#extending-patch-points">Extending Patch Points&lt;/a> &lt;/li>&lt;li>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html#conclusion">Conclusion&lt;/a>&lt;/li>&lt;/ul>&lt;h2>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html" name="ftl-performance">FTL Performance&lt;/a>&lt;/h2>JavaScript pages are ubiquitous and users expect fast load times, which WebKit's architecture is well suited for. However, some JavaScript applications require nontrivial computation and may run for periods longer than one hundred milliseconds. These applications demand aggressive compiler optimization and code generation tuned for the target CPU. FTL brings the full gamut of compiler technology to bear on the problem. &lt;p/>As with any high level language, high level optimizations must come first. Grafting an optimizing compiler backend onto an immature frontend would be futile. The marriage of WebKit's JIT with LLVM's optimizer and code generation works for two key reasons: &lt;p/>&lt;ol>&lt;li>Before translating to LLVM IR, WebKit's optimizing JIT operates on an IR that clearly expresses JavaScript semantics. Through type inference and profile-driven speculation, WebKit removes as much of the JavaScript abstraction penalty as possible. &lt;/li>&lt;li>LLVM IR has now adopted features for supporting speculative, profile-driven optimization and avoiding the performance penalty associated with abstractions when they cannot be removed. &lt;/li>&lt;/ol>As a result, WebKit can engage the FTL on any long-running JavaScript method. In areas of the code dominated by abstraction overhead, FTL-compiled code is at least competitive with that of a custom JIT designed specifically for JavaScript. In areas of the code where WebKit can remove the abstraction penalty, FTL can achieve fantastic speedups. &lt;p/>Asm.js is a subset if JavaScript that avoids abstraction penalties, allowing JITs to directly benefit from low-level performance optimization. Consequently, the performance advantage of FTL is likely to be quite apparent on asm.js benchmarks. But although FTL performs well on asm.js, it is in no way customized to the standard. In fact, with FTL, regular JavaScript code written in a style similar to asm.js will derive the same benefits. Furthermore, as WebKit's high-level optimizations become even more advanced, the benefits of FTL will expand to a broader set of idiomatic JavaScript code. &lt;p/>A convenient way to measure the impact of LLVM optimizations on JavaScript code is by running C/C++ benchmarks that have been compiled to asm.js code via emscripten. This allows us to compare native C/C++ performance with WebKit's third tier (DFG) compiler and with WebKit FTL. &lt;p/>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="http://4.bp.blogspot.com/--gmTvH6H5ho/U8XprFD79_I/AAAAAAAAG1I/spxgXk6WL4M/s1600/asm_js_ftl_results.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" src="http://4.bp.blogspot.com/--gmTvH6H5ho/U8XprFD79_I/AAAAAAAAG1I/spxgXk6WL4M/s1600/asm_js_ftl_results.png" />&lt;/a>&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;b>Figure 1&lt;/b>: Time to run benchmarks from LLVM test-suite.&lt;/div>Figure 1 shows the time taken to run a handful of benchmarks from LLVM's own test-suite. The benchmark workloads have been adjusted to run for approximately one second. In every case, FTL achieves significant improvement over WebKit's non-LLVM JIT (DFG). In some cases, the emscripten compiled JavaScript code is already approaching native C performance, but in other cases FTL code still takes about twice as long as clang compiled C code&lt;b>[1]&lt;/b>. One reason for the discrepancy between clang and FTL is the call overhead required for maintaining the JavaScript runtime's additional frame information. Another reason is that LLVM loop optimizations are not yet sophisticated enough to remove bounds and overflow checks and thus have not been enabled. These benchmarks are very tight loops, so a minor inefficiency, such as an extra compare or store in the loop, can result in a significant slowdown. &lt;p/>&lt;b>[1]&lt;/b> gcc-loops is currently an outlier because clang performance recently sped up dramatically from auto-vectorization that has not been enabled yet in FTL. &lt;p/>&lt;h2>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html" name="ftl-optimization-strategy">FTL Optimization Strategy&lt;/a>&lt;/h2>WebKit's tiered architecture provides flexibility in balancing responsiveness, profile collection, and compiler optimization. The first tier is the low-level interpreter (LLInt). The second is the baseline JIT--a straightforward translation from JavaScript to machine code. WebKit's third tier is known as the Data Flow Graph (DFG) JIT. The DFG has its own high-level IR allowing it to perform aggressive JavaScript-specific optimization based on the profile data collected in earlier tiers. When running as a third tier, the DFG quickly emits code with additional profiling hooks. It may be invoked again as a fourth tier, but this time it produces LLVM IR for traditional compiler optimization. &lt;p/>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="http://4.bp.blogspot.com/-anUsfTvvZCs/U8XtyOp5l-I/AAAAAAAAG1Y/qjoH0nTncE0/s1600/ftl_pipeline.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" src="http://4.bp.blogspot.com/-anUsfTvvZCs/U8XtyOp5l-I/AAAAAAAAG1Y/qjoH0nTncE0/s1600/ftl_pipeline.png" />&lt;/a>&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;b>Figure 2.&lt;/b> The DFG and FTL JIT optimization pipelines (from &lt;a href="http://www.webkit.org/blog/3362/introducing-the-webkit-ftl-jit/">Introducing the WebKit FTL JIT&lt;/a>). &lt;/div>We reuse most of the DFG phases. The new FTL pipeline is a drop-in replacement for the third-tier DFG backend. It involves additional JavaScript-aware optimizations over DFG SSA form, followed by a phase that lowers DFG IR to LLVM IR. We then invoke LLVM's optimization pipeline and LLVM's MCJIT backend to generate machine code. &lt;p/>The DFG JIT front end generates LLVM IR in a form that is amenable to the same optimizations traditionally performed with C code. The most notable differences are summarized in &lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html#ftl-style-llvm-ir">FTL-Style LLVM IR&lt;/a>. &lt;p/>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="http://4.bp.blogspot.com/-Hg0qG-SDMUM/U8XtyKA16tI/AAAAAAAAG1U/jEyHRJGVfqw/s1600/ftl-llvm-pipeline.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" src="http://4.bp.blogspot.com/-Hg0qG-SDMUM/U8XtyKA16tI/AAAAAAAAG1U/jEyHRJGVfqw/s1600/ftl-llvm-pipeline.png" />&lt;/a>&lt;/div>&lt;div class="separator" style="clear: both; text-align: center;">&lt;b>Figure 3.&lt;/b> The FTL optimization pipeline after lowering to LLVM IR.&lt;/div>After lowering to LLVM IR, FTL applies a subset of mid-level optimizations that are currently the most important in JavaScript code. It then invokes the LLVM backend for the host architecture with full optimization. This optimizes the code for the target CPU using aggressive instruction selection, register allocation, and machine-specific optimization. &lt;p/>&lt;h2>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html" name="llvm-patch-points">LLVM Patch Points&lt;/a>&lt;/h2>Patch points are the key LLVM feature that allows dynamic type checking, inline caching, and runtime safety checks without penalizing performance. In October, 2013, we submitted a &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2013-October/066573.html">proposal to amend LLVM IR with patch points&lt;/a> to the LLVM developer list. Since then, we've successfully implemented patch points for multiple architectures and their performance impact has been validated for various use cases, including branch-to-fail safety checks, inline caches, and code invalidation points. The details of the current design are explained in the &lt;a href="http://llvm.org/docs/StackMaps.html">LLVM specification of stack map and patch point intrinsics&lt;/a>. &lt;p/>Patch points are actually two features in one intrinsic. The first feature is the ability to identify the location of specific values at the intrinsic's final instruction address. During code emission, LLVM records that information as meta-data alongside the object code in what we call a "stack map". A stack map communicates to the runtime the location of important values. This is a slight misnomer given that locations may refer to register names. Typically, the runtime will read values out of stack map locations when it needs to reconstruct a stack frame. This commonly occurs during "deoptimization"--the process of replacing an FTL stack frame with a lower-tier frame. &lt;p/>The second feature of patch points is the ability of the runtime to patch the compiled code at specific instruction address. To allow this, the intrinsic reserves a fixed amount of instruction encoding space and records the instruction address of that space along with the stack map. Because the runtime needs to know the location of values precisely at the point it patches code, the two features must be combined into one intrinsic. &lt;p/>Patch points are viewed by LLVM passes much like unknown call sites. An important aspect of their design is the ability to specify the effective calling convention. For example, code invalidation points are almost never taken and the call site should not clobber any registers, otherwise the register allocator could be severely restricted by frequent runtime checks. An optional feature of stack maps is the ability to record the registers that are actually live in compiled code at each call site. This way the JIT can declare a call as preserving all registers to maximize compiler freedom, but at the same time the runtime can avoid unnecessary save and restore operations when the "cold" call is actually taken. &lt;p/>To better support inline cache optimizations, LLVM now has a special "anyregcc" calling convention. This convention allows any number of arguments to be forced into registers without pinning down the name of the register. Consequently, the compiler does not have to place arguments in particular registers or stack locations, or emit extra copies and spills around call sites, and the runtime can emit efficient patched code sequences that operate directly on registers. &lt;p/>The current patch point design is labeled experimental so that it may continue to evolve without preserving bitcode compatibility. LLVM should soon be ready to adopt the patch point intrinsic in its final form. However, the current design should first be extended to capture the semantics of high level language runtime checks. See Extending Patchpoints. &lt;p/>&lt;h2>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html" name="ftl-style-llvm-ir">FTL-Style LLVM IR&lt;/a>&lt;/h2>FTL attempts to generate LLVM IR that closely resembles what the optimizer expects to see from other typical compiler frontends. Nonetheless, lowering JavaScript semantics into LLVM operations tends to result in IR with different characteristics from statically compiled C code. This section summarizes those differences. More details and examples will be provided in a subsequent blog post. &lt;p/>The prevalence of patch points in the IR means that values tend to have many more uses and can be live into a large number of patch point call sites. FTL emits patch points for a few distinct situations. First, when the FTL front end (DFG) fails to eliminate type checks or bounds checks, it emits explicit compare and branch operations in the IR. The branch target lands at a patch point intrinsic followed by unreachable. This can result in much more branchy code than LLVM typically handles with C benchmarks. Fortunately, LLVM's awareness of branch probability means that the branch-to-fail idiom does not excessively hinder optimization and code generation. Heap access and polymorphic calls also use patch points, but these are emitted directly inline with the hot path. This allows the runtime to implement inline caches with specific instruction sequences that can be patched as program behavior evolves. Finally, runtime calls may act as code invalidation points. A runtime event, such as a potential change in object layout, may invalidate speculatively optimized code. In this case WebKit emits nop patch points that can be overwritten with a separate runtime call at an invalidation event. This effectively invalidates all code that follows the original runtime call. &lt;p/>Some type checks result in multiple fast paths. For example, WebKit may check a numeric value for either a floating-point or fixed point representation and emit LLVM IR for both paths. This may result in a sequence of redundant checks interleaved with control flow merges. &lt;p/>To support integer overflow checks, when they cannot be removed through optimization, FTL emits llvm.sadd.with.overflow intrinsics in place of normal add instructions. These intrinsics ensure that the code generator produces an optimal code sequence for the overflow checks. They are also used by other active LLVM projects and are gradually gaining support within LLVM optimization passes. &lt;p/>LLVM heuristics are often sufficient to guess branch probability. However FTL makes the job easier by directly emitting LLVM branch weight meta-data based on profiling. This is particularly important when partially compiling a method starting at the inner loop. Such compilations can squash nested loops so that LLVM's heuristics can no longer infer the loop depth from the CFG structure. &lt;p/>FTL builds an internal model of the JavaScript program's type system determined by profiling. It conveys this information to LLVM via type-based-alias-analysis (tbaa) meta-data. In FTL tbaa, each object field has a unique tag. This is a very effective approach to memory disambiguation, and much simpler than the access-path scheme that clang now uses. &lt;p/>Another way that FTL deviates from the norm, is in its use of inttoptr instructions. These are used to materialize addresses of runtime objects, including all data and code from outside the current compilation unit (currently a single method at a time). inttoptr is also used to convert an untyped JS value to a pointer. Occasionally, pointer arithmetic is performed on non-pointer types rather than using getelementptr instructions. This is primarily a convenience and has not proven to hinder optimization. FTL's use of tbaa is effective enough to obviate the need to analyze getelementptr when the base address is already an unknown object. &lt;p/>An important pattern that occurs in FTL's LLVM IR is the repeated use of the same large constants that are used as masks to disambiguate tagged values, or several constants that represent global addresses that tend to be at small offsets from each other. LLVM's current one basic block a time code generation approach resulted in redundant rematerialization of the same large constant in each basic block. The fact that FTL creates a large number of basic blocks even further exacerbated this problem. The LLVM code generator has been enhanced to avoid these expensive repeated rematerialization of such constant values. &lt;p/>&lt;h2>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html" name="mcjit-and-the-llvm-c-api">MCJIT and the LLVM C API&lt;/a>&lt;/h2>The FTL JIT successfully leverages LLVM's existing &lt;a href="http://llvm.org/docs/MCJITDesignAndImplementation.html">MCJIT framework&lt;/a> for runtime compilation. MCJIT was designed as a low-level toolkit that allows runtime compilers to be built by reusing as much of the static compiler's machinery as possible. This approach improves maintainability on the LLVM side. It integrates with the existing compiler toolchain and allows developers to test features of the runtime compiler without understanding a particular JIT client. The current API, however, does not provide a simple out-of-the-box abstraction for portable JITs. Overcoming the impedance mismatch between WebKit goals and the low-level MCJIT API required close collaboration between WebKit and LLVM engineers. As LLVM becomes more important as a JIT platform, it should provide a more complete C API to improve interoperability with JIT clients and decrease the fragility and maintenance burden within the client code base. &lt;p/>Bridging the gap between LLVM internals and portable JITs can be accomplished by providing more convenience wrappers around the existing MCJIT framework and adding richer C APIs for object code parsing and introspection. Ideally, a cross-platform JIT client like WebKit should not need to embed target-specific details about LLVM code generation on the client side. The JIT should be able to request LLVM to emit code for the current host process without understanding LLVM's language of target triples and CPU features. LLVM could generally provide a more obvious C API for lazily invoking runtime compilation. Along these lines, a JIT should be able to reuse the MCJIT execution engine for multiple modules without the overhead of reinitializing pass manager instances each time. An API also needs to be added for configuring the code generation pass manager. Most of the coordination between the JIT and LLVM now occurs directly through a memory manager API, which can be awkward for the JIT client. For example, WebKit looks for platform-specific section names when allocating section memory in order to locate frame meta-data and debug information. A better interface for WebKit would be a portable API that communicates object code meta-data, including frame information and stack maps. In general, the JIT codebase should not need to provide its own support for platform-specific object file formats. LLVM already has this support, it only needs to be exposed through the C API. Similarly, a JIT should be able to lookup line numbers without implementing its own DWARF parser. An additional layer of functionality for general purpose debug info parsing and object code introspection would not be specific to JIT compilation and could benefit a variety of LLVM clients. &lt;p/>&lt;h2>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html" name="linking-webkit-with-llvm">Linking WebKit with LLVM&lt;/a>&lt;/h2>FTL illustrates an important use case for LLVM: embedding LLVM optimization and codegen libraries cleanly within a larger application running in the same process. The ideal solution is to build a set of LLVM components as a shared library that exports only a limited C API. Several problems have made this a challenging endeavor: &lt;ul>&lt;li>The dynamic link time initialization overhead of the static initializers that LLVM defines is unacceptable at program launch time - especially if only parts of the library or nothing at all are used. &lt;/li>&lt;li>LLVM initializes global variables that require running exit-time destructors. This causes a multi-threaded parent application that attempts to exit normally to crash instead. &lt;/li>&lt;li>As with static initializers, weak vtables introduce an unnecessary and unacceptable dynamic link time overhead. &lt;/li>&lt;li>In general only a limited set of methods - the LLVM API - should be exported from the shared library. &lt;/li>&lt;li>LLVM usurps process-level API calls like assert, raise, and abort. &lt;/li>&lt;li>The resulting size of the LLVM shared library naively built from static libraries is larger than it needs to be. Build logic and conditional compilation should be added to ensure that only the passes and platform support required by the JIT client are ultimately linked into the shared library. &lt;/li>&lt;/ul>The issues listed above have required clever engineering tricks to circumvent. These are the sort of tricks that hinder adoption of LLVM. Therefore it would be in the best interest of the LLVM community to cooperate on improving the infrastructure for embedding LLVM. &lt;p/>&lt;h2>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html" name="ftl-efficiency">FTL Efficiency&lt;/a>&lt;/h2>The LLVM optimizer and code generator are composed of generic, retargetable components designed to generate optimal code across an extremely diverse range of platforms. The compile time cost of this infrastructure is substantial and may be an order of magnitude greater than that of a custom-built JIT. Fortunately, WebKit's architecture for concurrent, tiered compilation largely sidesteps this penalty. Nonetheless, there is considerable opportunity to reengineer LLVM for use as a JIT, which will decrease FTL's CPU consumption and increase the breadth of JavaScript applications that benefit from FTL. &lt;p/>When running in a JIT environment, an opportunity exists for LLVM to strike a better balance between compile time and optimization strength. To this end, an alternate "compile-fast" optimization pass pipeline should be standardized so that the LLVM community can work together to maintain an ideal sequence of lighter-weight passes. Long running, iterative IR optimization passes, such as GVN, should be adapted to optionally run in fewer iterations. Hodge-podge passes like InstCombine that run many times should be optionally broken up so that some subset of functionality can run at different times: for example, canonicalize first and optimize later. &lt;p/>There are also considerable opportunities for improving code generation efficiency which will benefit JITs and static compilers alike. LLVM machine IR should be generated directly from LLVM IR without generating a Selection DAG, as proposed by Jakob Olesen in his &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2013-August/064727.html">Proposal for a global instruction selector&lt;/a>. The benefit of this improvement would be considerable and widespread. More specific to high level languages, codegen passes should be tuned to handle branchy code more efficiently. For example, the register allocator can be taught to skip expensive analysis at points in the code where branches are not expected to be executed. &lt;p/>One overhead that will remain with the above improvements is simply the cost of bridging WebKit's DFG IR into LLVM IR. This involves lowering to SSA form and constructing LLVM instructions, which currently takes significant amount of time relative to DFG's non-LLVM codegen path. With some scrutiny, this could likely be made more efficient. &lt;p/>&lt;h2>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html" name="optimization-improvements">Optimization Improvements&lt;/a>&lt;/h2>Without incurring significant compile time increase, LLVM optimizations can be further improved to handle prevalent idioms in JavaScript programs. One straightforward LLVM IR enhancement would be to associate type-based alias information with call sites. This would improve redundant instruction elimination across runtime calls and patch points. Another area of improvement would be better handling of branch-and-merge idioms. These are quite common in FTL produced IR and can improved through CFG simplification, jump threading, or tail duplication. With careful pass pipeline management, loop optimizations can be enabled, such as auto-vectorization. Once LLVM is analyzing loops, bounds and overflow check elimination optimization can also be implemented. To do this well, patch points will need to be extended with new semantics. &lt;p/>&lt;h2>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html" name="extending-patch-points">Extending Patch Points&lt;/a>&lt;/h2>In settings like JavaScript and other high level languages, patch points will be used to transfer control to the runtime when speculative optimization fails in the sense that the program behaves differently than predicted. It is always safe to assume a misprediction and give control back to the runtime because the runtime always knows how to recover. Consequently, patch points could optionally be associated with a check condition and given the following semantics: the patch point code sequence must be executed whenever the condition holds, but may safely be executed at its current location under any superset of the condition. When combined with LLVM loop optimization, the conditional patch point semantics would allow powerful optimization of runtime checks. In particular, bounds and overflow checks could be safely hoisted outside loops. For example, the following simplified IR: &lt;p/>&lt;pre>&lt;code>&lt;br />%a = cmp &amp;lt;TrapConditionA&amp;gt;&lt;br />call @patchpoint(1, %a, &amp;lt;state-before-loop&amp;gt;)&lt;br />Loop:&lt;br /> %b = cmp &amp;lt;TrapConditionB&amp;gt;&lt;br /> @patchpoint(2, %b, &amp;lt;state-inside-loop&amp;gt;)&lt;br /> &amp;lt;do something...&amp;gt;&lt;br />&lt;br />Could be safely optimized into:&lt;br />&lt;br />%c = cmp &amp;lt;TrapConditionC&amp;gt; // where C implies both A and B&lt;br />@patchpoint(1, %c, &amp;lt;state-before-loop&amp;gt;)&lt;br />Loop:&lt;br /> do something...&lt;br />&lt;/code>&lt;/pre>Note that the first patch point operand is an identifier that tells the runtime the program location of the intrinsic, allowing it find the correct stack map record for the program state at that location. After the above optimization, not only does LLVM avoid performing repeated checks within the loop, but it also avoids maintaining additional runtime state throughout the loop body. &lt;p/>Generally, high level optimization requiring knowledge of language-specific semantics is best performed on a higher level IR. But in this case, extending LLVM with one aspect of high level semantics allows LLVM's loop and expression analysis to be directly leveraged and naturally extended into a new class of optimization. &lt;p/>&lt;h2>&lt;a href="http://blog.llvm.org/2014/07/ftl-webkits-llvm-based-jit.html" name="conclusion">Conclusion&lt;/a>&lt;/h2>WebKit's FTL JIT already shows considerable value in improving JavaScript performance, demonstrating LLVM's remarkable success as a backend for a JavaScript JIT compiler. The FTL project highlights the value of further improving LLVM's JIT infrastructure and reveals several exciting opportunities: improved efficiency of optimization passes and codegen, optimizations targeted toward common idioms present in high level language, enabling more aggressive standard optimizations like vectorization, and extending and formalizing patch point intrinsics. Realizing these goals will require the continued support of the LLVM community and will advance and improve the LLVM project as a whole.</description></item><item><title>LLVM Weekly - #28, Jul 14th 2014</title><link>https://blog.llvm.org/2014/07/llvm-weekly-28-jul-14th-2014.html</link><pubDate>Mon, 14 Jul 2014 06:49:00 +0000</pubDate><guid>https://blog.llvm.org/2014/07/llvm-weekly-28-jul-14th-2014.html</guid><description>&lt;p>Welcome to the twenty-eighth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>.Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>I'll be at the &lt;a href="https://gcc.gnu.org/wiki/cauldron2014">GNU Tools Cauldron 2014&lt;/a> next weekend, being held at the University of Cambridge Computer Laboratory (which handily is also where I work). If you're there, do say hi.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/28">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>An update on Clang/LLVM on Windows has been &lt;a href="http://blog.llvm.org/2014/07/clangllvm-on-windows-update.html">posted on the LLVM blog&lt;/a>. Impressive progress has been made, and as I mentioned last week the &lt;a href="http://clang.llvm.org/docs/MSVCCompatibility.html">MSVC compatibility page&lt;/a> has been updated.&lt;/p>&lt;p>There is (somewhat amazingly) now a &lt;a href="http://john-tornblom.github.io/llvm-p86/">Pascal-86 frontend for LLVM&lt;/a>. The compiler frontend is written entirely in Python. More information is available in the author's &lt;a href="http://urn.kb.se/resolve?urn=urn:nbn:se:liu:diva-105456">Master's thesis&lt;/a> (via &lt;a href="http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=MTczODY">Phoronix&lt;/a>).&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Edward Diener has &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/37699">kicked off a discussion on whether clang-cl should reproduce buggy VC++ preprocessor behaviour&lt;/a>. A concern is that this might hold back people wanting to use preprocessor metaprogramming on the Windows platform. As is pointed out in one of the responses, bug-for-bug compatibility mode could always be disabled via a new flag.&lt;/p>&lt;/li>&lt;li>&lt;p>Corey Richardson has a &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/37761">query about using clang-c for a bindings generator&lt;/a>. No responses yet, but it's certainly of interest to me.&lt;/p>&lt;/li>&lt;li>&lt;p>Kuba Břečka &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/74718">proposes extending LLDB to offer tighter integration with Address Sanitizer-enabled binaries&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Peter Collingbourne has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/74602">proposed offering a native object on-disk module format storing LLVM bitcode in an ELF/COFF/MACH-O section&lt;/a>. Dan Liew &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/74641">points out that unrecognised sections are included in the output by the linker&lt;/a>, meaning if you linked these .o files the bitcode would be included in the produced binary. Peter says the current plan wouldn't have these object files used directly by the linker.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>FastISel gained some infrastructure to support a target-independent call lowering hook as well as target-independent lowering for the patchpoint intrinsic. &lt;a href="http://reviews.llvm.org/rL212848">r212848&lt;/a>, &lt;a href="http://reviews.llvm.org/rL212849">r212849&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>DominanceFrontier has been templatified, so in theory it can now be used for MachineBasicBlocks (where previously it was only usable with BasicBlocks). &lt;a href="http://reviews.llvm.org/rL212885">r212885&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The quality of results for CallSite vs CallSite BasicAA queries has been improved by making use of knowledge about certain intrinsics such as memcpy and memset. &lt;a href="http://reviews.llvm.org/rL212572">r212572&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Work on overhauling x86 vector lowering continues. Chandler now reports that with the new codepath enabled, LLVM is now at performance pairty with GCC for the core C loops of the x264 code when compiling for SSE2/SSE3. &lt;a href="http://reviews.llvm.org/rL212610">r212610&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>ASM instrumentation for AddressSanitizer is now generated entirely in MachineCode, without relying on runtime helper functions. &lt;a href="http://reviews.llvm.org/rL212455">r212455&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Generation of the new mips.abiflags section was added to the MIPS backend. &lt;a href="http://reviews.llvm.org/rL212519">r212519&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>isDereferenceablePointer will now look through some bitcasts. &lt;a href="http://reviews.llvm.org/rL212686">r212686&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A new checker was added, to flag code that tests a variable for 0 after using it as a denominator (implying a potential division by zero). &lt;a href="http://reviews.llvm.org/rL212731">r212731&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang gained initial support for omp parallel for, the omp parallel sections directive, and omp task. &lt;a href="http://reviews.llvm.org/rL212453">r212453&lt;/a>, &lt;a href="http://reviews.llvm.org/rL212516">r212516&lt;/a>, &lt;a href="http://reviews.llvm.org/rL212804">r212804&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>On the ARM target, LLVM's atomicrmw instructions will be used when ldrex/strex are available. &lt;a href="http://reviews.llvm.org/rL212598">r212598&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support was adding for mips-img-linux-gnu toolchains. &lt;a href="http://reviews.llvm.org/rL212719">r212719&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>ThreadSanitizer's deadlock detector is enabled by default after being battle-tested on the Chromium codebase for some time. &lt;a href="http://reviews.llvm.org/rL212533">r212533&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for Android's bionic C library has been added to libcxx. &lt;a href="http://reviews.llvm.org/rL212724">r212724&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB's Python scripting interface should now work on Windows. &lt;a href="http://reviews.llvm.org/rL212785">r212785&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>Clang/LLVM on Windows Update</title><link>https://blog.llvm.org/2014/07/clangllvm-on-windows-update.html</link><pubDate>Mon, 07 Jul 2014 20:34:00 +0000</pubDate><guid>https://blog.llvm.org/2014/07/clangllvm-on-windows-update.html</guid><description>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">It’s time for an update on Clang’s support for building native Windows programs, compatible with Visual C++! &amp;nbsp;We’ve been working hard over the last few months and have improved the toolchain in a variety of ways. &amp;nbsp;All C++ features aside from debug info and exceptions should work well. &amp;nbsp;This &lt;/span>&lt;a href="http://clang.llvm.org/docs/MSVCCompatibility.html" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">link&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> provide more specific details. &amp;nbsp;In February we reached an exciting milestone that we can self-host Clang and LLVM using clang-cl (without fallback), and both projects &amp;nbsp;pass all of their tests! &amp;nbsp;Additionally both Chrome and Firefox now compile successfully with fallback! &amp;nbsp;Here are some of the highlights of recent improvements:&lt;/span>&lt;/div>&lt;b id="docs-internal-guid-2b2f973e-119b-7120-2d4c-138311c64483" style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Microsoft compatible record layout is done! &amp;nbsp;It’s been thoroughly fuzz tested and supports all Microsoft specific components such as virtual base table pointers, &lt;/span>&lt;a href="http://msdn.microsoft.com/en-us/library/453x4xdd.aspx" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">vtordisps&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">, __declspec(align) and #pragma pack. &amp;nbsp;This turned out to be a major effort due to subtle interactions between various features. &amp;nbsp;For example, __declspec(align) and #pragma pack behave in an analogous manner to the gcc variants, but interact with each other in a different manner. Each version of Visual Studio changes the ABI slightly. &amp;nbsp;As of today clang-cl is layout compatible with VS2013.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Clang now supports all of the calling conventions used up to VS2012. &amp;nbsp;VS2013 added some new ones that we haven’t implemented yet. &amp;nbsp;One of the other major compatibility challenges we overcame was passing C++ objects by value on 32-bit x86. &amp;nbsp;Prior to this effort, LLVM modeled all outgoing arguments as SSA values, making it impossible to take the address of an argument to a call. &amp;nbsp;It turns out that on Windows C++ objects passed by value are constructed directly into the argument memory used for the function call. &amp;nbsp;Achieving 100% compatibility in this area required making fundamental changes to LLVM IR to allow us to compute this address.&lt;/span>&lt;/div>&lt;b style="font-weight: normal;">&lt;br />&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Most recently support for run time type information (RTTI) was completed. &amp;nbsp;With RTTI support, a larger set of programs and libraries (for example &lt;/span>&lt;a href="http://site.icu-project.org/" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">ICU&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">) compile without fallback and dynamic_cast and typeid both work. &amp;nbsp;RTTI support also brings along support for std::function. &amp;nbsp;We also recently added support for lambdas so you can enjoy all of the C++11 functional goodness!&lt;/span>&lt;/div>&lt;br />&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">We invite you to &lt;/span>&lt;a href="http://llvm.org/builds/" style="text-decoration: none;">&lt;span style="background-color: transparent; color: #1155cc; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">try it out for yourself&lt;/span>&lt;/a>&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"> and, as always, we encourage everyone to file bugs!&lt;/span>&lt;/div></description></item><item><title>LLVM Weekly - #27, Jul 7th 2014</title><link>https://blog.llvm.org/2014/07/llvm-weekly-27-jul-7th-2014.html</link><pubDate>Mon, 07 Jul 2014 07:35:00 +0000</pubDate><guid>https://blog.llvm.org/2014/07/llvm-weekly-27-jul-7th-2014.html</guid><description>&lt;p>Welcome to the twenty-seventh issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects.LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>.Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/27">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>An LLVM code generator has been &lt;a href="https://github.com/MLton/mlton/commit/bf36a151a4b0cc366ba32b5ebea5d8ce25239a0b">merged&lt;/a> into the MLton whole-program optimizing compiler for Standard ML. This was written by Brian Leibig as part of his &lt;a href="http://www.cs.rit.edu/~mtf/student-resources/20124_leibig_msproject.pdf">Master's thesis&lt;/a>, which contains more information on its performance and design.&lt;/p>&lt;p>Eli Bendersky has &lt;a href="http://lists.cs.uiuc.edu/pipermail/cfe-dev/2014-July/037782.html">written a tool&lt;/a> which converts the output of Clang's &lt;code>-ast-dump&lt;/code> to HTML. See &lt;a href="https://dl.dropboxusercontent.com/u/15602400/template-insts-dump.html">here&lt;/a> for an example. The code is &lt;a href="https://github.com/eliben/llvm-clang-samples/blob/master/tools/htmlize-ast-dump.py">available on Github&lt;/a>.&lt;/p>&lt;p>Clang's Microsoft Visual C++ &lt;a href="http://clang.llvm.org/docs/MSVCCompatibility.html">compatibility page&lt;/a> has been updated to reflect the status of the current SVN trunk. As can be seen from the &lt;a href="http://reviews.llvm.org/rL212193">relevant diff&lt;/a>, record layout has been marked complete along with RTTI. Lambdas are now marked mostly complete.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Edwin Amsler is &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-July/074472.html">interested in producing an LLVM backend for the 6502 processor&lt;/a>. He later starts a thread asking for &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-July/074523.html">advice on targeting a CPU with no general purpos registers&lt;/a>. David Given &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-July/074530.html">suggests&lt;/a> it might be worth viewing the 6502 as a machine with 256 byte-sized registers.&lt;/p>&lt;/li>&lt;li>&lt;p>Pavel Chupin has written to the list on behalf of Intel to get feedback on &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-July/074451.html">upstreaming support for the x32 ABI&lt;/a>. As you might expect, people are in favour of the idea. The NativeClient team are &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-July/074457.html">also interested&lt;/a>, particularly as NaCl's x86-64 ABI is fairly similar to x32.&lt;/p>&lt;/li>&lt;li>&lt;p>Sunil Srivastava has shared a &lt;a href="http://lists.cs.uiuc.edu/pipermail/cfe-dev/2014-July/037812.html">proposal for an ABI test suite for Clang&lt;/a>. There is wide support for Sony submitting the implementation for code review. A later response clarifies that of the 400 test files, about 20% are hand-written and the rest come from the test case generator.&lt;/p>&lt;/li>&lt;li>&lt;p>In a thread about using the Clang API to extract information about the memory layout of structs, Reid Kleckner &lt;a href="http://lists.cs.uiuc.edu/pipermail/cfe-dev/2014-July/037778.html">points to the handy -fdump-record-layouts flag&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>There's a massive thread on &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-July/074408.html">the usability of Phabricator review threads for non-Phabricator users&lt;/a>. There seem to be some issues with email reviews showing up on Phabricator and possibly vice-versa. There's more than I have time to summarize, so those interested are advised to read the thread.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The X86 backend now expands atomics in IR instead of as MachineInstrs. Doing the expansions at the IR level results in shorter code and potentially there may be benefit from other IR passes being able to run on the expanded atomics. &lt;a href="http://reviews.llvm.org/rL212119">r212119&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The ARM backend learned the ISB memory barrier intrinsic. &lt;a href="http://reviews.llvm.org/rL212276">r212276&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The X86 backend gained support for &lt;code>__builtin_ia32_rdpmc&lt;/code> which is used to read performance monitoring counters. &lt;a href="http://reviews.llvm.org/rL212049">r212049&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The peephole optimizer gained new code (currently disabled) to rewrite copies to avoid copies across register banks. &lt;a href="http://reviews.llvm.org/rL212100">r212100&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Control flow graph building code has been moved from MC to a new MCAnalysis library. &lt;a href="http://reviews.llvm.org/rL212209">r212209&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>TableGen gained support for MSBuiltin, which allows for adding intrinsics for Microsoft compatibility. &lt;a href="http://reviews.llvm.org/rL212350">r212350&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>MSVC RTTI (run-time type information) implementation has been completed. &lt;a href="http://reviews.llvm.org/rL212125">r212125&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>__builin_arm_ldaex&lt;/code> and &lt;code>__builtin_arm_stlex&lt;/code> intrinsics were added. &lt;a href="http://reviews.llvm.org/rL212175">r212175&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Nested blocks are now supported in Microsoft inline assembly. &lt;a href="http://reviews.llvm.org/rL212389">r212389&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>lldb-gdbserver support has been merged for Linux x86-64. &lt;a href="http://reviews.llvm.org/rL212069">r212069&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>AddressSanitizer gained support for i686-linux-android. &lt;a href="http://reviews.llvm.org/rL212273">r212273&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libcxxabi gained a CMake build system. &lt;a href="http://reviews.llvm.org/rL212286">r212286&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lld now supports parsing of x86 and ARM/Thumb relocations for MachO. &lt;a href="http://reviews.llvm.org/rL212239">r212239&lt;/a>, &lt;a href="http://reviews.llvm.org/rL212306">r212306&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #26, Jun 30th 2014</title><link>https://blog.llvm.org/2014/06/llvm-weekly-26-jun-30th-2014.html</link><pubDate>Mon, 30 Jun 2014 11:53:00 +0000</pubDate><guid>https://blog.llvm.org/2014/06/llvm-weekly-26-jun-30th-2014.html</guid><description>&lt;p>Welcome to the twenty-sixth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/26">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Vladmir Makarov has done his &lt;a href="https://gcc.gnu.org/ml/gcc/2014-06/msg00254.html">yearly comparison of GCC and LLVM&lt;/a>, posting performance comparisons using SPECInt2000 on ARM and x86-64.&lt;/p>&lt;p>Version 0.13.0 of LDC, the LLVM-based D compiler has &lt;a href="https://github.com/ldc-developers/ldc/releases/tag/v0.13.0">been released&lt;/a>. This brings a whole host of improvements, listed in detail within the release announcement.&lt;/p>&lt;p>Some Mozilla engineers have been looking at using clang-cl (the MSVC-compatible Clang driver) to build Firefox. With the help of the fallback flag (which falls back o compiling with MSVC if Clang fails) they've &lt;a href="http://ehsanakhgari.org/blog/2014-06-26/building-firefox-on-windows-with-clang-cl">managed to get a completed build&lt;/a>. Ehsan tells us that &lt;a href="https://twitter.com/ehsanakhgari/status/482271470010105857">602 of the 7168 files, about 8% require the MSVC fallback&lt;/a> at the moment.&lt;/p>&lt;p>Trail of Bits have posted a &lt;a href="http://blog.trailofbits.com/2014/06/23/a-preview-of-mcsema/">preview of McSema&lt;/a>, a framework for translating x86 binaries to LLVM bitcode. The accompanying talk took place on the 28th June, so hopefully we'll hear more about this soon. The blog post tells us that McSema will be open source and made available soon.&lt;/p>&lt;p>Bruce Mitchener has written up his &lt;a href="http://dylanfoundry.org/2014/06/25/integrating-with-lldb/">experience of integrating with LLDB for Dylan&lt;/a>.&lt;/p>&lt;p>Codeplay (based in Edinburgh) are advertising for a &lt;a href="http://www.codeplay.com/company/jobs/view.html?uid=12#.U7B4jzksa00">full time compiler engineer&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Alp Toker kicked off a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/74274">long thread about the use of Phabricator for code reviews&lt;/a>. The main problem is that Phabricator reviews aren't necessarily going through llvm-commits which is potentially harming development. A very sensible step has been taken of &lt;a href="https://secure.phabricator.com/T5495">filing a feature request with Phabricator&lt;/a> for the ability to warn when no mailing list is subscribed to a code review.&lt;/p>&lt;/li>&lt;li>&lt;p>James Molloy has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/74269">shared some rough benchmark data on LLVM targeting Cortex-A57&lt;/a>. For SPEC, LLVM is apparently less than 5% behind GCC for most benchmarks. James also lists a number of missed optimisation opportunities he's noticed so far in comparing the output.&lt;/p>&lt;/li>&lt;li>&lt;p>Alexander Kornienko &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/74314">questions whether it's time to bump the minimum Python requirement from 2.5 to 2.7&lt;/a>. Replies o the thread made the distinction between the minimum to run tests using lit (which is written in Python) and the minimum for tooling scripts that may need to be less portable. Despite 2.5 being ancient, the reason for wanting to support it is for long-lived releases such as RHEL.&lt;/p>&lt;/li>&lt;li>&lt;p>Diego Novillo &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/74351">suggests turning on debug column info by default&lt;/a>. He found almost no difference in compile time and only a 1% growth in debug info size. There seems to be support for doing this, with the only concern being that some debuggers might not interpret the data properly leading to odd behaviour. David Blaikie found a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/74376">few regressions in the gdb test suite&lt;/a>, but has yet to investigate further.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A significant overhaul of how vector lowering is done in the x86 backend has been started. While it's under development it's off by default, though it's hoped that in times there will be measurable performance improvements on benchmarks conducive to vectorization. &lt;a href="http://reviews.llvm.org/rL211888">r211888&lt;/a> and more.&lt;/p>&lt;/li>&lt;li>&lt;p>X86 FastISel will use EFLAGS directly when lowering select instructions if the condition comes from a compare. It also now supports floating-point selects among other improvements. &lt;a href="http://reviews.llvm.org/rL211543">r211543&lt;/a>, &lt;a href="http://reviews.llvm.org/rL211544">r211544&lt;/a>, and more.&lt;/p>&lt;/li>&lt;li>&lt;p>ScaledNumber has been split out from BlockFrequencyInfo into the Support library. &lt;a href="http://reviews.llvm.org/rL211562">r211562&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The loop vectorizer now features &lt;code>-Rpass-missed&lt;/code> and &lt;code>-Rpass-analysis&lt;/code> reports. &lt;a href="http://reviews.llvm.org/rL211721">r211721&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The developer documentation has been updated to clarify that although you can use Phabricator to submit code for review, you should also ensure the relevant -commits mailing list is added as a subscriber on the review and be prepared to respond to comments there. &lt;a href="http://reviews.llvm.org/rL211731">r211731&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>COMDATs have been added to the IR. What's a COMDAT? &lt;a href="http://stackoverflow.com/a/2440933">StackOverflow has you covered&lt;/a>. &lt;a href="http://reviews.llvm.org/rL211920">r211920&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The NVPTX backend saw a whole series of commits. &lt;a href="http://reviews.llvm.org/rL211930">r211930&lt;/a>, &lt;a href="http://reviews.llvm.org/rL211932">r211932&lt;/a>, &lt;a href="http://reviews.llvm.org/rL211935">r211935&lt;/a>, and more.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM gained an abstraction for a random number generator (RNG). &lt;a href="http://reviews.llvm.org/rL211705">r211705&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A nice little diagnostic improvement has been added for when the user accidentally puts braces before the identifer, e.g. &lt;code>int [4] foo;&lt;/code>. &lt;a href="http://reviews.llvm.org/rL211641">r211641&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>OpenMP learned the 'section' directive (and some more, see the full commit logs). &lt;a href="http://reviews.llvm.org/rL211685">r211685&lt;/a>, &lt;a href="http://reviews.llvm.org/rL211767">r211767&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Support for ARM EHABI unwinding was added to libunwind. &lt;a href="http://reviews.llvm.org/rL211743">r211743&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The lldb Machine Interface gained a number of new commands and bug fixes. &lt;a href="http://reviews.llvm.org/rL211607">r211607&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #25, Jun 23rd 2014</title><link>https://blog.llvm.org/2014/06/llvm-weekly-25-jun-23rd-2014.html</link><pubDate>Mon, 23 Jun 2014 03:31:00 +0000</pubDate><guid>https://blog.llvm.org/2014/06/llvm-weekly-25-jun-23rd-2014.html</guid><description>&lt;p>Welcome to the twenty-fifth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/25">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Facebook have released a number of clang plugins they have been using internally. This includes plugins to the clang analyzer primarily for iOS development as well as a plugin to export the Clang AST to JSON. The code is &lt;a href="https://github.com/facebook/facebook-clang-plugins">available on Github&lt;/a> and they have started a &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/37318">discussion on the mailing list&lt;/a> about moving some of this code upstream.&lt;/p>&lt;p>This week saw the &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvm-announce/2014-June/000053.html">release&lt;/a> of LLVM and Clang 3.4.2. This is a bug-fix release which maintains ABI and API compatibility with 3.4.1.&lt;/p>&lt;p>Clang's C++ status page &lt;a href="http://clang.llvm.org/cxx_status.html#cxx17">now lists C++1z feature status&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Rafael Espíndola has started a thread to discuss &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73948">clarification on the backward compatibility promises of LLVM&lt;/a>. He summarises what seems to be the current policy (old .bc is upgraded upon read, there is no strong guarantee on .ll compatibility). Much of the subsequent discussion is about issues such as compatibility with metadata format changes.&lt;/p>&lt;/li>&lt;li>&lt;p>Duncan P.N. Exon Smith has posted a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73968">review of the new pass manager&lt;/a> in its current form. He starts with a high-level overview of what Chandler Carruth's new PassManager infrastructure offers and has a list of queries and concerns. There are no responses yet, but it's worth keeping your eyes on this thread if you're interested in LLVM internals development.&lt;/p>&lt;/li>&lt;li>&lt;p>This week has brought two separate proposals for LLVM code coverage support (neither of which have any replies at the time of writing). Christian Holler has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73919">proposed inclusion of LLCov code&lt;/a>. This is a module pass that instruments basic blocks with calls to functions that will track coverage. The current LLCov code is &lt;a href="https://github.com/choller/LLCov">available on Github&lt;/a>. Alex L has also posted a &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/37289">detailed proposal on improving code coverage support for Clang and LLVM&lt;/a>. He is looking for feedback on the approach before starting to submit patches.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The LLVM global lock is dead, and the LLVM Programmer's Manual has been updated to reflect this. &lt;code>llvm_start_multithreaded&lt;/code> and &lt;code>llvm_stop_multithreaded&lt;/code> have been removed.&lt;br />&lt;a href="http://reviews.llvm.org/rL211277">r211277&lt;/a>, &lt;a href="http://reviews.llvm.org/rL211287">r211287&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The patchset to improve MergeFunctions performance from O(NxN) to O(N x log(N)) has finally been completely merged. &lt;a href="http://reviews.llvm.org/rL211437">r211437&lt;/a>, &lt;a href="http://reviews.llvm.org/rL211445">r211445&lt;/a> and more.&lt;/p>&lt;/li>&lt;li>&lt;p>Range metadata can now be attached to call and invoke (previously it could only be attached to load). &lt;a href="http://reviews.llvm.org/rL211281">r211281&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>ConvertUTF in the Support library was modified to find the maximal subpart of an ill-formed UTF-8 sequence. &lt;a href="http://reviews.llvm.org/rL211015">r211015&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LoopUnrollPass will now respect loop unrolling hints in metadata. &lt;a href="http://reviews.llvm.org/rL211076">r211076&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The R600 backend has been updated to make use of LDS (Local Data Share) and vectors for private memory. &lt;a href="http://reviews.llvm.org/rL211110">r211110&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>X86FastISel continues to improve with optimisation for predicates, cmp folding, and support for 64-bit absolute relocations. &lt;a href="http://reviews.llvm.org/rL211126">r211126&lt;/a>, &lt;a href="http://reviews.llvm.org/rL211130">r211130&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The SLPVectorizer (superword-level parallelism) will now recognize and vectorize non-SIMD instruction patterns like sequences of fadd,fsub or add,sub. These will be vectorized as vector shuffles if they are profitable. &lt;a href="http://reviews.llvm.org/rL211339">r211339&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM can now generate native unwind info on Win64. &lt;a href="http://reviews.llvm.org/rL211399">r211399&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang's OpenMP implementation now contains initial support of the 'reduction' clause, &lt;code>#pragma omp for&lt;/code>, the 'schedule' clause, the 'ordered' clause, and the 'nowait' clause. &lt;a href="http://reviews.llvm.org/rL211007">r211007&lt;/a>, &lt;a href="http://reviews.llvm.org/rL211140">r211140&lt;/a>, &lt;a href="http://reviews.llvm.org/rL211342">r211342&lt;/a>, &lt;a href="http://reviews.llvm.org/rL211347">r211347&lt;/a>, &lt;a href="http://reviews.llvm.org/rL211352">r211352&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MS ABI support continues with the merging of support for x86-64 RTTI. &lt;a href="http://reviews.llvm.org/rL211041">r211041&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>-std=c+++1z&lt;/code> flag was added to enable support for C++17 features. &lt;a href="http://reviews.llvm.org/rL211030">r211030&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The clang User's Manual has been expanded with documentation for profile-guided optimisation with instrumentation. &lt;a href="http://reviews.llvm.org/rL211085">r211085&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Emission of ARM NEON intrinsics has been totally rewritten to be easier to read and maintain as well as to provide better protection against coding errors. &lt;a href="http://reviews.llvm.org/rL211101">r211101&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>compiler-rt now offers add, sub, and mul for IEEE quad precision floating point. &lt;a href="http://reviews.llvm.org/rL211312">r211312&lt;/a>, &lt;a href="http://reviews.llvm.org/rL211313">r211313&lt;/a>.&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #24, Jun 16th 2014</title><link>https://blog.llvm.org/2014/06/llvm-weekly-24-jun-16th-2014.html</link><pubDate>Mon, 16 Jun 2014 04:54:00 +0000</pubDate><guid>https://blog.llvm.org/2014/06/llvm-weekly-24-jun-16th-2014.html</guid><description>&lt;p>Welcome to the twenty-fourth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/24">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;ul>&lt;li>&lt;p>Philip Reames has written another blog post about the support for precise relocating GC he has been working on with his colleagues. In this post, he &lt;a href="http://www.philipreames.com/Blog/2014/06/12/ir-restrictions-for-late-safepoint-placement/">describes the IR restrictions for late safepoint placement&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Videos from this year's EuroLLVM conference are &lt;a href="http://llvm.org/devmtg/2014-04/">now available&lt;/a>. Enjoy!&lt;/p>&lt;/li>&lt;li>&lt;p>Evan Swick has written a &lt;a href="http://www.eswick.com/2014/06/inside-swift/">blog post about Swift internals&lt;/a> using information gleaned from reverse engineering Swift binaries and the runtime.&lt;/p>&lt;/li>&lt;li>&lt;p>The next Paris LLVM social will &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73838">take place on June 23rd&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The next Cambridge LLVM Social will &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73717">take place on the 25th of June&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>George Burgess has posted to the list to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73724">announce he'll be interning with Google and working on a new alias analysis algorithm for LLVM&lt;/a>. He will be implementing an algorithm based on &lt;a href="http://www.cse.cuhk.edu.hk/lyu/_media/paper/pldi2013.pdf">this paper&lt;/a>. His full proposal is &lt;a href="https://docs.google.com/document/d/1nGFKMmr-HbdEiag9G1GeWurgOV0CweSUjLXFr3LAwqg/edit">available here&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Tim Northover has written an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.cvs/192081">RFC on adding cmpxchg weak to the LLVM IR&lt;/a>. This seems to have been rapidly accepted as patches were commited this week.&lt;/p>&lt;/li>&lt;li>&lt;p>Mark Tullsen is working on a tool that allows programmers to write custom program properties in a high level DSL. They are using libclang but are &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/37229">missing the ability to perform transformations on the AST&lt;/a>. David Chisnall gives a good &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/37236">motivation for why AST transformations are not supported&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Apple are &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73730">advertising for engineers to join their Swift team&lt;/a>. This started a discussion about what the rules about job postings to the LLVM list should be and also elicited &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/37217">another response from Chris Lattner on whether Swift will be open-sourced&lt;/a>. "You can imagine that many of us want it to be open source and part of llvm, but the discussion hasn't happened yet, and won't for some time."&lt;/p>&lt;/li>&lt;li>&lt;p>Alp Toker has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73768">announced to those using LLVM&lt;/a> that the llvm/Config/config.h header is becoming internal to the LLVM source tree. Out-of-tree LLVM-based projects should be updated.&lt;/p>&lt;/li>&lt;li>&lt;p>Tom Stellard has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73721">announced to the list&lt;/a> that &lt;code>setOperationAction(ISD::SELECT_CC, MVT::Other, Expand)&lt;/code> is no longer supported and you must explicitly set the &lt;code>SELECT_CC&lt;/code> operations for each supported type.&lt;/p>&lt;/li>&lt;li>&lt;p>A &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/37258">pre-reminder for LLVM 3.5&lt;/a>. The process will be starting in mid-July (more details to come later).&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A weak variant of cmpxchg has been added to the LLVM IR, as has been &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.cvs/192081">argued for&lt;/a> on the mailing list. Weak cmpxchg allows failure and the operation returns &lt;code>{iN, i1}&lt;/code> (in fact, for uniformity all cmpxchg instructions do this now). According to the commit message, this change will mean legacy assembly IR files will be invalid but legacy bitcode files will be upgraded during read. &lt;a href="http://reviews.llvm.org/rL210903">r210903&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>X86 FastISel gained support for handling a bunch more intrinsics. &lt;a href="http://reviews.llvm.org/rL210709">r210709&lt;/a>, &lt;a href="http://reviews.llvm.org/rL210720">r210720&lt;/a> and more. FastISel also saw some target-independent improvements &lt;a href="http://reviews.llvm.org/rL210742">r210742&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>This week there were many updates to the MIPS backend for mips32r6/mips64r6. e.g. &lt;a href="http://reviews.llvm.org/rL210899">r210899&lt;/a>, &lt;a href="http://reviews.llvm.org/rL210784">r210784&lt;/a> and many more.&lt;/p>&lt;/li>&lt;li>&lt;p>NoSignedWrap, NoUnsignedWrap and Exact flags are now exposed to the SelectionDAG. &lt;a href="http://reviews.llvm.org/rL210467">r210467&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support has been added for variable length arrays on the Windows on ARM Itanium ABI. &lt;a href="http://reviews.llvm.org/rL210489">r201489&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Some simple reordering of fields in Value and User saves 8 bytes of padding on 64-bit. &lt;a href="http://reviews.llvm.org/rL210501">r210501&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>FastISel will now collect statistics on when it fails with intrinsics. &lt;a href="http://reviews.llvm.org/rL210556">r210556&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The MIPS backend gained support for jr.hb and jalr.hb (jump register with hazard barrier, jump and link register with hazard barrier). &lt;a href="http://reviews.llvm.org/rL210654">r210654&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>AArch64 gained a basic schedule model for the Cortex-A57. &lt;a href="http://reviews.llvm.org/rL210705">r210705&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM has transitioned to using &lt;code>std::error_code&lt;/code> instead of &lt;code>llvm::error_code&lt;/code>. &lt;a href="http://reviews.llvm.org/rL210687">r210687&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The &lt;code>-Wdate-time&lt;/code> preprocessor warning from GCC has been implemented. This is useful when trying to create reproducible builds. &lt;a href="http://reviews.llvm.org/rL210511">r210511&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Loop unroll pragma support was added. &lt;a href="http://reviews.llvm.org/rL210667">r210667&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Yet more progress has been made on MS ABI compatibility. e.g. &lt;a href="http://reviews.llvm.org/rL210813">r210813&lt;/a>, &lt;a href="http://reviews.llvm.org/rL210637">r210637&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>libcxx gained an implementation of &lt;code>string_view&lt;/code> as proposed in &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4023.html">N4023&lt;/a>. &lt;a href="http://reviews.llvm.org/rL210659">r210659&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Some of the iOS8/OS X Yosemite specific lldb support has been merged. &lt;a href="http://reviews.llvm.org/rL210874">r210874&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #23, Jun 9th 2014</title><link>https://blog.llvm.org/2014/06/llvm-weekly-23-jun-9th-2014.html</link><pubDate>Mon, 09 Jun 2014 04:24:00 +0000</pubDate><guid>https://blog.llvm.org/2014/06/llvm-weekly-23-jun-9th-2014.html</guid><description>&lt;p>Welcome to the twenty-third issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/23">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Philip Reames has &lt;a href="http://www.philipreames.com/Blog/2014/06/04/code-for-late-safepoint-placement-available/">announced that code for late safepoint placement is now available&lt;/a>.&lt;br />This is a set of patches to LLVM from Azul Systems that aim to support precise relocating garbage collection in LLVM. Phlip has a long list of questions where he is seeking feedback from the community on how to move forwards with these patches. There's not been much response so far, hopefully it will come soon as I know there are many communities who are very interested in seeing better GC support in LLVM (e.g. Rust, Ocaml).&lt;/p>&lt;p>The biggest LLVM news this week is of course the announcement of &lt;a href="https://developer.apple.com/swift/">the Swift programming language&lt;/a> from Apple. Its development was led by Chris Lattner, original author of LLVM. He has some more info about Swift &lt;a href="https://developer.apple.com/swift/">on his website&lt;/a>. There is no source release as of yet, and &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.user/493">no indication&lt;/a> from Apple as to whether it will remain proprietary. Either way, it's an interesting development. Chris Lattner is now on Twitter and has been &lt;a href="https://twitter.com/clattner_llvm/status/474411823223959552">passing out tidbits about the Swift implementation&lt;/a>.&lt;/p>&lt;p>LunarG have &lt;a href="http://lunarg.com/glassymesa/">announced the Glassy Mesa project&lt;/a>. This project, funded by Valve, will explore increasing game performance in Mesa through improvements in the shader compiler. The current parser and optimisation layer are replaced with glslang and the LLVM-based LunarGlass. More technical details are &lt;a href="http://media.lunarg.com/wp-content/uploads/2014/06/GlassyMesaSlides-05Jun2014.pdf">available in the slide deck&lt;/a>.&lt;/p>&lt;p>Sébastien Métrot has released &lt;a href="https://github.com/meeloo/xspray">xspray&lt;/a>, a frontend for lldb on OS X. One of its interesting features is the inbuilt support for plotting your data.&lt;/p>&lt;p>With all the LLVM news recently, it seems &lt;a href="http://www.google.com/trends/explore#q=llvm">search traffic for 'llvm' has skyrocketed&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Zachary Tuner has started a discussion on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73604">multi-threading and mutexes in LLVM&lt;/a>, following from his patches (currently in review) that tries to replace LLVM's own mutex implementation with &lt;code>std::mutex&lt;/code> and &lt;code>std::recursive_mutex&lt;/code>. The key questions are whether multi-threading should be a compile-time or tunetime parameter, what should happen if you attempt to acquire a mutex in an app with threading disabled, and whether debugging code for finding deadlocks should be included.&lt;/p>&lt;/li>&lt;li>&lt;p>Sean Silva queries &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73597">whether stack maps should be marked as stable in LLVM 3.5&lt;/a> given that the feature now has a number of users, including WebKit. Andrew Trick &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73599">suggests another round of RFC&lt;/a> before this, and intends to submit another proposal in the coming week.&lt;/p>&lt;/li>&lt;li>&lt;p>Gerolf Hoflehner is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73502">asking for feedback on his proposed instruction combiner pass&lt;/a>. This would run at the machine IR level and aims to overcome some of the deficiencies observed when combining instructions at the ISEL level.&lt;/p>&lt;/li>&lt;li>&lt;p>A question has arisen over &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73465">whether LLVM 3.3/3.4 IR is backward compatible with 3.2&lt;/a>. This isn't a form of compatibility that LLVM offers, though Stephen Hines notes that &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73563">Android maintains an LLVM 3.2 bitcode writer&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Quite some time ago, Dennis Luehring drew attention to &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/31855">a case where the GCC optimiser seems to do better than Clang&lt;/a>. Benjamin Kramer and Richard Smith both submitted patches which &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/37067">now results in Clang acing this testcase&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The jumptable attribute has been introduced. If you mark a function with this attribute, references to it can be rewritten with a reference to the appropriate jump-instruction-table function pointer. &lt;a href="http://reviews.llvm.org/rL210280">r210280&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support was added for Windows ARM exception handling data structures, including decoding them. &lt;a href="http://reviews.llvm.org/rL209998">r209998&lt;/a>, &lt;a href="http://reviews.llvm.org/rL210192">r210192&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>GlobalAlias can now point to an arbitrary ConstantExpression. See the commit message for a discussion of the consequences of this. &lt;a href="http://reviews.llvm.org/rL210062">r210062&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The subword level parallelism (SLP) vectorizer has been extended to support vectorization of getelementptr expressions. &lt;a href="http://reviews.llvm.org/rL210342">r210342&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM programmer's manual has been improved with an example of using IRBuilder. &lt;a href="http://reviews.llvm.org/rL210354">r210354&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Semantic analysis to make sure a loop is in OpenMP canonical form has been committed. &lt;a href="http://reviews.llvm.org/rL210095">r210095&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;code>__builtin_operator_new&lt;/code> and &lt;code>__builtin_operator_delete&lt;/code> have been added. Some optimisations are allowed on these which would not be on &lt;code>::operator new&lt;/code> and are intended for the implementation of things like std::allocator. &lt;a href="http://reviews.llvm.org/rL210137">r210137&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>New pragmas have been introduced to give optimisation hints for vectorization and interleaving. You can now use &lt;code>#pragma clang loop vectorize(enable)&lt;/code> as well as &lt;code>vectorize(disable)&lt;/code>, &lt;code>vectorize_width(n)&lt;/code>, &lt;code>interleave(enable/disable)&lt;/code>, and &lt;code>interleave_count(n)&lt;/code>. &lt;a href="http://reviews.llvm.org/rL210330">r210330&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for the MSVC++ ABI continues with the addition of &lt;code>dynamic_cast&lt;/code> for MS. &lt;a href="http://reviews.llvm.org/rL210377">r210377&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for global named registers has been expanded slightly to allow pointer types to be held in these variables. &lt;a href="http://reviews.llvm.org/rL210274">r210274&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>GCC's &lt;code>-Wframe-larger-than=bytes&lt;/code> diagnostic is now supported. &lt;a href="http://reviews.llvm.org/rL210293">r210293&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A benchmarking-only mode has been added to the testsuite &lt;a href="http://reviews.llvm.org/rL210251">r210251&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A &lt;a href="http://libcxx.llvm.org/ts1z_status.html">status page&lt;/a> for post-C++14 features in libcxx has been added. &lt;a href="http://reviews.llvm.org/rL210056">r210056&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>An initial set of Makefiles has been committed to lld. &lt;a href="http://reviews.llvm.org/rL210177">r210177&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lldb gained support for inspecting enum members. &lt;a href="http://reviews.llvm.org/rL210046">r210046&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Polly can now be built without any GPLed software. &lt;a href="http://reviews.llvm.org/rL210176">r210176&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #22, Jun 2nd 2014</title><link>https://blog.llvm.org/2014/06/llvm-weekly-22-jun-2nd-2014.html</link><pubDate>Mon, 02 Jun 2014 07:39:00 +0000</pubDate><guid>https://blog.llvm.org/2014/06/llvm-weekly-22-jun-2nd-2014.html</guid><description>&lt;p>Welcome to the twenty-second issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects.LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>Last week I expressed worry about GMANE not updating. I'm happy to report that it's back to normal now. Some of my readers might be interested in my &lt;a href="http://www.raspberrypi.org/raspberry-pi-projects-at-the-maker-faire-bay-area/">account of the neat Raspberry Pi-based projects I saw at Maker Faire Bay Area&lt;/a>.&lt;/p>&lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/22">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a>&lt;h3>News and articles from around the web&lt;/h3>&lt;p>David Given has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73349">shared&lt;/a> his partially complete backend for the VideoCore IV VPU as used in the BCM2835 in the Raspberry Pi. It would also be interesting to see a QPU LLVM backend now it has been &lt;a href="http://www.raspberrypi.org/a-birthday-present-from-broadcom/">publicly documented&lt;/a>.&lt;/p>&lt;p>Documentation on how TableGen's DAGISel backend works &lt;a href="https://github.com/draperlaboratory/fracture/wiki/How-TableGen%27s-DAGISel-Backend-Works">has been updated&lt;/a>.&lt;/p>&lt;p>The &lt;a href="http://llvm-hpc-workshop.github.io/">LLVM Compiler Infrastructure in HPC Workshop&lt;/a> has been announced. This is a workshop to be held in conjunction with SC14. The deadline for the call for papers is September 1st.&lt;/p>&lt;p>&lt;a href="http://people.collabora.com/~pwith/gnome-clang/">Tartan&lt;/a> is a Clang analysis plugin for GLib and GNOME. To quote its homepage "The plugin works by loading gobject-introspection metadata for all functions it encounters (both functions exported by the code being compiled, if it is a library; and functions called by it). This metadata is then used to add compiler attributes to the code, such as non-NULL attributes, which the compiler can then use for static analysis and emitting extra compiler warnings."&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Jack Howarth has posted to ask &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/36961">what can be done to merge the clang-omp merge along more quickly&lt;/a>. Andrey Bokhanko followed up with some &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/36974">clarifications and elaborations&lt;/a>. Hal Finkel has also &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/36981">more clearly described the OpenMP language support vs the OpenMP runtime library&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Simon Cook posed an interesting question about &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73365">a backend with 32-bit registers for load/store but otherwise mostly 16 bit&lt;/a>. Sadly there are no answers yet.&lt;/p>&lt;/li>&lt;li>&lt;p>Qiong Cai has a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73325">few questions on LLVM JIT&lt;/a>. Philip Reames &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73339">answers concisely&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Tim Northover &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73355">proposes adding load linked and store conditional atomic instructions to LLVM IR&lt;/a>. David Chisnall has a thorough &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73413">answer to the proposal&lt;/a> that suggests weak cmpxchg would be an easier and overall better addition.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A LoadCombine pass was added, though is disabled by default for now. &lt;a href="http://reviews.llvm.org/rL209791">r209791&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>AAPCS-VFP has been taught to deal with Cortex-M4 (which only has single precision floating point). &lt;a href="http://reviews.llvm.org/rL209650">r209650&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>InstructionCombining gained support for combining GEPs across PHI nodes. &lt;a href="http://reviews.llvm.org/rL209843">r209843&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Vectorization of intrinsics such as powi, cttz and ctlz is now allowed. &lt;a href="http://reviews.llvm.org/rL209873">r209873&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MIPS64 long branch has been optimised to be 3 instructions smaller. &lt;a href="http://reviews.llvm.org/rL209678">r209678&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>OpenMP implementation continues. Parsing and Sema have been implemented for OMPAlignedClause. &lt;a href="http://reviews.llvm.org/rL209816">r209816&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>-Rpass-missed&lt;/code> and &lt;code>-Rpass-analysis&lt;/code> flags have been added. pass-missed is used by optimizers to inform the user when they tried to apply an optimisation but couldn't, while pass-analysis is used to report analysis results back to the user. A followup commit documents the family of flags. &lt;a href="http://reviews.llvm.org/rL209839">r209839&lt;/a>, &lt;a href="http://reviews.llvm.org/rL209841">r209841&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The clang optimize pragma has now been documented. &lt;a href="http://reviews.llvm.org/rL209738">r209738&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>There has been some API refactoring. The release and take methods were removed from ActionResult and Owned removed from Sema. &lt;a href="http://reviews.llvm.org/rL209800">r209800&lt;/a>, &lt;a href="http://reviews.llvm.org/rL209812">r209812&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>ThreadSanitizer has seen a refactoring of storage of meta information for heap blocks and sync objects. &lt;a href="http://reviews.llvm.org/rL209810">r209810&lt;/a>.&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #21, May 26th 2014</title><link>https://blog.llvm.org/2014/05/llvm-weekly-21-may-26th-2014.html</link><pubDate>Mon, 26 May 2014 04:32:00 +0000</pubDate><guid>https://blog.llvm.org/2014/05/llvm-weekly-21-may-26th-2014.html</guid><description>&lt;p>Welcome to the 21st issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>I'm back in the UK and mostly recovered from the ensuing jetlag. I am however disturbed that all mailing lists on &lt;a href="http://gmane.org/">GMANE&lt;/a> don't seem to have been updated for the past week and have been unable to find any explanation of what is going on online. GMANE is an important and massively useful aggregrator and archiver of free software development lists and I really hope these are only temporary problems. For this issue, I have instead linked directly to the mailman archives at UIUC.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/21">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Jonathan Mah has written a &lt;a href="http://devetc.org/code/2014/05/17/safe-and-sane-key-paths.html">Clang plugin for checking key path strings in Objective C code&lt;/a>. The implementation is &lt;a href="https://github.com/jmah/Clang-KeyPathValidator">available on Github&lt;/a>.&lt;/p>&lt;p>LWN has published an &lt;a href="http://lwn.net/Articles/598486/">article about ThreadSanitizer v2&lt;/a>.&lt;/p>&lt;p>This week, the merge of the AArch64 and the Apple-contributed ARM64 backends was completed. The old AArch64 was deleted and the result of merging code from AArch64 in to ARM64 was renamed to AArch64.&lt;/p>&lt;p>A paper '&lt;a href="http://arxiv.org/abs/1405.4565">Static energy consumption analysis of LLVM IR programs&lt;/a>' has been posted to arXiv.org.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Philip Reames wonders &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-May/073180.html">why can't atomic loads and stores handle floats&lt;/a>. David Chisnall has a good followup which explains &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-May/073191.html">why just bitcasting floats to use atomic load/store on them is far from ideal&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Louis Gerbarg has shared an &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-May/073125.html">RFC on indexing of structs vs arrays in getelementpointr&lt;/a>. This is inspired by his recent work to optimise getelementptr across different basic blocks.&lt;/p>&lt;/li>&lt;li>&lt;p>Jingyue Wu &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-May/073079.html">asks for advice on sinking incoming values of a PHI node in CodeGenPrepare&lt;/a>. Louis Gerbarg points out that &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-May/073096.html">these optimisations are similar to his recent GetElementPtr work&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A new attribute, 'nonnull' has been added. When applied to a parameter or return pointer this indicates it is not null, which may allow additional optimisations (at least, avoiding comparisons between that value and null). &lt;a href="http://reviews.llvm.org/rL209185">r209185&lt;/a>, &lt;a href="http://reviews.llvm.org/rL209193">r209193&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The llvm.arm.undefined intrinsic has been added. This is used to generate the 0xde opcode on ARM. It takes an integer parameter, which might be used by the OS to implement custom behaviour on the trap. &lt;a href="http://reviews.llvm.org/rL209390">r209390&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The MIPS disassembler has seen some work. Some support has been added for MIPS64r6 and various issues fixed. &lt;a href="http://reviews.llvm.org/rL209415">r209415&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM learned the &lt;code>-pass-remarks-missed&lt;/code> and &lt;code>-pass-remarks-analysis&lt;/code> command line options. &lt;code>-pass-remarks-missed&lt;/code> shows diagnostics when a pass tried to apply a transformation but couldn't. &lt;code>-pass-remarks-analysis&lt;/code> shows information about analysis results. &lt;a href="http://reviews.llvm.org/rL209442">r209442&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The documentation for the &lt;code>llvm.mem.parallel_loop_access&lt;/code> metadata has been updated. &lt;a href="http://reviews.llvm.org/rL209507">r209507&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Old AArch64 has been removed and ARM64 renamed to AArch64. &lt;a href="http://reviews.llvm.org/rL209576">r209576&lt;/a>, &lt;a href="http://reviews.llvm.org/rL209577">r209577&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>clang-format has seen more JS support. It can now reformat ES6 arrow functions and ES6 destructuring assignments. &lt;a href="http://reviews.llvm.org/rL209112">r209112&lt;/a>, &lt;a href="http://reviews.llvm.org/rL209113">r209113&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Experimental checkers for the clang static analyzer are &lt;a href="http://clang.llvm.org/analyzer/alpha_checks.html">now documented&lt;/a>. &lt;a href="http://reviews.llvm.org/rL209131">r209131&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support was added to clang for global named registers, using the LLVM intrinsics which were recently added. &lt;a href="http://reviews.llvm.org/rL209149">r209149&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang learned the &lt;code>no_split_stack&lt;/code> attribute to turn off split stacks on a per-function bases. &lt;a href="http://reviews.llvm.org/rL209167">r209167&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang learned the &lt;code>flatten&lt;/code> attribute. This causes calls within the function to be inlined where possible. &lt;a href="http://reviews.llvm.org/rL209217">r209217&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>An initial version of codegen for pragma omp simd has been committed. This also adds CGLoopInfo which is a helper for marking memory instructions with &lt;code>llvm.mem.parallel_loop_access&lt;/code> metadata. &lt;a href="http://reviews.llvm.org/rL209411">r209411&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The pragma &lt;code>clang optimize {on,off}&lt;/code> has been implemented. This allows you to selectively disable optimisations on certain functions. &lt;a href="http://reviews.llvm.org/rL209510">r209510&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>An implementation of Microsoft ABI-compatible RTTI (run-time type information) has landed. &lt;a href="http://reviews.llvm.org/rL209523">r209523&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>'Chained origins' as used by MemorySanitizer has been redesigned. &lt;a href="http://reviews.llvm.org/rL209284">r209284&lt;/a>.&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #20, May 19th 2014</title><link>https://blog.llvm.org/2014/05/llvm-weekly-20-may-19th-2014.html</link><pubDate>Mon, 19 May 2014 04:48:00 +0000</pubDate><guid>https://blog.llvm.org/2014/05/llvm-weekly-20-may-19th-2014.html</guid><description>&lt;p>Welcome to the twentieth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>This week's issue is perhaps a little less thorough than normal. I've been in San Francisco most of the week for Maker Faire this weekend, where I was at the Raspberry Pi booth with some other Foundation members. As this issue goes out, I'll be enjoying my last day in SF before heading to the airport for the long flight home and the ensuing jetlag.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/20">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The WebKit blog features an &lt;a href="https://www.webkit.org/blog/3362/introducing-the-webkit-ftl-jit/">excellent and detailed article about the new Fourth Tier LLVM JIT&lt;/a> which sheds light on the how and why.&lt;/p>&lt;p>The &lt;a href="http://neu.andrometa.net/">Neu framework&lt;/a> has recently been announced. It is a C++11 framework, collection of programming languages and software system designed for artificial intelligence applications and technical computing in general. It makes use of the LLVM MC JIT for its NPL language as well as generating high performance neural networks.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Tim Northover has posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73034">RFC on removing the AArch64 backend and renaming ARM64 to AArch64&lt;/a>. This would represent the culmination of the work to merge the two backends.&lt;/p>&lt;/li>&lt;li>&lt;p>In case you're wondering about when we'll see LLVM/Clang 3.5, Bill Wending has &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/36750">posted to inform us the current plan is to start testing in July and target a release in August&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>I always enjoy pointing out excellent answers to questions on the mailing lists. The large and helpful community is one of the greatest assets of LLVM. This week, I draw special attention to Jordan Rose's &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/36755">answer to a question about tracking a function parameter with the static analyzer&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The testing phase for LLVM 3.4.2 &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/73069">has started&lt;/a>. According to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72919">the schedule&lt;/a> it should be released on May 25 provided the testing phase didn't raise issues. Tom Stellard is also looking for backup release managers.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The inliner has been taught how to preserve musttail invariants. &lt;a href="http://reviews.llvm.org/rL208910">r208910&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new C API has been added for a thread yielding callback. &lt;a href="http://reviews.llvm.org/rL208945">r208945&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Another patch in the series to improve MergeFunctions performance has been committed. A total ordering has now been implemented among operations. &lt;a href="http://reviews.llvm.org/rL208973">r208973&lt;/a>, &lt;a href="http://reviews.llvm.org/rL208976">r208976&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The ARM load/store optimisation pass has been fixed to work with Thumb1. &lt;a href="http://reviews.llvm.org/rL208992">r208992&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>GlobalValue has been split into GlobalValue and GlobalObject, which allows a code to statically accept a Function or a GlobalVariable but not an alias. &lt;a href="http://reviews.llvm.org/rL208716">r208716&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Integral reciprocal was optimised to not use division. This optimisation was influenced by &lt;a href="http://www.cs.utah.edu/~regehr/souper/">Souper&lt;/a>. &lt;a href="http://reviews.llvm.org/rL208750">r208750&lt;/a>. Another optimisation opportunity uncovered by Souper was signed icmp of -(zext V). &lt;a href="http://reviews.llvm.org/rL208809">r208809&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>I rather like that these transforms for single bit tests were &lt;a href="http://rise4fun.com/Z3/Pmsh">verified with Z3&lt;/a>. &lt;a href="http://reviews.llvm.org/rL208848">r208848&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>PowerPC gained global named register support, for r1, r2 and r13 (depending on the subtarget). &lt;a href="http://reviews.llvm.org/rL208509">r208509&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Documentation was added for the ARM64 BigEndian NEON implementation. &lt;a href="http://reviews.llvm.org/rL208577">r208577&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The constant folder is now better at looking through bitcast constant expressions. This is a first step towards fixing this &lt;a href="http://ericniebler.com/2014/04/27/range-comprehensions/">poor performance of these range comprehensions&lt;/a>. &lt;a href="http://reviews.llvm.org/rL208856">r208856&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Initial support for MS ABI compliant RTTI mangling has been committed. &lt;a href="http://reviews.llvm.org/rL208661">r208661&lt;/a>, &lt;a href="http://reviews.llvm.org/rL208509">r208668&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang will no longer copy objects with trivial, deleted copy constructors. This fixes bugs and improves ABI compatibility with GCC and MSVC. &lt;a href="http://reviews.llvm.org/rL208786">r208786&lt;/a>. Though the itanium C++ ABI part was reverted for now. &lt;a href="http://reviews.llvm.org/rL208836">r208836&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The LLDB Machine Interface has been committed. This is an implementation of the &lt;a href="https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI.html">GDB Machine Interface&lt;/a>, useful for implementing your own frontend to LLDB. &lt;a href="http://reviews.llvm.org/rL208972">r208972&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>AddressSanitizer started to gain some windows tests. &lt;a href="http://reviews.llvm.org/rL208554">r208554&lt;/a>, &lt;a href="http://reviews.llvm.org/rL208859">r208859&lt;/a>, &lt;a href="http://reviews.llvm.org/rL208873">r208873&lt;/a> and more.&lt;/p>&lt;/li>&lt;li>&lt;p>The instrumented profiling library API was fixed to work with shared objects, and profiling is now supported for dlopened shared libraries.. &lt;a href="http://reviews.llvm.org/rL208940">r208940&lt;/a>, &lt;a href="http://reviews.llvm.org/rL209053">r209053&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #19, May 12th 2014</title><link>https://blog.llvm.org/2014/05/llvm-weekly-19-may-12th-2014.html</link><pubDate>Mon, 12 May 2014 06:47:00 +0000</pubDate><guid>https://blog.llvm.org/2014/05/llvm-weekly-19-may-12th-2014.html</guid><description>&lt;p>Welcome to the ninteenth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>I'm flying out to San Francisco tomorrow and will be there for the Bay Area Maker Faire at the weekend with some other Raspberry Pi Foundation people. If you're around, be sure to say hi.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/19">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>LLVM 3.4.1 &lt;a href="http://blog.llvm.org/2014/05/llvm-341-release.html">has been released&lt;/a>. This is a bug-fix release so offers API and ABI compatibility with LLVM 3.4. Thanks to everyone who contributed to the release by suggesting or backporting patches, and for testing.&lt;/p>&lt;p>John Regehr has &lt;a href="http://blog.regehr.org/archives/1146">shared some early results and discussion&lt;/a> on using &lt;a href="https://github.com/google/souper/">Souper&lt;/a> (a new superoptimizer for LLVM IR) in combination with Csmith and C-reduce in order to find missed optimisations and then produce minimal test cases. This has already resulted in a &lt;a href="http://llvm.org/bugs/show_bug.cgi?id=19711">new performance bug being filed&lt;/a> with I'm sure many more to come.&lt;/p>&lt;p>&lt;a href="https://github.com/crange/crange">Crange&lt;/a>, a tool to index and cross-reference C/C++ source code built on top of Clang has &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/36677">been released&lt;/a>. It aims to offer a more complete database than e.g. ctags, though the running time on a large codebase like the Linux kernel is currently very high.&lt;/p>&lt;p>&lt;a href="https://github.com/go-llvm/llgo">llgo&lt;/a>, the LLVM-based compiler for Go is &lt;a href="https://groups.google.com/forum/#!topic/llgo-dev/8uBfmIkGM88/discussion">now self-hosting&lt;/a>.&lt;/p>&lt;p>Last week I asked for benchmarks of the new &lt;a href="https://trac.webkit.org/wiki/FTLJIT">JavascriptCore Fourth Tier LLVM JIT&lt;/a>. Arewefastyet from Mozilla now includes such results. FTLJIT &lt;a href="http://arewefastyet.com/#machine=12&amp;amp;view=breakdown&amp;amp;suite=asmjs-apps">does particularly well on asm.js examples&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>The merge of AArch64 in to ARM64 has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72832">made impressive progress&lt;/a>. It's likely the final switchover will take place this week, with AArch64 being deleted and ARM64 renamed to AArch64. Ana Pazos &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.cvs/187546">shared a list of bugs currently waiting to be squashed&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Andy Lutomirski &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/36685">requests that the llvm integer arithmetic with overflow intrinsics be exposed as C intrinsics&lt;/a>. It was pointed out that they &lt;a href="http://clang.llvm.org/docs/LanguageExtensions.html#checked-arithmetic-builtins">actually are exposed&lt;/a> though Google is doing a poor job of indexing this fact, and in response a &lt;a href="http://gcc.gnu.org/bugzilla/show_bug.cgi?id=61129">bug has been filed with GCC&lt;/a> to expose similar intrinsics.&lt;/p>&lt;/li>&lt;li>&lt;p>Suminda Dharmasena &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72850">kicked off a conversation about reducing or removing platform specific LLVM instructions&lt;/a>. The thread morphed into an interesting discussion about &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72866">the issues arising from gaps in LLVM's coverage for atomic memory operations&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72847">asks for input on the problem of safely suspending JITting threads through the C LLVM API&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A new algorithm has been implemented for tail call marking. A build of clang now ends up with 470k calls in the IR marked as tail vs 375k before. The total tail call to loop conversions remains the same though. &lt;a href="http://reviews.llvm.org/rL208017">r208017&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;code>llvm::function_ref&lt;/code> has been introduced and described in the LLVM programmers manual. It is a type-erased reference to a callable object. &lt;a href="http://reviews.llvm.org/rL208025">r208025&lt;/a>, &lt;a href="http://reviews.llvm.org/rL208067">r208067&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Initial support for named register intrinsics (as previously discussed &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71567">on the mailing list&lt;/a> has landed. Right now, only the stack pointer is supported. Other non-allocatable registers could be supported with not too much difficulty, allocatable registers are much harder. &lt;a href="http://reviews.llvm.org/rL208104">r208104&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>-disable-cfi&lt;/code> option has been removed. LLVM now requires assemblers to support cfi (control-flow integrity) directives in order to generate stack unwinding information. &lt;a href="http://reviews.llvm.org/rL207979">r207979&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The superword-level parallelism (SLP) pass is now enabled by default for link time optimisation. &lt;a href="http://reviews.llvm.org/rL208013">r208013&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The llvm-cov documentation has been expanded &lt;a href="http://reviews.llvm.org/rL208098">r208098&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The second and third patch of a series to improve MergeFunctions performance to &lt;code>O(n*log(n))&lt;/code> has been merged. &lt;a href="http://reviews.llvm.org/rL208173">r208173&lt;/a>, &lt;a href="http://reviews.llvm.org/rL208189">r208189&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The standard 'x86-64' CPU used as the default architecture now uses the Sandy Bridge scheduling model in the hope this provides a reasonable default over a wide range of modern x86-64 CPUs. &lt;a href="http://reviews.llvm.org/rL208230">r208230&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Custom lowering for the &lt;code>llvm.{u|s}add.with.otherflow.i32&lt;/code> intrinsics as been added for ARM. &lt;a href="http://reviews.llvm.org/rL208435">r208435&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>MSVC ABI compatibility has again been improved. Clang now understands that the 'sret' (a structure return pointer) is passed after 'this' for MSVC. &lt;a href="http://reviews.llvm.org/rL208458">r208458&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Initial codegen from OpenMP's &lt;code>#pragma omp parallel&lt;/code> has landed. &lt;a href="http://reviews.llvm.org/rL208077">r208077&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Field references to struct names and C++11 aliases are now supported from inline asm. &lt;a href="http://reviews.llvm.org/rL208053">r208053&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Parsing and semantic analysis has been implemented for the OpenMP &lt;code>proc_bind&lt;/code> clause. &lt;a href="http://reviews.llvm.org/rL208060">r208060&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>clang-format gained initial support for JavaScript regex literals (yes, clang-format can reformat your JavaScript!). &lt;a href="http://reviews.llvm.org/rL208281">r208281&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>libcxxabi gained support for ARM zero-cost exception handling. &lt;a href="http://reviews.llvm.org/rL208466">r208466&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>In libcxx, std::vector gained Address Sanitizer support. &lt;a href="http://reviews.llvm.org/rL208319">r208319&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The test suite from &lt;a href="http://web.cs.uh.edu/~openuh/">OpenUH&lt;/a> has been added to the openmp repository. &lt;a href="http://reviews.llvm.org/rL208472">208472&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM 3.4.1 Release</title><link>https://blog.llvm.org/2014/05/llvm-341-release.html</link><pubDate>Fri, 09 May 2014 10:28:00 +0000</pubDate><guid>https://blog.llvm.org/2014/05/llvm-341-release.html</guid><description>LLVM 3.4.1 has been released!&amp;nbsp; This is a bug-fix release that contains fixes for the AArch64, ARM, PowerPC, R600, and X86 targets as well as a number of other fixes in the core libraries.&lt;br />&lt;br />The LLVM and Clang core libraries in this release are API and ABI compatible with LLVM 3.4, so projects that make use of the LLVM and Clang API and libraries will not need to make any changes in order to take advantage of the 3.4.1 release.&lt;br />&lt;br />Bug-fix releases like this are very important for the project, because they help get critical fixes to users faster than the typical 6 month release cycle, and also make it easier for operating system distributors who in the past have had to track and apply bug fixes on their own.&lt;br />&lt;br />A lot of work went into this release, and special thanks should be given to all the testers who helped to qualify the release:&lt;br />&lt;br />Renato Golin&lt;br />Sebastian Dreßler&lt;br />Ben Pope&lt;br />Arnaud Allard de Grandmaison&lt;br />Erik Verbruggen&lt;br />Hal Finkel&lt;br />Nikola Smiljanic&lt;br />Hans Wennborg&lt;br />Sylvestre Ledru&lt;br />David Fang&lt;br />&lt;br />In addition there were a number community members who spent time tracking down bugs and helping to resolve merge conflicts in the 3.4 branch.&amp;nbsp; This is what made this release possible, so thanks to everyone&lt;br />else who helped.&lt;br />&lt;br />I would like to keep the trend of stable releases going to 3.5.x and beyond (Maybe even 3.4.2 if there is enough interest), but this can only be&lt;br />done with the help of the community.&amp;nbsp; If you would like to help with the next stable release or even regular release, then the next time you see a proposed release schedule on the mailing list, let the release manager know you can help.&amp;nbsp; We can never have too many volunteers.&lt;br />&lt;br />Thanks again to everyone who helped make this release possible.&lt;br />&lt;br />-Tom&lt;br />&lt;br />&lt;br />&lt;br />&lt;br />&lt;br /></description></item><item><title>LLVM Weekly - #18, May 5th 2014</title><link>https://blog.llvm.org/2014/05/llvm-weekly-18-may-5th-2014.html</link><pubDate>Mon, 05 May 2014 09:01:00 +0000</pubDate><guid>https://blog.llvm.org/2014/05/llvm-weekly-18-may-5th-2014.html</guid><description>&lt;p>Welcome to the eighteenth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>I'm going to be in the San Francisco area May 13th-20th with some other Raspberry Pi people. We'll be at Maker Faire Bay Area on the 17th and 18th. Let me know if there's anything else I should check out while over there.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/18">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Andrew Ruef has written a blog post about &lt;a href="http://blog.trailofbits.com/2014/04/27/using-static-analysis-and-clang-to-find-heartbleed/">using static analysis and Clang to find the SSL heartbleed bug&lt;/a>. The code for the checker described in the blog post is &lt;a href="https://github.com/awruef/find-heartbleed">available on Github&lt;/a>.&lt;/p>&lt;p>The FTL ('Fourth tier LLVM') Javascript JIT is &lt;a href="https://trac.webkit.org/changeset/167958">now enabled in WebKit for Mac&lt;/a>. The WebKit Wiki has &lt;a href="https://trac.webkit.org/wiki/FTLJIT">more information&lt;/a>. I haven't seen any public benchmark figures. Please do share if you have any.&lt;/p>&lt;p>Eli Bendersky has written an article about &lt;a href="http://eli.thegreenplace.net/2014/05/01/modern-source-to-source-transformation-with-clang-and-libtooling/">how to use libTooling to implement source to source transformations&lt;/a>.&lt;/p>&lt;p>The next &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/3828">Paris LLVM Social&lt;/a> will take place on May 5th (i.e. this evening).&lt;/p>&lt;p>The LLVM Bay Area social &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/36443">will take place on May 8th&lt;/a>. Please RSVP if you are interested.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Discussion is still going on regarding &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72466">last week's proposal to add intrinsics for safe division&lt;/a>. Philip Reames has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72588">shared his reasoning againt the proposal&lt;/a>. This triggered a &lt;em>lot&lt;/em> of discussion which is unfortunately more than I have time to summarise.&lt;/p>&lt;/li>&lt;li>&lt;p>Kevin Modzelewski is working on exceptions for Pyston, the LLVM-based Python JIT and &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72668">asks for advice/experiences on how others have implemented them in projects like VMKit&lt;/a>. There are a number of useful responses.&lt;/p>&lt;/li>&lt;li>&lt;p>Alp Toker &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.scm/97880">suggests adding a coding style policy to discourage excessive use of default arguments&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Yi Kong has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72598">suggested improvements to LNT for benchmarking&lt;/a>. One of the concerns raised in followup responses is that benchmark results may not be stable and may take too long to be practical on e.g. ARM hardware. Chris Matthews suggests &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72619">performing a geometric mean similar to the SPEC benchmarks&lt;/a> as an alternative to a plain total execution time metric.&lt;/p>&lt;/li>&lt;li>&lt;p>Dario Domizioli has &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/36314">posted an RFC for an optnone pragma&lt;/a>. This proposal triggered robust discussion about whether there is any advantage to supporting this in addition to the optnone function attribute, though it seems as though there is enough support for the feature for it to make its way in.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The patch to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72366">perform common subexpression elimination for a group of getelementptrs&lt;/a> that was discussed a couple of weeks ago has been merged. It is currently only enabled for the NVPTX backend. &lt;a href="http://reviews.llvm.org/rL207783">r207783&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>X86 code generation has been implemented for the musttail function attribute. &lt;a href="http://reviews.llvm.org/rL207598">r207598&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Pass run listeners were added to the pass manager. This adds C/C++ APIs to enable fine-grain progress report and safe suspension points. See the commit message for more info &lt;a href="http://reviews.llvm.org/rL207430">r207430&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The optimisation remark system has started to be used, with calls to emitOptimizationRemark added to the loop unroller and vectorizer. &lt;a href="http://reviews.llvm.org/rL207528">r207528&lt;/a>, &lt;a href="http://reviews.llvm.org/rL207574">r207574&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The SLPVectorizer gained the ability to recognize and vectorize intrinsic math functions. &lt;a href="http://reviews.llvm.org/rL207901">r207901&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>NRVO (named return value optimisation) determination was rewritten. According to the commit message, "a variable now has NRVO applied if and only if every return statement in that scope returns that variable." Also, NRVO is performed roughly 7% more often in a bootstrap clang build. &lt;a href="http://reviews.llvm.org/rL207890">r207890&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>libclang's documentation comment API has been split in to a separate header. &lt;a href="http://reviews.llvm.org/rL207392">r207392&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The SLPVectorizer (superword-level parallelism) is now disabled at O0, O1 and Oz. &lt;a href="http://reviews.llvm.org/rL207433">r207433&lt;/a>. It was later re-enabled at Oz. &lt;a href="http://reviews.llvm.org/rL207858">r207858&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The libclang API now supports attributes 'pure', 'const', and 'noduplicate'. &lt;a href="http://reviews.llvm.org/rL207767">r207767&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The comment parser no longer attempts to validate HTML attributes (the previous solution was insufficient). &lt;a href="http://reviews.llvm.org/rL207712">r207712&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>&lt;code>R_MIPS_REL32&lt;/code> relocation are now supported in lld. &lt;a href="http://reviews.llvm.org/rL207494">r207494&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A collection of CTRL+C related issues were fixed in lldb. &lt;a href="http://reviews.llvm.org/rL207816">r207816&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #17, Apr 28th 2014</title><link>https://blog.llvm.org/2014/04/llvm-weekly-17-apr-28th-2014.html</link><pubDate>Mon, 28 Apr 2014 07:50:00 +0000</pubDate><guid>https://blog.llvm.org/2014/04/llvm-weekly-17-apr-28th-2014.html</guid><description>&lt;p>Welcome to the 17th issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>Last week I wondered why the GCC logo is a &lt;a href="http://commons.wikimedia.org/wiki/File:GNU_Compiler_Collection_logo.svg">GNU leaping out of an egg&lt;/a>. Thank you to everyone who wrote in to let me know it is a reference to EGCS. GCC was of course famously forked as EGCS which was later merged back in. Apparently this was pronounced by some as "eggs". Mystery solved.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/17">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>GCC 4.9.0 was &lt;a href="http://gcc.gnu.org/ml/gcc/2014-04/msg00195.html">released last Tuesday&lt;/a>. See &lt;a href="http://gcc.gnu.org/gcc-4.9/changes.html">here&lt;/a> for more detailed notes on changes in this release.&lt;/p>&lt;p>Honza Hubička wrote a blog post on the &lt;a href="http://hubicka.blogspot.co.uk/2014/04/linktime-optimization-in-gcc-1-brief.html">history of linktime optimisation in GCC&lt;/a>, which was followed by a post containing a &lt;a href="http://hubicka.blogspot.ca/2014/04/linktime-optimization-in-gcc-2-firefox.html">benchmark comparison of LTO in GCC vs LLVM&lt;/a>.&lt;/p>&lt;p>On Twitter, @lambdamix drew my attention to &lt;a href="http://www.cs.umb.edu/~offner/files/flow_graph.pdf">Notes on Graph Algorithms Used in Optimizing Compilers&lt;/a> (PDF). I imagine it will be of interest to many LLVM Weekly readers.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Michael Zolotukhin &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72466">proposes extending LLVM IR with new intrinsics for safe division&lt;/a>. These join the existing intrinsics for addition with overflow. Filip Pizlo follows up with a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72510">description of how it would be used for various potential language frontends&lt;/a>. Michael has also posted a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72533">detailed justification in answer to concerns raised&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>James Molloy &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.cvs/185388/">shares an updated on the AArch64 to ARM64 merge&lt;/a>, including time estimates for remaining tasks. The initial merge should be complete before LLVM 3.5. Additionally, Ana Pazos has gained permission to share &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72454/">relative SPEC2000 figures for ARM64 vs AArch64&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Sylvestre Ledru &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/36229">proposes removing outdated marketing material from the Clang website&lt;/a>. In particular, the performance comparisons are with GCC 4.0 or 4.2 which is of course rather outdated, particularly given how GCC has improved since then.&lt;/p>&lt;/li>&lt;li>&lt;p>Kostya Serebryany reports that &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/36234">AddressSanitizer and LeakSanitizer are finding many many leaks within Clang&lt;/a>. The bug tracking this is &lt;a href="http://llvm.org/bugs/show_bug.cgi?id=19521">#19521&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Tom Stellard has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72524">kicked off the second testing phase for LLVM and Clang 3.4.1&lt;/a>. This is expected to be the last release candidate, so 3.4.1 shouldn't be far away.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The 'musttail' marker which was &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71775">proposed several weeks ago&lt;/a> has been added. Unlike the 'tail' marker, musttail guarantees that tail call optimization will occur. Check the documentation added in the commit for a more detailed explanation. &lt;a href="http://reviews.llvm.org/rL207143">r207143&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The rewrite of BlockFrequencyInfo finally landed. A description of the advantages of the new algorithm is in the original commit message, &lt;a href="http://reviews.llvm.org/rL206548">r206548&lt;/a>. After a series of bounces, it landed in &lt;a href="http://reviews.llvm.org/rL206766">r206766&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM can now generate PE/COFF object files targeting 'Windows on ARM'. &lt;a href="http://reviews.llvm.org/rL207345">r207345&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A CallGraph strongly connected components pass manager has been added making use of the new LazyCallGraph analysis framework. This is part of the new pass manager work Chandler Carruth has been working on and is of course a work in progress. &lt;a href="http://reviews.llvm.org/rL206745">r206745&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The scheduler model for the Intel Silvermont microarchitecture has been replaced. The commit message claims substantial improvements on integer tests. I'm assuming RAL in this context refers to RegAllocLocal? &lt;a href="http://reviews.llvm.org/rL206957">r206957&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>ARM64 has of course seen a large number of changes. Among those, support for feature predicates for NEON/FP/CYPTO instructions. This allows the compiler to generate code without using those instructions. &lt;a href="http://reviews.llvm.org/rL206949">r206949&lt;/a>. Additionally, there is now a big endian version of the ARM64 target machine. &lt;a href="http://reviews.llvm.org/rL206965">r206965&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>getFileOffset has been dropped from LLVM's C API. Justification is in the commit message. &lt;a href="http://reviews.llvm.org/rL206750">r206750&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LoopVectorize pass now keeps statistics on the number of analyzed loops and the number of vectorized loops. &lt;a href="http://reviews.llvm.org/rL206956">r206956&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The x86 backend gained new intrinsics for Read Time Stamp Counter. &lt;a href="http://reviews.llvm.org/rL207127">r207127&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Initial work on mutation support for the lazy call graph has landed. As with most of Chandler's commits, there's much more information in the commit message. &lt;a href="http://reviews.llvm.org/rL206968">r206968&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MCTargetOptions has been introduced, which for now only contains a single flag. SanitizeAddress enabled AddressSanitizer instrumentation of inline assembly. &lt;a href="http://reviews.llvm.org/rL206971">r206971&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-cov now supports gcov's &lt;code>--long-file-names&lt;/code> option. &lt;a href="http://reviews.llvm.org/rL207035">r207035&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Documentation for sample profiling was added. &lt;a href="http://reviews.llvm.org/rL206994">r206994&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for parsing the linear clause for the 'omp simd' directive was added. &lt;a href="http://reviews.llvm.org/rL206891">r206891&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang gained support for the &lt;code>-fmodules-search-all&lt;/code> option, which searches for symbols in non-imported modules (i.e. those referenced in module maps but not imported). &lt;a href="http://reviews.llvm.org/rL206977">r206977&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul> &lt;li>&lt;p>AddressSanitizer gained an experimental detector for "one definition rule" violations (where two globals with the same name are defined in different modules). &lt;a href="http://reviews.llvm.org/rL207210">r207210&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #16, Apr 21st 2014</title><link>https://blog.llvm.org/2014/04/llvm-weekly-16-apr-21st-2014.html</link><pubDate>Mon, 21 Apr 2014 05:46:00 +0000</pubDate><guid>https://blog.llvm.org/2014/04/llvm-weekly-16-apr-21st-2014.html</guid><description>&lt;p>Welcome to the 16th issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>Apologies that last week's LLVM Weekly went out twice via email. Mailgun have the useful ability to schedule an email for the future, but when this is done incorrectly have no ability to cancel it via the API. Possibly there is no way for them to cancel it either, I have no way to know as my support ticket on the issue was never answered.&lt;/p>&lt;p>Seeing as it's Easter, does anybody know why GCC has a &lt;a href="http://commons.wikimedia.org/wiki/File:GNU_Compiler_Collection_logo.svg">GNU breaking out of an egg as a logo&lt;/a>?&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/16">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The new backend to &lt;a href="https://github.com/kripken/emscripten">Emscripten&lt;/a> which is implemented as an LLVM backend has &lt;a href="https://groups.google.com/forum/#!topic/emscripten-discuss/FACubOKw2TI">now been merged to Emscripten's master branch&lt;/a>. This should result in a noticeable speedup in compile times.&lt;/p>&lt;p>Phoronix have published a &lt;a href="http://www.phoronix.com/scan.php?page=article&amp;amp;item=gcc49_compiler_llvm35&amp;amp;num=1">small set of benchmarks comparing GCC 4.9RC1 and Clang 3.5 HEAD&lt;/a>.&lt;/p>&lt;p>Diego Novillo has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72199">announced AutoFDO&lt;/a>, a tool which will convert profile data generated with &lt;a href="https://perf.wiki.kernel.org">Linux Perf&lt;/a> to a format compatible with LLVM's sample-based profiler.&lt;/p>&lt;p>The Polly project have &lt;a href="https://docs.google.com/document/d/14d3ehkh3/edit">minutes from another phone call&lt;/a>, this time focusing on delinearization.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Jingyue Wu &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72366">shares an initial patch for common sub-expression elimination (CSE) for getelementptr&lt;/a>. He and his colleagues had found that with the NVPTX backend, loop unrolling often lead to groups of getelementptr instructions which added to register pressure, but that these could often to optimised with some simple CSE. Feedback so far is positive on including something like this is a target-independent pass, though there's interest in seeing whether it helps on any other backends with open source benchmarks.&lt;/p>&lt;/li>&lt;li>&lt;p>Austin Seipp has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72374">revived the issue of named register variables&lt;/a>. He adds perspective on the the utility of this feature for the Glasgow Haskell Compiler (GHC). They are currently suffering a large performance loss on OS X with clang due to the inability to dedicate a register for fast access to thread-local storage. Renato Golin &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72378">followed up&lt;/a> with how he thinks it is best to move forwards on the issue, while Mark Seaborn &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72375">shared a neat trick the NaCl team use&lt;/a> where they inline &lt;code>pthread_getspecific&lt;/code> after verifying it contains the code they expect.&lt;/p>&lt;/li>&lt;li>&lt;p>Kostya Serebryany &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72247">shares his concerns about contention between threads on access to profile counters&lt;/a>. For a multi-threaded VP9 encoder, he's seeing 7x overhead when running with &lt;code>-fprofile-instr-generate&lt;/code> vs 15% when single-threaded. There's too much for me to summarise, but there's a lot of discussion on potential solutions which the interested reader should certainly take a look at.&lt;/p>&lt;/li>&lt;li>&lt;p>Dan Gohman answers a question about LLVM IR access to struct fields with a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72331">concise summary of how alias analysis information is currently used in LLVM&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Richard Carback is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72201">seeking feedback on his TableGen DAGISel documentation&lt;/a>. His &lt;a href="https://github.com/draperlaboratory/fracture/wiki/How-TableGen%27s-DAGISel-Backend-Works">notes&lt;/a> seem like a great start at documenting what has been up till now one of the more mysterious parts of LLVM. Particularly those who have experience with this code are encouraged to check the document for accuracy.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLVM's internal BumpPtrAllocator has been switched to using a vector of pointers to slabs rather than a single linked list and the underlying allocator is now a template parameter. &lt;a href="http://reviews.llvm.org/rL206147">r206147&lt;/a>, &lt;a href="http://reviews.llvm.org/rL206149">r206149&lt;/a>. The allocator can now also pass the size to the deallocation function, which improves performance with some libraries (e.g. tcmalloc). &lt;a href="http://reviews.llvm.org/rL20265">r206265&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for building persistent strongly connected components has been added to the LazyCallGraph. There are detailed comments on the reasoning of this approach and some details on implementation in the commit message. &lt;a href="http://reviews.llvm.org/rL206581">r206581&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Constant hoisting has been enabled on PowerPC. &lt;a href="http://reviews.llvm.org/rL206141">r206141&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>PseudoSourceValue is no longer a subclass of Value. &lt;a href="http://reviews.llvm.org/rL206255">r206255&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A DebugInfoVerifier has been implemented. &lt;a href="http://reviews.llvm.org/rL206300">r206300&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MIPS gained initial support for the IEEE 754-2008 NaN encoding. &lt;a href="http://reviews.llvm.org/rL202812">r206396&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>OnDiskHashTable has been moved from Clang to LLVM. &lt;a href="http://reviews.llvm.org/rL206438">r206438&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>ARM's IR-based atomics pass has been moved from Target to CodeGen, which allows it to be used by ARM64. &lt;a href="http://reviews.llvm.org/rL206485">r206485&lt;/a>, &lt;a href="http://reviews.llvm.org/rL206490">r206490&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Module verification is now off by default in release builds for the JIT, but this can be overridden. &lt;a href="http://reviews.llvm.org/rL206561">r206561&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Cortex-A53 machine model description has been ported from AArch64 to ARM64. &lt;a href="http://reviews.llvm.org/rL206652">r206652&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>There is now a new hash algorithm for calculating the function hash for instruction profiling, rewritten to help ensure the hash changes when control flow does. &lt;a href="http://reviews.llvm.org/rL206397">r206397&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The thread safety analysis SSA pass has been rewritten. &lt;a href="http://reviews.llvm.org/rL206338">r206338&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for big endian ARM64 was added to Targets.cpp. &lt;a href="http://reviews.llvm.org/rL206390">r206390&lt;/a>. It is also now possible to disable NEON and crypto support for ARM64. &lt;a href="http://reviews.llvm.org/rL206394">r206394&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>LLD now supports &lt;code>--defsym=&amp;lt;symbol&amp;gt;=&amp;lt;symbol&amp;gt;&lt;/code>, as supported by GNU LD. &lt;a href="http://reviews.llvm.org/rL206417">r206417&lt;/a>.&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #15, Apr 14th 2014</title><link>https://blog.llvm.org/2014/04/llvm-weekly-15-apr-14th-2014.html</link><pubDate>Mon, 14 Apr 2014 07:54:00 +0000</pubDate><guid>https://blog.llvm.org/2014/04/llvm-weekly-15-apr-14th-2014.html</guid><description>&lt;p>Welcome to the 15th issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/15">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Videos are not yet ready, but &lt;a href="http://llvm.org/devmtg/2014-04/">most slides from last week's EuroLLVM meeting are now up&lt;/a>.&lt;/p>&lt;p>ARM have &lt;a href="http://www.arm.com/about/newsroom/arm-compiler-builds-on-open-source-llvm-technology.php">announced&lt;/a> the release of version 6 of the ARM compiler, which is now built on LLVM and Clang.&lt;/p>&lt;p>Philip Reames has &lt;a href="http://www.philipreames.com/Blog/2014/04/10/late-safepoint-placement-an-update/">written an update on his work on late safepoint placement&lt;/a>, which is useful for implementing efficient precise garbage collection on LLVM. The bad news is their initial plan did not survive contact with the enemy, though they're hard at work on fixing it and a new update can be expected in good time.&lt;/p>&lt;p>As &lt;a href="http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=MTY2MjY">reported by Phoronix&lt;/a>, a number of patches towards the goal of compiling the Linux kernel with clang have been &lt;a href="http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=09c9b61d5da24174b867a6ffda29b7435e1fda74">merged&lt;/a> by Linus.&lt;/p>&lt;p>The first release candidate of GCC 4.9 has been &lt;a href="http://article.gmane.org/gmane.comp.gcc.devel/135468">released&lt;/a>. New features in the 4.9 branch are &lt;a href="http://gcc.gnu.org/gcc-4.9/changes.html">documented here&lt;/a>.&lt;/p>&lt;p>Polly had a meeting via phone call, and &lt;a href="https://docs.google.com/document/d/12W-qZjiZGEQ_lVrob4OzvKJI3EooonC-ap1b9f9KCUE/edit">notes of that meeting are available&lt;/a>. The part of most general interest is probably discussion around the potential of merging Polly into the LLVM mainline.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>LLVM 3.4.1 has now &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72127">entered the testing phase&lt;/a> and help testing the release would be greatly appreciated.&lt;/p>&lt;/li>&lt;li>&lt;p>Tim Northover has [summarised the discussion about merging AArch64 and ARM64 from EuroLLVM]. The view is still in favour of merging from AArch64 to ARM64. Interestingly, &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71996">apparently&lt;/a> Google are working on a framework to build and run benchmarks (something different to &lt;a href="http://llvm.org/docs/lnt/">LNT&lt;/a> I guess). Also of interest are [benchmarks of ARM64 LLVM vs AArch64 LLVM vs GCC 4.9] on Cortex-A53. There's now a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72133">somewhat detailed plan for the merge&lt;/a> and remaining tasks.&lt;/p>&lt;/li>&lt;li>&lt;p>Alon Zakai has shared &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71989">some details on his work on a C backend for Emscripten&lt;/a>. Right now he describes it as a 'quick hack', though current performance seems quite good with only a 19% slowdown on zlib. The current version of the code is in emscripten's &lt;a href="https://github.com/kripken/emscripten/tree/c_backend">&lt;code>c_backend&lt;/code> branch&lt;/a> (in &lt;code>tools/c_backend.py&lt;/code>).&lt;/p>&lt;/li>&lt;li>&lt;p>David Blaikie started a discussion about &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/36014">debug info for captured variables in a C++11 lambda&lt;/a>. There's too much here for me to comfortably summarise, but do dig in if you're interested.&lt;/p>&lt;/li>&lt;li>&lt;p>Jim Grosbach suggests &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71992">low-level tools like llc should not do CPU auto-detection&lt;/a>. There's general agreement that this is a good idea and will help to avoid the problem of tests failing on one machine but not another due to this auto-detection. The change has now been merged.&lt;/p>&lt;/li>&lt;li>&lt;p>Jonas Wagner &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72036">shared his workflow using a gold linker plugin to link LLVM bitcode&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Will Dietz &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72019">responded&lt;/a> to a query about unexpected code generation with a great analysis of what may be going on.&lt;/p>&lt;/li>&lt;li>&lt;p>Robert Matusewicz is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/72083">looking for interest in keeping the poolalloc project alive&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The NVPTX backend gained preliminary intrinsics and codegen support for textures and surfaces. &lt;a href="http://reviews.llvm.org/rL205907">r205907&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for optimisation report diagnostics was added. This starts to implement the idea &lt;a href="https://docs.google.com/document/d/1FYUatSjZZO-zmFBxjOiuOzAy9mhHA8hqdvklZv68WuQ/edit#heading=h.qk42du84eyjg">documented and discussed previously&lt;/a>. In the future it will be possible to get a report of the major optimization decisions taken by compiler transformations. &lt;a href="http://reviews.llvm.org/rL205774">r205774&lt;/a>, &lt;a href="http://reviews.llvm.org/rL205775">r205775&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The merge of AArch64 and ARM4 continues. Named immediate operand mapping logic and enums have been copied from AArch64 to ARM64. &lt;a href="http://reviews.llvm.org/rL205866">r205866&lt;/a>. The ARM64 backend has seen a large series of smaller commits as well.&lt;/p>&lt;/li>&lt;li>&lt;p>Constant hoisting is now enabled for the ARM64 backend. &lt;a href="http://reviews.llvm.org/rL205791">r205791&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Previously, optimisation logic in CodeGenPrepare that tried to merge address computation in to the memory operation itself (when supported by the platform's addressing modes) would do so by adding integer operations and using ptrtoint and inttoptr. This caused issues when trying to use alias analysis during CodeGen. There is now opt-in support for doing this using GetElementPtr. &lt;a href="http://reviews.llvm.org/rL206092">r206092&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The debug info compression support introduced two weeks ago was reverted, and replaced with a new implementation that compresses the whole section rather than a fragment. &lt;a href="http://reviews.llvm.org/rL205989">r205989&lt;/a>, &lt;a href="http://reviews.llvm.org/rL205990">r205990&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The segmented stack switch has been moved to a function attribute and the old &lt;code>-segmented-stacks&lt;/code> command line flag removed. &lt;a href="http://reviews.llvm.org/rL205997">r205997&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A major refactoring of the thread safety analysis has been started. &lt;a href="http://reviews.llvm.org/rL205728">r205728&lt;/a>, &lt;a href="http://reviews.llvm.org/rL205745">r205745&lt;/a>, and more.&lt;/p>&lt;/li>&lt;li>&lt;p>libclang gained a &lt;code>clang_CXXMethod_isConst&lt;/code> method. &lt;a href="http://reviews.llvm.org/rL205714">r205714&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>As part of the ongoing project to support the MSVC++ ABI, support for &lt;code>#pragma section&lt;/code> and related programs was added. &lt;a href="http://reviews.llvm.org/rL205810">r205810&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>New command line options were added to support big or little endian for ARM and AArch64. &lt;a href="http://reviews.llvm.org/rL205966">r205966&lt;/a>, &lt;a href="http://reviews.llvm.org/rL205907">r205967&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>The openmp project gained the offload directory, which contains code needed to support OpenMP 4.0 target directives. &lt;a href="http://reviews.llvm.org/rL205909">r205909&lt;/a>.&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #14, Apr 7th 2014</title><link>https://blog.llvm.org/2014/04/llvm-weekly-14-apr-7th-2014.html</link><pubDate>Mon, 07 Apr 2014 06:47:00 +0000</pubDate><guid>https://blog.llvm.org/2014/04/llvm-weekly-14-apr-7th-2014.html</guid><description>&lt;p>Welcome to the fourteenth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>There seems to have been a flood of LLVM-related news this week, hopefully I've managed to collect it all. If you're in London next week, you might be interested in attending &lt;a href="http://www.meetup.com/X-Dev-London/events/174666532/">my introductory LLVM talk&lt;/a> on Wednesday. Abstract is &lt;a href="http://pastebin.com/StSzTzMv">here&lt;/a>.&lt;/p>&lt;p>EuroLLVM is of course taking place on Monday and Tuesday of this week. Sadly I won't be in attendance. If anyone is blogging the event, please do send me links.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/14">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The LLVM-related news that has made the biggest splash this week is surely the &lt;a href="https://tech.dropbox.com/2014/04/introducing-pyston-an-upcoming-jit-based-python-implementation/">announcement of Pyston, a JIT for Python targeting LLVM&lt;/a>. More technical details are &lt;a href="https://github.com/dropbox/pyston#technical-features">available on the Github repo&lt;/a>. For many this immediately conjures up memories of the &lt;a href="http://code.google.com/p/unladen-swallow/">Unladen Swallow project&lt;/a>, started by Google engineers with the same aim of JITting Python with LLVM. That project was eventually unsuccessful, but it's unfair to the authors of Pyston to assume it will have the same fate. It's unclear how much developer time Dropbox are contributing to Pyston. They clearly have a lot of work to do, though it's no secret that &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2013-October/066573.html">Apple are also looking to target LLVM from JavaScript&lt;/a> which means they're not the only developers working in this area. Kevin Modzelewski &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71870">shared some more info&lt;/a> on the LLVM mailing list which details some of the LLVM work they've implemented so far (including some initial escape analysis for GCed memory).&lt;/p>&lt;p>An independent, non-profit LLVM Foundation &lt;a href="http://blog.llvm.org/2014/04/the-llvm-foundation.html">is to be formed&lt;/a>. As a vendor neutral organisation it will represent the community interest and aims to be set up by the end of the year.The initial board of directors will be Vikram Adve, Chandler Carruth, Doug Gregor, David Kipping, Anton Korobeynikov, Chris Lattner, Tanya Lattner, and Alex Rosenberg.&lt;/p>&lt;p>Rust 0.10 &lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-April/009387.html">has been released&lt;/a>. See also the discussion on &lt;a href="https://news.ycombinator.com/item?id=7524945">Hacker News&lt;/a> and &lt;a href="http://www.reddit.com/r/programming/comments/224gh3/rust_010_released/">Reddit&lt;/a>. Rust is a systems programming language from Mozilla which uses LLVM as its code generator backend.&lt;/p>&lt;p>The &lt;a href="http://dagger.repzret.org/">Dagger&lt;/a> LLVM-based decompilation framework has &lt;a href="http://dagger.repzret.org/update-a-sneak-peek-of-the-source/">released its source&lt;/a> as well as publishing a series of five articles documenting its implementation approach and documenting the next steps or 'TODOs'.&lt;/p>&lt;p>An &lt;a href="https://github.com/AccelerateHS/accelerate-llvm">LLVM backend for the Accelerate Array Language&lt;/a> has been released. It compiles Accelerate code to LLVM IR and can target multicore CPUs as well as NVIDIA GPUs.&lt;/p>&lt;p>The &lt;a href="https://github.com/gannimo/MalDiv/raw/master/paper/talk_payerm_syscan14.pdf">PDF slides&lt;/a>for a recent talk about the LLVM-based &lt;a href="https://github.com/gannimo/MalDiv">MalDiv&lt;/a> diversifying compiler have been published. Such a tool effectively defeats signature-based matching of malware.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>James Molloy from ARM has been looking at the recently open sourced ARM64 backend from Apple, and has come to the conclusion that &lt;a href="article.gmane.org/gmane.comp.compilers.llvm.devel/71737">it's easier to use ARM64 as a base an merge in from AArch64&lt;/a>. The key justification is that ARM64 backend is more performant but has some correctness issues, and porting performance fixes is more difficult than correctness. There seems to be agreement from the followup responses. Bradley Smith reports &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71861">good progress on fixing observed correctness issues and some interesting performance results&lt;/a>. Of interest to those attending EuroLLVM this week, there will be discussions on Monday and after the main conference on Wednesday (details &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71947">here&lt;/a>).&lt;/p>&lt;/li>&lt;li>&lt;p>Requests for patches to be included in LLVM/Clang 3.4.1 have started to come in. These include &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71788">a large number of AArch64 patches&lt;/a> (plus &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71849">another&lt;/a>), plus some &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71809">assorted bugfixes&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Reid Kleckner has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71775">proposed a new tail call marker&lt;/a>, 'musttail' which guarantees that tail call optimization will occur.&lt;/p>&lt;/li>&lt;li>&lt;p>Shankar Easwaran starts a discussion on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71852">adding support to lld for demangling symbols&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Jeroen Dobbelaere has an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71881">interesting problem&lt;/a> with an architecture he is targeting. The architecture has 64-bit registers, but the pointer size is always 32-bits. JF Bastien suggests &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71923">this is similar to PNaCl and the x32 ABI&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Peter Collingbourne &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71773">proposes an IR extension for loads/stores with deterministic trap/unwind behaviour&lt;/a>. The aim is to support zero cost exception handling for operations that may trap. The proposal comes with initial patches, though Andrew Trick &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71934">questions whether adding new IR instructions is the right approach&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM project Phabricator instance has &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/35992">been moved to reviews.llvm.org&lt;/a>. Currently links to the old one are broken, but hopefully a redirect will be set up. By the time you read this I should have updated all broken links from llvmweekly.org.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>MipsAsmParser and MipsOperand was rewritten. The improvements are documented in the commit message. &lt;a href="http://reviews.llvm.org/rL205292">r205292&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The ARM backend gained support for segmented stacks. &lt;a href="http://reviews.llvm.org/rL205430">r205430&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Windows on ARM support is now possible with the MachineCode layer. &lt;a href="http://reviews.llvm.org/rL205459">r205459&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>TargetLowering gained a hook to control when &lt;code>BUILD_VECTOR&lt;/code> might be expanded using shuffles. &lt;a href="http://reviews.llvm.org/rL205230">r205230&lt;/a>. Targets might choose to use ExpandBVWithShuffles which was added in a later commit. &lt;a href="http://reviews.llvm.org/rL205243">r205243&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>X86TargetTransformInfo gained getUnrollingPreferences, which is used by the generic loop unroller. This helps to optimise use of the micro-op caches on X86. This produced 7.5%-15% speedups in the TSVC benchmark suite. &lt;a href="http://reviews.llvm.org/rL205348">r205348&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>ARM gained a nice little optimisation pass that removes duplicated DMB instructions. &lt;a href="http://reviews.llvm.org/rL205409">r205409&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Atomic ldrex/strex loops are now expanded in IR rather than at MachineInstr emission time. This cleans up code, but should also make future optimisations easier. &lt;a href="http://reviews.llvm.org/rL205525">r205525&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The clang static analyzer gained double-unlock detection in PthreadLockChecker, as well as a check for using locks after they are destroyed. &lt;a href="http://reviews.llvm.org/rL205274">r205274&lt;/a>, &lt;a href="http://reviews.llvm.org/rL205275">r205275&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The OpenMP 'copyin' clause was implemented. &lt;a href="http://reviews.llvm.org/rL205164">r205164&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The 'optnone' attribute was added, which suppresses most optimisations on a function. &lt;a href="http://reviews.llvm.org/rL205255">r205255&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The heuristics for choosing methods to suggest as corrections were improved, to ignore methods that obviously won't work. &lt;a href="http://reviews.llvm.org/rL205653">r205653&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The 'BitwiseConstraintManager' idea was added to the open projects page. &lt;a href="http://reviews.llvm.org/rL205666">r205666&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>AddressSanitizer can now be used as a shared library on Linux. &lt;a href="http://reviews.llvm.org/rL205308">r205308&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>compiler-rt gained support for IEEE754 quad precision comparison functions. &lt;a href="http://reviews.llvm.org/rL205312">r205312&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lld now supports &lt;code>.gnu.linkonce&lt;/code> sections. &lt;a href="http://reviews.llvm.org/rL205280">r205280&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>The LLVM Foundation</title><link>https://blog.llvm.org/2014/04/the-llvm-foundation.html</link><pubDate>Thu, 03 Apr 2014 09:02:00 +0000</pubDate><guid>https://blog.llvm.org/2014/04/the-llvm-foundation.html</guid><description>&lt;br />&lt;div>The LLVM umbrella project has grown over the years into a vibrant community made up of many sub-projects, with hundreds of contributors. &amp;nbsp;The results of this project are used by millions of people every day. &amp;nbsp;Today, I'm happy to announce that we are taking the next big step, and forming a new, independent non-profit to represent the community interest. &amp;nbsp;"The LLVM Foundation" will allow us to:&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>&amp;nbsp;- Solve infrastructure problems.&lt;/div>&lt;div>&amp;nbsp;- Address financial challenges around the developer meetings and infrastructure expenses.&lt;/div>&lt;div>&amp;nbsp;- Deliver improved transparency into operational and policy matters&lt;/div>&lt;div>&amp;nbsp;- Provide a company-neutral organization to help ensure success well into the future.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>We are working towards a goal of having this organization functioning by the end of the year, possibly sooner.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>In terms of structure, we expect the foundation to be lean: an oversight board of volunteers and a dedicated administrator. &amp;nbsp;The expectations of this administrator will be to oversee long-overdue upgrades to our infrastructure (such as the web site design, bug database, mailing lists, etc), organize the US LLVM Developer Meeting, and drive the formation of the foundation itself. &amp;nbsp;We do not expect significant change to our developer policies (i.e. licensing &amp;amp; copyright). &amp;nbsp;Our system of domain-expert "code owners" will continue to drive the technical direction of their areas. &amp;nbsp;As an LLVM contributor, the biggest changes that you can expect to see are things operating more smoothly and infrastructure issues getting the attention they deserve.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>Tanya Lattner has been spearheading the formation of the Foundation and has graciously agreed to take on the administrator role. &amp;nbsp;Tanya has been actively involved in LLVM since 2003. &amp;nbsp;Many of you know Tanya from her LLVM community involvement such as organizing the US LLVM Developer Meetings and management of the website and other infrastructure. &amp;nbsp;She implemented Swing Modulo Scheduling in LLVM for her Masters thesis at UIUC, served as the release manager from LLVM 1.7 through 2.7, and in a commercial setting she implemented LLVM based optimization tools and contributed to an LLVM-based OpenCL implementation.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>We have also been quietly speaking with members of the community, working to select a diverse board of directors, that accurately reflects the community’s interests. &amp;nbsp;We looked to active members of the community, representing both academic and commercial interests, people from organizations that contribute to the developer meeting and testing infrastructure, and technical leads from some of the prominent LLVM sub-projects. &amp;nbsp;We sought diversity in the board, while trying to keep it small enough to be nimble. &amp;nbsp;The initial board of directors will be:&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>Vikram Adve&lt;/div>&lt;div>&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>Chandler Carruth&lt;/div>&lt;div>&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>Doug Gregor&lt;/div>&lt;div>&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>David Kipping&lt;/div>&lt;div>&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>Anton Korobeynikov&lt;/div>&lt;div>&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>Chris Lattner&lt;/div>&lt;div>&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>Tanya Lattner&lt;/div>&lt;div>&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>Alex Rosenberg&lt;/div>&lt;div>&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>&lt;/div>&lt;div>I expect that there will be many questions and comments. &amp;nbsp;The foundation is intended to represent the interests of the community, so please send questions to the &lt;a href="http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev">LLVMdev mailing list&lt;/a>. &amp;nbsp;More information will be coming over the next few months as things progress.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>-Chris&lt;/div>&lt;div>&lt;br />&lt;/div></description></item><item><title>LLVM Weekly - #13, Mar 31st 2014</title><link>https://blog.llvm.org/2014/03/llvm-weekly-13-mar-31st-2014.html</link><pubDate>Mon, 31 Mar 2014 07:39:00 +0000</pubDate><guid>https://blog.llvm.org/2014/03/llvm-weekly-13-mar-31st-2014.html</guid><description>&lt;p>Welcome to the thirteenth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>Thanks in no small part to a &lt;a href="http://www.raspberrypi.org/archives/6535">mention on the Raspberry Pi blog&lt;/a>, &lt;a href="http://www.amazon.co.uk/Learning-Python-Raspberry-Alex-Bradbury/dp/1118717058/">Learning Python with Raspberry Pi&lt;/a> by myself and Ben Everard is at the time of writing #1 in the Programming books section on Amaon UK. Also, keep your eyes on the &lt;a href="http://www.meetup.com/X-Dev-London/">X-Dev London meetup page&lt;/a> as I'm expecting to give an LLVM-related talk there on the 9th April, though it's not listed yet and is subject to change.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/13">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>It's only a week to go until &lt;a href="http://llvm.org/devmtg/2014-04/">EuroLLVM 2014&lt;/a>, which wil be held in Edinburgh on the 7th and 8th of April. Tragically I'm not going to be there as I'm trying to focus on getting my PhD finished, but the schedule looks fantastic.&lt;/p>&lt;p>The Linux Collaboration Summit featured an update on progress of the LLVMLinux project to build the Linux kernel using LLVM/Clang (&lt;a href="http://events.linuxfoundation.org/sites/events/files/slides/2014-Collab-LLVMLinux.pdf">slides&lt;/a>). As of right now, there are approximately 48 kernel patches still working their way upstream for the project.&lt;/p>&lt;p>John Regehr has written an interesting blog post on the subject of &lt;a href="http://blog.regehr.org/archives/1122">using Z3 to prove some things about LLVM optimisations&lt;/a>.&lt;/p>&lt;p>Facebook have &lt;a href="https://code.facebook.com/posts/476987592402291/under-the-hood-warp-a-fast-c-and-c-preprocessor/">released the Warp C and C++ preprocessor&lt;/a>, written in D. It claims to benchmark much faster than GCC's preprocessor resulting in faster build times, though a &lt;a href="https://news.ycombinator.com/item?id=7489532">quick comparison with Clang&lt;/a> didn't show it in a favourable light speed-wise.&lt;/p>&lt;p>Meeting C++ have published a helpful summary of &lt;a href="http://meetingcpp.com/index.php/br/items/cpp-status.html">what might make its way in to C++17 or C++1y&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Apple are &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71638">contributing their 64-bit ARM backend upstream&lt;/a>. Initially, this will co-exist with the current AArch64 backend (the Apple implementation is called ARM64), and over time the backends will be merged.&lt;/p>&lt;/li>&lt;li>&lt;p>Tom Stellard has [announced a tentative release schedule for LLVM and Clang 3.4.1] and is searching for volunteers to test, as well as nominations for patches that should be included. The proposed schedule is Mar 26 - April 9: Identify and backport additional bug fixes to the 3.4 branch. April 9 - April 18: Testing Phase April 18: 3.4.1 Release&lt;/p>&lt;/li>&lt;li>&lt;p>Frank Winter started a discussion on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71487">how to specify the alignment of a pointer in LLVM IR&lt;/a>, which yields some interesting responses.&lt;/p>&lt;/li>&lt;li>&lt;p>Renato Golin kicked off a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71567">discussion about supporting named registers in LLVM/Clang&lt;/a>. This is a GNU extension not currently supported. There seemed to be some agreement that this is worth supporting, which resulted in a follow-on thread on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71625">how to implement support for named registers&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/35858">query from Geoffrey Irving&lt;/a> about how to safely make use of floating point rounding mode resulted in an interesting discussion about how a changing rounding modes could be supported. For example, with the introduction of a &lt;code>fp_rounding_sensitive&lt;/code> annotation.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The ARM big-endian targets armeb and thumbeb have been added. &lt;a href="http://reviews.llvm.org/rL205007">r205007&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Apple's ARM64 backend has been merged, and will for a time live side-by-side with the existing AArch64 backend (see 'on the mailing lists' for more details). &lt;a href="http://reviews.llvm.org/rL205090">r205090&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>@llvm.clear_cache&lt;/code> builtin has been born. &lt;a href="http://reviews.llvm.org/rL204802">r204802&lt;/a>, &lt;a href="http://reviews.llvm.org/rL204806">r204806&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Windows target triple spellings have been canonicalised. See the commit for full details, but in short i686-pc-win32 is now i686-pc-windows-msvc, i686-pc-mingw32 is now i686-pc-windows-gnu and i686-pc-cygwin is now i686-pc-windows-cygnus. &lt;a href="http://reviews.llvm.org/rL204977">r204977&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The first step towards little-endian code generation for PowerPC has been committed. This initial patch allows the PowerPC backend to produce little-endian ELF objects. &lt;a href="http://reviews.llvm.org/rL204634">r204634&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Another LLVM optimisation pass has been fixed to be address space aware, and will no longer perform an addrspacecast. &lt;a href="http://reviews.llvm.org/rL204733">r204733&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>It is now disallowed for an alias to point to a weak alias. &lt;a href="http://reviews.llvm.org/rL204934">r204934&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>CloneFunctions will now clone all attributes, including the calling convention.&lt;a href="http://reviews.llvm.org/rL204866">r204866&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>DebugInfo gained support for compressed debug info sections. &lt;a href="http://reviews.llvm.org/rL204958">r204958&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The static analyzer is now aware of &lt;code>M_ZERO&lt;/code> and &lt;code>__GFP_ZERO&lt;/code> flags for kernel mallocs. &lt;a href="http://reviews.llvm.org/rL204832">r204832&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang learned how to de-duplicate string the MSVC way. &lt;a href="http://reviews.llvm.org/rL204675">r204675&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Capability attributes can be declared on a typedef declaration as well as a structure declaration. &lt;a href="http://reviews.llvm.org/rL204657">r204657&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;code>module.private.modulemap&lt;/code> and &lt;code>module_private.map&lt;/code> are now documented. &lt;a href="http://reviews.llvm.org/rL205030">r205030&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang's CodeGen module now allows different RTTI emission strategies. This was added for ARM64. &lt;a href="http://reviews.llvm.org/rL205101">r205101&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>ThreadSanitizer has new benchmarks for synchronization handling. &lt;a href="http://reviews.llvm.org/rL204608">r204608&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Initial infrastructure for IEEE quad precision was added to compiler-rt. &lt;a href="http://reviews.llvm.org/rL204999">r204999&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLD gained the &lt;code>--allow-multiple-definition&lt;/code> and &lt;code>--defsym&lt;/code> options. &lt;a href="http://reviews.llvm.org/rL205015">r205015&lt;/a>, &lt;a href="http://reviews.llvm.org/rL205029">r205029&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>In LLDB, JITed function can now have debug info and be debugged with debug and source info. &lt;a href="http://reviews.llvm.org/rL204682">r204682&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>ThreadSanitizer vector clock operations have been optimized and are now O(1) for several important use cases. &lt;a href="http://reviews.llvm.org/rL204656">r204656&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #12, Mar 24th 2014</title><link>https://blog.llvm.org/2014/03/llvm-weekly-12-mar-24th-2014.html</link><pubDate>Mon, 24 Mar 2014 07:47:00 +0000</pubDate><guid>https://blog.llvm.org/2014/03/llvm-weekly-12-mar-24th-2014.html</guid><description>&lt;p>Welcome to the twelfth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/12">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;ul>&lt;li>&lt;p>You may recall my previous coverage of efforts by Philip Reames and others to introduce necessary changes to LLVM to support a precise relocating garbage collector. Previously he &lt;a href="http://www.philipreames.com/Blog/2014/02/21/why-not-use-gcroot/">described the issues of using the llvm.gcroot intrinsic&lt;/a>. True to his word, he's followed up that post with a description of '&lt;a href="http://www.philipreames.com/Blog/2014/03/18/late-safepoint-placement-overview/">late safepoint placement&lt;/a>', which is the approach Philip and his colleagues are working on to address the problem. More updates are promised over the next few weeks.&lt;/p>&lt;/li>&lt;li>&lt;p>musl libc 1.0.0 &lt;a href="http://www.musl-libc.org/download.html">has been released&lt;/a>. It is an MIT-licensed libc aiming to compete with glibc. "musl is a new general-purpose implementation of the C library. It is lightweight, fast, simple, free, and aims to be correct in the sense of standards-conformance and safety."&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;a href="http://erllvm.softlab.ntua.gr/">LLVM backend for the HiPE Erlang compiler&lt;/a> has been &lt;a href="https://github.com/erlang/otp/commit/9d46875b53ffb21bc55aec4a2c76472133ea5d1c">merged&lt;/a> in to the Erlang/OTP master branch.&lt;/p>&lt;/li>&lt;li>&lt;p>The 'Mystical Programming blog' has an amusing article on &lt;a href="http://mysticalprogramming.wordpress.com/2014/03/19/how-to-abuse-a-cpp-compiler/">non-terminating C++ template computations&lt;/a> along with information on how GCC and Clang handle each example.&lt;/p>&lt;/li>&lt;li>&lt;p>Meeting C++ have written up a &lt;a href="http://meetingcpp.com/index.php/br/items/looking-at-c14.html">list of things likely to make their way in to C++14&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;a href="http://www.ceemple.com/what-is-ceemple/">Ceemple&lt;/a>, an LLVM-based product for technical computing, has been released. It's marketed as offering a number of advantages over Python or MATLAB in this space.&lt;/p>&lt;/li>&lt;li>&lt;p>The next Cambridge LLVM Social will &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71338">take place on the 26th March, 7.30pm&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>David Given is working on an architecture that uses integer registers to store floating point values, and &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71368">asks for advice&lt;/a> on how to represent this in tablegen without being stopped dead by "cannot infer all types in pattern" errors.&lt;/p>&lt;/li>&lt;li>&lt;p>Renato Golin has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71340">kicked off another thread on unwinding and exception handling and function attributes&lt;/a>. He's done a fantastic job of summarising the issues and proposal on moving forward which means I don't have to feel lazy by suggesting you just go read the thread if you're interested.&lt;/p>&lt;/li>&lt;li>&lt;p>Arch Robinson asks the list for &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71307">advice on improving the SLPVectorizer in order to help with Julia code he's looking at&lt;/a>. The &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71308">response&lt;/a> from Arnold Schwaighofer is worth a read for anyone interested in hacking in this area.&lt;/p>&lt;/li>&lt;li>&lt;p>Discussion about a binary format for instrumentation-based profiling data has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71306">continued&lt;/a>, with the suggestion that the format written out by instrumentation need not be the same as the format read back by the compiler (it could be transformed by other tools). Justin Bogner has detailed &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71434">proposed requirements&lt;/a> for these formats.&lt;/p>&lt;/li>&lt;li>&lt;p>Tim Hill started an interesting discussion by &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/35755">sharing his experiences from switching to Clang&lt;/a>. Among the positives were excellent errors, the static analyzer, compatibility, and quality of generated code. The main negative is the lack of documentation for many compiler options. There's general agreement in the responses that this is a problem that should be fixed in the (hopefully not too distant) future.&lt;/p>&lt;/li>&lt;li>&lt;p>Lang Hames has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71352">proposed an RFC on adding an empty method to &lt;code>iterator_range&lt;/code>&lt;/a>. If debating API design is your cup of tea, prepare to be entertained.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The MIPS64r2-based Octeon CPU has been added. &lt;a href="http://reviews.llvm.org/rL204337">r204337&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The ProfileData library, &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71179">discussed last week&lt;/a> was committed. &lt;a href="http://reviews.llvm.org/rL204482">r204482&lt;/a>, &lt;a href="http://reviews.llvm.org/rL204489">r204489&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The constant hoisting pass saw some refactoring and improvements. &lt;a href="http://reviews.llvm.org/rL204431">r204431&lt;/a>, &lt;a href="http://reviews.llvm.org/rL204433">r204433&lt;/a>, &lt;a href="http://reviews.llvm.org/rL204435">r204435&lt;/a>, &lt;a href="http://reviews.llvm.org/rL204537">r204537&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The ARM integrated assembler learned how to handle the &lt;code>.thumb_set&lt;/code> directive. &lt;a href="http://reviews.llvm.org/rL204059">r204059&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Assembler directives were added to create version-min load commands for iOS or Mac OSX. e.g. &lt;code>.ios_version_min 5,2,0&lt;/code>. &lt;a href="http://reviews.llvm.org/rL204190">r204190&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>It is now possible to specify the 'noduplicate' attribution for intrinsics. &lt;a href="http://reviews.llvm.org/rL204200">r204200&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The TableGen backends documentation was fleshed out a bit. &lt;a href="http://reviews.llvm.org/rL204479">r204479&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Scheduling annotations have been added to NEON AArch64 instructions. &lt;a href="http://reviews.llvm.org/rL204505">r204505&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Counters used in instrumentation-based profiling are now represented in a static array. This is the first commit of a larger project to reduce runtime overhead (initialization in particular) for instrumentation-based profiling. &lt;a href="http://reviews.llvm.org/rL204080">r204080&lt;/a>. Other commits for instrumentation-based profiling include &lt;a href="http://reviews.llvm.org/rL204186">r204186&lt;/a>, &lt;a href="http://reviews.llvm.org/rL204379">r204379&lt;/a>, &lt;a href="http://reviews.llvm.org/rL204390">r204390&lt;/a>. There's a matching set of commits in compiler-rt.&lt;/p>&lt;/li>&lt;li>&lt;p>The deprecated &lt;code>-faddress-sanitizer&lt;/code>, &lt;code>-fthread-sanitizer&lt;/code>, and &lt;code>-fcatch-undefined-behavior&lt;/code> flags were removed. Users whould use &lt;code>-fsanitize=&lt;/code> instead. &lt;a href="http://reviews.llvm.org/rL204330">r204330&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for parsing the OpenMP safelen clause (for 'omp simd') was committed. &lt;a href="http://reviews.llvm.org/rL204428">r204428&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Support was added to MemorySanitizer for 'advanced origin tracking', which records all locations where an uninitialized value is stored to memory rather than just the creation point. &lt;a href="http://reviews.llvm.org/rL204152">r204152&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The lldb backtrace view has been changed to a process view where you can expand the process, its threads, and see all frames under each thread. &lt;a href="http://reviews.llvm.org/rL204251">r204251&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>In compiler-rt, Google have re-licensed the Android ucontext implementation under the standard dual license of compiler-rt. &lt;a href="http://reviews.llvm.org/rL204128">r204128&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #11, Mar 17th 2014</title><link>https://blog.llvm.org/2014/03/llvm-weekly-11-mar-17th-2014.html</link><pubDate>Mon, 17 Mar 2014 08:23:00 +0000</pubDate><guid>https://blog.llvm.org/2014/03/llvm-weekly-11-mar-17th-2014.html</guid><description>&lt;p>Welcome to the eleventh issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>It seems an extra comma slipped in to my bio in &lt;a href="http://www.amazon.co.uk/Learning-Python-Raspberry-Alex-Bradbury/dp/1118717058/">Learning Python with Raspberry Pi&lt;/a> (&lt;a href="http://www.amazon.com/Learning-Python-Raspberry-Alex-Bradbury/dp/1118717058/">US&lt;/a>) meaning rather than being described as a "compiler hacker, ...", I am a "compiler, hacker, Linux geek, and Free Software enthusiast". It's therefore official, I am a compiler. Presumably this makes me uniquely suited to writing LLVM Weekly.&lt;/p>&lt;p>Previously I've only linked to internship opportunities rather than job ads. I'd be interested in how readers feel about linking to job ads looking for someone with LLVM experience? Do let me know via email or Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/11">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;ul>&lt;li>&lt;p>LLVM's popular &lt;a href="http://llvm.org/docs/tutorial/">'Kaleidoscope' tutorial&lt;/a> on implementing a language with LLVM has been &lt;a href="https://github.com/hobinjk/rusty-kaleidoscope">ported to Rust&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;a href="http://llvm.org/devmtg/2014-04/#callfor">programme for EuroLLVM 2014&lt;/a> has been announced. EuroLLVM will be taking place in Edinburgh, Scotland on the 7th and 8th of April. At the time of writing, there are still some spaces available.&lt;/p>&lt;/li>&lt;li>&lt;p>The PNaCl 'canary' toolchain is &lt;a href="https://groups.google.com/forum/#!topic/native-client-discuss/qkahSDf5lrM">now based on LLVM 3.4&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;a href="http://software.intel.com/sites/landingpage/IntrinsicsGuide/">Intel intrinsics guide&lt;/a> is a useful reference for the massive variety of specialised functionality available on modern Intel CPUs.&lt;/p>&lt;/li>&lt;li>&lt;p>Broadcom Cambridge are &lt;a href="http://jobs.broadcom.com/job/Cambridge-Engineer%2C-Principal-LLVM-Compiler-Engineer/30894500/">looking for an LLVM compiler engineer&lt;/a>. See the job ad for more details.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>The optimization report functionality that was &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70998">discussed last week&lt;/a> now has a &lt;a href="https://docs.google.com/document/d/1FYUatSjZZO-zmFBxjOiuOzAy9mhHA8hqdvklZv68WuQ/edit">more complete proposal&lt;/a> about exactly how it would work.&lt;/p>&lt;/li>&lt;li>&lt;p>There's some useful information in &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71070">this thread about evaluating LLVM's register allocators&lt;/a>, in particular how to ensure all register allocators are linked in to the clang binary.&lt;/p>&lt;/li>&lt;li>&lt;p>David Majinemer has posted on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71123">RFC on providing section declarations in LLVM IR&lt;/a>. Currently the section attribute can be used on GlobalVariables and Functions, but as pointed out in the RFC this has issues. Another key motivator is to support the representation of the Microsoft ABI's RTTI (runtime type information) data.&lt;/p>&lt;/li>&lt;li>&lt;p>Justin Bogner has posted two profiling-related RFCs. The first is related to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71179">creating a LLVM library for reading and writing profile data&lt;/a>. He also proposes a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71190">binary format for instrumentation-based profiling data&lt;/a> as opposed to the naive textual format currently used. A library to work with a proposed binary profile data format was actually &lt;a href="http://reviews.llvm.org/rL203703">commited this week&lt;/a>, but the commit was reverted in order for more discussion to take place.&lt;/p>&lt;/li>&lt;li>&lt;p>Mike McFadden's &lt;a href="https://github.com/BonzaiThePenguin/WikiSort">detailed write-up of his implementation of an in-place merge sort&lt;/a> has been making the rounds on Reddit and Hacker News this week. He &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/35668">posted to the clang mailing list&lt;/a> to ask whether there's someone in particular to speak to about using his implementation to replace libcxx's current &lt;code>inplace_stable_sort&lt;/code> (which his implementation beats by 3-15x). No responses to his &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.scm/94723">post to cfe-commits&lt;/a> yet.&lt;/p>&lt;/li>&lt;li>&lt;p>Mikael Persson has announced to the mailing list that &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/35656">he has been continuing work on the Templight debugger&lt;/a>, and attaches a revised version of the Templight patch. &lt;a href="http://plc.inf.elte.hu/templight/">Templight&lt;/a> is a debugger and profiler for C++ template meta-programming. The main addition to the previous official release is that Mikael has added a gdb-style debugger.&lt;/p>&lt;/li>&lt;li>&lt;p>Rudolphe Suescun's question about &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71138">whether lld is ready for his project&lt;/a> prompted some interesting replies detailing current status and gaps in the LLVM linker, lld. In particular, the current lack of support for linker scripts and lack of support for merge debug info when linking.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>I don't believe I made mention of this last week, but it's been decided that virtual methods that override their base class should be marked with the &lt;code>override&lt;/code> keyword (and that the &lt;code>virtual&lt;/code> keyword would then be considered redundant). &lt;a href="http://reviews.llvm.org/rL203433">r203433&lt;/a>, &lt;a href="http://reviews.llvm.org/rL203442">r203442&lt;/a>, and others.&lt;/p>&lt;/li>&lt;li>&lt;p>Support for NaCl support on MIPS developed, with the addition of sandboxing for loads, stores, stack pointer changes, and function calls. &lt;a href="http://reviews.llvm.org/rL203484">r203484&lt;/a>, &lt;a href="http://reviews.llvm.org/rL203606">r203606&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>As discussed in an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71039">RFC last week&lt;/a>, cmpxchg now has a second ordering operand which describes the required semantics in case no exchange takes place. &lt;a href="http://reviews.llvm.org/rL203559">r203559&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>An optimisation was added so that switch-to-lookup-table conversion can be done by adding a bitmask check. An example is given in the commit message. &lt;a href="http://reviews.llvm.org/rL203694">r203694&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The sample LLVM project has been removed. It has bitrotted over time and doesn't include CMake support at a time that LLVM is moving away from autoconf/automake. &lt;a href="http://reviews.llvm.org/rL203728">r203729&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The PowerPC backend learned basic support for the VSX instruction set extensions. &lt;a href="http://reviews.llvm.org/rL203768">r203768&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The merging of a patchset to improve MergeFunctions time complexity from &lt;code>O(N*N)&lt;/code> to &lt;code>O(N*log(N))&lt;/code>. &lt;a href="http://reviews.llvm.org/rL203788">r203788&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MachineRegisterInfo has been undergoing some major refactoring in order to allow the use of C++11 range-based for loops. &lt;a href="http://reviews.llvm.org/rL203865">r203865&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>linker_private&lt;/code> and &lt;code>linker_private_weak&lt;/code> linkage types were removed. &lt;a href="http://reviews.llvm.org/rL203866">r203866&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Clang will now produce a warning when an invalid ordering is passed to one of the atomic builtins. &lt;a href="http://reviews.llvm.org/rL203561">r203561&lt;/a>, &lt;a href="http://reviews.llvm.org/rL203564">r203564&lt;/a>..&lt;/p>&lt;/li>&lt;li>&lt;p>In the world of profile guided optimisation (PGO), PGO counters are now scaled down to 32 bits when necessary instead of just truncated. &lt;a href="http://reviews.llvm.org/rL203592">r203592&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The static analyzer gained support for detecting when passing pointers to const but uninitialized memory. &lt;a href="http://reviews.llvm.org/rL203822">r203822&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>-Wunreachable-code&lt;/code> diagnostic has been broken up into different diagnostic groups to provide access to unreachable code checks for cases where the default heuristics of &lt;code>-Wunreachable-code&lt;/code> aren't enough. &lt;a href="http://reviews.llvm.org/rL203994">r203994&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>lld now has a todo list containing a listing of missing GNU ld command line options. &lt;a href="http://reviews.llvm.org/rL203491">r203491&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lldb saw some reworking on how the ShouldStopHere mechanism works. This allows a mode where stepping out of a frame into a frame with no debug information will continue stepping until it arrives at a frame that does have deug information. &lt;a href="http://reviews.llvm.org/rL203747">r203747&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Polly build system has been updated so the Makefile builds a single monolithic LLVMPolly.so. &lt;a href="http://reviews.llvm.org/rL203952">r203952&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #10, Mar 10th 2014</title><link>https://blog.llvm.org/2014/03/llvm-weekly-10-mar-10th-2014.html</link><pubDate>Mon, 10 Mar 2014 07:43:00 +0000</pubDate><guid>https://blog.llvm.org/2014/03/llvm-weekly-10-mar-10th-2014.html</guid><description>&lt;p>Welcome to the tenth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>This week the book I authored in collaboration with &lt;a href="https://twitter.com/ben_everard">Ben Everard&lt;/a>, &lt;a href="http://www.amazon.co.uk/Learning-Python-Raspberry-Alex-Bradbury/dp/1118717058">Learning Python with Raspberry Pi&lt;/a> (&lt;a href="http://www.amazon.com/Learning-Python-Raspberry-Alex-Bradbury/dp/1118717058/">Amazon US&lt;/a>) is officially released.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/10">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>John Regehr has written a blog post detailing &lt;a href="http://blog.regehr.org/archives/1109">some ideas for implementing a superoptimizer for LLVM&lt;/a>. There's some good stuff in the comments too.&lt;/p>&lt;p>Version 2.1 of the Capstone disassembly framework has &lt;a href="http://www.capstone-engine.org/Version-2.1.html">been released&lt;/a>. Library size is about 40% smaller, memory usage is down 40% and there are performance improvements as well.&lt;/p>&lt;p>Facebook have released &lt;a href="https://github.com/facebook/chisel">Chisel&lt;/a>, a collection of LLDB commands to assist debugging iOS apps.&lt;/p>&lt;p>A &lt;a href="https://github.com/gilligan/vim-lldb">fork of vim-lldb&lt;/a>, the LLDB plugin for Vim included in the lldb repo has appeared. Changes so far have been relatively minor.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Probably one of the most interesting discussions on the mailing list this week came from Mark Seaborn's &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70908">questions about upstreaming PNaCl's IR simplification passes&lt;/a>. Both PNaCl and the new Emscripten fastcomp backend make use of a series of out-of-tree IR-to-IR passes that simplify the IR by lowering complex to simpler features. The suggestion is to upstream these so that everyone can benefit. Chandler Carruth &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70918">raises concerns&lt;/a> that these passes might bitrot without any in-tree users, suggesting that the PNaCl and Emscripten communities could do more to contribute to upstream LLVM and that such a track record would help ease that concern. There are a number of people chiming in to say they would find the functionality useful.&lt;/p>&lt;/li>&lt;li>&lt;p>Diego Novillo asks &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70998">whether people would be interested in an optimization report facility&lt;/a>. This would give useful information about the decisions taken by various optimisers, which might be useful when investigating why code doesn't perform as expected and in finding missed optimisations. Unsurprisingly, everyone thinks this would be a good feature. Diego promises to write some more detailed, concrete proposals in the coming days now it's clear people like the general idea.&lt;/p>&lt;/li>&lt;li>&lt;p>Kev Kitchens &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70896">asks about cross-compiling compiler-rt&lt;/a>. Vadim Chugunov helpfully points to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70902">his work on Rust's fork of compiler-rt&lt;/a> to support this. It's also pointed out in the thread that support for unwinding actually lives in libc++abi rather than in a separate libunwind where you might expect to find it.&lt;/p>&lt;/li>&lt;li>&lt;p>There's a pretty &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/35446">long discussion on naming for reverse iterators and other issues&lt;/a> which should make entertaining reading for anyone who enjoys bikeshedding (not that there's anything wrong with it, there's some good discussion of API naming principles there).&lt;/p>&lt;/li>&lt;li>&lt;p>Tim Northover has shared an RFC (with initial patch) on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/71039">adding a second ordering operand to cmpxchg&lt;/a> which which indicates the failure ordering.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>A new implementation of PBQP (partitioned boolean quadratic programming)-based register allocator landed. &lt;a href="http://reviews.llvm.org/rL202735">r202735&lt;/a>. The original commit (&lt;a href="http://reviews.llvm.org/rL202551">r202551&lt;/a>) message details the changes, including massively reduced memory consumption. Average memory reduction is claimed to be 400x. The tagline is "PBQP: No longer feasting upon every last byte of your RAM".&lt;/p>&lt;/li>&lt;li>&lt;p>AArch64 gained a machine description for Cortex-A53, which involved giving all non-NEON instructions scheduling annotations. &lt;a href="http://reviews.llvm.org/rL203125">r203125&lt;/a>. REVERTED&lt;/p>&lt;/li>&lt;li>&lt;p>The SPARC backend gained support for the VIS SIMD instruction set extensions. &lt;a href="http://reviews.llvm.org/rL202660">r202660&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>A whole bunch of classes moved around, with the intention that LLVM's support library will work when building with C++ modules. &lt;a href="http://reviews.llvm.org/rL202814">r202814&lt;/a> and many others. InstIterator, GetElementPtrTypeIterator, CallSite, PatternMatch, ValueHandle, ValueMap, CFG, ConstantFolder, NoFolder, PredIteratorCache, ConstantRange, PassNameParser, and LeakDetector moved from Support to IR.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>PROLOG_LABEL&lt;/code> TargetOpcode was replaced with &lt;code>CFI_INSTRUCTION&lt;/code> which is intended to have simpler semantics and be less convoluted to use. See the commit message for more details. &lt;a href="http://reviews.llvm.org/rL203024">r203204&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Uses of &lt;code>OwningPtr&amp;lt;T&amp;gt;&lt;/code> were replaced with &lt;code>std::unique_ptr&amp;lt;T&amp;gt;&lt;/code>. &lt;a href="http://reviews.llvm.org/rL203083">r203083&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>inalloca&lt;/code> grammar was cleaned up. &lt;a href="http://reviews.llvm.org/rL203376">r203376&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The PGO (profile-guided optimisation) code got some minor refactoring in preparation for handling non-C/C++ code, and initial suport for Objective-C blocks. &lt;a href="http://reviews.llvm.org/rL203073">r203073&lt;/a>, &lt;a href="http://reviews.llvm.org/rL203157">r203157&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Module dependences are now included in the dependency files created by &lt;code>-MD/-MMD&lt;/code> etc. &lt;a href="http://reviews.llvm.org/rL203208">r203208&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>-Wunreachable-code&lt;/code> option no longer warns about dead code guarded by a configuration value. &lt;a href="http://reviews.llvm.org/rL202912">r202912&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The MSVC mangling scheme is not used for statics or types which aren't visible. &lt;a href="http://reviews.llvm.org/rL202951">r202951&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLDB now supported JIT debugging on Linux using the GDB JIT interface. &lt;a href="http://reviews.llvm.org/rL202956">r202956&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Polly started emitting llvm.loop metadata for parallel loops. &lt;a href="http://reviews.llvm.org/rL202854">r202854&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>In compiler-rt, assembler implementations of &lt;code>__sync_fetch_and_*&lt;/code> for ARM were committed. &lt;a href="http://reviews.llvm.org/rL202812">r202812&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The level of windows support in LLD has been documented. &lt;a href="http://reviews.llvm.org/rL203017">r203017&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #9, Mar 3rd 2014</title><link>https://blog.llvm.org/2014/03/llvm-weekly-9-mar-3rd-2014.html</link><pubDate>Mon, 03 Mar 2014 05:43:00 +0000</pubDate><guid>https://blog.llvm.org/2014/03/llvm-weekly-9-mar-3rd-2014.html</guid><description>&lt;p>Welcome to the ninth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>As well as growing another year older last week, I've also started publicising the book I authored with &lt;a href="https://twitter.com/ben_everard">Ben Everard&lt;/a>, &lt;a href="http://www.amazon.co.uk/Learning-Python-Raspberry-Alex-Bradbury/dp/1118717058">Learning Python with Raspberry Pi&lt;/a> (&lt;a href="http://www.amazon.com/Learning-Python-Raspberry-Alex-Bradbury/dp/1118717058/">Amazon US&lt;/a>) which should ship soon in paperback or is available right now for Kindle. Hopefully it should be available soon in DRM-free digital formats on oreilly.com. I will be putting more of my Raspberry Pi exploits and tutorials on &lt;a href="http://muxup.com">muxup.com&lt;/a>, so if that interests you follow &lt;a href="https://twitter.com/muxup">@muxup&lt;/a>.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/9">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The list of &lt;a href="https://www.google-melange.com/gsoc/org/list/public/google/gsoc2014">mentoring organisations for Google Summer of Code 2014&lt;/a> has been released. LLVM is one of them, so any budding compiler engineers who qualify may want to check out the &lt;a href="http://llvm.org/OpenProjects.html">ideas page&lt;/a>. Other organisations I spotted advertising relevant project ideas are &lt;a href="http://llvm.linuxfoundation.org/index.php/GSoC">the Linux Foundation&lt;/a>, &lt;a href="http://www.x.org/wiki/SummerOfCodeIdeas/">X.org&lt;/a> and of course &lt;a href="http://gcc.gnu.org/wiki/SummerOfCode">GCC&lt;/a>.&lt;/p>&lt;p>At the end of last week, Broadcom made a major step forward in &lt;a href="http://blog.broadcom.com/chip-design/android-for-all-broadcom-gives-developers-keys-to-the-videocore-kingdom/">announcing the release of full register level documentation for the VideoCore IV graphics engine&lt;/a> as well as full graphics driver source. The device most well-known for featuring VideoCore IV is the &lt;a href="http://www.raspberrypi.org/archives/6299">Raspberry Pi&lt;/a>. The released documentation opens the door to producing something similar to the &lt;a href="http://www.raspberrypi.org/archives/5934">GPU-accelerated FFT library&lt;/a> support that was recently released. Some readers of LLVM Weekly may of course be interested in using this information to produce an LLVM backend. Hopefully the following pointers will help. There are lots of resources linked to at the homepage of the &lt;a href="https://github.com/hermanhermitage/videocoreiv">VideoCore IV reverse engineering project&lt;/a>. I'd draw particular attention to the &lt;a href="https://github.com/hermanhermitage/videocoreiv-qpu">QPU reverse engineering effort&lt;/a> which contains good information despite the reverse engineering part of the work being made unnecessary by the Broadcom release. You may want to check out the &lt;a href="http://www.freelists.org/archive/raspi-internals/">raspi-internals mailing list&lt;/a> and &lt;code>#raspberrypi-internals&lt;/code> on Freenode. It's also worth looking at &lt;a href="https://github.com/hermanhermitage/videocoreiv-qpu/tree/master/qpu-fft">the commented disassembly of the VideoCore FFT code&lt;/a> and Herman Hermitage's work in progress &lt;a href="https://github.com/hermanhermitage/videocoreiv-qpu/tree/master/qpu-tutorial">QPU tutorial&lt;/a>.&lt;/p>&lt;p>Code for &lt;a href="https://github.com/draperlaboratory/fracture">Fracture&lt;/a>, an architecture-independent decompiler to LLVM IR has been released.&lt;/p>&lt;p>Olivier Goffart has written about &lt;a href="http://woboq.com/blog/moc-with-clang.html">his proof of concept reimplementation of Qt's moc using libclang&lt;/a>. It's actually from last year, but it's new to me.&lt;/p>&lt;p>Alex Denisov has written a &lt;a href="http://railsware.com/blog/2014/02/28/creation-and-using-clang-plugin-with-xcode/">guide to writing a clang plugin&lt;/a>. He gives an example of a minimal plugin that complains about lowercased Objective C class names.&lt;/p>&lt;p>Coursera are re-running &lt;a href="https://www.coursera.org/course/compilers">their compilers course&lt;/a> on March the 17th. See &lt;a href="http://dirkjan.ochtman.nl/writing/2012/07/21/compilers-on-coursera.html">Dirkjan Ochtman's impressions of the course from the previous run&lt;/a>.&lt;/p>&lt;p>The Qualcomm LLVM team are &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70655">advertising for an intern&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Denis Steckelmacher &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70671">kicked off a discussion about the suggested GSoC project to use LLVM for code generation&lt;/a>. There are particularly interesting replies from &lt;a href="http://article.gmane.org/gmane.comp.debugging.valgrind.devel/26122">Kirill Batuzov&lt;/a> and &lt;a href="http://article.gmane.org/gmane.comp.debugging.valgrind.devel/26124">Julian Seward&lt;/a> who elaborate on why it's not a case of 'just use LLVM and it will be fast' as well as suggesting some changes that could be made to increase Valgrind's speed.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70836">announces he has flipped the switch for C++11 support on the build systems&lt;/a>. I, for one, welcome our new C++11 overloards.&lt;/p>&lt;/li>&lt;li>&lt;p>For those interested in the issues of supporting precise GC on LLVM, see the discussion surrounding Philip Reames' &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70724">question on representing a safepoint&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Alp Toker &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70714">proposed a way to move forward with the LLVM OpenMP runtime&lt;/a>. The main issue right now is there is no real test suite. Alp's suggestion is to organise a few days effort to adapt the libgomp test suite (to be hosted externally, due to licensing reasons).&lt;/p>&lt;/li>&lt;li>&lt;p>Jasper Neumann &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70789">suggested a cunning optimisation&lt;/a> for checking the modulus. Benjamin Kramer explains the difficulty of integrating such an optimisation in to the peephole optimiser.&lt;/p>&lt;/li>&lt;li>&lt;p>Nico Weber &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/35267">suggests a Clang warning that fires on unexpected indentation levels&lt;/a>. He has &lt;a href="http://llvm.org/bugs/show_bug.cgi?id=18938">prototype implementation&lt;/a> up on the bugtracker.&lt;/p>&lt;/li>&lt;li>&lt;p>Saleem Abdulrasool has &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/35268">suggested adding a macro that indicates the LLVM integrated assembler is being used&lt;/a>. Respondents to the thread so far aren't keen on the idea, pointing out that projects should really check whether a certain syntax or feature they need works rather than marking themselves incompatible with the LLVM integrated assembler which may of course improve compatibility in the future.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LLVM grew a big-endian AArch64 target &lt;a href="http://reviews.llvm.org/rL202024">r202024&lt;/a>. Some might consider it a step back, but apparently there's a decent number of people interested in big-endian on AArch64. There's an interesting &lt;a href="http://www.linux-kvm.org/wiki/images/c/c4/Kvm-forum-2013-crossing-the-endianness-bridge.pdf">presentation from ARM&lt;/a> about running a virtualised BE guest on a LE host.&lt;/p>&lt;/li>&lt;li>&lt;p>The flipping of the C++11 switch has allowed a number of simplifications to start to make their way in to the LLVM codebase. For instance, turning simple functors in to lambdas. Like or loathe C++11 lambda syntax, they're certainly less verbose. &lt;a href="http://reviews.llvm.org/rL202588">r202588&lt;/a>. &lt;code>OwningPtr&amp;lt;T&amp;gt;&lt;/code> gained support for being converted to and from &lt;code>std::unique_ptr&amp;lt;T&amp;gt;&lt;/code>, which lays the ground for LLVM moving to using &lt;code>std::unique_ptr&lt;/code> in the future. &lt;a href="http://reviews.llvm.org/rL202609">r202609&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The coding standards document was updated to reflect the C++11 features that can now be used in the LLVM/Clang codebase and to provide guidance on their use. &lt;a href="http://reviews.llvm.org/rL202497">r202497&lt;/a>, &lt;a href="http://reviews.llvm.org/rL202620">r202620&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The loop vectorizer is now included in the LTO optimisation pipeline by default. &lt;a href="http://reviews.llvm.org/rL202051">r202051&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>DataLayout has been converted to be a plain object rather than a pass. A DataLayoutPass which holds a DataLayout has been introduced. &lt;a href="http://reviews.llvm.org/rL202168">r202168&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The PowerPC backend learned to track condition register bits, which produced measurable speedups (10-35%) for the POWER7 benchmark suite. &lt;a href="http://reviews.llvm.org/rL202451">r202451&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>X86 SSE-related instructions gained a scheduling model. Sadly there is no indication whether this makes any measurable difference to common benchmarks. &lt;a href="http://reviews.llvm.org/rL202065">r202065&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The scalar replacement of aggregates pass (SROA) got a number of refactorings and bug fixes from Chandler Carruth, including some bug fixes for handling pointers from address spaces other than the default. &lt;a href="http://reviews.llvm.org/rL202092">r202092&lt;/a>, &lt;a href="http://reviews.llvm.org/rL202247">r202247&lt;/a>, and more.&lt;/p>&lt;/li>&lt;li>&lt;p>An experimental implementation of an invalid-pointer-pair detector was added as part of AddressSanitizer. This attempts to identify when two unrelated pointers are compared or subtracted. &lt;a href="http://reviews.llvm.org/rL202389">r202389&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Shed a tear, for libtool has been removed from the LLVM build system. The commit says it was only being used to find the shared library extension and nm. The diffstat of 93 insertions and 35277 deletions speaks for itself. &lt;a href="http://reviews.llvm.org/rL202524">r202524&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The initial changes needed for &lt;code>omp simd&lt;/code> directive support were landed. &lt;a href="http://reviews.llvm.org/rL202360">r202360&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>-Wabsolute-value&lt;/code> warning was committed, which will warn for several cases of misuse of absolute value functions. It will warn when using e.g. an int absolute value function on a float, or when using it one a type of the wrong size (e.g. using abs rather than llabs on a long long), or whn taking the absolute value of an unsigned value. &lt;a href="http://reviews.llvm.org/rL202211">r202211&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>An API was added to libclang to create a buffer with a JSON virtual file overlay description. &lt;a href="http://reviews.llvm.org/rL202105">r202105&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The driver option &lt;code>-ivfsoverlay&lt;/code> was added, which reads the description of a virtual filesystem from a file and overlays it over the real file system. &lt;a href="http://reviews.llvm.org/rL202176">r202176&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>CFG edges have been reworked to encode potentially unreachable edges. This involved adding the AdjacentBlock class this encodes whether the block is reachable or not. &lt;a href="http://reviews.llvm.org/rL202325">r202325&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The 'remark' diagnostic type was added. This provides additional information to the user (e.g. information from the vectorizer about loops that have been vectorized). &lt;a href="http://reviews.llvm.org/rL202475">r202475&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The compiler-rt subproject now has a &lt;code>CODE_OWNERS.txt&lt;/code> to indicate who is primarily responsible for each part of the project. &lt;a href="http://reviews.llvm.org/rL202377">r202377&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A standalone deadlock detector was added to ThreadSanitizer. &lt;a href="http://reviews.llvm.org/rL202505">r202505&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The OpenMP runtime has been ported to FreeBSD. &lt;a href="http://reviews.llvm.org/rL202478">r202478&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #8, Feb 24th 2014</title><link>https://blog.llvm.org/2014/02/llvm-weekly-8-feb-24th-2014.html</link><pubDate>Mon, 24 Feb 2014 06:05:00 +0000</pubDate><guid>https://blog.llvm.org/2014/02/llvm-weekly-8-feb-24th-2014.html</guid><description>&lt;p>Welcome to the eighth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>I'll be at the &lt;a href="http://www.raspberrypi.org/archives/6074">Raspberry Jamboree&lt;/a> at the end of the week, so if you're going as well be sure to say hi.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/8">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;ul>&lt;li>&lt;p>As a followup to the proposal that Philip Reames posted last week, where he described plans for contributing precise garbage collection support to LLVM, he has &lt;a href="http://www.philipreames.com/Blog/2014/02/21/why-not-use-gcroot/">written a blog post about why the llvm.gcroot intrinsic is insufficient for this purpose&lt;/a>. A followup post is promised describing the approach they've decided to take. The article is is written so as to be accessible to those who may not be familiar with GC implementation. He also raises some interesting issues with gcroot, even when using it for a non-relocating collector.&lt;/p>&lt;/li>&lt;li>&lt;p>Some may remember the &lt;a href="http://dagger.repzret.org/">Dagger project&lt;/a> for decompilation of programs to LLVM IR from EuroLLVM 2013 (&lt;a href="http://llvm.org/devmtg/2013-04/bougacha-slides.pdf">slides&lt;/a>). The promised source code release didn't happen, but the developers have &lt;a href="http://dagger.repzret.org/update-feb-2014/">posted an update&lt;/a> detailing what they've been up to. There have been a lot of design changes, and some of the work has been submitted upstream as patches to LLVM MC. "At this point we don't really have a schedule; whenever we feel a patch is ready to go, we submit it to the community. The goal being, once we're done, our work becomes a full part of LLVM, where we and all contributors can continue to advance it!"&lt;/p>&lt;/li>&lt;li>&lt;p>Tamás Szelei has written up a &lt;a href="http://szelei.me/code-generator/">useful guide to implementing a code generator with libclang and Python&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Emscripten project is &lt;a href="https://groups.google.com/forum/#!topic/emscripten-discuss/mZMkX3uBG4s">getting ready to use its 'fastcomp' LLVM backend by default&lt;/a>. Previously they had a series of passes written in Javascript to convert from LLVM IR to Javascript, but this is now implemented as a C++ LLVM backend. See &lt;a href="https://github.com/kripken/emscripten/wiki/LLVM-Backend">their wiki&lt;/a> for more info.&lt;/p>&lt;/li>&lt;li>&lt;p>Agner has &lt;a href="http://agner.org/optimize/blog/read.php?i=311#311">updated his popular optimisation manuals&lt;/a> to include test results for AMD Steamroller processors, as well as adding some more AVX-512 information.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;a href="http://dwarfstd.org">DWARF Debugging Information Format Committee&lt;/a> are welcoming comments, suggestions or proposals for changes to DWARF &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/35175/">until March 31st&lt;/a>. Although DWARF Version 5 is 'nearing completion', it seems that no drafts have been published so you'll have to base your comments on DWARF 4. Do drop me a note if you know otherwise.&lt;/p>&lt;/li>&lt;li>&lt;p>There have been &lt;a href="http://sylvestre.ledru.info/blog/2014/02/22/some-updates-on-llvm-org">several updates&lt;/a> to &lt;a href="http://llvm.org/apt/">http://llvm.org/apt/&lt;/a>. The upcoming Ubuntu 14.04 is now a supported distribution, and additionally both the stable and development versions of LLVM/Clang are built and can be installed side-by-side.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Renato Golin &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/35229">reminds us&lt;/a> that although work is underway to update all buildbots to support C++11, the switch to use &lt;code>-std=c++11&lt;/code> has not yet been flipped, so you'll have to hold off on using C++11 features in LLVM/Clang patches for just a little longer.&lt;/p>&lt;/li>&lt;li>&lt;p>Saleem Abulrasool &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70584">points to an issue running recent Clang on the Linux kernel&lt;/a> related to the integrated assembler. As regular readers will know, the behaviour was recently changed so that for backends which have an integrated assembler, any inline assembly will be validated by it during compilation, even when compiling with &lt;code>-S&lt;/code> (i.e. outputting assembly). The problem is that the Linux kernel is purposely including invalid assembly in some cases when outputting assembler files. Early responses are in favour of keeping current behaviour, people who are doing weird and wacky things can just use the &lt;code>-no-integrated-as&lt;/code> switch.&lt;/p>&lt;/li>&lt;li>&lt;p>In response to the earlier discussion about unwind behaviour in LLVM/Clang, Logan Chien has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70461">posted a detailed description of the problems he sees&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Kevin Qin writes &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70511">asking about adding register allocation constraints&lt;/a>. Often the mailing list threads which get highlighted in LLVM Weekly are about particularly hairy problems that don't currently have a good solution. I'm happy to see this problem has a simple solution though, as Tim Northover and Quentin Colombet point out the &lt;code>@earlyclobber&lt;/code> constraint can be used to ensure the output register allocated is different to the input registers.&lt;/p>&lt;/li>&lt;li>&lt;p>While working on changes to CodeGenPrepare, Quentin Combet noted his patch would introduce a dependency from libLLVMScalarOpts (where CodeGenPrepare currently lives) to libLLVMCodeGen. He &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70528">writes to the list&lt;/a> asking for views on how to solve this problem. The forming consensus seems to be that it should just be moved to CodeGen. Potentially, any IR pass that depends directly on TargetLowering should be moved also. The move to CodeGenPrepare to lib/CodeGen has now &lt;a href="http://reviews.llvm.org/rL201912">been committed&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Per Viberg is &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/35185">soliciting comments&lt;/a> on his design draft for improving the detection of uninitialized arguments.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The llvm-profdata tool was introduced. This tool will merge profile data generated by PGO instrumentation in Clang, though may later pick up more functionality. &lt;a href="http://reviews.llvm.org/rL201535">r201535&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>In a long overdue cleanup, various member variables were renamed from TD to DL to match the renaming of TargetData to DataLayout. &lt;a href="http://reviews.llvm.org/rL201581">r201581&lt;/a>, &lt;a href="http://reviews.llvm.org/rL201827">r201827&lt;/a>, &lt;a href="http://reviews.llvm.org/rL201833">r201833&lt;/a>. Additionally, DebugLoc variables which were named DL have now been renamed to DbgLoc so as not to be confused with DataLayout. &lt;a href="http://reviews.llvm.org/rL201606">r201606&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MCAsmParser now supports required parameters in macros, increasing GNU assembler compatibility. &lt;a href="http://reviews.llvm.org/rL201630">r201630&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new TargetLowering hook, &lt;code>isVectorShiftByScalarCheap&lt;/code> was added to indicate whether it's significantly cheaper to shift a vector by a scalar rather than by another vector with different values for different lanes. This is used by the new &lt;code>OptimizeShuffleVectorInst&lt;/code> in CodeGenPrepare which tries to sink shufflevector instructions down to the basic block they're used so CodeGen can determine if the right hand of a shift is really a scalar. &lt;a href="http://reviews.llvm.org/rL201655">r201655&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Private linkage is now properly supported for MachO. &lt;a href="http://reviews.llvm.org/rL201700">r201700&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>getNameWithPrefix and getSymbol were moved from TargetLowering to TargetMachine, which removes the dependency from Target to CodeGen. &lt;a href="http://reviews.llvm.org/rL201711">r201711&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The PGO instrumentation will now compute counts in a separate AST traversal. The reasons for and advantages of this change are documented in detail in the commit message. &lt;a href="http://reviews.llvm.org/rL201528">r201528&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Some initial work was committed on documenting available attributes in Clang. Attribute authors are encouraged to submit missing documentation (the method of documentation is described in the addition to the InternalManual.rst). &lt;a href="http://reviews.llvm.org/rL201515">r201515&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The IdenticalExprChecker has been extended to check the two branches of an if as well as logical and bitwise expressions. For those not familiar, this checker tries to warn about the unintended use of identical expressions. &lt;a href="http://reviews.llvm.org/rL201701">r201701&lt;/a>, &lt;a href="http://reviews.llvm.org/rL201702">r201702&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>CGRecordLayoutBuilder has been completely rewritten to remove cruft, simplify the implementation, and to work in one pass. &lt;a href="http://reviews.llvm.org/rL201907">r201907&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The CastSizeChecker was taught how to correctly deal with flexible array members. &lt;a href="http://reviews.llvm.org/rL201583">r201583&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A number of thread-safety attributes have been renamed (with their old name silently deprecated). e.g. &lt;code>lockable&lt;/code> is now &lt;code>capability&lt;/code>, &lt;code>exclusive_locks_required&lt;/code> is now &lt;code>requires_capability&lt;/code>. &lt;a href="http://reviews.llvm.org/rL201585">r201585&lt;/a>. Additionally, the documentation was updated and greatly expanded. &lt;a href="http://reviews.llvm.org/rL201598">r201598&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Initial virtual file system support &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/34941">discussed previously on the mailing list&lt;/a> has landed. &lt;a href="http://reviews.llvm.org/rL201618">r201618&lt;/a>, &lt;a href="http://reviews.llvm.org/rL201635">r201635&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The vcvtX intrinsics were added for v8 ARM as opposed to only being recognised when targeting AArch64. &lt;a href="http://reviews.llvm.org/rL201661">r201661&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The hard-float ARM EABI (often known as gnueabihf) is now supported for FreeBSD. &lt;a href="http://reviews.llvm.org/rL201662">r201662&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang will now provide &lt;code>max_align_t&lt;/code> in C11 and C++11 modes. Note the complaint in the commit message though that &lt;code>max_align_t&lt;/code> as defined is not 'good' or 'useful'. &lt;a href="http://reviews.llvm.org/rL201729">r201729&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Again, there were a number of commits related to increasing compatibility with the MS ABI. None of them immediately leaped out at me as worth highlighting individually, so I recommend you have a flick through last weeks commits if you're particularly interested.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Rudimentary support for a standalone compiler-rt build system was added, which will allow the compiler-rt libraries to be built seperately from LLVM/Clang. &lt;a href="http://reviews.llvm.org/rL201647">r201647&lt;/a>, &lt;a href="http://reviews.llvm.org/rL201656">r201656&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Assembly functions for AddressSanitizer on x86/amd64 were added. &lt;a href="http://reviews.llvm.org/rL201650">r201650&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLDB gained a hardware watchpoint implementation for FreeBSD &lt;a href="http://reviews.llvm.org/rL201706">r201706&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Polly gained support for polyhedral dead code elimination. &lt;a href="http://reviews.llvm.org/rL201817">r201817&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A patch was added to lldb to provide initial support for the Hexagon DSP. &lt;a href="http://reviews.llvm.org/rL201655">r201665&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #7, Feb 17th 2014</title><link>https://blog.llvm.org/2014/02/llvm-weekly-7-feb-17th-2014.html</link><pubDate>Mon, 17 Feb 2014 04:19:00 +0000</pubDate><guid>https://blog.llvm.org/2014/02/llvm-weekly-7-feb-17th-2014.html</guid><description>&lt;p>Welcome to the seventh issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p>&lt;p>As always, apologies if I didn't pick up your favourite mailing list discussion or commits. Do drop me a line if you think I'm missing something interesting. There haven't been that many external news stories or blog posts (that I've found) in the last week, but it's been a particularly busy week on the mailing lists with a whole bunch of interesting discussions or RFCs.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/7">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The &lt;a href="http://ellcc.org/">ELLCC Embedded Compiler Collection&lt;/a> now &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70441">has precompiled builds available&lt;/a> for ARM, i386, Mips, PowerPC and x86-64. Handily, these are all statically linked. The aim of ELLCC is to provide an easy to use multi-target cross compilation environment for embedded systems, and is of course based on LLVM and clang.&lt;/p>&lt;p>The next Waterloo Region LLVM Social &lt;a href="http://article.gmane.org/gmane.comp.debugging.lldb.devel/3237/">has been announced for Feb 20th&lt;/a>.&lt;/p>&lt;p>The next Paris LLVM Social &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70330">will take place on Feb 24th&lt;/a>, hosted by Mozilla.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Philip Reames contributed an RFC on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70430">using GetElementPtr as the canonical form for pointer addressing in LLVM IR before CodeGenPrepare&lt;/a>. The motivation behind this proposal will be interesting to many, particularly the Rust community and other language implementors looking to target LLVM. Philip and his colleagues (at Azul Systems I believe) are looking to support precise garbage collection in LLVM, and excitingly a complete upstreamable implementation should be coming "relatively shortly. (i.e. months, not weeks, not years)"&lt;/p>&lt;/li>&lt;li>&lt;p>As a followup to last week's discussions on the GCC mailing list, Renato Golin has written a &lt;a href="http://article.gmane.org/gmane.comp.gcc.devel/134419/">detailed proposal on how LLVM and GCC developers can co-operate&lt;/a>. He is welcoming responses &lt;a href="http://developers.slashdot.org/comments.pl?sid=4769281&amp;amp;cid=46209457">on Slashdot&lt;/a>. Chris Lattner is very much in favour of the effort, though points out that there are some lists already used for this purpose (such as the 'Itanium ABI list', which I assume refers to &lt;a href="http://sourcerytools.com/cgi-bin/mailman/listinfo/cxx-abi-dev">cxx-abi-dev&lt;/a>) and perhaps other similar vendor-neutral mailing lists could be created.&lt;/p>&lt;/li>&lt;li>&lt;p>Tom Roeder has posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70274">RFC on the integration of control-flow integrity techniques in to LLVM&lt;/a>. Control-flow integrity (CFI) helps to protect against a variety of attacks by ensuring control flow at run time matches a path determined ahead of time, and is described in &lt;a href="http://research.microsoft.com/pubs/69217/ccs05-cfi.pdf">this 2005 paper&lt;/a>. Tom has an implementation that has been tested on Chromium, producing an overhead of ~4% for the dromaeo benchmark. JF Bastien responded indicating the PNaCl team would be interested in this work, while other respondents discussed representing a jump table in LLVM IR as opposed to inline assembly.&lt;/p>&lt;/li>&lt;li>&lt;p>Jordan Rose kicked off a discussion on &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/35023">the future of the clang static analyzer&lt;/a>. One issue he raises is how to mark issues as false positives, hopefully in a more sophisiticated way than disabling checkers. He also mentions long term plans for adding a full-program analysis mode that would work across translation units. Ted Kremenek &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/35025">follows up&lt;/a> with more details about treating reported diagnostics as 'issues' which might be suppressed individually.&lt;/p>&lt;/li>&lt;li>&lt;p>Andrew Bokhanko from Intel initiated a &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/34995">discussion on adding some sort of SIMD pragma to Clang&lt;/a>. Options include upstreaming the implementation of OpenMP 4's &lt;code>#pragma omp simd&lt;/code> from &lt;a href="http://clang-omp.github.com">clang-omp&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Mahdi Hamzeh writes to the mailing list with a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70348">query about if-converting before register allocation&lt;/a>. Andrew Trick points to the EarlyIfConverter, which can be run before register allocation but only generates conditional moves rather than predicating instructions. He &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70354">suggests an approach&lt;/a> for implementing if-conversion as a target-specific pass.&lt;/p>&lt;/li>&lt;li>&lt;p>Vadim Chugunov &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70280">kicks off a discussion on a compiler-rt roadmap&lt;/a>. Issues include a potential rename, whether libunwind should be removed, and ensuring that it builds for all platforms that LLVM can target.&lt;/p>&lt;/li>&lt;li>&lt;p>Matt Arsenault is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70390">seeking ideas on solving a problem where loop induction variables are larger than they need to be&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Howard Hinnant is stepping down as code owner of libc++ and it &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70419">looks like Marshall Clow&lt;/a> is going to take over. Many LLVM devs also drop by to thank Howard for his hard work on libc++.&lt;/p>&lt;/li>&lt;li>&lt;p>Ted Kremenek gives a &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/35049">great summary of the status of ArrayBoundChecker and ArrayBoundCheckerV2&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>AsmPrinter::EmitInlineAsm() will no longer use the EmitRawText() call for targets with mature MC (MachineCode) support. The MCASMInfo::UseIntegratedAS field was added. When true, the integrated assembler will parse inline assembly even when emitting assembly output. &lt;a href="http://reviews.llvm.org/rL201333">r201237&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The RTDyld API learned to precompute the amount of memory required for all sections in a module, and reserveAllocationSpace to reserve the given amount of space. &lt;a href="http://reviews.llvm.org/rL201259">r201259&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The LTO API gained &lt;code>lto_module_create_from_memory_with_path&lt;/code>, which is mainly useful for emitting warning messages from the linker. &lt;a href="http://reviews.llvm.org/rL201114">r201114&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>ScalarEvolution will now analyze the trip count of loops where there is a switch guarding the exit. &lt;a href="http://reviews.llvm.org/rL201159">r201159&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The notes on Phabricator now include a suggestion to provide a link to the Differential revision (the code review) on commits that have been reviewed in this way. Please do this! &lt;a href="http://reviews.llvm.org/rL201160">r201160&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The AArch64 backend now recognises Cortex-A53 and Cortex-A57. &lt;a href="http://reviews.llvm.org/rL201305">r201305&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The ARM integrated assembler gained partial support for the &lt;code>.arch_extension&lt;/code> directive. &lt;a href="http://reviews.llvm.org/rL201471">r201471&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>There have been yet more updates to Clang's Microsoft ABI compatibility. Clang now understands Microsoft's &lt;code>pointers_to_members&lt;/code> pragma. &lt;a href="http://reviews.llvm.org/rL201105">r201105&lt;/a> as well as the &lt;code>vtordisp&lt;/code> pragma &lt;a href="http://reviews.llvm.org/rL201274">r201274&lt;/a>. In other MS ABI developments, the &lt;code>-vm{b,g,s,m,v}&lt;/code> are now supported too. &lt;a href="http://reviews.llvm.org/rL201175">r201175&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The command line option &lt;code>-fstack-protector-strong&lt;/code> was added. &lt;a href="http://reviews.llvm.org/rL2011120">r201120&lt;/a>. See also &lt;a href="http://reviews.llvm.org/rL200601">r200601&lt;/a> for info on the sspstrong function attribute.&lt;/p>&lt;/li>&lt;li>&lt;p>Frontend support for the OpenMP &lt;code>if&lt;/code> clause was committed. &lt;a href="http://reviews.llvm.org/rL201297">r201297&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>You can use the &lt;code>--rtlib=compiler-rt&lt;/code> flag to attempt to link against compiler-rt rather than libgcc. &lt;a href="http://reviews.llvm.org/rL201307">r201307&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>-Wignored-pragmas&lt;/code> diagnostic was added, that will warn in any case where a pragma would have a side effect but is ignored. &lt;a href="http://reviews.llvm.org/rL201102">r201102&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The name of the checker producing each diagnostic message is now available through &lt;code>getCheckName()&lt;/code>. This can be used to enable/disable a specific checker. &lt;a href="http://reviews.llvm.org/rL201186">r201186&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang now understands the &lt;code>-fbuild-session-timestamp=&lt;/code> and &lt;code>-fmodules-validate-once-per-build-session&lt;/code> flags which allows you to make it verify source files for a module only once during a build. &lt;a href="http://reviews.llvm.org/rL201224">r201224&lt;/a>, &lt;a href="http://reviews.llvm.org/rL201225">r201225&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The sanitizer projects in compiler-rt gained the beginnings for a deadlock detector. &lt;a href="http://reviews.llvm.org/rL201302">r201302&lt;/a>, &lt;a href="http://reviews.llvm.org/rL201407">r201407&lt;/a>..&lt;/p>&lt;/li>&lt;li>&lt;p>The original compiler-rt functions (i.e. those that act as a libgcc replacement) now live in the lib/builtins directory. &lt;a href="http://reviews.llvm.org/rL201393">r201393&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>In lldb, the user can now specify trap-handler-names, a list of functions which should be treated as trap handlers. &lt;a href="http://reviews.llvm.org/rL201386">r201386&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #6, Feb 10th 2014</title><link>https://blog.llvm.org/2014/02/llvm-weekly-6-feb-10th-2014.html</link><pubDate>Mon, 10 Feb 2014 08:15:00 +0000</pubDate><guid>https://blog.llvm.org/2014/02/llvm-weekly-6-feb-10th-2014.html</guid><description>&lt;p>Welcome to the sixth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter. I've been keeping the &lt;a href="https://twitter.com/llvmweekly">@llvmweekly Twitter account&lt;/a> updated throughout the week, so follow that if you want more frequent news updates.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/6">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Alexi Starovoitov has &lt;a href="https://lkml.org/lkml/2014/2/5/743">published an LLVM backend&lt;/a> targeting an extended version of the Linux Kernel's BPF. An example of the sort of program that might be compiled and run via BPF can be found &lt;a href="http://article.gmane.org/gmane.linux.kernel/1605783">here&lt;/a>.&lt;/p>&lt;p>There is now under a week to go to submit proposals for presentations, tutorials, posters, etc for the upcoming &lt;a href="http://llvm.org/devmtg/2014-04/">EuroLLVM 2014&lt;/a>. Get writing!&lt;/p>&lt;p>LWN's coverage of the recent discussion about LLVM and its licensing on the GCC mailing list is &lt;a href="http://lwn.net/Articles/582697/">now available&lt;/a> to non-subscribers.&lt;/p>&lt;p>Renato Golin &lt;a href="http://gcc.gnu.org/ml/gcc/2014-02/msg00093.html">posted to the GCC mailing list&lt;/a> suggesting there be more collaboration where possible on issues such as standardisation of command line interfaces, language extensions, or just general technical discussion.I know a mailing list GCC developers who want to keep abreast of LLVM/Clang developments should subscribe to...&lt;/p>&lt;p>Phoronix has &lt;a href="http://www.phoronix.com/scan.php?page=article&amp;amp;item=intel_haswell_gcclang34&amp;amp;num=1">published a benchmark&lt;/a> comparing GCC 4.8.2, a GCC 4.9 snapshot and Clang 3.4 on an Intel Core i5-4670 system.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Sony Computer Entertainment America are &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70232">looking for an intern&lt;/a> for their compiler engineering team.&lt;/p>&lt;/li>&lt;li>&lt;p>Venkatraman Govindaraju reports that &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70033">Clang can now self host on Linux/sparc64 and FreeBSD/sparc64&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Paul Vario &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70193">asks for more information on the algorithm used in RegionInfo&lt;/a>, noting that the algorithm implemented seems substantially different to the one referenced in the &lt;a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.31.5126">paper&lt;/a> in the header's comment. The original author of that code, Tobias Grosser follows up with an &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70198">explanation for differences from that paper&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Gordon Keiser helpfully reminds us that &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70179">clang will happily take LLVM bitcode as input&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Stephen Kelly, an upstream CMake developer &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70022">dropped by&lt;/a> to offer advice on LLVM's current CMake usage and learn what problems with CMake the project is facing. A number of responses are interested in the ability to use CMake to build multiple LLVM subprojects at once, or to build clang against an installed LLVM tree.&lt;/p>&lt;/li>&lt;li>&lt;p>Last week's &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70027">RFC questioning the use of BlockFrequency&lt;/a> has now had a number of followups. I won't summarise here for fear of mischaracterising people, but do take a look if the issue interests you.&lt;/p>&lt;/li>&lt;li>&lt;p>Tom Stellard is &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70210">looking for bugfix patches&lt;/a> that should be merged in to a future 3.4.1 release.&lt;/p>&lt;/li>&lt;li>&lt;p>Renato Goling started a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70186">discussion about unwind and exception handling behaviour&lt;/a> in LLVM/Clang, listing four problems he sees with the code as-is.&lt;/p>&lt;/li>&lt;li>&lt;p>Vassil Vassilev asks whether anyone has implemented a &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/34882">copy and paste detector for Clang's static analyzer&lt;/a>. Nick Lewycky &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/34921">shares his implementation&lt;/a> of something in that direction.&lt;/p>&lt;/li>&lt;li>&lt;p>Ben Langmuir posted an &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/34941">RFC on a virtual filesystem for clang&lt;/a>. This aims to "allow a build system to provide a file/directory layout to clang without having to construct it 'for real' on disk".&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The x86 backend was slightly simplified by moving some matching for x86 bit manipulation instructions from X86ISelLowering.cpp to X86InstrInfo.td. I mention this commit mainly as it's a useful reference for those of you working on LLVM backend code. &lt;a href="http://reviews.llvm.org/rL200824">r200824&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The register allocator gained a new 'last chance recoloring mechanism'. Sadly the commit message doesn't include any data of how this improves register allocation for a given codebase. &lt;a href="http://reviews.llvm.org/rL200883">r200883&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The old SmallPtrSetImpl was renamed to SmallPtrSetImplBase, and a new SmallPtrSetImpl was introduced. This new SmallPtrSetImpl doesn't require a specific set size to be specified in its templated parameter. &lt;a href="http://reviews.llvm.org/rL200688">r200688&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A whole bunch of code was added to CodeGenPrepare which attempts to move sign extensions away from loads in order to increase the chance that the address computation can be folded in to the load on architectures like x86 with complex addressing modes. &lt;a href="http://reviews.llvm.org/rL200947">r200947&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;code>strchr(p, 0)&lt;/code> is now simplified to &lt;code>p + strlen(p)&lt;/code>. &lt;a href="http://reviews.llvm.org/rL200736">r200736&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Information on handling minor ('dot') releases was added to the HowToReleaseLLVM documentation. &lt;a href="http://reviews.llvm.org/rL200772">r200772&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The MIPS assembler learned to understand &lt;code>%hi(sym1 - sym2)&lt;/code> and &lt;code>%hi(sym1 - sym2)&lt;/code> expressions. &lt;a href="http://reviews.llvm.org/rL200783">r200783&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Mips gained a NaCl target. &lt;a href="http://reviews.llvm.org/rL200855">r200855&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM now assumes the assembler supports the &lt;code>.loc&lt;/code> directive for specifying debug line numbers. &lt;a href="http://reviews.llvm.org/rL200862">r200862&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The inliner was modified to consider the cold attribute on a function when deciding whether to inline. &lt;a href="http://reviews.llvm.org/rL200886">r200886&lt;/a>. A later commit set the inlinecold-threshold to the same as the inline-threshold so that current inlining behaviour is maintained for now. &lt;a href="http://reviews.llvm.org/rL200898">r200898&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Initial implementation for a lazy call graph analysis pass (for use with the upcoming new pass manager) was committed. &lt;a href="http://reviews.llvm.org/rL200903">r200903&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The allowsUnalignedMemoryAccess function in TargetLowering now takes an address space argument. This was added for architectures like the R600 where different address spaces have different alignment requirements. &lt;a href="http://reviews.llvm.org/rL200887">r200887&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>More support was MS ABI-compatible mangling was added. &lt;a href="http://reviews.llvm.org/rL200857">r200857&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The behaviour suggested by the C++ Defect Report &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#329">329&lt;/a> was implemented. &lt;a href="http://reviews.llvm.org/rL200673">r200673&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The ARM target gained support for crypto intrinsics defined in &lt;code>arm_neon.h&lt;/code>. &lt;a href="http://reviews.llvm.org/rL200708">r200708&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The forRangeStmt AST matcher gained a handy hasLoopVariable sub-matcher. &lt;a href="http://reviews.llvm.org/rL200850">r200850&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The -verify-pch CC1 option is now supported. &lt;a href="http://reviews.llvm.org/rL200884">r200884&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The -fhiding-week-vtables CC1 option has been removed. &lt;a href="http://reviews.llvm.org/rL201011">r201011&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM's new diagnostic system is now wired into clang's diagnostic system. &lt;a href="http://reviews.llvm.org/rL200931">r200931&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The address sanitizer gained two functions that would allow implementation of C++ garbage collection to work with its fake stack. &lt;a href="http://reviews.llvm.org/rL200908">r200908&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>In lldb, the the Mac OS X SystemRuntime plugin now uses the libBacktraceRecording library. &lt;a href="http://reviews.llvm.org/rL200822">r200822&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #5, Feb 3rd 2014</title><link>https://blog.llvm.org/2014/02/llvm-weekly-5-feb-3rd-2014.html</link><pubDate>Mon, 03 Feb 2014 07:36:00 +0000</pubDate><guid>https://blog.llvm.org/2014/02/llvm-weekly-5-feb-3rd-2014.html</guid><description>&lt;p>Welcome to the fifth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter. I've been keeping the &lt;a href="https://twitter.com/llvmweekly">@llvmweekly Twitter account&lt;/a> updated throughout the week, so follow that if you want more frequent news updates.&lt;/p>&lt;p>I'm afraid my summary of mailing list activities is much less thorough than usual, as I've been rather busy this weekend both moving house and suffering from a cold. Do ping me if you think I've missed anything important.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/5">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>This weekend there was an LLVM devroom at FOSDEM 2014. Slides have &lt;a href="http://llvm.org/devmtg/2014-02/">already been posted&lt;/a> for some of the talks. Hopefully videos will follow.&lt;/p>&lt;p>Pocl (Portable Computing Language) 0.9 has been &lt;a href="http://portablecl.org/pocl-0.9.html">released&lt;/a>. Pocl aims to be an efficient MIT-licensed implementation of the OpenCL 1.2 standard.&lt;/p>&lt;p>Mike Ash has published a useful &lt;a href="https://mikeash.com/pyblog/friday-qa-2014-01-24-introduction-to-libclang.html">introduction to libclang&lt;/a>.&lt;/p>&lt;p>Ever wanted to use LLVM from within Rust? This &lt;a href="http://hydrocodedesign.com/2014/01/31/llvm-with-rust/">blog post will tell you how&lt;/a>.&lt;/p>&lt;p>Phoronix has published a &lt;a href="http://www.phoronix.com/scan.php?page=article&amp;amp;item=amd_kaveri_gcc49clang34&amp;amp;num=1">benchmark of Clang 3.4 vs GCC 4.9.0 20140126 on AMD Kaveri&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>A question about the status of &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/34747">SEH support in LLVM/Clang&lt;/a> was quickly derailed after the expiration of a key patent on SEH in June was brought up. The conversation moved to LLVM's &lt;a href="http://llvm.org/docs/DeveloperPolicy.html#patents">developer policy on patents&lt;/a> and whether the LLVM or Clang mailing lists are a suitable place for their discussion. In the end, Chris Lattner &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/34810">chimes in to clarify the policy&lt;/a>. The technical discussion &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69945">moved to this thread&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Pekka Jääskeläinen answers a bugpoint question with a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69807">useful guide on using bugpoint with a custom exec-command option&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Nick Lewycky suggests &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69890">making datalayout a mandatory part of an LLVM module&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth has proposed in an RFC that &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/70027">BlockFrequency is the wrong metric&lt;/a> for profile info.&lt;/p>&lt;/li>&lt;li>&lt;p>Sara Elshobaky asks for advice on finding the &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69797">number of instructions executed when running LLVM bytecode under lli&lt;/a>. There are a number of suggestions including callgrind, Pin, and other similar tools.&lt;/p>&lt;/li>&lt;li>&lt;p>Markus Timpl raises an interesting question about &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69852">describing a load instruction that changes the value of two registers&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Baoshan Pang writes to the LLVM list asking &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69973">how to start getting involved in LLVM&lt;/a>. If you've emailed me suggesting you'd like more pointers on how to get stuck in to LLVM, this thread is for you.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The ARM exception handling ABI (&lt;a href="http://infocenter.arm.com/help/topic/com.arm.doc.ihi0038a/IHI0038A_ehabi.pdf">EHABI&lt;/a>) is now enabled by default. &lt;a href="http://reviews.llvm.org/rL200388">r200388&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>TargetLowering gained a hook which targets can implement to indicate whether a load of a constant should be converted to just the constant. &lt;a href="http://reviews.llvm.org/rL200271">r200271&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Line table debug info is now supported for COFF files when targeting win32. &lt;a href="http://reviews.llvm.org/rL200340">r200340&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LLVM now has the beginnings of a line editor library, initially to be used by clang-query but possibly consumed by LLDB as well in the future. &lt;a href="http://reviews.llvm.org/rL200595">r200595&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The R600 backend learned intrinsics for &lt;code>S_SENDMSG&lt;/code> and &lt;code>BUFFER_LOAD_DWORD*&lt;/code> instructions. &lt;a href="http://reviews.llvm.org/rL200195">r200195&lt;/a>, &lt;a href="http://reviews.llvm.org/rL200196">r200196&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The loop vectorizer gained a number of flags to help experiment with changing thresholds. It now also only unrolls by powers of 2. &lt;a href="http://reviews.llvm.org/rL200212">r200212&lt;/a>, &lt;a href="http://reviews.llvm.org/rL200213">r200213&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The loop vectorizer now supports conditional stores by scalarizing (they are put behind an if). This improves performance on the SPEC libquantum benchmark by 4.15%. &lt;a href="http://reviews.llvm.org/rL200270">r200270&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>MCSubtargetInfo is now explicitly passed to the &lt;code>EmitInstruction&lt;/code>, &lt;code>EmitInstTo*&lt;/code>, &lt;code>EncodeInstruction&lt;/code> and other functions in the MC module. &lt;a href="http://reviews.llvm.org/rL200345">r200345&lt;/a> and others.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-readobj learned to decode ARM attributes. &lt;a href="http://reviews.llvm.org/rL200450">r200450&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Speculative execution of llvm.{sqrt,fma,fmuladd} is now allowed. &lt;a href="http://reviews.llvm.org/rL200501">r200501&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Position Independent Code (PIC) is now turned on by default for Android targets. &lt;a href="http://reviews.llvm.org/rL200290">r200290&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Parser::completeExpression function was introduced, which returns a list of completions for a given expression and completion position. &lt;a href="http://reviews.llvm.org/rL200497">r200497&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The default CPU for 32-bit and 64-bit MIPS targets is now mips32r2 and mips64r2 respectively. &lt;a href="http://reviews.llvm.org/rL200222">r200222&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The ARM and AArch64 backends saw some refactoring to share NEON intrinsics. &lt;a href="http://reviews.llvm.org/rL200524">r200524&lt;/a> and others.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Compiler-rt gained a cache invalidation implementation for AArch64 &lt;a href="http://reviews.llvm.org/rL200317">r200317&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Compiler-rt now features an optimised implementation of &lt;code>__clzdi2&lt;/code> and &lt;code>__clzsi2&lt;/code> for ARM. &lt;a href="http://reviews.llvm.org/rL200394">r200394&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Compiler-rt's CMake files will now compile the library for ARM. Give it a go and see what breaks. &lt;a href="http://reviews.llvm.org/rL200546">r200546&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The iohandler LLDB branch was merged in. The commit log describes the benefits. &lt;a href="http://reviews.llvm.org/rL200263">r200263&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #4, Jan 27th 2014</title><link>https://blog.llvm.org/2014/01/llvm-weekly-4-jan-27th-2014.html</link><pubDate>Mon, 27 Jan 2014 05:46:00 +0000</pubDate><guid>https://blog.llvm.org/2014/01/llvm-weekly-4-jan-27th-2014.html</guid><description>&lt;p>Welcome to the fourth issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. This marks the end of the first month of operation, here's to many more! LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter. I've been keeping the &lt;a href="https://twitter.com/llvmweekly">@llvmweekly Twitter account&lt;/a> updated throughout the week, so follow that if you want more frequent news updates.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/4">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>The biggest compiler-related news this week has been the discussions on the GCC mailing list. Things kicked off with &lt;a href="http://gcc.gnu.org/ml/gcc/2014-01/msg00176.html">Eric S. Raymond's post&lt;/a> suggesting that technical progress in GCC is being held back by concerns about reusing parts of GCC in a way that bypasses the copyleft license. Ian Lance Taylor &lt;a href="http://gcc.gnu.org/ml/gcc/2014-01/msg00181.html">responded&lt;/a> to point out that GCC now has a plugin system, albeit with an unstable interface, which mostly put a stop to that line of discussion. However a &lt;a href="http://gcc.gnu.org/ml/gcc/2014-01/msg00247.html">later post to the mailing list from Richard Stallman&lt;/a> has proved very controversial by claiming that "The existence of LLVM is a terrible setback for our community precisely because it is not copylefted and can be used as the basis for nonfree compilers". There's plenty of discussion of these comments around the web &lt;a href="http://lwn.net/Articles/582242/">at LWN&lt;/a>, Hacker News, Reddit, Slashdot etc. Although many of us may have a preference for non-copyleft ('permissive') free software licenses, RMS has consistently and over a long period of time argued that copyleft licenses ultimately do a better job of spreading free software and preserving its freedom. As such, it's not clear to me why this mailing list post has come as a surprise to many. I'm personally surprised he didn't bring up the fact that the BSD-style license used by LLVM contains no explicit patent grant (though LLVM does have a &lt;a href="http://llvm.org/docs/DeveloperPolicy.html#patents">patent policy&lt;/a> to help protect its users).&lt;/p>&lt;p>Rapidly moving away from controversial topics, an exciting milestone for the LLVM project was hit this week. The &lt;a href="http://reviews.llvm.org/rL200000">200000th commit&lt;/a> has been applied. Takumi Nakamura was lucky enough to be the one to author that commit.&lt;/p>&lt;p>The Khronos group has &lt;a href="https://www.khronos.org/news/press/khronos-releases-spir-1.2-specification-for-portable-encoding-of-opencl-dev">released the SPIR 1.2 specification&lt;/a>. SPIR is a standardised intermediate representation meant for use with OpenCL, and is based on LLVM 3.2 IR. With the release, the Khronos Group have open sourced a modified Clang 3.2 which can generate SPIR from OpenCL C programs as well as a module verifier.&lt;/p>&lt;p>Joaquín M López Muñoz has published a benchmark &lt;a href="http://bannalia.blogspot.co.uk/2014/01/a-better-hash-table-clang.html">comparing hash table performance on Clang&lt;/a>. He compares GCC's libstdc++-v3 to the LLVM project's libc++.&lt;/p>&lt;p>The Cambridge (UK) LLVM socials &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/34548">are starting up again&lt;/a>, with the next one on the 29th Jan at 7.30pm. Sadly I can't make it, hopefully the next one!&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Chandler Carruth asks &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69689">whether LoopPass and LoopPassManager can be removed&lt;/a>. He lists the confusion and issues they cause, most damning to me is that they reoutinely modify IR from outside of the loop thus breaking the implied contract of a 'loop pass'. The discussion ended up with the proposal that LoopSimplify, LCSSA, and LoopVectorizer become function passes. As you can see from the LLVM commit section below, Chandler quickly submitted patches to do this which have been applied.&lt;/p>&lt;/li>&lt;li>&lt;p>Vadim asks for input on his idea of &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69727">using LLVM to generate code with position-independent stacks&lt;/a>. This would be usual for implementing something similar to Python greenlets. Mark Seaborn points to &lt;a href="https://codereview.chromium.org/29743003/">some similar work&lt;/a> he has done which restricts memory access to a range of address space.&lt;/p>&lt;/li>&lt;li>&lt;p>Tom Stellard has completed a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69778">suggested policy and process for LLVM minor releases&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Shea Levy, a maintainer for nixpkgs writes to the list with &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69662">the issues he has encountered&lt;/a>packaging LLVM and Clang for Nix.&lt;/p>&lt;/li>&lt;li>&lt;p>Raul Silvera &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69781">asks for opinions on removing the ReadOnly attribute from math intrinsics&lt;/a> on the grounds that changes to the floating point environment (such as rounding mode) aren't modelled anyway. As Raul points out in a later followup "We currently appear to be at the worst of both worlds as we do not have support for this environment but are always being constrained by it."&lt;/p>&lt;/li>&lt;li>&lt;p>Sebastien Riou asks &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69670">how to force a MachineFunctionPass to be the last one&lt;/a>. Peter Cooper suggests that at the moment you can add the pass to the end of &lt;code>X86PassConfig::addPreEmitPass&lt;/code> or add the pass after the call to preEmitBass and before the ASM printer is added.&lt;/p>&lt;/li>&lt;li>&lt;p>Jasper Neumann has spotted various cases where &lt;a href="http://thread.gmane.org/gmane.comp.compilers.llvm.devel/69601">LLVM leaves unnecessary register moves&lt;/a> in the generated code. Andrew Trick suggests copy-eliminating peepholes could be added after register allocation, but that in general there is reluctance to introduce extra complexity to optimise special cases involving multiple physical register copies due to the small impact they have on performance.&lt;/p>&lt;/li>&lt;li>&lt;p>David Chisnall enquires whether &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69711">LLVM relies on the assumption that the stack is in address space 0&lt;/a>. Matt Arsenault notes that OpenCL local variables currently work by created globals rather than alloca'ing a nondefault address space. He suggests the limitation stems from the fact a number of places in the compiler assume the address space is 0 and never check by retrieving the address space of the relevant pointer.&lt;/p>&lt;/li>&lt;li>&lt;p>Christian Schafmeister has posted &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/34505">a preannouncement of his soon-to-be-released C++ refactoring tool&lt;/a>, written in Lisp. It makes use of clang's ASTMatcher/Refactoring library. I'm looking forward to the promised open source release.&lt;/p>&lt;/li>&lt;li>&lt;p>David Fang has posted a &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/34507">summary of the status of libc++ on powerpc-darwin&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>LoopSimplify is no longer a LoopPass, instead it is both a utility function and a FunctionPass. The motivation was to be able to compute function analysis passes after running LoopSimplify, but the change has a bunch of other advantages described in detail in the commit message. &lt;a href="http://reviews.llvm.org/rL199884">r199884&lt;/a>. Additionally, the LCSSA (loop-closed SSA) pass was made a utility with a function pass and the LoopVectorizer became a FunctionPass. &lt;a href="http://reviews.llvm.org/rL200067">r200067&lt;/a>, &lt;a href="http://reviews.llvm.org/rL200074">r200074&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Constant Hoisting Pass was born. &lt;a href="http://reviews.llvm.org/rL200022">r200022&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>InstCombine learned how to deal with vectors for most fmul/fvid/add/sub/mul/div combines. &lt;a href="http://reviews.llvm.org/rL199598">r199598&lt;/a>, &lt;a href="http://reviews.llvm.org/rL199602">r199602&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Type-based alias analysis has, for the time being, been disabled when using alias analysis in CodeGen due to two shortcomings described in the commit message. &lt;a href="http://reviews.llvm.org/rL200093">r200093&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>LTO gained new methods which allows the user to parse metadata nodes, extract linker options, and extract dependent libraries from a bitcode module. &lt;a href="http://reviews.llvm.org/rL199759">r199759&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The Sparc backend now supports the inline assembly constraint 'I'. &lt;a href="http://reviews.llvm.org/rL199781">r199781&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>The x86 backend allows segment and address-size overrides for movs/lods/outs, fixing &lt;a href="http://llvm.org/bugs/show_bug.cgi?id=9385">bug 9385&lt;/a>. &lt;a href="http://reviews.llvm.org/rL199803">r199803&lt;/a> and more.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-ar no longer opens or fstats file twice. &lt;a href="http://reviews.llvm.org/rL199815">r199815&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>When compiling a function with the minsize attribute, the ARM backend will now use literal pools even for normal i32 immediates. &lt;a href="http://reviews.llvm.org/rL199891">r199891&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>There was a fair bit of activity on the R600 backend. I haven't had the time to properly summarise that activity or pick out the most important commits, so I recommend those interested take a look through the commit logs.&lt;/p>&lt;/li>&lt;li>&lt;p>JIT is now supported for Sparc64. &lt;a href="http://reviews.llvm.org/rL199977">r199977&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>llvm-readobj gained support for the PE32+ format (used for Windows 64-bit executables). &lt;a href="http://reviews.llvm.org/rL200117">r200117&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Registry::getCompletions was implemented. This returns a list of valid completions for a given context. &lt;a href="http://reviews.llvm.org/rL199950">r199950&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang gained basic support for the attribute &lt;code>returns_nonnull&lt;/code>. &lt;a href="http://reviews.llvm.org/rL199626">r199626&lt;/a>, &lt;a href="http://reviews.llvm.org/rL199790">r199790&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>getResultType on function and method declarations was renamed to getReturnType which is a semantically more accurate name. &lt;a href="http://reviews.llvm.org/rL200082">r200082&lt;/a>. Similarly, getResultLoc was renamed to getReturnLoc. &lt;a href="http://reviews.llvm.org/rL200105">r200105&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>All applicable accessors in FunctionProtoType have been renamed from &lt;code>*argument*&lt;/code> to &lt;code>*parameter*&lt;/code>. &lt;a href="http://reviews.llvm.org/rL199686">r199686&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Clang was taught to look in its installation libdir for libraries such as libc++ when the installation is within the system root. &lt;a href="http://reviews.llvm.org/rL199769">r199769&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A module.map file is now required to load a module. &lt;a href="http://reviews.llvm.org/rL199852">r199852&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>lldb learned the 'step-avoid-libraries' setting, which allows a user to list libraries to avoid. &lt;a href="http://reviews.llvm.org/rL199943">r199943&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>In compiler-rt, support was added for intercepting and sanitizing arguments passed to printf functions in AddressSanitizer and ThreadSanitizer. &lt;a href="http://reviews.llvm.org/rL1999729">r199729&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>A fix was committed to ThreadSanitizer to prevent deadlocking after a fork. &lt;a href="http://reviews.llvm.org/rL1999993">r199993&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Dragonegg can now be built with CMake. &lt;a href="http://reviews.llvm.org/rL199994">r199994&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Compiler-rt gained support in its udiv/umod implementations for ARMv4 which lacks bx and clz. Code changes also resulting in a 30%+ performance improvement on the Raspberry Pi (armv7, ARM1176) and 5-10% on a Cortex A9. &lt;a href="http://reviews.llvm.org/rL200001">r200001&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>In AddressSanitizer on Android, all AddressSanitizer output is duplicated to the system log. &lt;a href="http://reviews.llvm.org/rL1999887">r199887&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lld gained support for emitting a PE32+ file header. &lt;a href="http://reviews.llvm.org/rL200128">r200128&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>lldb now supports Haswell on x86-64. &lt;a href="http://reviews.llvm.org/rL199854">r199854&lt;/a>.&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #3, Jan 20th 2014</title><link>https://blog.llvm.org/2014/01/llvm-weekly-3-jan-20th-2014.html</link><pubDate>Mon, 20 Jan 2014 07:42:00 +0000</pubDate><guid>https://blog.llvm.org/2014/01/llvm-weekly-3-jan-20th-2014.html</guid><description>&lt;p>Welcome to the third issue of LLVM Weekly, a weekly newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter.&lt;/p> &lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/3">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Eli Bendersky has penned &lt;a href="http://eli.thegreenplace.net/2014/01/15/some-thoughts-on-llvm-vs-libjit/">some thoughts on LLVM vs. libjit&lt;/a>. Eli describes libjit as being more limited, yet easier to understand and to get going with due to its focus. He also makes interesting claims such as "to be honest, I don't think it's possible to create a really fast JIT within the framework of LLVM, because of its modularity. The faster the JIT, the more you’ll have to deviate from the framework of LLVM". As well as the comments directly on the blog post, there is some good discussion over &lt;a href="http://www.reddit.com/r/programming/comments/1vf1lx/some_thoughts_on_llvm_vs_libjit/">at Reddit&lt;/a> .&lt;/p>&lt;p>&lt;a href="http://www.capstone-engine.org/Version-2.0-RC1.html">Version 2.0-RC1 Capstone disassembly framework has been released&lt;/a>. Capstone is built using code from LLVM. The new release features reduced memory usage, faster Python bindings, and support for PowerPC among other changes.&lt;/p>&lt;p>&lt;a href="http://planet.clang.org/">Planet Clang&lt;/a> has been &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/34439">announced&lt;/a>. It is a news feed following blog posts from Clang and LLVM committers and contributors. The blog roll is fairly short right now, but you're welcome to submit your RSS feed via the email address in the announcement post.&lt;/p>&lt;p>The PDF of an upcoming paper to be presented at CGO next month has been released. &lt;a href="http://www.cs.rutgers.edu/~santosh.nagarakatte/papers/cgo2014-final.pdf">WatchdogLite: Hardware-Accelerated Compiler-Based Pointer Checking&lt;/a> proposes instruction set extensions to accelerate pointer checking functions and achieves a performance overhead of 29% in return for memory safety. The compiler extends (and is compared to) &lt;a href="http://acg.cis.upenn.edu/softbound/">SoftBound + CETS&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>David Woodhouse has posted a &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69440">detailed update on the status of 16-bit x86 in LLVM&lt;/a>. David has successfully built the 16-bit startup code of the Linux kernel and invites people to start testing it on real code.&lt;/p>&lt;/li>&lt;li>&lt;p>Tom Stellard opens a discussion on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69428">stable LLVM 3.4.x releases&lt;/a>. A number of people volunteer their assistance and there seems to be general agreement that any 3.4.1 release would include bug-fixes only with no ABI changes.&lt;/p>&lt;/li>&lt;li>&lt;p>Diego Novillo is looking to boost the performance of the SPEC benchmark libquantum &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69494">using profile info and loop unrolling&lt;/a>. Sean Silva did us all a great service by asking for clarification on what a "runtime unroller" means in this context. The answer is that the trip count (the number of times the loop is executed) is not known at compile time. The thread is worth a read if you're interested in loop unrolling or vectorization.&lt;/p>&lt;/li>&lt;li>&lt;p>Aaron Ballman has stepped up as &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.scm/90431">code owner for the attribute subsystem&lt;/a> with unanimous approval.&lt;/p>&lt;/li>&lt;li>&lt;p>Skye Wanderman-Milne was looking for help on &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69470">loop unrolling a single function using the C++ API&lt;/a>. Simply adding the LoopUnrollPass to a FunctionPassManager had no effect, but after some advice from the mailing list Skye did respond to confirm that the set of ScalarReplAggregates, LoopRotate, and LoopUnroll passes did have the desired effect.&lt;/p>&lt;/li>&lt;li>&lt;p>Tobias Grosser asks why LLVM's LNT (used for performance tracking) defaults to &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69555">aggregating results by taking the minimum rather than an average&lt;/a>. Replies quickly hone on in the real problem at hand, which is that results are 'noisy' potentially due to other processes on the machine but also quantised to certain values due to the timer being relatively coarse-grained in comparison to the execution time for the benchmarks.&lt;/p>&lt;/li>&lt;li>&lt;p>This week's unsolved question is from Keith Walker, who's noticed that on ARM, the function prologue generated in GCC and LLVM ends up with &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69514">the frame register pointing to a different address&lt;/a>. The LLVM prologue results in the frame pointer pointing to just after the pushed r11 register (the saved frame pointer) while on GCC the frame pointer points to just after the pushed link register. The difference makes it difficult to produce a generic stack walker.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The MCJIT remote execution protocol was heavily refactored and it was hoped fixed on ARM where it was previously non-functional. There are still some random failures on ARM though, see &lt;a href="http://llvm.org/bugs/show_bug.cgi?id=18057">bug 18507&lt;/a>. &lt;a href="http://reviews.llvm.org/rL199261">r199261&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>The cutoff on when to attempt to convert a switch to a lookup table was changed from 4 to 3. Experimentally, Hans Wennborg found that there was no speedup for two cases but three produced a speedup. When building Clang, this results in 480 new switches to be transformed and an 8KB smaller binary size. &lt;a href="http://reviews.llvm.org/rL199294">r199294&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>Support for the &lt;code>preserve_mostcc&lt;/code> and &lt;code>preserve_allcc&lt;/code> calling conventions was introduced and implemented for x86-64. These are intend to be used by a future version of the ObjectiveC runtime in order to reduce overhead of runtime calls. &lt;a href="http://reviews.llvm.org/rL199508">r199508&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>The configure script now checks for a sufficiently modern host compiler (Clang 3.1 or GCC 4.7) &lt;a href="http://reviews.llvm.org/rL199182">r199182&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>More work on the new PassManager driver. Bitcode can now be written using the new PM and more preparation/cleanup work has been performed. &lt;a href="http://reviews.llvm.org/rL199078">r199078&lt;/a>, &lt;a href="http://reviews.llvm.org/rL199095">r199095&lt;/a>, &lt;a href="http://reviews.llvm.org/rL199104">r199104&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>Dominators.h and Verifier.h moved from the Analysis directory to the IR directory. &lt;a href="http://reviews.llvm.org/rL199082">r199082&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>The DAGCombiner learned to reassociate (i.e. change the order of) vector operations &lt;a href="http://reviews.llvm.org/rL199135">r199135&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>dllexport and dllimport are no longer represented as linkage types &lt;a href="http://reviews.llvm.org/rL199218">r199218&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>Parsing of the .symver directive in ARM assembly was fixed &lt;a href="http://reviews.llvm.org/rL199339">r199339&lt;/a>&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The MS ABI is now used for Win32 targets by default &lt;a href="http://reviews.llvm.org/rL199131">r199131&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>The MicrosoftMode language option was renamed to MSVCCompat and its role clarified (see the commit message for a description of MicrosoftExt vs MSVCCompat). &lt;a href="http://reviews.llvm.org/rL199209">r199209&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>-cxx-abi&lt;/code> command-line flag was killed and is instead inferred depending on the target. &lt;a href="http://reviews.llvm.org/rL199250">r199250&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>The analyzer learned that shifting a constant value by its bit width is undefined. &lt;a href="http://reviews.llvm.org/rL199405">r199405&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>nonnull&lt;/code> attribute can now be applied to parameters directly. &lt;a href="http://reviews.llvm.org/rL199467">r199467&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>Support for AArch64 on NetBSD was added to the compiler driver. &lt;a href="http://reviews.llvm.org/rL199124">r199124&lt;/a>&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Other project commits&lt;/h3>&lt;ul>&lt;li>&lt;p>AddressSanitizer in compiler-rt gained the ability to start in 'deactivated' mode. It can later be activated when &lt;code>__asan_init&lt;/code> is called in an instrumented library. &lt;a href="http://reviews.llvm.org/rL199377">r199377&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>A number of patches were committed to lld for better MIPS support. &lt;a href="http://reviews.llvm.org/rL199231">r199231&lt;/a> and many more. &lt;/p>&lt;/li>&lt;li>&lt;p>lldb recognises Linux distribution in the vendor portion of the host triple. e.g. &lt;code>x86_64-ubuntu-linux-gnu&lt;/code>. &lt;a href="http://reviews.llvm.org/rL199510">r199510&lt;/a>&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>LLVM Weekly - #2, Jan 13th 2014</title><link>https://blog.llvm.org/2014/01/llvm-weekly-2-jan-13th-2014.html</link><pubDate>Mon, 13 Jan 2014 07:29:00 +0000</pubDate><guid>https://blog.llvm.org/2014/01/llvm-weekly-2-jan-13th-2014.html</guid><description>&lt;p>Welcome to the second issue of LLVM Weekly (and the first to appear on the LLVM blog). LLVM Weekly is a newsletter (published every Monday) covering developments in LLVM, Clang, and related projects. Thank you to everyone who has given positive feedback or suggestions, I'm planning in future editions to integrate some sort of statistics of git activity and contributions as well as activity on Bugzilla. LLVM Weekly is brought to you by &lt;a href="http://asbradbury.org">Alex Bradbury&lt;/a>. Subscribe to future issues at &lt;a href="http://llvmweekly.org">http://llvmweekly.org&lt;/a> and pass it on to anyone else you think may be interested. Please send any tips or feedback to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;">&amp;#97;&amp;#115;&amp;#98;&amp;#64;&amp;#97;&amp;#115;&amp;#98;&amp;#114;&amp;#97;&amp;#100;&amp;#98;&amp;#117;&amp;#114;&amp;#121;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a>, or &lt;a href="https://twitter.com/llvmweekly">@llvmweekly&lt;/a> or &lt;a href="https://twitter.com/asbradbury">@asbradbury&lt;/a> on Twitter. &lt;/p>&lt;p>The canonical home for this issue &lt;a href="http://llvmweekly.org/issue/2">can be found here at llvmweekly.org&lt;/a>. &lt;/p> &lt;a name='more'>&lt;/a> &lt;h3>News and articles from around the web&lt;/h3>&lt;p>Stephen Diehl has published a &lt;a href="http://www.stephendiehl.com/llvm/">Haskell adaptation of the 'Kaleidoscope' tutorials&lt;/a> on how to implement aJIT compiled language using LLVM. This was received very positively and prompted some &lt;a href="https://news.ycombinator.com/item?id=7031998">discussion on HN&lt;/a>.&lt;/p>&lt;p>Registration for EuroLLVM is &lt;a href="http://llvm.org/devmtg/2014-04/">now open&lt;/a>. There's still time to submit your talk, poster or workshop proposals too.&lt;/p>&lt;p>&lt;a href="https://github.com/mozilla/rust/blob/0.9/RELEASES.txt">Rust 0.9 has been released&lt;/a>. Rust is a systems programming language which targetting LLVM with a particular emphasis on type safety, memory safety and concurrency. One of the core Rust developers at Mozilla, Niko Matsakis, also gave a &lt;a href="http://www.youtube.com/watch?v=gfCtbGiHcg0">talk at linux.conf.au introducing Rust&lt;/a>.&lt;/p>&lt;p>Coverity 7 &lt;a href="http://www.prnewswire.com/news-releases/coverity-unveils-new-version-of-development-testing-platform-239056251.html">now includes Clang compiler support&lt;/a>.&lt;/p>&lt;h3>On the mailing lists&lt;/h3>&lt;ul>&lt;li>&lt;p>Apple are &lt;a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-January/069169.html">advertising for interns&lt;/a> with their LLVM compiler frontend and runtime teams this summer. Note internships are restricted to students.&lt;/p>&lt;/li>&lt;li>&lt;p>Amara Emerson shares a &lt;a href="article.gmane.org/gmane.comp.compilers.clang.devel/34199/">proposal on handling the removal of the -mfpu option for AArch64&lt;/a>. This proposal aims to match gcc, where instead of &lt;code>-mfpu&lt;/code> to specify FPU/NEON, the same information will be passed using feature modifiers on &lt;code>-march&lt;/code>. It was pointed out that GCC also has &lt;code>-mcpu&lt;/code> to complicate things. It's hoped collaboration with the GCC devs will lead to a simplification that both can use.&lt;/p>&lt;/li>&lt;li>&lt;p>Tobias Grosser has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69264">set up some new machines tracking performance at -O3&lt;/a> using &lt;a href="http://llvm.org/docs/lnt/">LNT&lt;/a>, which is a framework used for performance tracking of LLVM over time. Tobias is asking for someone to step in and improve the LNT infrastructure to take advantage of this new data. LNT is written in Python, using Flask and SQLAlchemy so this would be an ideal project for someone interested in contributing to LLVM but perhaps doesn't match the typical profile of the LLVM contributor.&lt;/p>&lt;/li>&lt;li>&lt;p>Timothy Baldridge asks whether &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69219">LLVM can inline external library functions in a JITted method&lt;/a>. Replies point out that for the specific example given (memcpy), LLVM is already able to inline. Kevin Modzelewski &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69236">describes a technique he's used&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Rafael Espíndola announces a new milestone, all in-tree backends &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69369">now use MCInst for printing assembly&lt;/a>. Out of tree targets will need to lower MachineInstr to MCInst to use the new printer and the recent &lt;a href="http://reviews.llvm.org/rL198030">conversion of the Sparc backend&lt;/a> to do this is probably as good a guide as any.&lt;/p>&lt;/li>&lt;li>&lt;p>As part of the effort to use C++11 inside the LLVM codebase, Chandler Carruth has asked anyone running build-bot to look at &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69242">upgrading to the new baseline compiler versions&lt;/a>. These are MSVC 2012, GCC 4.7, or Clang 3.1.&lt;/p>&lt;/li>&lt;li>&lt;p>Jasper Neumann has been &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69383/">working on switch lowering using hashing&lt;/a> as an alternative to using a jump table. He later &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69389/">further elaborates on the technique&lt;/a> and points to an interesting looking paper, &lt;a href="http://ols.fedoraproject.org/GCC/Reprints-2008/sayle-reprint.pdf">Multiway Branch Code Generation&lt;/a> by Roger Anthony Sayle.&lt;/p>&lt;/li>&lt;li>&lt;p>Kevin Modzelewski is encountering &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69349">disappointing bitcode parsing performance&lt;/a>, in particular when debug info is present. The issue is not identified or solved yet, I'm hoping to be able to point to an explanation of the problem in next week's issue!&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth suggests that the &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69244">interprocedual analysis passes be merged in to the Analysis library&lt;/a>. Right now, various interprocedural analyses live in lib/Analysis/IPA and are built as the LLVMipa library. Chris Lattner agrees so we can expect the merge to happen in the not too distant future.&lt;/p>&lt;/li>&lt;li>&lt;p>Chandler Carruth has &lt;a href="http://article.gmane.org/gmane.comp.compilers.llvm.devel/69392">suggested&lt;/a> that the &lt;a href="http://www.llvm.org/docs/CodingStandards.html">LLVM coding standards&lt;/a> be updated so that namespaces are never indented, as opposed to the current confusing mixture. Despite the fact that debating whitespace is a favourite pastime of most programmers, the thread has been fairly uncontroversial thus far.&lt;/p>&lt;/li>&lt;li>&lt;p>Milian Wolff wonders about &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/34168">using the clang C API to parse default values&lt;/a>.&lt;/p>&lt;/li>&lt;li>&lt;p>Renato Golin is working towards &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.devel/34161">adding various pragmas to Clang&lt;/a> and is seeking feedback on how to implement it. A few people on the mailing list suggest it might be worth trying to instead implement these using &lt;a href="http://www.codesynthesis.com/~boris/blog/2012/04/18/cxx11-generalized-attributes/">C++11 generalized attributes&lt;/a> and perhaps enabling support for the syntax in C99.&lt;/p>&lt;/li>&lt;li>&lt;p>The &lt;code>__has_attribute&lt;/code> feature macro is commonly used to detect support for a particular attribute in the compiler. Aaron Ballman &lt;a href="http://article.gmane.org/gmane.comp.compilers.clang.scm/90321">suggests extending it&lt;/a> so you can test for the precise form of attribute syntax you are after.&lt;/p>&lt;/li>&lt;/ul>&lt;h3>LLVM commits&lt;/h3>&lt;ul>&lt;li>&lt;p>The Sparc ASM parser has seen further development, learning to parse branch instructions, conditional moves, and floating point instructions and more. It also gained an initial disassembler implementation. &lt;a href="http://reviews.llvm.org/rL198738">r198738&lt;/a>, &lt;a href="http://reviews.llvm.org/rL199033">r199033&lt;/a>, &lt;a href="http://reviews.llvm.org/rL198591">r198591&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>In SimplifyCFG will now understand that when building a lookup table for a switch with no holes that it doesn't need a default result. According to the commit message, this saves 164KB off the clang binary in a bootstrap build. &lt;a href="http://reviews.llvm.org/rL199025">r199025&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>The new pass manager saw further developments. &lt;a href="http://reviews.llvm.org/rL198998">r198998&lt;/a> and many others (prefixed with &lt;code>[PM]&lt;/code> in the commit logs)&lt;/p>&lt;/li>&lt;li>&lt;p>The SampleProfile pass saw further development. Profile samples are propagated through the CFG, heuristically converting instruction samples to branch weights. Work was done to extend and simplify the format of sample profile input files. &lt;a href="http://reviews.llvm.org/rL198972">r198972&lt;/a>, &lt;a href="http://reviews.llvm.org/rL198973">r198973&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>The LoopVectorizer can use versioning for strided memory access. &lt;a href="http://reviews.llvm.org/rL198950">r198950&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>In DataLayout, 'w' is now used rather than 'c' for win32 name mangling. &lt;a href="http://reviews.llvm.org/rL198938">r198938&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>The LLVM developer policy was updated to more clearly spell out how to submit patches to the project. &lt;a href="http://reviews.llvm.org/rL198901">r198901&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>WriteAsOperand has been killed in favour of the the printAsOperand method. &lt;a href="http://reviews.llvm.org/rL198836">r198836&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>The x86 backend learned some more AVX-512 intrinsics. &lt;a href="http://reviews.llvm.org/rL198745">r198745&lt;/a>&lt;/p>&lt;/li>&lt;/ul>&lt;h3>Clang commits&lt;/h3>&lt;ul>&lt;li>&lt;p>Support for the &lt;code>enable_if&lt;/code> attribute was added. This can be placed on function declarations to control which overload is selected based on the values of the function's arguments. See the commitdiff (particularly the docs change) for more info. &lt;a href="http://reviews.llvm.org/rL198996">r198996&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>More work on MS VC++ ABI compatibility was committed. &lt;a href="http://reviews.llvm.org/rL198907">r198907&lt;/a>, &lt;a href="http://reviews.llvm.org/rL198975">r198975&lt;/a>, &lt;a href="http://reviews.llvm.org/rL198977">r198977&lt;/a>, &lt;a href="http://reviews.llvm.org/rL198900">r198900&lt;/a> and more.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;code>__has_attribute&lt;/code> now understands target-specific attributes. &lt;a href="http://reviews.llvm.org/rL198897">r198897&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>The clang plugin infrastructure is now covered by at least some tests. &lt;a href="http://reviews.llvm.org/rL198747">r198747&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>The documentation on clang internals was updated with more up to date information on adding new attributes. &lt;a href="http://reviews.llvm.org/rL198705">r198705&lt;/a>&lt;/p>&lt;/li>&lt;li>&lt;p>An initial instrumentation-based profile guided optimisation implementation landed. &lt;a href="http://reviews.llvm.org/rL198640">r198640&lt;/a>&lt;/p>&lt;/li>&lt;/ul></description></item><item><title>Google Summer of Code: C++ Modernizer Improvements</title><link>https://blog.llvm.org/2013/11/google-summer-of-code-c-modernizer.html</link><pubDate>Mon, 18 Nov 2013 04:12:00 +0000</pubDate><guid>https://blog.llvm.org/2013/11/google-summer-of-code-c-modernizer.html</guid><description>&lt;div style="text-indent: 0;">&lt;a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2013">Google Summer of Code&lt;/a> (GSoC) offers students stipends to participate in open source projects during the summer. This year, I was accepted to work on the &lt;a href="http://clang.llvm.org/extra/clang-modernize.html">Clang C++ Modernizer&lt;/a>, a project formerly known as the &lt;i>C++11 Migrator&lt;/i>, driven by a team at Intel. The goals of the tool are to modernize C++ code by using the new features of new C++ standards in order to improve maintainability, readability and compile time and runtime performance. The project was featured in the April blog post “&lt;a href="http://blog.llvm.org/2013/04/status-of-c11-migrator.html">Status of the C++11 Migrator&lt;/a>” and has been evolving since, both in terms of architecture and features.&lt;br />&lt;div>&lt;br />&lt;div>This article presents the improvements made to the tool in the last few months, which include my work from this summer for GSoC. For a complete overview of the tool and how to install it, please visit the documentation: &lt;a href="http://clang.llvm.org/extra/clang-modernize.html#getting-started">http://clang.llvm.org/extra/clang-modernize.html#getting-started&lt;/a>. For a demonstration of the tool you can take a look at the Going Native 2013 talk given by Chandler Carruth: &lt;a href="http://channel9.msdn.com/Events/GoingNative/2013/The-Care-and-Feeding-of-C-s-Dragons">The Care and Feeding of C++'s Dragons&lt;/a>. clang-modernize is featured starting at ~33min.&lt;br />&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;br />&lt;a name='more'>&lt;/a>&lt;/div>&lt;h2>Transform &lt;u>all&lt;/u> Files That Make up a Translation Unit&lt;/h2>A major improvement since the last version is the ability to transform every file that composes a translation unit not only the main source file. This means headers also get transformed if they need to be which makes the modernizer more useful.&lt;br />&lt;br />To avoid changing files that shouldn’t be changed, e.g. system headers or headers for third-party libraries, there are a few options to control which files should be transformed:&lt;br />&lt;ul>&lt;li>&lt;a href="http://clang.llvm.org/extra/ModernizerUsage.html#cmdoption-include">-include&lt;/a> Takes a comma-separated list of paths allowed to be transformed. All files within the entire directory tree rooted at each given path are marked as modifiable. For safety, the default behaviour is that no extra files will be transformed.&lt;/li>&lt;li>&lt;a href="http://clang.llvm.org/extra/ModernizerUsage.html#cmdoption-exclude">-exclude&lt;/a> Takes a comma-separated list of paths forbidden to be transformed. Can be used to prune out subtrees from included directory trees.&lt;/li>&lt;li>&lt;a href="http://clang.llvm.org/extra/ModernizerUsage.html#cmdoption-include-from">-include-from&lt;/a> and &lt;a href="http://clang.llvm.org/extra/ModernizerUsage.html#cmdoption-exclude-from">-exclude-from&lt;/a> Respectively equivalent to -include and -exclude but takes a filename as argument instead of a comma-separated list of paths. The file should contain one path per line.&lt;/li>&lt;/ul>Example, assuming a directory hierarchy of:&lt;br />&lt;ul>&lt;li>src/foo.cpp&lt;/li>&lt;li>include/foo.h&lt;/li>&lt;li>lib/third-party.h&lt;/li>&lt;/ul>to transform both &lt;i>foo.cpp&lt;/i> and &lt;i>foo.h&lt;/i> but leave &lt;i>third-party.h&lt;/i> as is, you can use one of the following commands:&lt;br />&lt;div style="padding-left: 25px;">&lt;pre style="color: #555555;">clang-modernize -include=include/ src/foo.cpp -- -std=c++11 -I include/ -I lib/&lt;/pre>&lt;pre style="color: #555555;">clang-modernize -include=. -exclude=lib/ src/foo.cpp -- -std=c++11 -I include/ -I lib/&lt;/pre>&lt;/div>&lt;h2>The Transforms&lt;/h2>Right now there is a total of 6 transforms, two of which are new:&lt;br />&lt;ol>&lt;li>&lt;a href="http://clang.llvm.org/extra/AddOverrideTransform.html">Add-Override Transform&lt;/a>&lt;br />Adds the ‘override’ specifier to overriden member functions.&lt;/li>&lt;li>&lt;a href="http://clang.llvm.org/extra/LoopConvertTransform.html">Loop Convert Transform&lt;/a>&lt;br />Makes use of for-ranged based loop.&lt;/li>&lt;li>&lt;a href="http://clang.llvm.org/extra/PassByValueTransform.html">Pass-By-Value Transform&lt;/a> [new]&lt;br />Replaces const-ref parameters that would benefit from using the pass-by-value idiom.&lt;/li>&lt;li>&lt;a href="http://clang.llvm.org/extra/ReplaceAutoPtrTransform.html">Replace Auto-Ptr Transform&lt;/a> [new]&lt;br />Replaces uses of the deprecated &lt;tt>std::auto_ptr&lt;/tt> by &lt;tt>std::unique_ptr&lt;/tt>.&lt;/li>&lt;li>&lt;a href="http://clang.llvm.org/extra/UseAutoTransform.html">Use-Auto Transform&lt;/a>&lt;br />Makes use of the auto type specifier in variable declarations.&lt;/li>&lt;li>&lt;a href="http://clang.llvm.org/extra/UseNullptrTransform.html">Use-Nullptr Transform&lt;/a>&lt;br />Replaces null literals and macros by nullptr where applicable.&lt;/li>&lt;/ol>&lt;h3>Improvement to Add-Override&lt;/h3>Since the last article in April, the Add-Override Transform has been improved to handle user-defined macros. Some projects, like LLVM, use a macro that expands to the ‘override’ specifier for backward compatibility with non-C++11-compliant compilers. clang-modernize can detect those macros and use them instead of the ‘override’ identifier.&lt;br />&lt;br />The command line switch to enable this functionality is &lt;b>-override-macros&lt;/b>.&lt;br />&lt;br />Example:&lt;br />&lt;br />&lt;div style="padding-left: 25px;">&lt;tt>clang-modernize &lt;b>-override-macros&lt;/b> foo.cpp&lt;/tt>&lt;/div>&lt;div>&lt;span style="font-size: 15px; white-space: pre-wrap;">&lt;/span>&lt;br />&lt;div dir="ltr">&lt;table style="border-collapse: collapse; border: none; width: 624px;">&lt;colgroup>&lt;col width="*">&lt;/col>&lt;col width="*">&lt;/col>&lt;/colgroup>&lt;tbody>&lt;tr style="height: 0px;">&lt;td style="border: 1px solid #000000; padding: 7px 7px 7px 7px; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">Before&lt;/span>&lt;/div>&lt;/td>&lt;td style="border: 1px solid #000000; padding: 7px 7px 7px 7px; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">After&lt;/span>&lt;/div>&lt;/td>&lt;/tr>&lt;tr style="height: 0px;">&lt;td style="border: 1px solid #000000; padding: 7px 7px 7px 7px; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">#define LLVM_OVERRIDE override&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="color: #007020;">&lt;br class="kix-line-break" />&lt;/span>&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">struct&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> A {&lt;br class="kix-line-break" /> &amp;nbsp;&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">virtual&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">void&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> foo();&lt;br class="kix-line-break" />};&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">struct&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> B &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">:&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> A {&lt;br class="kix-line-break" /> &amp;nbsp;&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">virtual&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">void&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> foo();&lt;br class="kix-line-break" />};&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/div>&lt;/td>&lt;td style="border: 1px solid #000000; padding: 7px 7px 7px 7px; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">#define LLVM_OVERRIDE override&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&lt;br class="kix-line-break" />&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">struct&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> A {&lt;br class="kix-line-break" /> &amp;nbsp;&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">virtual&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">void&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> foo();&lt;br class="kix-line-break" />};&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">struct&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> B &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">:&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> A {&lt;br class="kix-line-break" /> &amp;nbsp;&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">virtual&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">void&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> foo() &lt;/span>&lt;span style="font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">LLVM_OVERRIDE&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">;&lt;br class="kix-line-break" />};&lt;/span>&lt;/span>&lt;/div>&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>&lt;/div>&lt;h3>Improvement to Use-Nullptr&lt;/h3>This transform has also been improved to handle user-defined macros that behave like NULL. The user specifies which macros can be replaced by nullptr by using the command line switch &lt;a href="http://clang.llvm.org/extra/ModernizerUsage.html#cmdoption-user-null-macros">-user-null-macros=&amp;lt;string&amp;gt;&lt;/a>.&lt;br />&lt;br />Example:&lt;br />&lt;br />&lt;div style="padding-left: 25px;">&lt;tt>clang-modernize &lt;b>-user-null-macros=MY_NULL&lt;/b> bar.cpp&lt;/tt>&lt;/div>&lt;span style="font-size: 15px; white-space: pre-wrap;">&lt;/span>&lt;br />&lt;div dir="ltr">&lt;table style="border-collapse: collapse; border: none; width: 624px;">&lt;colgroup>&lt;col width="*">&lt;/col>&lt;col width="*">&lt;/col>&lt;/colgroup>&lt;tbody>&lt;tr style="height: 0px;">&lt;td style="border: 1px solid #000000; padding: 7px 7px 7px 7px; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: Arial; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">Before&lt;/span>&lt;/div>&lt;/td>&lt;td style="border: 1px solid #000000; padding: 7px 7px 7px 7px; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: Arial; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">After&lt;/span>&lt;/div>&lt;/td>&lt;/tr>&lt;tr style="height: 0px;">&lt;td style="border: 1px solid #000000; padding: 7px 7px 7px 7px; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1; margin-bottom: 8pt; margin-top: 11pt;">&lt;span style="color: #007020; font-family: 'Courier New', Courier, monospace; font-size: 13px; line-height: 1; white-space: pre-wrap;">#define MY_NULL 0&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&lt;br class="kix-line-break" />&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">void&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="color: #06287e; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">bar&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">() {&lt;br class="kix-line-break" /> &amp;nbsp;&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">int&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">*&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">p &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">=&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> MY_NULL;&lt;br class="kix-line-break" />}&lt;/span>&lt;/span>&lt;/div>&lt;/td>&lt;td style="border: 1px solid #000000; padding: 7px 7px 7px 7px; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">#define MY_NULL 0&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&lt;br class="kix-line-break" />&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">void&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="color: #06287e; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">bar&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">() {&lt;br class="kix-line-break" /> &amp;nbsp;&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">int&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">*&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">p &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">=&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">nullptr&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">;&lt;br class="kix-line-break" />}&lt;/span>&lt;/span>&lt;/div>&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>&lt;/div>&lt;h3> New Transform: Replace Auto-Ptr&lt;/h3>This transform was a result of GSoC work. The transform replaces uses of &lt;tt>std::auto_ptr&lt;/tt> by &lt;tt>std::unique_ptr&lt;/tt>. It also inserts calls to &lt;tt>std::move()&lt;/tt> when needed.&lt;br />&lt;span style="font-size: 15px; white-space: pre-wrap;">&lt;/span>&lt;br />&lt;div dir="ltr">&lt;table style="border-collapse: collapse; border: none; width: 624px;">&lt;colgroup>&lt;col width="*">&lt;/col>&lt;col width="*">&lt;/col>&lt;/colgroup>&lt;tbody>&lt;tr style="height: 0px;">&lt;td style="border: 1px solid #000000; padding: 7px 7px 7px 7px; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: Arial; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">Before&lt;/span>&lt;/div>&lt;/td>&lt;td style="border: 1px solid #000000; padding: 7px 7px 7px 7px; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: Arial; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">After&lt;/span>&lt;/div>&lt;/td>&lt;/tr>&lt;tr style="height: 0px;">&lt;td style="border: 1px solid #000000; padding: 7px 7px 7px 7px; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1; margin-bottom: 8pt; margin-top: 11pt;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">#include &amp;lt;memory&amp;gt;&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&lt;br class="kix-line-break" />&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">void&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="color: #06287e; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">steal&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">(std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">::&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">auto_ptr&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&amp;lt;&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">int&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&amp;gt;&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> x);&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">void&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="color: #06287e; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">foo&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">(&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">int&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> i) {&lt;br class="kix-line-break" /> &amp;nbsp;std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">::&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">auto_ptr&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&amp;lt;&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">int&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&amp;gt;&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> p(&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">new&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">int&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">(i));&lt;br class="kix-line-break" />&lt;br class="kix-line-break" /> &amp;nbsp;steal(p);&lt;br class="kix-line-break" />}&lt;/span>&lt;/span>&lt;/div>&lt;/td>&lt;td style="border: 1px solid #000000; padding: 7px 7px 7px 7px; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1; margin-bottom: 8pt; margin-top: 11pt;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">#include &amp;lt;memory&amp;gt;&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&lt;br class="kix-line-break" />&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">void&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="color: #06287e; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">steal&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">(std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">::&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">unique_ptr&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&amp;lt;&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">int&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&amp;gt;&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> x);&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">void&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="color: #06287e; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">foo&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">(&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">int&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> i) {&lt;br class="kix-line-break" /> &amp;nbsp;std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">::&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">unique_ptr&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&amp;lt;&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">int&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&amp;gt;&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> p(&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">new&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">int&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">(i));&lt;br class="kix-line-break" />&lt;br class="kix-line-break" /> &amp;nbsp;steal(&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">std&lt;/span>&lt;span style="color: #666666; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">::&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">move(&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">p&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">)&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">);&lt;br class="kix-line-break" />}&lt;/span>&lt;/span>&lt;/div>&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>&lt;/div>&lt;h3>New Transform: Pass-By-Value&lt;/h3>Also a product of GSoC this transform makes use of move semantics added in C++11 to avoid a copy for functions that accept types that have move constructors by const reference. By changing to pass-by-value semantics, a copy can be avoided if an rvalue argument is provided. For lvalue arguments, the number of copies remains unchanged.&lt;br />&lt;br />The transform is currently limited to constructor parameters that are copied into class fields.&lt;br />&lt;br />Example:&lt;br />&lt;br />&lt;div style="padding-left: 25px;">&lt;tt>clang-modernize pass-by-value.cpp&lt;/tt>&lt;/div>&lt;br />&lt;div>&lt;div dir="ltr" style="color: black; font-weight: normal;">&lt;table style="border-collapse: collapse; border: none; width: 624px;">&lt;colgroup>&lt;col width="*">&lt;/col>&lt;col width="*">&lt;/col>&lt;/colgroup>&lt;tbody>&lt;tr style="height: 0px;">&lt;td style="border: 1px solid #000000; padding: 7px 7px 7px 7px; vertical-align: top;">&lt;b>Before&lt;/b>&lt;/td>&lt;td style="border: 1px solid #000000; padding: 7px 7px 7px 7px; vertical-align: top;">&lt;b>After&lt;/b>&lt;br />&lt;div dir="ltr" style="line-height: 1; margin-bottom: 0pt; margin-top: 0pt;">&lt;/div>&lt;/td>&lt;/tr>&lt;tr style="height: 0px;">&lt;td style="border: 1px solid #000000; padding: 7px 7px 7px 7px; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1; margin-bottom: 8pt; margin-top: 11pt;">&lt;div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">#include &amp;lt;string&amp;gt;&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">class&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="color: #0e84b5; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">A&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> {&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #002070; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">public:&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&lt;br class="kix-line-break" /> &amp;nbsp;A(&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">const&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">::&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">string &amp;amp;Copied,&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">const&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">::&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">string &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&amp;amp;&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">ReadOnly)&lt;br class="kix-line-break" /> &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">:&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> Copied(Copied),&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> ReadOnly(ReadOnly) {}&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #002070; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #002070; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">private:&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&lt;br class="kix-line-break" /> &amp;nbsp;std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">::&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">string Copied;&lt;br class="kix-line-break" /> &amp;nbsp;&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">const&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">::&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">string &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&amp;amp;&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">ReadOnly;&lt;br class="kix-line-break" />};&lt;/span>&lt;/span>&lt;/div>&lt;/td>&lt;td style="border: 1px solid #000000; padding: 7px 7px 7px 7px; vertical-align: top;">&lt;div dir="ltr" style="line-height: 1; margin-bottom: 8pt; margin-top: 11pt;">&lt;span style="color: #007020; font-family: 'Courier New', Courier, monospace; font-size: 13px; line-height: 1; white-space: pre-wrap;">#include &amp;lt;string&amp;gt;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">#include &amp;lt;utility&amp;gt;&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&lt;u>&lt;br class="kix-line-break" />&lt;/u>&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">class&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> &lt;/span>&lt;span style="color: #0e84b5; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">A&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> {&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #002070; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">public:&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&lt;br class="kix-line-break" /> &amp;nbsp;A(&lt;/span>&lt;span style="color: #007020; font-size: 13px; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">std&lt;/span>&lt;span style="color: #666666; font-size: 13px; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">::&lt;/span>&lt;span style="color: #007020; font-size: 13px; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">string&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> Copied,&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"> const&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">::&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">string &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&amp;amp;&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">ReadOnly)&lt;br class="kix-line-break" /> &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">:&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> Copied(&lt;/span>&lt;span style="color: #007020; font-size: 13px; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">std&lt;/span>&lt;span style="color: #666666; font-size: 13px; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">::&lt;/span>&lt;span style="color: #007020; font-size: 13px; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">move(&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">Copied&lt;/span>&lt;span style="color: #007020; font-size: 13px; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">)&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">),&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> ReadOnly(ReadOnly) {}&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #002070; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #002070; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">private:&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&lt;br class="kix-line-break" /> &amp;nbsp;std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">::&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">string Copied;&lt;br class="kix-line-break" /> &amp;nbsp;&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;">const&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"> std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">::&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">string &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">&amp;amp;&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;">ReadOnly;&lt;br class="kix-line-break" />};&lt;/span>&lt;/span>&lt;/div>&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>&lt;/div>&lt;/div>&lt;br />&lt;tt>std::move()&lt;/tt> is a library function declared in &lt;tt>&amp;lt;utility&amp;gt;&lt;/tt>. If need be, this header is added by clang-modernize.&lt;br />&lt;br />There is a lot of room for improvement in this transform. Other situations that are safe to transform likely exist. Contributions are most welcomed in this area! &lt;br />&lt;div>&lt;h2>Usability Improvements&lt;/h2>We also worked hard on improving the overall usability of the modernizer. Invoking the modernizer now requires fewer arguments since most of the time the arguments can be inferred. &lt;br />&lt;ul>&lt;li>If no compilation database or flags are provided, -std=c++11 is assumed.&lt;/li>&lt;li>All transforms are enabled by default.&lt;/li>&lt;li>Files don’t need to be explicitly listed if a compilation database is provided. The modernizer will get files from the compilation database. Use -include to choose which ones.&lt;/li>&lt;/ul>Two new features were also added.&lt;br />&lt;ol>&lt;li>Automatically reformat code affected by transforms using &lt;a href="http://clang.llvm.org/docs/LibFormat.html">LibFormat&lt;/a>.&lt;/li>&lt;li>A new command line switch to choose transforms to apply based on compiler support.&lt;/li>&lt;/ol>&lt;h3>Reformatting Transformed Code&lt;/h3>&lt;a href="http://clang.llvm.org/docs/LibFormat.html">LibFormat&lt;/a> is the library used behind the scenes by &lt;a href="http://clang.llvm.org/docs/ClangFormat.html">clang-format&lt;/a>, a tool to format C, C++ and Obj-C code. &lt;i>clang-modernize&lt;/i> uses this library as well to reformat transformed code. When enabled with -format, the default style is LLVM. The -style option can control the style in a way identical to clang-format.&lt;br />&lt;br />Example:&lt;/div>&lt;div>&lt;b>&lt;br />&lt;/b>&lt;/div>&lt;div>&lt;b>format.cpp&lt;/b>&lt;/div>&lt;div>&lt;div dir="ltr" style="margin-bottom: 8pt; margin-left: 36pt; margin-top: 11pt;">&lt;div>&lt;span id="docs-internal-guid-65d203ed-13ad-2ddb-d832-4912cc50e162">&lt;span style="background-color: transparent; color: black; font-family: Courier New, Courier, monospace; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1.15; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline;">#include &amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline;">&lt;br class="kix-line-break" />&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline;">#include &amp;lt;vector&amp;gt;&lt;/span>&lt;/span>&lt;/span>&lt;/div>&lt;div style="font-weight: normal; line-height: 1.15;">&lt;span style="background-color: transparent; font-size: 15px; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span id="docs-internal-guid-65d203ed-13ad-2ddb-d832-4912cc50e162">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="font-size: 13px; vertical-align: baseline;">&lt;span style="color: #007020;">&lt;br class="kix-line-break" />&lt;/span>&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline;">void&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> &lt;/span>&lt;span style="color: #06287e; font-size: 13px; vertical-align: baseline;">f&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">(&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline;">const&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">::&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">vector&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">&amp;lt;&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline;">int&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">&amp;gt;&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">&amp;amp;&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">my_container) {&lt;br class="kix-line-break" /> &amp;nbsp;&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline;">for&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> (std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">::&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">vector&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">&amp;lt;&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline;">int&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">&amp;gt;::&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">const_iterator I &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">=&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> my_container.begin(),&lt;br class="kix-line-break" /> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;E &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">=&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> my_container.end();&lt;br class="kix-line-break" /> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;I &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">!=&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> E; &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">++&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">I) {&lt;br class="kix-line-break" /> &amp;nbsp;&amp;nbsp;&amp;nbsp;std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">::&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">cout &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">*&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">I &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">::&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">endl;&lt;br class="kix-line-break" /> &amp;nbsp;}&lt;br class="kix-line-break" />}&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/div>&lt;/div>&lt;br />&lt;b>Without reformatting&lt;/b>&lt;br />&lt;br />&lt;div style="padding-left: 10px;">&lt;tt>$ clang-modernize -use-auto format.cpp&lt;/tt>&lt;/div>&lt;div dir="ltr" style="margin-bottom: 8pt; margin-left: 36pt; margin-top: 11pt;">&lt;div>&lt;span style="background-color: transparent; font-size: 15px; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span id="docs-internal-guid-65d203ed-13ad-2ddb-d832-4912cc50e162">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline;">#include &amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline;">&lt;br class="kix-line-break" />&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline;">#include &amp;lt;vector&amp;gt;&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/div>&lt;div style="font-weight: normal; line-height: 1.15;">&lt;span style="background-color: transparent; font-size: 15px; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span id="docs-internal-guid-65d203ed-13ad-2ddb-d832-4912cc50e162">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="font-size: 13px; vertical-align: baseline;">&lt;span style="color: #007020;">&lt;br class="kix-line-break" />&lt;/span>&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline;">void&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> &lt;/span>&lt;span style="color: #06287e; font-size: 13px; vertical-align: baseline;">f&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">(&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline;">const&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">::&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">vector&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">&amp;lt;&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline;">int&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">&amp;gt;&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">&amp;amp;&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">my_container) {&lt;br class="kix-line-break" /> &amp;nbsp;&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline;">for&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> (&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline;">auto&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> I &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">=&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> my_container.begin(),&lt;br class="kix-line-break" /> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;E &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">=&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> my_container.end();&lt;br class="kix-line-break" /> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;I &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">!=&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> E; &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">++&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">I) {&lt;br class="kix-line-break" /> &amp;nbsp;&amp;nbsp;&amp;nbsp;std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">::&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">cout &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">*&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">I &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">::&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">endl;&lt;br class="kix-line-break" /> &amp;nbsp;}&lt;br class="kix-line-break" />}&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/div>&lt;/div>&lt;br />&lt;b>With reformatting&lt;/b>&lt;br />&lt;br />&lt;div style="padding-left: 10px;">&lt;tt>$ clang-modernize -format -style=LLVM -use-auto format.cpp&lt;/tt>&lt;/div>&lt;div dir="ltr" style="margin-bottom: 8pt; margin-left: 36pt; margin-top: 11pt;">&lt;div>&lt;span id="docs-internal-guid-65d203ed-13ad-2ddb-d832-4912cc50e162">&lt;span style="background-color: transparent; color: black; font-family: Courier New, Courier, monospace; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1.15; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline;">#include &amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="font-size: 13px; vertical-align: baseline;">&lt;br class="kix-line-break" />&lt;/span>&lt;span style="color: #007020; font-size: 13px; vertical-align: baseline;">#include &amp;lt;vector&amp;gt;&lt;/span>&lt;/span>&lt;/span>&lt;/div>&lt;div style="font-weight: normal; line-height: 1.15;">&lt;span style="background-color: transparent; font-size: 15px; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">&lt;span id="docs-internal-guid-65d203ed-13ad-2ddb-d832-4912cc50e162">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="font-size: 13px; vertical-align: baseline;">&lt;span style="color: #007020;">&lt;br class="kix-line-break" />&lt;/span>&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline;">void&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> &lt;/span>&lt;span style="color: #06287e; font-size: 13px; vertical-align: baseline;">f&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">(&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline;">const&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">::&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">vector&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">&amp;lt;&lt;/span>&lt;span style="color: #902000; font-size: 13px; vertical-align: baseline;">int&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">&amp;gt;&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">&amp;amp;&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">my_container) {&lt;br class="kix-line-break" /> &amp;nbsp;&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline;">for&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> (&lt;/span>&lt;span style="color: #007020; font-size: 13px; font-weight: bold; vertical-align: baseline;">auto&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> I &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">=&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> my_container.begin(), E &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">=&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> my_container.end(); I &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">!=&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> E; &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">++&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">I) {&lt;br class="kix-line-break" /> &amp;nbsp;&amp;nbsp;&amp;nbsp;std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">::&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">cout &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">*&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">I &lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;"> std&lt;/span>&lt;span style="color: #666666; font-size: 13px; vertical-align: baseline;">::&lt;/span>&lt;span style="color: black; font-size: 13px; vertical-align: baseline;">endl;&lt;br class="kix-line-break" /> &amp;nbsp;}&lt;br class="kix-line-break" />}&lt;/span>&lt;/span>&lt;/span>&lt;/span>&lt;/div>&lt;/div>&lt;br />For more information about this option, take a look at the documentation: &lt;a href="http://clang.llvm.org/extra/ModernizerUsage.html#formatting-command-line-options" style="vertical-align: baseline;">Formatting Command Line Options&lt;/a>.&lt;br />&lt;h3>Choosing Transforms based on Compiler Support&lt;/h3>Another useful command-line switch is: &lt;a href="http://clang.llvm.org/extra/ModernizerUsage.html#for-compilers-option">-for-compilers&lt;/a>. This option enables all transforms the given compilers support.&lt;br />&lt;br />As an example, imagine that your project dropped a dependency to a “legacy” version of a compiler. You can automagically modernize your code to the new minimum versions of the compilers you want to support:&lt;br />&lt;br />To support Clang &amp;gt;= 3.1, GCC &amp;gt;= 4.6 and MSVC 11:&lt;br />&lt;br />&lt;div style="padding-left: 25px;">&lt;pre>clang-modernize -format -for-compilers=clang-3.1,gcc-4.6,msvc-11 foo.cpp&lt;/pre>&lt;/div>&lt;br />For more information about this option and to see which transforms are available for each compilers, please read &lt;a href="http://clang.llvm.org/extra/ModernizerUsage.html#cmdoption-for-compilers">the documentation&lt;/a>.&lt;br />&lt;h2> What’s next?&lt;/h2>The ability to transform many translation units in parallel will arrive very soon. Think of &lt;i>clang-modernize -j&lt;/i> as in make and ninja. Modernization of large code bases will become much faster as a result.&lt;br />&lt;br />More transforms are coming down the pipe as well as improvements to existing transforms such as the pass-by-value transform.&lt;br />&lt;br />We will continue fixing bugs and adding new features. Our backlog is publically available: &lt;a href="https://cpp11-migrate.atlassian.net/secure/RapidBoard.jspa?rapidView=1&amp;amp;view=planning">https://cpp11-migrate.atlassian.net/secure/RapidBoard.jspa?rapidView=1&amp;amp;view=planning&lt;/a>&lt;br />&lt;h2>Get involved!&lt;/h2>Interested by the tool? Found a bug? Have an idea of a transform that can be useful to others? The project is Open Source and contributions are most welcomed!&lt;br />&lt;br />The modernizer has its own bug and project tracker. If you want to file or fix a bug just go to: &lt;a href="https://cpp11-migrate.atlassian.net/">https://cpp11-migrate.atlassian.net&lt;/a>&lt;br />&lt;br />A few other addresses to keep in mind: &lt;br />&lt;ul>&lt;li>&lt;a href="http://clang.llvm.org/extra/clang-modernize.html">Clang C++ Modernizer User’s Manual&lt;/a>&lt;/li>&lt;li>IRC channel: #llvm on irc.oftc.net&lt;/li>&lt;li>Mailing lists:&lt;/li>&lt;ul>&lt;li>&lt;a href="http://lists.cs.uiuc.edu/mailman/listinfo/cfe-dev">cfe-dev&lt;/a> for questions and general discussions&lt;/li>&lt;li>&lt;a href="http://lists.cs.uiuc.edu/mailman/listinfo/cfe-commits">cfe-commits&lt;/a> for patches&lt;/li>&lt;/ul>&lt;li>&lt;a href="http://llvm-reviews.chandlerc.com/">Phabricator&lt;/a> to submit patches&lt;/li>&lt;/ul>&lt;h2> Final word&lt;/h2>Finally I want to thank my mentor Edwin Vane and his team at Intel, Tareq Siraj and Ariel Bernal, for the great support they provided me. Also thanks to the LLVM community and Google Summer of Code team for giving me this opportunity to work on the C++ Modernizer this summer.&lt;br />&lt;br />-- Guillaume Papin&lt;/div>&lt;/div>&lt;/div>&lt;/div>&lt;/div></description></item><item><title>The clang-cl /fallback mode</title><link>https://blog.llvm.org/2013/11/the-clang-cl-fallback-mode.html</link><pubDate>Tue, 05 Nov 2013 08:42:00 +0000</pubDate><guid>https://blog.llvm.org/2013/11/the-clang-cl-fallback-mode.html</guid><description>&lt;p>There has been a lot of work lately towards bringing an LLVM toolchain to the Windows platform (see &lt;a href="http://blog.llvm.org/2013/09/a-path-forward-for-llvm-toolchain-on.html">A path forward for an LLVM toolchain on Windows&lt;/a>). One result of that work is a new driver mode for Clang: &lt;a href="http://clang.llvm.org/docs/UsersManual.html#clang-cl">clang-cl&lt;/a>. This mode makes Clang understand the same kind of command-line arguments as Visual Studio's compiler, cl.exe. For example, a typical command to compile a file into an executable with Clang might be "clang hello.cc -o hello", whereas with cl.exe, one would use "cl.exe hello.cc /Fehello". Now one can use the latter syntax with Clang by substituting "cl.exe" with "clang-cl". This makes it easy to use Clang for existing projects in Visual Studio.&lt;/p> &lt;p>For the most part, clang-cl accepts exactly the same arguments as cl.exe. However, it also accepts some Clang-specific options. One such option that was added recently is &lt;a href="http://clang.llvm.org/docs/UsersManual.html#the-fallback-option">the /fallback flag&lt;/a>. The purpose of this flag is to make it easy to use clang-cl even in projects where Clang cannot yet compile all of the code. This post gives an example of how /fallback can be used.&lt;/p> &lt;a name='more'>&lt;/a> &lt;p>The way clang-cl works in /fallback mode is that it first tries to compile the code with Clang, and if that fails for some reason it falls back to compiling with cl.exe. Consider the following two files, where main.cpp can be compiled by Clang, but printer.cpp cannot:&lt;/p> &lt;pre style="text-indent: 0px;">&lt;br />printer.cpp:&lt;br />&lt;br />#include &amp;lt;iostream&amp;gt;&lt;br />void print_hello(const char *s) {&lt;br /> std::cout &amp;lt;&amp;lt; "Hello from " &amp;lt;&amp;lt; s &amp;lt;&amp;lt; "!" &amp;lt;&amp;lt; std::endl;&lt;br />}&lt;br />&lt;/pre> &lt;pre style="text-indent: 0px;">&lt;br />main.cpp:&lt;br />&lt;br />extern void print_hello(const char*);&lt;br />int main(int argc, char **argv) {&lt;br /> print_hello(argv[0]);&lt;br /> return 0;&lt;br />}&lt;br />&lt;/pre> &lt;p>clang-cl cannot compile printer.cpp since it includes iostream which uses language features that are not completely supported yet (hopefully they will be soon). However, clang-cl can still compile the two files in fallback mode:&lt;/p> &lt;pre style="text-indent: 0px;">clang-cl /fallback /Fehello main.cpp printer.cpp&lt;/pre> &lt;p>Clang will compile main.cpp successfully, print some error messages about the features it does not support for printer.cpp, and fall back to the cl.exe compiler for that file. The compiled files will be linked together into hello.exe.&lt;/p> &lt;p>Note that this is not fool proof: even if clang-cl thinks it has compiled a file successfully, there can be bugs in the generated code that cause failures at link- or run-time.&lt;/p> &lt;p>Currently, the fallback mode will cause clang-cl to fall back on any kind of error. Going forward, it will be changed to only fall back on certain kinds of internal errors, and as Clang's Windows support improves, the fallback mode will eventually become unnecessary and removed. It is still early days for clang-cl, but you can try it out for yourself by downloading the toolchain from the &lt;a href="http://llvm.org/builds/">LLVM Snapshot Builds website&lt;/a>.&lt;/p></description></item><item><title>OpenMP* project</title><link>https://blog.llvm.org/2013/10/openmp-project.html</link><pubDate>Tue, 08 Oct 2013 03:13:00 +0000</pubDate><guid>https://blog.llvm.org/2013/10/openmp-project.html</guid><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on">&lt;div class="MsoNormal">&lt;span lang="EN-US">I am extremely glad to announce that Intel has decided to provide a copy of our Intel® open-source OpenMP* runtime as an LLVM sub-project (and the LLVM project has been kind enough to accept our contribution!). This gives the community a fully LLVM license compatible version of the OpenMP runtime for use in &amp;nbsp;OpenMP development projects.&amp;nbsp;&lt;o:p>&lt;/o:p>&lt;/span>The complete source code is now available at&amp;nbsp;&lt;a href="http://openmp.llvm.org/">openmp.llvm.org&lt;/a>.&amp;nbsp;&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US">We open-sourced the Intel OpenMP runtime code to support the development of a full LLVM-based implementation of the OpenMP specification. Intel’s compiler team in Moscow has made outstanding progress in implementing the Clang changes to support the OpenMP language extensions (you can see their work at&amp;nbsp;&lt;/span>&lt;a href="http://clang-omp.github.io/" style="font-family: 'Times New Roman', serif; font-size: 12pt;">http://clang-omp.github.io&lt;/a>), and now we’ve reached a milestone where we can create an LLVM sub-project for some of the other components that are needed to build a complete OpenMP system.&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">Personally, I am very happy (and proud) to be associated with LLVM, and I look forward to a long and productive collaboration.&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US">&lt;br />&lt;/span>&lt;/div>&lt;div class="MsoNormal">&lt;span lang="EN-US">-- Jim Cownie&lt;/span>&lt;/div>&lt;/div></description></item><item><title>libc++ and C++1Y</title><link>https://blog.llvm.org/2013/09/libc-and-c1y.html</link><pubDate>Mon, 23 Sep 2013 12:44:00 +0000</pubDate><guid>https://blog.llvm.org/2013/09/libc-and-c1y.html</guid><description>I am proud to announce that as of September 21, libc++ has a full implementation of the C++1Y standard library. &lt;br />&lt;br />In April of 2013, the C++ standards committee approved a draft version of the next revision of the C++ language, called "C++1Y". (C++11 was called "C++0x" while in development). We hope that this draft standard will be approved next year, and become C++14. &lt;br />&lt;br />The draft standard includes changes to both the language and the standard library. These changes are designed to correct some mistakes that have been discovered in the C++11 standard and to add new features.&lt;br />&lt;br />Both clang and libc++ are being enhanced to support this new standard, and they each have a web page to show their current progress: &lt;a href="http://clang.llvm.org/cxx_status.html">clang C++1Y Status&lt;/a> and &lt;a href="http://libcxx.llvm.org/cxx1y_status.html">libc++ C++1Y status&lt;/a>.&lt;br />&lt;br />The C++ standards committee is meeting this week (September 23-28) to consider comments and defect reports in the C++1Y draft standard, and there will certainly be changes made.&lt;br />&lt;br />We could have waited until the final version of the C++1Y standard was approved; that would certainly have been less work. The draft standard will to be revised in September (and probably in February), so the libc++ implementation will have to change to track the standard.&lt;br />&lt;br />However, by implementing the draft standard has several advantages.&lt;br />&lt;ul>&lt;li>We gain experience in working with the new standard.&lt;/li>&lt;li>We found several places where the changes to the draft standard "exposed" other places were improvements can be made. For example, while implementing the new &lt;code>optional&lt;/code> feature made it clear that interface of the the comparison functions &lt;code>plus&lt;/code>, &lt;code>less&lt;/code> (and others) could be enhanced. The result of that was the new paper &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3749.htm">n3749&lt;/a>.&lt;/li>&lt;li>By implementating the standard, we can identify problems/inconsistencies in the draft standard. For example, when we implemented the new library feature &lt;code>dynarray&lt;/code>, we discovered that the interfaces for the allocator-based constructors for the container were &lt;em>wrong&lt;/em>; in particular there were cases where it was not possible for the compiler to determine the correct constructor to call. This was raised as &lt;a href="http://cplusplus.github.io/LWG/lwg-active.html#2255">LWG Issue 2255&lt;/a>, and will have to be resolved before the standard becomes final.&lt;/li>&lt;/ul></description></item><item><title>A path forward for an LLVM toolchain on Windows</title><link>https://blog.llvm.org/2013/09/a-path-forward-for-llvm-toolchain-on.html</link><pubDate>Thu, 05 Sep 2013 18:23:00 +0000</pubDate><guid>https://blog.llvm.org/2013/09/a-path-forward-for-llvm-toolchain-on.html</guid><description>&lt;p>Over the past several months, contributors from Google and elsewhere in the community have begun actively working on bringing an LLVM toolchain to Windows in a way that would support and enhance a fully native development experience. This toolchain works with Visual Studio and the Windows development process that Windows developers are already using, making LLVM tools and technologies available to them. We want to cross the streams (in the Ghostbuster proton-pack sense) of the Visual Studio IDE and the LLVM-based C++ tools to enable developers to build C++ software better.&lt;/p> &lt;p>To that end, we’ve been driving many of the efforts around compatibility with Visual Studio and native Windows C++ code in Clang and LLD (the LLVM linker). Today, as announced at &lt;a href="https://learn.microsoft.com/en-us/events/goingnative-2013/care-feeding-of-c-s-dragons">my GoingNative 2013 talk&lt;/a>, we are able to build a trivial C++ application that in turn links against native C++ libraries and uses them in real, interesting ways. This is a huge milestone for the project, and something we’re really excited to be talking more about. Lots of folks in the LLVM project came together to get the open source project here. Thanks to every single one of you.&lt;/p> &lt;p>Going forward, we would really like to see an increased level of involvement from Windows developers. We’re launching an &lt;a href="http://llvm.org/builds">alpha-build website&lt;/a> as part of llvm.org where you can get fresh builds of Clang, various Clang-based-tools, LLD, and the rest of the LLVM toolchain for Windows on a regular basis. These installable packages should make it dramatically easier to test and experiment with this new set of tools in your development environment. Please feel free to try it out, &lt;a href="http://llvm.org/bugs">file bugs&lt;/a>, and even &lt;a href="http://llvm.org/docs/DeveloperPolicy.html#making-a-patch">submit patches&lt;/a> to help move the toolchain forward on this new platform. Keep in mind, we are following the tried-and-true open source release mantra of releasing early and frequently. These are alpha-quality releases intended at developers interested in helping us track down and understand bugs.&lt;/p> &lt;p>There is still a lot of exciting work left to make LLVM and the C++ toolchain built on top of LLVM fully support the Windows platform. Come join the fun, because this is one place where patches are truly welcome.&lt;/p> -Chandler Carruth</description></item><item><title>Clang Warnings</title><link>https://blog.llvm.org/2013/09/clang-warnings.html</link><pubDate>Wed, 04 Sep 2013 17:03:00 +0000</pubDate><guid>https://blog.llvm.org/2013/09/clang-warnings.html</guid><description>&lt;span id="docs-internal-guid-64a5b270-651c-62fd-ef8a-a37c15d794b3">&lt;/span>&lt;br />Clang has two types of diagnostics, errors and warnings. &amp;nbsp;Errors arise when the code does not conform to the language. &amp;nbsp;Such things as missing semi-colons and mismatched braces prevent compilation and will cause Clang to emit an error message.&lt;br />&lt;br />On the other hand, warnings are emitted on questionable constructs on language conforming code. &amp;nbsp;Over time, certain patterns have been determined to have a strong likelihood of being a programming mistake. &amp;nbsp;Some examples of these include: order of operations confusion, mistaking similarly named language features, and easily made typos that still result in valid code.&lt;br />&lt;br />Although warnings may have false positives, the utility of finding bugs early usually outweigh their downsides. &amp;nbsp;Keep reading for a demonstration of Clang's warnings, as well as a comparison to GCC's warnings.&lt;br />&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-64a5b270-651c-62fd-ef8a-a37c15d794b3">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;br />&lt;a name='more'>&lt;/a>&lt;span id="docs-internal-guid-64a5b270-651c-62fd-ef8a-a37c15d794b3">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">The following code consists of &amp;lt; 200 lines of code, one library, and one header file, only used for printing. It is legitimate C++ code and can be compiled into a program. &amp;nbsp;Take a few moments and see if you can spot any bugs in the following code.&lt;/span>&lt;/span>&lt;/div>&lt;span id="docs-internal-guid-64a5b270-651c-62fd-ef8a-a37c15d794b3">&lt;/span>&lt;br />&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-64a5b270-651c-62fd-ef8a-a37c15d794b3">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;/span>&lt;/span>&lt;/div>&lt;span id="docs-internal-guid-64a5b270-651c-62fd-ef8a-a37c15d794b3">&lt;/span>&lt;br />&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-64a5b270-651c-62fd-ef8a-a37c15d794b3">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">main.cc&lt;/span>&lt;/span>&lt;/span>&lt;/div>&lt;span id="docs-internal-guid-64a5b270-651c-62fd-ef8a-a37c15d794b3">&lt;/span>&lt;br />&lt;ol style="margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-64a5b270-651c-62fd-ef8a-a37c15d794b3">&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">#include "sort.h"&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">#include &amp;lt;iostream&amp;gt;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">int main(int argc, char** argv) {&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;int V[] = { 3, 4, 7, 10, 11, 1, 2, 0};&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;cout &amp;lt;&amp;lt; "Unsorted numbers:" &amp;lt;&amp;lt; endl;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;for( auto num : V )&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;cout &amp;lt;&amp;lt; " " &amp;lt;&amp;lt; num &amp;lt;&amp;lt; endl;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;if (!sort(V, sizeof(V)/sizeof(V[0]))) {&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;cout &amp;lt;&amp;lt; "Sort failed." &amp;lt;&amp;lt; endl;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;return 1;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;}&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;cout &amp;lt;&amp;lt; "Sorted numbers:" &amp;lt;&amp;lt; endl;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;for( auto num : V )&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;cout &amp;lt;&amp;lt; " " &amp;lt;&amp;lt; num &amp;lt;&amp;lt; endl;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;return 0;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;/span>&lt;/ol>&lt;span id="docs-internal-guid-64a5b270-651c-62fd-ef8a-a37c15d794b3">&lt;br />&lt;span style="font-family: Consolas; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;br />&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-64a5b270-651c-62fd-ef8a-a37c15d794b3">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">sort.h&lt;/span>&lt;/span>&lt;/span>&lt;/div>&lt;span id="docs-internal-guid-64a5b270-651c-62fd-ef8a-a37c15d794b3">&lt;/span>&lt;br />&lt;ol style="margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-64a5b270-651c-62fd-ef8a-a37c15d794b3">&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">#ifndef _EXPERIMENTAL_WARNINGS_SORT_H_&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">#define _EXPERIMNETAL_WARNINGS_SORT_H_&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">#include &amp;lt;iostream&amp;gt;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">#ifdef _NDEBUG&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">#define ASSERT(cond) \&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;if(!cond) cout &amp;lt;&amp;lt; __FILE__ &amp;nbsp;&amp;lt;&amp;lt; ":" &amp;lt;&amp;lt; &amp;nbsp;__LINE__ &amp;lt;&amp;lt; " " &amp;lt;&amp;lt; #cond &amp;lt;&amp;lt; endl;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">#else&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">#define ASSERT(cond) if (!cond) {}&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">#endif&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">enum SortType {&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;unknown = 0,&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;min_invalid = 3,&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;bubble = 1,&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;quick,&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;insert&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">};&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">class Sort {&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> public:&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;Sort(int vec[], int size, bool sorted = false);&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;bool IsSorted();&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;void Begin(SortType Type = unknown);&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> private:&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;void BubbleSort();&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;void QuickSort() { }; // Not implemented yet.&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;void InsertSort() { }; // Not implemented yet.&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;int* vec_;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;bool sorted_;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;int &amp;amp;size_;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">};&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">static bool sort(int vec[], int size) {&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;Sort sort(vec, size);&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;sort.Begin(bubble);&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;return sort.IsSorted();&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">#endif // _EXPERIMENTAL_WARNINGS_SORT_H_&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;/span>&lt;/ol>&lt;span id="docs-internal-guid-64a5b270-651c-62fd-ef8a-a37c15d794b3">&lt;br />&lt;span style="font-family: Consolas; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;br />&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-64a5b270-651c-62fd-ef8a-a37c15d794b3">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">sort.cc&lt;/span>&lt;/span>&lt;/span>&lt;/div>&lt;span id="docs-internal-guid-64a5b270-651c-62fd-ef8a-a37c15d794b3">&lt;/span>&lt;ol style="margin-bottom: 0pt; margin-top: 0pt;">&lt;span id="docs-internal-guid-64a5b270-651c-62fd-ef8a-a37c15d794b3">&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">#include &amp;lt;iostream&amp;gt;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">#include "sort.h"&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">Sort::Sort(int vec[], int size, bool sorted)&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;: sorted_(sorted_), vec_(vec), size_(size) {&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;if (size &amp;gt; 50)&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;ASSERT("!Vector too large. &amp;nbsp;Number of elements:" + size);&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;int sum;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;for (unsigned i = 0; !i == size; ++i) {&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;int sum = sum + vec_[i];&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;++i;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;}&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;ASSERT(sum &amp;lt; 100 &amp;amp;&amp;amp; "Vector sum is too high");&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">bool Sort::IsSorted() {&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;return sort;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">static bool CheckSort(int V[]) {&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;bool ret;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;for (int i = 1; i != sizeof(V)/sizeof(V[0]); ++i)&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;if (V[i] &amp;gt; V[i - 1])&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ret = false;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;return ret;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">static const char* TypeToString(SortType Type) {&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;const char* ret;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;switch (Type) {&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;case bubble:&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ret = "bubble";&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;case quick:&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ret = "quick";&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;case insert:&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ret = "insert";&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;}&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;return ret;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">void Sort::Begin(SortType Type) {&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;cout &amp;lt;&amp;lt; "Sort type: ";&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;cout &amp;lt;&amp;lt; Type == 0 ? "Unknown type, resorting to bubble sort"&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;: TypeToString(Type);&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;cout &amp;lt;&amp;lt; endl;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;switch (Type) {&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;default:&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;bubble:&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BubbleSort(); break;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;quick:&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;QuickSort(); break;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;insert:&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;InsertSort(); break;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;}&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;sorted_ = CheckSort(vec_);&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">void Sort::BubbleSort() {&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;for (int i = 0; i &amp;lt; size_; ++i) {&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j = 1; j &amp;lt; size_; ++i) {&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int a = vec_[j-1];&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int b = vec_[j];&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (a &amp;gt; b); {&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;vec_[j-1] = b;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;vec_[j] = a;&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;}&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;li dir="ltr" style="font-size: 15px; list-style-type: decimal; vertical-align: baseline;">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/span>&lt;/div>&lt;/li>&lt;/span>&lt;/ol>&lt;span id="docs-internal-guid-64a5b270-651c-62fd-ef8a-a37c15d794b3">&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;br class="kix-line-break" />Did you find any bugs? Many common problems are hard to spot from just reading the code. To make a better coding experience, Clang has many diagnostics that will flag these mistakes. The bugs in the code are detailed below.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">main.cc does not have any problems. &amp;nbsp;It merely is a wrapper around the library so that a binary can be produced and run, although running it will not sort the array properly.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">sort.h is the header file to the library.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">1:#ifndef _EXPERIMENTAL_WARNINGS_SORT_H_&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">2:#define _EXPERIMNETAL_WARNINGS_SORT_H_&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">The first warning triggers on the first two lines. &amp;nbsp;Header guards are used by libraries to prevent multiple &lt;span style="font-family: Courier New, Courier, monospace;">#include&lt;/span>’s of a file from producing redefinition errors. &amp;nbsp;To work, the &lt;span style="font-family: Courier New, Courier, monospace;">#ifndef&lt;/span> and &lt;span style="font-family: Courier New, Courier, monospace;">#define&lt;/span> must use the same macro name.. &amp;nbsp;The transposition of E and N produces different names and is an easy bug to overlook. &amp;nbsp;Worse, this sort of bug can hide within headers and never produce a problem when singly included and then much later start producing problems when someone double includes this header. Clang has -Wheader-guard to catch this. GCC does not catch this.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">Next, examine the custom ASSERT macro used:&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">7.#define ASSERT(cond) \&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">8. &amp;nbsp;&amp;nbsp;&amp;nbsp;if(!cond) cout &amp;lt;&amp;lt; ...&lt;/span>&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">The problem is treating the macro parameter as a function parameter. &amp;nbsp;Macro arguments are not evaluated. &amp;nbsp;Instead, they are substituted in as typed. &amp;nbsp;Thus, code as &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">ASSERT(x == 5)&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> becomes &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">if(!x == 5) cout &amp;lt;&amp;lt; ...&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;The proper fix is to enclose the macro parameter in parentheses, as &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">if (!(cond)) cout &amp;lt;&amp;lt; ...&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> &amp;nbsp;This is caught by -Wlogical-not-parentheses. Being inside a macro definition, the warning will trigger when the macros are used with a note pointing back here. GCC has no equivalent for -Wlogical-not-parentheses.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">13:enum SortType {&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">14: &amp;nbsp;unknown = 0,&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">15: &amp;nbsp;min_invalid = 3,&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">16:&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">17: &amp;nbsp;bubble = 1,&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">18: &amp;nbsp;quick,&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">19: &amp;nbsp;insert&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">20:};&lt;/span>&lt;/span>&lt;/div>&lt;br />&lt;span style="font-family: Consolas; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">In this enum, a few non-valid values are defined, then the valid enums listed. &amp;nbsp;Valid enums use the auto increment to get their values. &amp;nbsp;However, &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">min_invalid&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> and &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">insert&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> both have value 3. &amp;nbsp;Luckily, -Wduplicate-enum will identify enums in this situation and point them out. GCC will not warn on this.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: inherit;">On to sort.cc&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; line-height: 1.15; white-space: pre-wrap;">&lt;span style="font-family: inherit;">Class constructor:&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">4:Sort::Sort(int vec[], int size, bool sorted)&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">5: &amp;nbsp;&amp;nbsp;&amp;nbsp;: sorted_(sorted_), vec_(vec), size_(size) {&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: inherit; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">Members from sort.h:&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">34: &amp;nbsp;int* vec_;&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">35: &amp;nbsp;bool sorted_;&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">36: &amp;nbsp;int &amp;amp;size_;&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;br />&lt;/div>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">Checking the only constructor of the class, numerous problems can be seen here. &amp;nbsp;First notice that the variables are declared &lt;span style="font-family: Courier New, Courier, monospace;">vec_&lt;/span>, &lt;span style="font-family: Courier New, Courier, monospace;">sorted_&lt;/span>, then &lt;span style="font-family: Courier New, Courier, monospace;">size_&lt;/span>, but in the constructor, they are listed as &lt;span style="font-family: Courier New, Courier, monospace;">sorted_&lt;/span>, &lt;span style="font-family: Courier New, Courier, monospace;">vec_&lt;/span>, then &lt;span style="font-family: Courier New, Courier, monospace;">size_&lt;/span>. &amp;nbsp;The order of initialization is order they were declared, meaning &lt;span style="font-family: Courier New, Courier, monospace;">vec_&lt;/span> is initialized before &lt;span style="font-family: Courier New, Courier, monospace;">sorted_&lt;/span>. &amp;nbsp;There is no order dependence here, but -Wreorder will warn that the orders don’t match. GCC also has -Wreorder.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">Next, &lt;span style="font-family: Courier New, Courier, monospace;">sorted_&lt;/span> is initialized with itself instead of with sorted. &amp;nbsp;This leads to uninitialized value in &lt;span style="font-family: Courier New, Courier, monospace;">sorted_&lt;/span>, which is caught by the aptly named -Wuninitialized. For this case, GCC has -Wself-assign and -Wself-init.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">Finally, notice that &lt;span style="font-family: Courier New, Courier, monospace;">size_&lt;/span> is declared as a reference but size is not passed by reference. &amp;nbsp;size only lives until the end of the constructor while the reference &lt;span style="font-family: Courier New, Courier, monospace;">size_&lt;/span> will continue to point to it. &amp;nbsp;-Wdangling-field catches this problem.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">7: &amp;nbsp;&amp;nbsp;&amp;nbsp;ASSERT("!Vector too large. &amp;nbsp;Number of elements:" + size);&lt;/span>&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">Two problems here. &amp;nbsp;Adding an integer to a string literal does not concatenate the two together. &amp;nbsp;Instead, since a string literal is a pointer of type &lt;span style="font-family: Courier New, Courier, monospace;">const char *&lt;/span>, this actually performs pointer math. &amp;nbsp;With a sufficiently integer, this can even cause the pointer to go past the end of the string into some other memory. &amp;nbsp;-Wstring-plus-int warns on this case. GCC has no equivalent warning.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">7: &amp;nbsp;&amp;nbsp;&amp;nbsp;ASSERT("!Vector too large. &amp;nbsp;More than 50 elements.");&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">When fixed, another problem arises. &amp;nbsp;A common pattern is to include a string literal describing the assert. &amp;nbsp;If the assert is always to fire, then expression should evaluate to false. &amp;nbsp;The string literal evaluates to true, so just negate it to get a false value, right? &amp;nbsp;Well, a number of common typos can happen.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;b>These values evaluate true:&lt;/b>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">"true"&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">"false"&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">"!true"&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">"!false"&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">"any string"&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;b>These values evaluate to false:&lt;/b>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">!"true"&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">!"false"&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-family: 'Courier New', Courier, monospace; font-size: 15px; line-height: 1.15; white-space: pre-wrap;">!"any string"&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">!"!any string"&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">Due to that, -Wstring-conversion will warn when a string literal is converted to a true boolean value. &amp;nbsp;Use &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">ASSERT(false &amp;amp;&amp;amp; “string”)&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> or &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">ASSERT(0 &amp;amp;&amp;amp; “string”)&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> instead. GCC has no equivalent warning.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> 9: &amp;nbsp;int sum;&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">10: &amp;nbsp;for (unsigned i = 0; !i == size; ++i) {&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">11: &amp;nbsp;&amp;nbsp;&amp;nbsp;int sum = sum + vec_[i];&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">12: &amp;nbsp;&amp;nbsp;&amp;nbsp;++i;&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">13: &amp;nbsp;}&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">14:&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">15: &amp;nbsp;ASSERT(sum &amp;lt; 100 &amp;amp;&amp;amp; "Vector sum is too high");&lt;/span>&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">More bugs here. &amp;nbsp;The obvious one is the that &lt;span style="font-family: Courier New, Courier, monospace;">sum&lt;/span> is uninitialized on line 9. &amp;nbsp;When it gets used on line 15, this causes undefined behavior. &amp;nbsp;This gets caught by -Wuninitialized which suggests setting it to 0 to fix. GCC's -Wuninitialized also catches this.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">A poor negation causes a bad condition in the for-loop. &amp;nbsp;&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">!i == size&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> is equivalent to &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">(!i) == size&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> due to order of operations. &amp;nbsp;-Wlogical-not-parentheses will suggest &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">!(i == size)&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> to correct this. Again, GCC does not have a -Wlogical-not-parantheses equivalent.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">On line 10 and 12, for every loop iteration, two &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">++i&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> will increment the variable. &amp;nbsp;A warning in -Wloop-analysis catches this. This warning is Clang-specific.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">Two separate problems happen on line 11. &amp;nbsp;Another -Wuninitialized warning here for using &lt;span style="font-family: Courier New, Courier, monospace;">sum&lt;/span> in its own initialization. &amp;nbsp;Also, -Wshadow will warn that the variable &lt;span style="font-family: Courier New, Courier, monospace;">sum&lt;/span> inside the loop is different from the variable &lt;span style="font-family: Courier New, Courier, monospace;">sum&lt;/span> outside the loop. Both GCC's and Clang's versions of these warning catches these problems.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">18:bool Sort::IsSorted() {&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">19: &amp;nbsp;return sort;&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">20:}&lt;/span>&lt;/span>&lt;/div>&lt;br />&lt;span style="font-family: Consolas; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">The member variable is called &lt;span style="font-family: Courier New, Courier, monospace;">sorted_&lt;/span>. &amp;nbsp;&lt;span style="font-family: Courier New, Courier, monospace;">sort&lt;/span> is a static function wrapper defined at sort.h line 39. &amp;nbsp;Here, the function is automatically converted to a function pointer, then to true. &amp;nbsp;Caught by -Wbool-conversion. GCC has function address to bool conversions placed under -Waddress.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">22:static bool CheckSort(int V[]) {&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">23: &amp;nbsp;bool ret;&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">24: &amp;nbsp;for (int i = 1; i != sizeof(V)/sizeof(V[0]); ++i)&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">25: &amp;nbsp;&amp;nbsp;&amp;nbsp;if (V[i] &amp;gt; V[i - 1])&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">26: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ret = false;&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">27: &amp;nbsp;return ret;&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">28:}&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">On line 23, &lt;span style="font-family: Courier New, Courier, monospace;">ret&lt;/span> is not initialized. &amp;nbsp;On line 26, a value may be assigned to it, but it is possible that no path will through the code will set it a value. &amp;nbsp;The warning -Wsometimes-uninitialized will warn on this and give suggestions on how to fix. GCC will not catch this.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">On line 24 inside the for loop conditional, there is &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">i != sizeof(V)/sizeof(V[0])&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">, which is trying to keep &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">i&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> as a valid array index. &amp;nbsp;However, the &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">sizeof&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> calculation produces the wrong result. &amp;nbsp;This would be correct if &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">V&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> was declared inside the function. &amp;nbsp;However, as a parameter, &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">V&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> has type &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">int*&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">, causing the &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">sizeof&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> to take the size of a pointer instead of the array. &amp;nbsp;A separate size argument needs to be passed to the function. Caught by -Wsizeof-array-argument, a Clang specific warning.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">30:static const char* TypeToString(SortType Type) {&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">31: &amp;nbsp;const char* ret;&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">32: &amp;nbsp;switch (Type) {&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">33: &amp;nbsp;&amp;nbsp;&amp;nbsp;case bubble:&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">34: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ret = "bubble";&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">35: &amp;nbsp;&amp;nbsp;&amp;nbsp;case quick:&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">36: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ret = "quick";&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">37: &amp;nbsp;&amp;nbsp;&amp;nbsp;case insert:&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">38: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ret = "insert";&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">39: &amp;nbsp;}&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">40: &amp;nbsp;return ret;&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">41:}&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">A simple enum to string converter function. &amp;nbsp;Like the previous function, &lt;span style="font-family: Courier New, Courier, monospace;">ret&lt;/span> is again uninitialized, and will be caught by -Wsometimes-uninitialized. &amp;nbsp;Clang warns here because it can analyze all the paths through the switch and determine that at least one will not assign a value to &lt;span style="font-family: Courier New, Courier, monospace;">ret&lt;/span>. GCC does not have -Wsometimes-uninitialized.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">On the switch statement, Clang and GCC notices that &lt;span style="font-family: Courier New, Courier, monospace;">unknown&lt;/span> is not used, caught by the warning -Wswitch.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">Clang also has a special attribute, &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">[[clang::fallthrough]];&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">, to mark intended fallthroughs in switch cases. &amp;nbsp;By marking all cases intended uses of fallthrough, Clang can warn on the unintended cases, such as these three cases without break statements. &amp;nbsp;Otherwise, the fallthrough will cause all three cases to return &lt;span style="font-family: Courier New, Courier, monospace;">“insert”&lt;/span>. This is -Wimplicit-fallthrough, a Clang-specific warning.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">43:void Sort::Begin(SortType Type) {&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">44: &amp;nbsp;cout &amp;lt;&amp;lt; "Sort type: ";&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">45: &amp;nbsp;cout &amp;lt;&amp;lt; Type == 0 ? "Unknown type, resorting to bubble sort"&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">46: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;: TypeToString(Type);&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">47: &amp;nbsp;cout &amp;lt;&amp;lt; endl;&lt;/span>&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">While &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">cout&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> uses &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">operator&amp;lt;&amp;lt;&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> to stream various types to output, it still is an operator and C++ has a defined order of operations. &amp;nbsp;Shifts (&amp;lt;&amp;lt; and &amp;gt;&amp;gt;) are evaluated before conditional operators (?:). &amp;nbsp;To add some parentheses to clear up the order, this becomes:&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">45: &amp;nbsp;((cout &amp;lt;&amp;lt; Type) == 0) ? "Unknown type, resorting to bubble sort"&lt;br class="kix-line-break" />46: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;: TypeToString(Type);&lt;/span>&lt;/span>&lt;/div>&lt;br />&lt;span style="font-family: Consolas; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">First, &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">Type&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> gets pushed to &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">cout&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">, via &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">operator&amp;lt;&amp;lt;&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">. &amp;nbsp;&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">operator&amp;lt;&amp;lt;&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> returns the &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">cout&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> stream again. &amp;nbsp;Streams are convertible to bools to check if they are valid, which is checked against false, converted from 0. &amp;nbsp;The result of this comparison is used for the conditional operator, whose result is not used anywhere. GCC doesn't catch this, but Clang's -Woverloaded-shift-op-parentheses does.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-family: Consolas; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">48: &amp;nbsp;switch (Type) {&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">49: &amp;nbsp;&amp;nbsp;&amp;nbsp;default:&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">50: &amp;nbsp;&amp;nbsp;&amp;nbsp;bubble:&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">51: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BubbleSort(); break;&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">52: &amp;nbsp;&amp;nbsp;&amp;nbsp;quick:&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">53: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;QuickSort(); break;&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">54: &amp;nbsp;&amp;nbsp;&amp;nbsp;insert:&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">55: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;InsertSort(); break;&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">56: &amp;nbsp;}&lt;/span>&lt;/span>&lt;/div>&lt;br />&lt;span style="font-family: Consolas; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">Another switch statement, also triggers -Wswitch because none of the enum values are represented. &amp;nbsp;Each of the enum values is missing a case, causing them to become labels instead. &amp;nbsp;The warning -Wunused-label hints that something is wrong here. -Wunused-label is in both GCC and Clang.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">61: &amp;nbsp;for (int i = 0; i &amp;lt; size_; ++i) {&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">62: &amp;nbsp;&amp;nbsp;&amp;nbsp;for (int j = 1; j &amp;lt; size_; ++i) {&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;"> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">69: &amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">70: &amp;nbsp;}&lt;/span>&lt;/span>&lt;/div>&lt;br />&lt;span style="font-family: Consolas; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">This double nested loop gives bubble sort its n&lt;/span>&lt;span style="font-size: 9px; vertical-align: super; white-space: pre-wrap;">2&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> running time. &amp;nbsp;Rather, in this case, an infinite running time. &amp;nbsp;Note the increment in both of the loops happen on &lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">i&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">, even in the inner loop. &amp;nbsp;&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">j&lt;/span>&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"> is never touched, either here or inside the loop. &amp;nbsp;-Wloop-analysis will give a warning when all the variables inside a for loop conditional does not change during the loop iteration. Only in Clang.&lt;/span>&lt;/div>&lt;br />&lt;span style="font-family: Consolas; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">63: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int a = vec_[j-1];&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">64: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int b = vec_[j];&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">65: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (a &amp;gt; b); {&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">66: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;vec_[j-1] = b;&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">67: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;vec_[j] = a;&lt;/span>&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;span style="font-family: Courier New, Courier, monospace;">68: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/span>&lt;/span>&lt;/div>&lt;br />&lt;span style="font-family: Consolas; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;/span>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">Then -Wempty-body warning will trigger on line 65. &amp;nbsp;The semi-colon here become the entirety of the loop body while the value swap happens on every loop iteration, not only when the conditional is true. Both Clang and GCC has this warning.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">This is just a small sample of the warnings that Clang provides. Along with informative diagnostic messages, these warnings help programmers avoid common coding pitfalls. In particular, it saves the programmer time tracking down valid but not intended code later. These warnings make Clang an exceptional productivity and code quality booster for coders.&lt;/span>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">For reference, a list of warnings discussed above:&lt;/span>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">-Wbool-conversion&lt;/span>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">Warns on implicit conversion of a function pointer to a true bool value. GCC has this warning as part of -Waddress.&lt;/span>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">-Wempty-body&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">Warns when an if statement, while loop, for loop, or switch statement only has a semi-colon for the body, and is on the same line as the rest of the statement. Clang and GCC warning.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">-Wheader-guard&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">Detects when the #ifndef and #define have different macro names. This causes the header guard to fail to prevent multiple inclusions. &lt;/span>&lt;span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">This is a Clang-specific warning available in SVN trunk and slated for the 3.4 release.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">-Wimplicit-fallthrough&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">Enabling this warning will cause a diagnostic to be emitted for all fallthroughs in switch statements that have not been annotated. Requires compilation in C++11 mode. Clang-specific warning, available in the 3.2 release.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">-Wlogical-not-parentheses&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">This warning is part of the -Wparentheses. This group of warnings suggests parentheses in cases where users may read the code differently than the compiler. This warning in particular will trigger when the logical not operator ('!') is applied to the left hand side of a comparison when it was meant to apply to the whole conditional. "!x == y" is different from "!(x == y)" since "!x" will be evaluated before the equality comparison. &lt;/span>&lt;span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">This is a Clang-specific warning available in SVN trunk and slated for the 3.4 release.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">-Wloop-analysis&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">Detects questionable code in loops. It catches two interesting loop patterns: a for-loop has an increment/decrement in its header and has the same increment/decrement for the last statement in the loop body, which will execute only half the intended iterations, and when the variables in the for-loop comparison are not modified during the loop, possibly indicating an infinite loop. Clang-specific warning. Unmodified loop variables warning is available in 3.2 and onward. Detection of double increments/decrements is in SVN trunk and slated for the 3.4 release.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">-Woverloaded-shift-op-parentheses&lt;/span>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">The overloaded shift operator is used mainly with streams, such as cin and cout. However, the shift operator has higher precedence than some operators, such as comparison operators, which may cause unexpected problems. This warning suggests parentheses to disambiguate the order of evaluation. Clang-specific warning available since the 3.3 release.&lt;/span>&lt;br />&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;br />&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; line-height: 1.15; white-space: pre-wrap;">-Wshadow&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; line-height: 1.15; white-space: pre-wrap;">Variable names in an inner scope may take the same name as a variable in an outer scope, yet refer to different variables. &amp;nbsp;Then the variable in the outer scope may be difficult or impossible to refer to while inside the inner scope. &amp;nbsp;-Wshadow points out such variable name reuse. &amp;nbsp;Both Clang and GCC has this warning.&lt;/span>&lt;br />&lt;span style="font-size: 15px; line-height: 1.15; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; line-height: 1.15; white-space: pre-wrap;">-Wsizeof-array-argument&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; line-height: 1.15; white-space: pre-wrap;">Warns when attempting to take the sizeof() of an array that is a parameter. These arrays are treated as a pointer, which will return an unexpected size. Clang-specific warning.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; line-height: 1.15; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">-Wstring-conversion&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">A literal string has type const char *. As a pointer, it is convertible to a bool, but in most cases, the conversion to bool is not intended. This warning will trigger on such conversions. Clang-specific warning.&lt;/span>&lt;/div>&lt;div dir="ltr" style="line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; vertical-align: baseline; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">-Wswitch&lt;/span>&lt;br />&lt;span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">This warning detects when an enum type is used in the switch, and some values of the enum are not represented in the cases. Clang and GCC warning.&lt;/span>&lt;br />&lt;span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">-Wuninitialized&lt;/span>&lt;br />&lt;span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">When a variable is declared, its value is uninitialized. If its value is used elsewhere before being initialized, undefined behavior may result. Present in both Clang and GCC. Clang performs additional analysis, such as following multiple code paths. Some items caught by Clang's warning falls under different warnings in GCC, such as -Wself-assign and -Wself-init.&lt;/span>&lt;br />&lt;span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">-Wunique-enum&lt;/span>&lt;br />&lt;span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">Enum elements can either be declared explicitly to a value, or implicitly which gives it the value of the previous element plus one. Clang-specific warning available since the 3.3 release.&lt;/span>&lt;br />&lt;span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;/div>&lt;div dir="ltr" style="margin-bottom: 0pt; margin-top: 0pt;">&lt;span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">-Wunused-label&lt;/span>&lt;br />&lt;span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">Warns when a label is present in code, but never called. Clang and GCC warning.&lt;/span>&lt;br />&lt;span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">&lt;br />&lt;/span>&lt;span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">* Edited September 10, 2013. Spelling corrections were made. Warnings which were first available in 3.2 or later are noted. If not marked, the warning has been around since before the 3.2 release.&lt;/span>&lt;/div>&lt;/div>&lt;/span></description></item><item><title>Object Caching with the Kaleidoscope Example Program</title><link>https://blog.llvm.org/2013/08/object-caching-with-kaleidoscope.html</link><pubDate>Fri, 02 Aug 2013 11:00:00 +0000</pubDate><guid>https://blog.llvm.org/2013/08/object-caching-with-kaleidoscope.html</guid><description>In previous posts I described the process of porting the LLVM Kaleidoscope tutorial program to use MCJIT as its execution engine and introduced a lazy compilation implementation with the MCJIT engine. &amp;nbsp;The lazy implementation produced similar, and in some cases better, performance when compared with an implementation based on the older JIT execution engine, but it used more memory.&lt;br />&lt;br />In this post, I’m going to extend the new implementation to use MCJIT’s object caching interface. &amp;nbsp;This will give our interpreter a way to store pre-compiled versions of previously used function and retrieve them for execution in later runs of the program.&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;h3>Adding a Library Parsing Mechanism&lt;/h3>I’m going to base the object caching on a library loading model. &amp;nbsp;In theory we could cache any object that the execution engine generates, but to make effective use of the cache we need some way of knowing that what we’re loading matches something we previously stored. &amp;nbsp;For simplicity, I’m going to extend the Kaleidoscope tutorial to accept a command line argument that references an LLVM IR file to be loaded as a library. &amp;nbsp;Once that’s working, I’ll introduce the object caching mechanism.&lt;br />&lt;br />The IR loading is a fairly easy thing to add. &amp;nbsp;We’ll use a standard LLVM command line parsing template:&lt;br />&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">cl::opt&amp;lt;std::string&amp;gt;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">InputIR("input-IR",&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cl::desc("Specify the name of an IR file to load for function definitions"),&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cl::value_desc("input IR file name"));&lt;/span>&lt;/blockquote>Then in the main() function, we’ll add argc and argv parameters along with a call to parse the command line options.&lt;br />&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">int main(int argc, char **argv) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; InitializeNativeTarget();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; InitializeNativeTargetAsmPrinter();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; InitializeNativeTargetAsmParser();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; LLVMContext &amp;amp;Context = getGlobalContext();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span> &lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; cl::ParseCommandLineOptions(argc, argv,&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Kaleidoscope example program\n");&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span> &lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; if (!InputIR.empty()) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; parseInputIR(InputIR);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; ...&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/blockquote>Happily, LLVM also gives us what we need to parse an IR file into a module:&lt;br />&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">bool parseInputIR(std::string InputFile) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; SMDiagnostic Err;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; Module *M = ParseIRFile(InputFile, Err, getGlobalContext());&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; if (!M) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; Err.print("IR parsing failed: ", errs());&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; return false;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span> &lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; char ModID[256];&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; sprintf(ModID, "IR:%s", InputFile.c_str());&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; M-&amp;gt;setModuleIdentifier(ModID);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span> &lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; TheHelper-&amp;gt;addModule(M);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; return true; &amp;nbsp; &amp;nbsp;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/blockquote>I’m setting an identifier that we can use to recognize that this module was loaded as an IR file. &amp;nbsp;We’ll use that later for object caching, but right now it also lets us skip the function optimization passes when we compile this module.&lt;br />&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">// Get the ModuleID so we can identify IR input files&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">const std::string ModuleID = M-&amp;gt;getModuleIdentifier();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span> &lt;span style="font-family: Courier New, Courier, monospace;">// If we've flagged this as an IR file, it doesn't need function passes run.&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">if (0 != ModuleID.compare(0, 3, "IR:")) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // Create a function pass manager for this engine&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; FunctionPassManager *FPM = new FunctionPassManager(M);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; ...&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/blockquote>Finally, we need to provide a function to add the newly created module to the list of modules handled by MCJITHelper.&lt;br />&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">void MCJITHelper::addModule(Module* M) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; Modules.push_back(M);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/blockquote>Our lazy compilation mechanism will take care of compiling this module when any function it contains is called.&lt;br />&lt;br />When we build the program now, we need to add ‘irreader’ to the list of libraries on the compile line.&lt;br />&lt;br />At this point, we can provide a complete IR file as input to our Kaleidoscope interpreter. &amp;nbsp;You can generate an IR file by capturing the ‘dump’ output of a module that has been created by our interpreter. &amp;nbsp;It’s easiest to do this using the old JIT-based implementation, since it keeps everything in one module. &amp;nbsp;Because the particulars of where an input file will come from are likely to be implementation specific, I’ll just leave it at that for now.&lt;br />&lt;h3>Implementing Object Cache&lt;/h3>The mechanism above to load IR files can be used with either the JIT or MCJIT implementations of the Kaleidoscope interpreter. &amp;nbsp;With the MCJIT implementation, there is a significant time hit for compilation the first time a library is accessed, but subsequent references will be very fast. &amp;nbsp;With the JIT implementation, the module parsed from IR is compiled lazily and so its responsiveness will be more uniform.&lt;br />&lt;br />However, MCJIT provides a mechanism for caching generated object images. &amp;nbsp;Once we’ve compiled a module, we can store the image and never have to compile it again. &amp;nbsp;This is not available with the JIT execution engine and gives MCJIT a significant performance advantage when a library is used in multiple invocations of the program.&lt;br />&lt;br />MCJIT uses a callback mechanism to allow clients to register a custom cache handler. &amp;nbsp;The handler must be a subclass of the ObjectCache class defined in ‘llvm/ExecutionEngine/ObjectCache.h.” &amp;nbsp;For this example, I’m going to use a very simple scheme that uses the input IR filename as a key and stores cached files in a subdirectory relative to the current working directory. &amp;nbsp;Obviously in a real product you’d want something more sophisticated, but for demonstration purposes this will work.&lt;br />&lt;br />Here’s the implementation:&lt;br />&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">//===----------------------------------------------------------------------===//&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">// MCJIT object cache class&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">//===----------------------------------------------------------------------===//&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span> &lt;span style="font-family: Courier New, Courier, monospace;">class MCJITObjectCache : public ObjectCache {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">public:&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; MCJITObjectCache() {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; // Set IR cache directory&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; sys::fs::current_path(CacheDir);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; sys::path::append(CacheDir, "toy_object_cache");&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span> &lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; virtual ~MCJITObjectCache() {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span> &lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; virtual void notifyObjectCompiled(const Module *M, const MemoryBuffer *Obj) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; // Get the ModuleID&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; const std::string ModuleID = M-&amp;gt;getModuleIdentifier();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span> &lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; // If we've flagged this as an IR file, cache it&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; if (0 == ModuleID.compare(0, 3, "IR:")) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; std::string IRFileName = ModuleID.substr(3);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; SmallString&amp;lt;128&amp;gt;IRCacheFile = CacheDir;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; sys::path::append(IRCacheFile, IRFileName);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; if (!sys::fs::exists(CacheDir.str()) &amp;amp;&amp;amp; sys::fs::create_directory(CacheDir.str())) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fprintf(stderr, "Unable to create cache directory\n");&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; std::string ErrStr;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; raw_fd_ostream IRObjectFile(IRCacheFile.c_str(), ErrStr, raw_fd_ostream::F_Binary);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; IRObjectFile &amp;lt;&amp;lt; Obj-&amp;gt;getBuffer();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span> &lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // MCJIT will call this function before compiling any module&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // MCJIT takes ownership of both the MemoryBuffer object and the memory&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // to which it refers.&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; virtual MemoryBuffer* getObject(const Module* M) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; // Get the ModuleID&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; const std::string ModuleID = M-&amp;gt;getModuleIdentifier();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span> &lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; // If we've flagged this as an IR file, cache it&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; if (0 == ModuleID.compare(0, 3, "IR:")) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; std::string IRFileName = ModuleID.substr(3);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; SmallString&amp;lt;128&amp;gt; IRCacheFile = CacheDir;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; sys::path::append(IRCacheFile, IRFileName);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; if (!sys::fs::exists(IRCacheFile.str())) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // This file isn't in our cache&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return NULL;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; OwningPtr&amp;lt;MemoryBuffer&amp;gt; IRObjectBuffer;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; MemoryBuffer::getFile(IRCacheFile.c_str(), IRObjectBuffer, -1, false);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; // MCJIT will want to write into this buffer, and we don't want that&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; // because the file has probably just been mmapped. &amp;nbsp;Instead we make&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; // a copy. &amp;nbsp;The filed-based buffer will be released when it goes&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; // out of scope.&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; return MemoryBuffer::getMemBufferCopy(IRObjectBuffer-&amp;gt;getBuffer());&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span> &lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; return NULL;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span> &lt;span style="font-family: Courier New, Courier, monospace;">private:&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; SmallString&amp;lt;128&amp;gt; CacheDir;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">};&lt;/span>&lt;/blockquote>I’m going to instantiate this cache as a member variable of the MCJITHelper class. &amp;nbsp;I’m also adding a command line option to enable cache use.&lt;br />&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">cl::opt&amp;lt;bool&amp;gt;&amp;nbsp;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">UseObjectCache("use-object-cache",&amp;nbsp;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;cl::desc("Enable use of the MCJIT object caching"),&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;cl::init(false));&lt;/span>&lt;/blockquote>Activating the cache simply requires a single call to the ExecutionEngine object after it has been created in MCJITHelper::compileModule():&lt;br />&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">if (UseObjectCache)&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; NewEngine-&amp;gt;setObjectCache(&amp;amp;OurObjectCache);&lt;/span>&lt;/blockquote>At this point the MCJIT engine itself manages use of the cache. &amp;nbsp;When the MCJIT engine is about to compile a module, it will call the cache’s getObject method. &amp;nbsp;If this method returns an object image, MCJIT will prepare that object for execution rather than compiling a new version. &amp;nbsp;When MCJIT does compile a module it calls the cache’s NotifyObjectCompiled method, giving the cache a chance to store the object image.&lt;br />&lt;br />The implementation above uses the Module identifier as a key to identify matching modules, but clients are free to use any mechanism to make this identification.&lt;br />&lt;h3>Cache Performance&lt;/h3>Now that we have the object caching mechanism in place, let’s take a look and see how it impacts our performance.&lt;br />&lt;br />I’ve created a new set of test inputs based on the inputs I used for previous measurements, but I separated the function definitions and the immediate function calls into separate script files and then generated an IR file from the function definitions. &amp;nbsp;I’ll use these files to execute a workload that is equivalent to the previous workload while using an IR input file and loading the resultant object from cache when possible.&lt;br />&lt;br />There is obviously some performance benefit just from having a ready-made IR file rather than having to parse Kaleidoscope input, so I also created a version of the JIT-based implementation which accepts the IR input library to provide a meaningful point of comparison.&lt;br />&lt;br />The chart below shows the 5000-function workloads I’ve been using run with multiple implementations of the Kaleidoscope interpreter. &amp;nbsp;The first three bars in each group show the “lazy” MCJIT implementation, the original JIT implementation and our first working MCJIT implementation with the original workload file. &amp;nbsp;The next three bars show the new implementations using an IR input file for function definitions.&lt;br />&lt;br />&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="http://4.bp.blogspot.com/-XE698SRqneI/Ue228waFk_I/AAAAAAAABNs/nYc00U-dfCs/s1600/CacheTiming.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" src="http://4.bp.blogspot.com/-XE698SRqneI/Ue228waFk_I/AAAAAAAABNs/nYc00U-dfCs/s1600/CacheTiming.jpg" />&lt;/a>&lt;/div>&lt;br />As you can see, the non-cached run of the library-based MCJIT implementation is slightly faster than our first working implementation (because the IR is pre-made), but significantly slower than the “lazy” MCJIT implementation. &amp;nbsp;However, this performance hit is only incurred the first time the workload is run. &amp;nbsp;When the workload is run with this same MCJIT implementation a second time the function library is loaded from cache and the performance is far and away better than any of the other implementations.&lt;br />&lt;h3>Conclusions&lt;/h3>So where does this leave us? &amp;nbsp;Did you ever have one of those math professors in college who would get halfway through a tricky proof and then write “QED” on the board even though it wasn’t at all obvious how he would finish it? &amp;nbsp;That’s the part we’re at now.&lt;br />&lt;br />I began this exercise in an attempt to either prove or disprove that the MCJIT execution engine was suitable for use in a program that relied on true just-in-time compilation. &amp;nbsp;I came up with a reference implementation that does that, though with a few lingering questions – particularly regarding memory consumption.&lt;br />&lt;br />At this point, I’m satisfied that MCJIT is up to the task. &amp;nbsp;&lt;i>Quod erat demonstratum&lt;/i>.&lt;br />&lt;br />Of course, there’s more work to be done. &amp;nbsp;Any serious implementation using the techniques I’ve shown would require a lot of fine tuning. &amp;nbsp;Some of what I’ve done, such as the multiple module management, can and should be moved into the MCJIT component itself. &amp;nbsp;No doubt many of the opportunities for performance improvements and more efficient memory use will also be within the MCJIT component. &amp;nbsp;Nevertheless, I think the way forward is reasonably well defined.&lt;br />&lt;br />Several active LLVM developers are committed to making MCJIT a top notch execution engine. &amp;nbsp;I hope that the exploration I’ve presented here will help more developers make use of it now and will generate momentum to iron out whatever additional shortcomings remain.&lt;br />&lt;br />The full source code listing for this post along with the scripts for generating test input are available in the trunk of the LLVM source tree at &amp;lt;llvm_root&amp;gt;/examples/Kaleidoscope/MCJIT.</description></item><item><title>Kaleidoscope Performance with MCJIT</title><link>https://blog.llvm.org/2013/07/kaleidoscope-performance-with-mcjit.html</link><pubDate>Mon, 29 Jul 2013 12:11:00 +0000</pubDate><guid>https://blog.llvm.org/2013/07/kaleidoscope-performance-with-mcjit.html</guid><description>In a previous post I described the process of porting the LLVM Kaleidoscope tutorial program to use MCJIT as its execution engine. &amp;nbsp;After navigating through a serious of road blocks we ended up with an implementation that was working as expected.&lt;br />&lt;br />So it works, but the next question is, “Is it any good?”&lt;br />&lt;br />A lot of people considering the transition from the older JIT execution engine to MCJIT have concerns about the possible performance implications, particularly related to the fact that MCJIT doesn’t support lazy compilation. &amp;nbsp;The older JIT engine will generate code for functions in an LLVM module one function at a time, delaying compilation of each function until it is about to be executed. &amp;nbsp;The MCJIT engine operates on entire modules, generating code for all functions in a module at once. &amp;nbsp;In the previous post, we modified the Kaleidoscope interpreter to create multiple modules as needed, but we’re still compiling the entire current module when a function is executed.&lt;br />&lt;br />So what does that look like in terms of performance?&lt;br />&lt;a name='more'>&lt;/a>&lt;br />The Kaleidoscope interpreter operates on input from stdin. &amp;nbsp;When you’re sitting at your keyboard typing functions and expressions, it seems perfectly responsive. &amp;nbsp;It would take a lot of typing to create a module large enough to have a noticeable compilation time. &amp;nbsp;Of course, we can also drive our interpreter by redirecting a file through stdin. &amp;nbsp;This will be useful for measuring performance. &amp;nbsp;Unfortunately, there aren’t a lot of large Kaleidoscope programs available that we can use as a benchmark.&lt;br />&lt;br />Instead I wrote a Python script that will generate random Kaleidoscope functions and expressions. &amp;nbsp;By varying a few script parameters you can change the characteristics of the generated Kaleidoscope script to simulate various workload scenarios (number of functions, operations per function, number of function definitions between execution and percentage of calls within functions). &amp;nbsp;My Python script also generates a bash script that uses the Linux ‘time’ utility to get some crude performance and memory usage measurements. &amp;nbsp;These results should not in any way be confused with accurate benchmark data, but they ought to at least give us a rough idea of where we are.&lt;br />&lt;br />I made some minor changes to add a divide operator and a new output function (printlf) and to eliminate unnecessary output to stderr so that we aren’t timing the ‘dump’ functions.&lt;br />&lt;br />Here’s how my new MCJIT-based toy compares to a version built with the older JIT engine:&lt;br />&lt;br />&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="http://4.bp.blogspot.com/-N9hwOu6Jbfw/Ue2Atl--6gI/AAAAAAAABNY/6-joqx1C12Y/s1600/InitialTiming.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" src="http://4.bp.blogspot.com/-N9hwOu6Jbfw/Ue2Atl--6gI/AAAAAAAABNY/6-joqx1C12Y/s1600/InitialTiming.jpg" />&lt;/a>&lt;/div>&lt;br />The numbers across the bottom here give some indication of the input being used. &amp;nbsp;The first number is the number of functions in the script, the second number is the number of functions called at least once and the third number is the total number of calls that will be executed.&lt;br />&lt;br />So it turns out that depending on the input the MCJIT version of the Kaleidoscope interpreter that we’ve created is anywhere between 1.25 and 5.5 times slower. &amp;nbsp;That’s disappointing but not really unexpected. &amp;nbsp;Remember that the JIT version never compiles functions that aren’t used, and that’s really the weakness that this comparison was intending to quantify. &amp;nbsp;The more functions are called, the closer our MCJIT version is to the JIT version, which is what we’d expect.&lt;br />&lt;br />We’ll talk about memory use later, but for now let’s just say that it follows a similar pattern.&lt;br />The input sets I have are pretty trivial, so the actual code generated isn’t particularly interesting for performance analysis. &amp;nbsp;I can tell you from experience that where both engines are able to use the same processor features they generate nearly identical code. &amp;nbsp;(There’s a lot shared under the hood.) &amp;nbsp;There are some new processor features that aren’t supported by the older JIT engine, but that’s not relevant for our current comparison.&lt;br />&lt;h3>Making MCJIT Lazy&lt;/h3>Now that we have some idea of what we’re up against, let’s turn to the task of making a version of the MCJIT toy that attempts to mimic the lazy-compilation mode of the old JIT engine. &amp;nbsp;In the version we’ve created to this point we’re delaying creation of our execution engine until something needs to be executed, but when we do compile we’re compiling everything in the Module, not just the functions that will be executed. &amp;nbsp;That’s an inherent part of MCJIT’s design, so to get around it, we’re going to have to create a new module for each function and put off compiling each module until it is needed for linking. &amp;nbsp;If you had a detailed knowledge of the code you’re compiling you could optimize function grouping, putting related functions together in a module and so forth, but for the current experiment we’ll take the most general approach possible.&lt;br />&lt;br />Once again, this is easier than you might expect.&lt;br />&lt;br />Let’s start by moving the code that compiles a module into a new method in MCJITHelper().&lt;br />&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">ExecutionEngine *MCJITHelper::compileModule(Module *M) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; std::string ErrStr;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; ExecutionEngine *NewEngine = EngineBuilder(M)&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .setErrorStr(&amp;amp;ErrStr)&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .setUseMCJIT(true)&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .setMCJITMemoryManager(new HelpingMemoryManager(this))&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .create();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; if (!NewEngine) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; fprintf(stderr, "Could not create ExecutionEngine: %s\n", ErrStr.c_str());&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; exit(1);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // Create a function pass manager for this engine&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; FunctionPassManager *FPM = new FunctionPassManager(M);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // Set up the optimizer pipeline. &amp;nbsp;Start with registering info about how the&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // target lays out data structures.&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; FPM-&amp;gt;add(new DataLayout(*NewEngine-&amp;gt;getDataLayout()));&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // Provide basic AliasAnalysis support for GVN.&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; FPM-&amp;gt;add(createBasicAliasAnalysisPass());&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // Promote allocas to registers.&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; FPM-&amp;gt;add(createPromoteMemoryToRegisterPass());&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // Do simple "peephole" optimizations and bit-twiddling optzns.&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; FPM-&amp;gt;add(createInstructionCombiningPass());&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // Reassociate expressions.&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; FPM-&amp;gt;add(createReassociatePass());&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // Eliminate Common SubExpressions.&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; FPM-&amp;gt;add(createGVNPass());&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // Simplify the control flow graph (deleting unreachable blocks, etc).&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; FPM-&amp;gt;add(createCFGSimplificationPass());&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; FPM-&amp;gt;doInitialization();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // For each function in the module&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; Module::iterator it;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; Module::iterator end = M-&amp;gt;end();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; for (it = M-&amp;gt;begin(); it != end; ++it) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; // Run the FPM on this function&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; FPM-&amp;gt;run(*it);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // We don't need this anymore&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; delete FPM;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; Engines.push_back(NewEngine);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; NewEngine-&amp;gt;finalizeObject();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; return NewEngine;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/blockquote>Now the code in MCJITHelper::getPointerToFunction() that compiles the current module will look like this:&lt;br />&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">// If we didn't find the function, see if we can generate it.&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">if (OpenModule) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; ExecutionEngine * NewEngine = compileModule(OpenModule);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; return NewEngine-&amp;gt;getPointerToFunction(F);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/blockquote>It will also be helpful to have a function that ‘closes’ the current module.&lt;br />&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">void MCJITHelper::closeCurrentModule() {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; OpenModule = NULL;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/blockquote>We don’t want to call this from MCJITHelper::getModuleForNewFunction as you might expect, because that is called for immediate expressions as well as function definitions. &amp;nbsp;Instead, we’ll call it from the beginning of HandleDefinition(). &amp;nbsp;This will cause the current module to be closed each time a function with a body is defined, but will still allow immediate expressions to be included in the last open module. &amp;nbsp;We also need to call closeCurrentModule from compileModule if the module being compiled is the current module in order to handle the case of two consecutive immediate expressions.&lt;br />&lt;br />So far so good, but the problem we now face is that our current implementation of MCJITHelper::getPointerToFunction() and MCJITHelper::getPointerToNamedFunction() both assume that they will find all functions either in the current open module or an execution engine that has already been used to compile a module.&lt;br />&lt;br />To fix that we’ll need to change our data structures. &amp;nbsp;Instead of keeping a vector of modules and a vector of execution engines, we’ll use a map that correlates module pointers with execution engine pointers. &amp;nbsp;If a module has no execution engine pointer in the map that will mean the module has not yet been compiled.&lt;br />&lt;br />In our helper class definition, we replace this:&lt;br />&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">typedef std::vector&amp;lt;ExecutionEngine*&amp;gt; EngineVector;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">EngineVector &amp;nbsp;Engines;&lt;/span>&lt;/blockquote>with this:&lt;br />&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">std::map&amp;lt;Module *, ExecutionEngine *&amp;gt; EngineMap;&lt;/span>&lt;/blockquote>And with that we can re-write our getPointerToFunction methods to look like this:&lt;br />&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">void *MCJITHelper::getPointerToFunction(Function* F) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // Look for this function in an existing module&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; ModuleVector::iterator begin = Modules.begin();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; ModuleVector::iterator end = Modules.end();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; ModuleVector::iterator it;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; std::string FnName = F-&amp;gt;getName();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; for (it = begin; it != end; ++it) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; Function *MF = (*it)-&amp;gt;getFunction(FnName);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; if (MF == F) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; std::map&amp;lt;Module*, ExecutionEngine*&amp;gt;::iterator eeIt = EngineMap.find(*it);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; if (eeIt != EngineMap.end()) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void *P = eeIt-&amp;gt;second-&amp;gt;getPointerToFunction(F);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (P)&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return P;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; } else {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ExecutionEngine *EE = compileModule(*it);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void *P = EE-&amp;gt;getPointerToFunction(F);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (P)&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return P;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; return NULL;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">void *MCJITHelper::getPointerToNamedFunction(const std::string &amp;amp;Name)&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">{&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // Look for the functions in our modules, compiling only as necessary&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; ModuleVector::iterator begin = Modules.begin();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; ModuleVector::iterator end = Modules.end();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; ModuleVector::iterator it;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; for (it = begin; it != end; ++it) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; Function *F = (*it)-&amp;gt;getFunction(Name);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; if (F &amp;amp;&amp;amp; !F-&amp;gt;empty()) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; std::map&amp;lt;Module*, ExecutionEngine*&amp;gt;::iterator eeIt = EngineMap.find(*it);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; if (eeIt != EngineMap.end()) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void *P = eeIt-&amp;gt;second-&amp;gt;getPointerToFunction(F);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (P)&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return P;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; } else {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ExecutionEngine *EE = compileModule(*it);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void *P = EE-&amp;gt;getPointerToFunction(F);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (P)&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return P;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; return NULL;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/blockquote>Both of these functions work in the same way. &amp;nbsp;They iterate through our vector of Modules looking for a Module that contains a function with the name we are looking for. &amp;nbsp;In the first case, we also check to see if this is exactly the function we’re looking for. &amp;nbsp;(It might be a prototype.) &amp;nbsp;Once we’ve found the right module, we check to see if the module has a corresponding execution engine. &amp;nbsp;If it does, we ask that engine for a pointer to the function. &amp;nbsp;If not, we compile the module and then ask the new execution engine for the pointer. &amp;nbsp;This leaves modules in an uncompiled state until we need a function either for execution or to satisfy a linking request.&lt;br />&lt;br />You’ll notice that this code doesn’t populate the EngineMap. &amp;nbsp;We’ll do that in the compileModule() function instead, where we were previously adding the new engine to the Engines vector. &amp;nbsp;We’ll also need to change our clean up code in the MCJITHelper destructor.&lt;br />&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">MCJITHelper::~MCJITHelper()&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">{&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // Walk the vector of modules.&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; ModuleVector::iterator it, end;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; for (it = Modules.begin(), end = Modules.end();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;it != end; ++it) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; // See if we have an execution engine for this module.&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; std::map&amp;lt;Module*, ExecutionEngine*&amp;gt;::iterator mapIt = EngineMap.find(*it);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; // If we have an EE, the EE owns the module so just delete the EE.&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; if (mapIt != EngineMap.end()) {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; delete mapIt-&amp;gt;second;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; } else {&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; // Otherwise, we still own the module. &amp;nbsp;Delete it now.&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; delete *it;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; }&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;/blockquote>Note that once a module has been passed to an execution engine, the execution engine owns that module, so in each case we only need to delete a module or an execution engine, but never both.&lt;br />&lt;h3>Lazy Performance Analysis&lt;/h3>At this point, the MCJIT-based version of our Kaleidoscope interpreter should be compiling lazily just like the old JIT-based implementation did. &amp;nbsp;Let’s re-run our test workloads and see how it stacks up.&lt;br />&lt;br />Here are the new results.&lt;br />&lt;br />&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="http://1.bp.blogspot.com/-2iD8rrxxxQI/Ue2A6LTlKlI/AAAAAAAABNg/5VPeiEOLVv0/s1600/LazyTiming.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" src="http://1.bp.blogspot.com/-2iD8rrxxxQI/Ue2A6LTlKlI/AAAAAAAABNg/5VPeiEOLVv0/s1600/LazyTiming.jpg" />&lt;/a>&lt;/div>&lt;br />That looks quite a bit better. &amp;nbsp;The big spike in the fourth column is the case where each function is called immediately after it is defined. &amp;nbsp;The MCJIT implementation is still about 1.3 times slower with 5000 functions in that case, but previously that was one of the better points of comparison for MCJIT. &amp;nbsp;Now it’s the worst case scenario.&lt;br />&lt;br />Also notice that with the new “lazy” MCJIT implementation there are a few cases where our MCJIT-based interpreter is quicker than the old JIT-based implementation.&lt;br />&lt;h3>Memory Consumption&lt;/h3>Now let’s talk about memory usage. &amp;nbsp;You can probably see without measurements that our new “lazy” implementation is going to consume more memory than the old implementation. &amp;nbsp;We’re creating a new Module instance for each and every function that gets defined and a bunch more execution engine related objects every time one of these things gets compiled. &amp;nbsp;But how bad is it?&lt;br />&lt;br />It’s bad. &amp;nbsp;I’m not sure how far to trust the memory statistics I’m getting from the time utility, but assuming they at least reliable enough to be a rough guide the MCJIT implementation has some issues. &amp;nbsp;In the cases where the MCJIT implementation has a performance advantage the memory consumption can be as little as 1.5 times the JIT implementation, but in the worst case scenario of each function being called immediately after it is defined the MCJIT implementation can take up to 10 times more memory than the JIT implementation.&lt;br />&lt;br />What are we to make of this? &amp;nbsp;Well, let’s start with a sanity check. &amp;nbsp;As the introduction to the Kaleidoscope tutorial says the tutorial isn’t meant to be a good implementation -- “the code leaks memory, uses global variables all over the place, doesn’t use nice design patterns like visitors, etc... but it is very simple.”&lt;br />There are some very basic things going on that waste a lot of memory, and those are amplified in our MCJIT implementation. &amp;nbsp;For instance, when an immediate expression is used, we leave it in memory for the duration of program execution, even though we can be absolutely certain we’ll never reference it again.&lt;br />&lt;br />Also, I don’t really have a feel for whether or not the sample inputs I’m using have any correspondence to a real world usage pattern. &amp;nbsp;I haven’t done a detailed analysis of memory use, but at first glance it appears that a large chunk of the memory is being used to generate relocation tables for each generated object image. &amp;nbsp;In theory we could drop those tables as soon as the object is fixed in memory (that is, after the call to finalizeObject), but we don’t. &amp;nbsp;This problem is magnified by the fact that the workloads are heavily based on a network of random calls between functions, probably involving a disproportionately high number of cross module references. &amp;nbsp;I’ve made no attempt to optimize that.&lt;br />&lt;br />As I said, I just generated a bunch of random code and threw it at the interpreter. &amp;nbsp;That’s true of the performance numbers too, of course. &amp;nbsp;Remember, my goal here was just to try to get a ballpark feel for what the implementation looked like.&lt;br />&lt;br />My ballpark feel is that with the “lazy” implementation the performance is going to be just about as good as the old JIT implementation, but it’s going to use more memory.&lt;br />&lt;h3>Next Steps&lt;/h3>So what else can we do with this? &amp;nbsp;Why would anyone want to go to the trouble of switching to MCJIT just to get something that performed just about as well but used more memory?&lt;br />&lt;br />I could say that you’ll get better ongoing support and adoption of new LLVM enhancements with MCJIT. &amp;nbsp;While that’s true, it would probably leave you a bit frustrated.&lt;br />&lt;br />Instead, what I’m going to tell you is that MCJIT has a great feature that will give it a huge leg up on the old JIT engine in many real world usage scenarios. &amp;nbsp;But that’s going to have to wait until my next post….&lt;br />&lt;br />The full source code listing for this post along with the scripts for generating test input are available in the trunk of the LLVM source tree at &amp;lt;llvm_root&amp;gt;/examples/Kaleidoscope/MCJIT.&lt;br />&lt;div>&lt;br />&lt;/div></description></item><item><title>Using MCJIT with the Kaleidoscope Tutorial</title><link>https://blog.llvm.org/2013/07/using-mcjit-with-kaleidoscope-tutorial.html</link><pubDate>Mon, 22 Jul 2013 11:49:00 +0000</pubDate><guid>https://blog.llvm.org/2013/07/using-mcjit-with-kaleidoscope-tutorial.html</guid><description>&lt;div class="MsoNormal">You may have noticed that there are two different JIT execution engines in the LLVM project.&amp;nbsp; The older implementation (llvm::JIT) is a sort of ad hoc implementation that brings together various pieces of the LLVM code generation and adds its own glue to get dynamically generated code into memory one function at a time.&amp;nbsp; The newer implementation (llvm::MCJIT) is heavily based on the core MC library and emits complete object files into memory then prepares them for execution.&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">MCJIT has several advantages, including broader platform support and better tool integration.&amp;nbsp; However, because it is designed to compile entire modules into object images the MCJIT engine doesn’t directly support some key features of the older JIT implementation, such as lazy compilation.&amp;nbsp; By lazy compilation, I mean deferring compilation of individual functions until just before the function is going to be executed.&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">At this point you may find yourself saying, “Wait a minute?&amp;nbsp; Are you saying MC&lt;b>&lt;i>JIT&lt;/i>&lt;/b>doesn’t do ‘just-in-time’ compilation?!?”&amp;nbsp; Well…sort of.&amp;nbsp; It’s more of a dynamic code emitter than a true just-in-time compiler.&amp;nbsp; That said we’d like it to become a long term replacement for the old JIT so that we can reap the benefits of ongoing development in core MC code generation.&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">So the question becomes, can we make MCJIT do what the older JIT engine does?&amp;nbsp; The current answer is, “I hope so.”&amp;nbsp; As a means of exploring this question, I decided to try to convert the Kaleidoscope tutorial to use MCJIT.&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;/div>&lt;div class="MsoNormal">The Kaleidoscope tutorial demonstrates a simple interactive interpreter (“toy”) designed to teach developers how to implement a simple programming language using LLVM.&amp;nbsp; Kaleidoscope is presented as a procedural language that supports floating point variables, function calls and a few basic operators.&amp;nbsp; The tutorial uses the JIT execution engine to produce executable code from user input.&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">Since MCJIT was conceived as a drop in replacement for the older JIT engine, putting it into the Kaleidoscope tutorial should be easy, right?&amp;nbsp; Eh….keep reading and you can judge for yourself.&amp;nbsp; Along the way, you’ll see firsthand some of the key differences between these two engines.&lt;o:p>&lt;/o:p>&lt;/div>&lt;h3>First Steps&lt;/h3>&lt;h1>&lt;o:p>&lt;/o:p>&lt;/h1>&lt;div class="MsoNormal">I’ll be starting where the Kaleidoscope tutorial ends.&amp;nbsp; If you want to follow along, you can grab the final Kaleidoscope source code from the LLVM source tree at&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">&amp;lt;llvm_root&amp;gt;/examples/Kaleidoscope/Chapter7/toy.cpp&lt;/span>&lt;/blockquote>&lt;div class="Code">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">There’s a Makefile there too, but it is intended to build the program in place as part of a complete LLVM build, so we’ll be using a command line approach.&amp;nbsp; For now, you can just type the build command in the Kaleidoscope tutorial:&lt;/div>&lt;div class="MsoNormal">&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">clang++ -g toy.cpp `llvm-config --cppflags --ldflags --libs core jit native` -O3 –o toy&lt;/span>&lt;/blockquote>&lt;div class="Code">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">If you have the right tools in your path, that should build the tutorial for you.&lt;/div>&lt;div class="MsoNormal">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">The first change we’ll need to make is to create an MCJIT execution engine instead of a JIT execution engine.&amp;nbsp; This is pretty simple.&amp;nbsp; The ExecutionEngine gets created in the main() function in toy.cpp using an EngineBuilder object with a call that looks like this:&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">TheExecutionEngine = EngineBuilder(TheModule).setErrorStr(&amp;amp;ErrStr).create();&lt;/span>&lt;/blockquote>&lt;div class="Code">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">EngineBuilder creates a JIT engine by default, but you can request an MCJIT engine instead by calling the setUseMCJIT() function, as such:&lt;/div>&lt;div class="MsoNormal">&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;">TheExecutionEngine = EngineBuilder(TheModule).setErrorStr(&amp;amp;ErrStr)&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .setUseMCJIT(true)&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .create();&lt;/span>&lt;/blockquote>&lt;div class="CodeCxSpLast">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">You’ll also need to include ‘MCJIT.h’ to get the MCJIT static constructor linked in properly (you can replace ‘JIT.h’) and add two new lines of component initialization at the top of main().&lt;/div>&lt;div class="MsoNormal">&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">IntializeNativeTargetAsmPrinter();&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">InitializeNatureTargetAsmParser();&lt;/span>&lt;/blockquote>&lt;div class="CodeCxSpLast">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">Another feature of MCJIT that I should mention at this point is that it is designed to allow generated code to be remapped for execution in external processes or even on remote systems.&amp;nbsp; As such, it requires that we call ExecutionEngine::finalizeObject() to let it know we’re ready for the generated object to be put in its executable state.&amp;nbsp; We can do that just before calling getPointerToFunction() in HandleTopLevelExpression:&lt;/div>&lt;div class="MsoNormal">&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">TheExecutionEngine-&amp;gt;finalizeObject();&lt;/span>&lt;/blockquote>&lt;div class="Code">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">Now build with the command above, substituting ‘mcjit’ for ‘jit’ in the library list.&lt;/div>&lt;div class="MsoNormal">&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">clang++ -g toy.cpp `llvm-config --cppflags --ldflags --libs core mcjit native` -O3 –o toy&lt;/span>&lt;/blockquote>&lt;div class="Code">&lt;o:p>&lt;/o:p>&lt;/div>&lt;h3>Handling Function Names&lt;/h3>&lt;h1>&lt;o:p>&lt;/o:p>&lt;/h1>&lt;div class="MsoNormal">At this point, you’re up and running with MCJIT.&amp;nbsp; Unfortunately, nothing will work because the interpreter uses unnamed functions to evaluate immediate expressions and MCJIT doesn’t like that.&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">For the purposes of this experiment, I’m going to work around that with a quick and dirty hack that generates a simple unique name for such anonymous functions, and while I’m at it I’ll make sure any function names would be legal in C, because that we need that to handle the way our interpreter names operators.&amp;nbsp; My hack looks like this:&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">//===----------------------------------------------------------------------===//&lt;br />// Quick and dirty hack&lt;br />//===----------------------------------------------------------------------===//&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>// FIXME: Obviously we can do better than this&lt;br />std::string GenerateUniqueName(const char *root)&lt;br />{&lt;br />&amp;nbsp; static int i = 0;&lt;br />&amp;nbsp; char s[16];&lt;br />&amp;nbsp; sprintf(s, "%s%d", root, i++);&lt;br />&amp;nbsp; std::string S = s;&lt;br />&amp;nbsp; return S;&lt;br />}&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>std::string MakeLegalFunctionName(std::string Name)&lt;br />{&lt;br />&amp;nbsp; std::string NewName;&lt;br />&amp;nbsp; if (!Name.length())&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return GenerateUniqueName("anon_func_");&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>&amp;nbsp; // Start with what we have&lt;br />&amp;nbsp; NewName = Name;&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>&amp;nbsp; // Look for a numberic first character&lt;br />&amp;nbsp; if (NewName.find_first_of("0123456789") == 0) {&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; NewName.insert(0, 1, 'n');&lt;br />&amp;nbsp; }&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>&amp;nbsp; // Replace illegal characters with their ASCII equivalent&lt;br />&amp;nbsp; std::string legal_elements = "_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";&lt;br />&amp;nbsp; size_t pos;&lt;br />&amp;nbsp; while ((pos = NewName.find_first_not_of(legal_elements)) != std::string::npos) {&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; char old_c = NewName.at(pos);&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; char new_str[16];&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; sprintf(new_str, "%d", (int)old_c);&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; NewName = NewName.replace(pos, 1, new_str);&lt;br />&amp;nbsp; }&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>&amp;nbsp; return NewName;&lt;br />}&lt;/span>&lt;/blockquote>&lt;div class="CodeCxSpFirst">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpLast">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">We need to use this in three places.&amp;nbsp; First, in PrototypeAST::Codegen() just before the call to Function::Create()&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">std::string FnName = MakeLegalFunctionName(Name);&lt;/span>&lt;/blockquote>&lt;div class="Code">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">Also replace subsequent references to ‘Name’ with ‘FnName’ in this function.&amp;nbsp; Changing the ‘Name’ member of the PrototypeAST object would have other unintended consequences, so here we’re just changing the name by which LLVM will know the function.&amp;nbsp; To that end, we also need to update calls to getFunction in UnaryExprAST::Codegen() and BinaryExprAST::Codegen().&amp;nbsp;&lt;/div>&lt;div class="MsoNormal">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">Function *F = TheModule-&amp;gt;getFunction(MakeLegalFunctionName(std::string("unary")+Opcode));&lt;/span>&lt;/blockquote>&lt;div class="Code">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">and&lt;/div>&lt;div class="MsoNormal">&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">Function *F = TheModule-&amp;gt;getFunction(MakeLegalFunctionName(std::string("binary")+Opcode));&lt;/span>&lt;/blockquote>&lt;div class="Code">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">A new member variable wouldn’t be a bad idea, but we won’t have to think about this again, so for now let’s just leave it simple.&lt;/div>&lt;div class="MsoNormal">&lt;o:p>&lt;/o:p>&lt;/div>&lt;h3>Adding Multiple Module Support&lt;/h3>&lt;h2>&lt;o:p>&lt;/o:p>&lt;/h2>&lt;div class="MsoNormal">Now let’s compile again using the command line above and give this a try.&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">ready&amp;gt; def add(x y) x+y;&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">[output omitted]&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">ready&amp;gt; add(1, 2);&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">ready&amp;gt; Evaluated to 3.000000&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">Hurray! It’s working!&amp;nbsp; Let’s keep playing with it.&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">ready&amp;gt; add(3, 4);&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">ready&amp;gt; Segmentation fault (core dumped)&lt;/span>&lt;/blockquote>&lt;div class="CodeCxSpLast">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">Oops!&amp;nbsp; What happened?&amp;nbsp; Well, here’s the thing.&amp;nbsp; Our ‘toy’ program creates a single module, uses that to create an execution engine, then keeps adding all the functions it creates to that same module.&amp;nbsp; This works with JIT, which is just generating code for one function at a time.&amp;nbsp; MCJIT, on the other hand, compiles the entire module and expects it to stay compiled.&amp;nbsp; When you add something to it and call finalizeObject() again it will skip the compilation phase (because it thinks the module has already been compiled) and attempt to re-apply relocations.&amp;nbsp; Since the MCJIT memory manager marked the code sections for this object as R-X in the previous call to finalizeObject, the attempt to re-write the relocation crashes.&amp;nbsp; MCJIT should obviously handle this case more gracefully, but the relevant point here is that MCJIT won’t let you continue to modify a module after it’s been compiled.&lt;/div>&lt;div class="MsoNormal">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">We’ll need to modify our program to spin off a new module and execution engine every time it compiles a previous module, but as it turns out that’s not as painful to implement as it might sound.&amp;nbsp; Our ‘toy’ program uses three global variables (TheModule, TheFPM and TheExecutionEngine) to handle all the functionality we’re interested in.&amp;nbsp; We’ll create a helper class to replace those three objects and coordinate their behavior.&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">The class will look like this:&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">//===----------------------------------------------------------------------===//&lt;br />// MCJIT helper class&lt;br />//===----------------------------------------------------------------------===//&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>class MCJITHelper&lt;br />{&lt;br />public:&lt;br />&amp;nbsp; MCJITHelper(LLVMContext&amp;amp; C) : Context(C), OpenModule(NULL) {}&lt;br />&amp;nbsp; ~MCJITHelper();&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>&amp;nbsp; Function *getFunction(const std::string FnName);&lt;br />&amp;nbsp; Module *getModuleForNewFunction();&lt;br />&amp;nbsp; void *getPointerToFunction(Function* F);&lt;br />&amp;nbsp; void dump();&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>private:&lt;br />&amp;nbsp; typedef std::vector&amp;lt;Module*&amp;gt; ModuleVector;&lt;br />&amp;nbsp; typedef std::vector&amp;lt;ExecutionEngine*&amp;gt; EngineVector;&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>&amp;nbsp; LLVMContext&amp;nbsp; &amp;amp;Context;&lt;br />&amp;nbsp; Module&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *OpenModule;&lt;br />&amp;nbsp; ModuleVector&amp;nbsp; Modules;&lt;br />&amp;nbsp; EngineVector&amp;nbsp; Engines;&lt;br />};&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>MCJITHelper::~MCJITHelper()&lt;br />{&lt;br />&amp;nbsp; if (OpenModule)&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; delete OpenModule;&lt;br />&amp;nbsp; EngineVector::iterator begin = Engines.begin();&lt;br />&amp;nbsp; EngineVector::iterator end = Engines.end();&lt;br />&amp;nbsp; EngineVector::iterator it;&lt;br />&amp;nbsp; for (it = begin; it != end; ++it)&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; delete *it;&lt;br />}&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>Function *MCJITHelper::getFunction(const std::string FnName) {&lt;br />&amp;nbsp; ModuleVector::iterator begin = Modules.begin();&lt;br />&amp;nbsp; ModuleVector::iterator end = Modules.end();&lt;br />&amp;nbsp; ModuleVector::iterator it;&lt;br />&amp;nbsp; for (it = begin; it != end; ++it) {&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; Function *F = (*it)-&amp;gt;getFunction(FnName);&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if (F) {&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (*it == OpenModule)&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return F;&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; assert(OpenModule != NULL);&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // This function is in a module that has already been JITed.&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;// We need to generate a new prototype for external linkage.&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Look for a prototype in the current module.&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Function *PF = OpenModule-&amp;gt;getFunction(FnName);&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (PF &amp;amp;&amp;amp; !PF-&amp;gt;empty()) {&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ErrorF("redefinition of function across modules");&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return 0;&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // If we don't have a prototype yet, create one.&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!PF)&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; PF = Function::Create(F-&amp;gt;getFunctionType(),&lt;br /> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Function::ExternalLinkage,&lt;br /> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FnName,&lt;br /> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; OpenModule);&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return PF;&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br />&amp;nbsp; }&lt;br />&amp;nbsp; return NULL;&lt;br />}&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>Module *MCJITHelper::getModuleForNewFunction() {&lt;br />&amp;nbsp; // If we have a Module that hasn't been JITed, use that.&lt;br />&amp;nbsp; if (OpenModule)&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; return OpenModule;&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>&amp;nbsp; // Otherwise create a new Module.&lt;br />&amp;nbsp; std::string ModName = GenerateUniqueName("mcjit_module_");&lt;br />&amp;nbsp; Module *M = new Module(ModName, Context);&lt;br />&amp;nbsp; Modules.push_back(M);&lt;br />&amp;nbsp; OpenModule = M;&lt;br />&amp;nbsp; return M;&lt;br />}&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>void *MCJITHelper::getPointerToFunction(Function* F) {&lt;br />&amp;nbsp; // See if an existing instance of MCJIT has this function.&lt;br />&amp;nbsp; EngineVector::iterator begin = Engines.begin();&lt;br />&amp;nbsp; EngineVector::iterator end = Engines.end();&lt;br />&amp;nbsp; EngineVector::iterator it;&lt;br />&amp;nbsp; for (it = begin; it != end; ++it) {&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; void *P = (*it)-&amp;gt;getPointerToFunction(F);&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if (P)&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return P;&lt;br />&amp;nbsp; }&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>&amp;nbsp; // If we didn't find the function, see if we can generate it.&lt;br />&amp;nbsp; if (OpenModule) {&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; std::string ErrStr;&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; ExecutionEngine *NewEngine = EngineBuilder(OpenModule)&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.setErrorStr(&amp;amp;ErrStr)&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .setUseMCJIT(true)&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .create();&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!NewEngine) {&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fprintf(stderr, "Could not create ExecutionEngine: %s\n", ErrStr.c_str());&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; exit(1);&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; OpenModule = NULL;&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; Engines.push_back(NewEngine);&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; NewEngine-&amp;gt;finalizeObject();&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; return NewEngine-&amp;gt;getPointerToFunction(F);&lt;br />&amp;nbsp; }&lt;br />&amp;nbsp; return NULL;&lt;br />}&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>void MCJITHelper::dump()&lt;br />{&lt;br />&amp;nbsp; ModuleVector::iterator begin = Modules.begin();&lt;br />&amp;nbsp; ModuleVector::iterator end = Modules.end();&lt;br />&amp;nbsp; ModuleVector::iterator it;&lt;br />&amp;nbsp; for (it = begin; it != end; ++it)&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; (*it)-&amp;gt;dump();&lt;br />}&lt;/span>&lt;/blockquote>&lt;div class="CodeCxSpFirst">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpLast">The one thing here that might require explanation is the implementation of getFunction.&amp;nbsp; This is used when the interpreter wants to call an existing function.&amp;nbsp; Since we’re dealing with multiple modules now, we need to look for this function in all of the modules our helper class is handling.&amp;nbsp; If we find it in the module we’re currently working with, we can just use it, but if we find it in another module we need to create a prototype in the current module.&amp;nbsp; The function declaration we found in the other module will provide the function type.&lt;/div>&lt;div class="MsoNormal">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">We’ll create a new global variable (TheHelper) and get rid of the three previously mentioned.&amp;nbsp; In main() we’ll replace the code that creates and initializes those three objects with a single line of code:&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="Code">TheHelper = new MCJITHelper(Context);&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">Now we just need to go through the code and replace uses of those three global objects with calls to our helper.&amp;nbsp; There aren’t as many as you might expect.&amp;nbsp; You can find references to TheModule in UnaryExprAST::Codegen(), BinaryExprAST::Codegen(), CallExprAST::Codegen(), and PrototypeAST::Codegen().&amp;nbsp; All of these except the last are just drop-in replacements.&amp;nbsp; In PrototypeAST::Codegen() we need to add a call to TheHelper-&amp;gt;getModuleForNewFunction() to get the last argument to Function::Create().&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">Module* M = TheHelper-&amp;gt;getModuleForNewFunction();&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">Function *F = Function::Create(FT, Function::ExternalLinkage, Name, M);&lt;/span>&lt;/blockquote>&lt;div class="CodeCxSpLast">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">TheExecutionEngine is used only in HandleTopLevelExpression() and a direct replacement is suitable there, plus we can eliminate the call to finalizeObject since that will happen inside MCJITHelper::getPointerToFunction.&lt;/div>&lt;div class="MsoNormal">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">TheFPM is used in FunctionAST::Codegen() but that’s not where we’ll want it for MCJIT purposes.&amp;nbsp; Since we aren’t creating an ExecutionEngine until we need to compile a Module, I’m also going to put the FunctionPassManager creation there and optimize all the functions in a Module just before code generation.&amp;nbsp; This isn’t strictly necessary, but it makes the code generation phase go a bit faster.&amp;nbsp; We can put the following in MCJITHelper::getPointerToFunction() just after the execution engine is created:&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">// Create a function pass manager for this engine&lt;br />FunctionPassManager *FPM = new FunctionPassManager(OpenModule);&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>// Set up the optimizer pipeline.&amp;nbsp; Start with registering info about how the&lt;br />// target lays out data structures.&lt;br />FPM-&amp;gt;add(new DataLayout(*NewEngine-&amp;gt;getDataLayout()));&lt;br />// Provide basic AliasAnalysis support for GVN.&lt;br />FPM-&amp;gt;add(createBasicAliasAnalysisPass());&lt;br />// Promote allocas to registers.&lt;br />FPM-&amp;gt;add(createPromoteMemoryToRegisterPass());&lt;br />// Do simple "peephole" optimizations and bit-twiddling optzns.&lt;br />FPM-&amp;gt;add(createInstructionCombiningPass());&lt;br />// Reassociate expressions.&lt;br />FPM-&amp;gt;add(createReassociatePass());&lt;br />// Eliminate Common SubExpressions.&lt;br />FPM-&amp;gt;add(createGVNPass());&lt;br />// Simplify the control flow graph (deleting unreachable blocks, etc).&lt;br />FPM-&amp;gt;add(createCFGSimplificationPass());&lt;br />FPM-&amp;gt;doInitialization();&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>// For each function in the module&lt;br />Module::iterator it;&lt;br />Module::iterator end = OpenModule-&amp;gt;end();&lt;br />for (it = OpenModule-&amp;gt;begin(); it != end; ++it) {&lt;br />&amp;nbsp; // Run the FPM on this function&lt;br />&amp;nbsp; FPM-&amp;gt;run(*it);&lt;br />}&lt;br />&lt;o:p>&amp;nbsp;&lt;/o:p>// We don't need this anymore&lt;br />delete FPM;&lt;/span>&lt;/blockquote>&lt;div class="CodeCxSpFirst">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpLast">&lt;o:p>&lt;/o:p>&lt;/div>&lt;h3>Cross Module Linking&lt;/h3>&lt;h1>&lt;o:p>&lt;/o:p>&lt;/h1>&lt;div class="MsoNormal">Let’s try what we have now.&amp;nbsp; Recompile using the command line above and start the program:&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">ready&amp;gt; def add(x y) x+y;&lt;br />[output omitted]&lt;br />ready&amp;gt; add(1, 2);&lt;br />ready&amp;gt; Evaluated to 3.000000&lt;br />ready&amp;gt; add(3, 4);&lt;br />ready&amp;gt; LLVM ERROR: Program used external function ‘add’ which could not be resolved!&lt;/span>&lt;/blockquote>&lt;div class="CodeCxSpFirst">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpLast">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">Do you see what happened there?&amp;nbsp; Our program created a module, added the function ‘add’ to it and then added a call to that function.&amp;nbsp; At this point, the MCJITHelper compiled that module and started a new module.&amp;nbsp; When we tried to call ‘add’ a second time, the generated call went into the new module, which doesn’t have a definition for ‘add’ – only a prototype.&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">To make this work we’re going to need some way to link our dynamic code against previously generated modules.&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">Here’s how linking works in MCJIT.&amp;nbsp; When code is generated from a Module, a complete object file image is generated into memory.&amp;nbsp; As MCJIT’s runtime loader is preparing this object for execution, it will create a list of external symbols that need to be resolved.&amp;nbsp; It will then call the MCJIT memory manager’s getPointerToNamedFunction method in an attempt to resolve these external symbols.&amp;nbsp; (Why the memory manager? Because that’s the component that knows which address space the JITed code will be running in.)&amp;nbsp; The default memory manager (SectionMemoryManager) uses sys::DynamicLibrary::SearchForAddressOfSymbol() to try to link this symbol against the current process.&amp;nbsp; If it can’t find the symbol, the symbol gets reported as unresolved.&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">We could solve the problem of linking dynamically generated objects by iterating through all the symbols in an object as it is loaded and calling sys::DynamicLibrary::AddSymbol() for each one.&amp;nbsp; In some circumstances that might be a good solution (as long as you aren’t worried about name conflicts).&amp;nbsp; However, I’d like to demonstrate an alternative solution which can be adapted to more general purposes.&amp;nbsp; I’m going to create a custom memory manager for linking purposes.&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">My new memory manager will inherit from SectionMemoryManager and use the base implementation for the actual memory management.&amp;nbsp; It will also attempt to reuse the base symbol resolution, but if a symbol is not found, it will delegate symbol resolution to our MCJITHelper class, which can search other loaded objects.&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">Here’s the code for the new memory manager:&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">class HelpingMemoryManager : public SectionMemoryManager&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">{&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; HelpingMemoryManager(const HelpingMemoryManager&amp;amp;) LLVM_DELETED_FUNCTION;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; void operator=(const HelpingMemoryManager&amp;amp;) LLVM_DELETED_FUNCTION;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">public:&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; HelpingMemoryManager(MCJITHelper *Helper) : MasterHelper(Helper) {}&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; virtual ~HelpingMemoryManager() {}&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; /// This method returns the address of the specified function.&amp;nbsp;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; /// Our implementation will attempt to find functions in other&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; /// modules associated with the MCJITHelper to cross link functions&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; /// from one generated module to another.&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; ///&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; /// If \p AbortOnFailure is false and no function with the given name is&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; /// found, this function returns a null pointer. Otherwise, it prints a&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; /// message to stderr and aborts.&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; virtual void *getPointerToNamedFunction(const std::string &amp;amp;Name,&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; bool AbortOnFailure = true);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">private:&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; MCJITHelper *MasterHelper;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">};&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">void *HelpingMemoryManager::getPointerToNamedFunction(const std::string &amp;amp;Name,&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; bool AbortOnFailure)&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">{&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; // Try the standard symbol resolution first, but ask it not to abort.&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; void *pfn = SectionMemoryManager::getPointerToNamedFunction(Name, false);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; if (pfn)&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; return pfn;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&lt;br />&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; pfn = MasterHelper-&amp;gt;getPointerToNamedFunction(Name);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; if (!pfn &amp;amp;&amp;amp; AbortOnFailure)&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; report_fatal_error("Program used external function '" + Name +&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "' which could not be resolved!");&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">&amp;nbsp; return pfn;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">}&lt;/span>&lt;br />&lt;div>&lt;br />&lt;/div>&lt;/blockquote>&lt;div class="CodeCxSpFirst">&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;">&lt;o:p>&lt;/o:p>&lt;/span>&lt;/div>&lt;div class="MsoNormal">(Don’t forget to add this to the class definition if you’re coding along.)&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">Finally, we need to set the memory manager in MCJITHelper::getPointerToFunction where we use EngineBuilder to create a new execution engine.&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">ExecutionEngine *NewEngine = EngineBuilder(OpenModule)&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .setErrorStr(&amp;amp;ErrStr)&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .setUseMCJIT(true)&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .setMCJITMemoryManager(new HelpingMemoryManager(this))&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .create();&lt;/span>&lt;/blockquote>&lt;div class="CodeCxSpFirst">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpMiddle">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="CodeCxSpLast">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">If you’re building against the LLVM 3.3 release, you need to use setJITMemoryManager instead of the more recently added setMCJITMemoryManager call.&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">Finally, chances are you’ve built LLVM with the default settings, which means you built it without runtime type information (RTTI).&amp;nbsp; If that is the case, you’ll also need to start building the sample program without RTTI to get the inheritance from SectionMemoryManager to link properly. If you do that, there’s a place in BinaryExprAST::Codegen where you’ll need to change a ‘dynamic_cast’ to a ‘reinterpret_cast’ to keep things working.&amp;nbsp; You lose a little automatic error checking that way, but since this is just a demo program I think we can live with that.&amp;nbsp; Alternatively, you could rebuild LLVM with RTTI enabled.&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">Here’s the new command line we’ll use for building our program:&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">clang++ -g -fno-rtti toy.cpp `llvm-config --cppflags --ldflags --libs core mcjit native` -O3 –o toy&lt;/span>&lt;/blockquote>&lt;div class="Code">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">Trying it out one more time:&lt;/div>&lt;div class="MsoNormal">&lt;o:p>&lt;/o:p>&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">ready&amp;gt; def add(x y) x+y;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">[output omitted]&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">ready&amp;gt; add(1, 2);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">ready&amp;gt; Evaluated to 3.000000&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">ready&amp;gt; add(3, 4);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">ready&amp;gt; Evaluated to 7.000000&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">ready&amp;gt; def mul(x y) x*y;&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">[output omitted]&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">ready&amp;gt; mul(5, 6);&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">ready&amp;gt; Evaluated to 30.000000&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">ready&amp;gt; mul(7, add(8, 9));&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">ready&amp;gt; Evaluated to 119.000000&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">ready&amp;gt; extern exit();&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">[output omitted]&lt;/span>&lt;br />&lt;span style="font-family: Courier New, Courier, monospace;">ready&amp;gt; exit();&lt;/span>&lt;/blockquote>&lt;div class="MsoNormal">Woo hoo!&amp;nbsp; It’s really working this time.&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">BTW, you see how that call to exit() got linked against our app, right?&amp;nbsp; The Kaleidoscope tutorial shows you something like that, but the tutorial is a bit out of date.&amp;nbsp; You can link against symbols in shared libraries that our program uses this way, but to link against symbols defined in the main program module you’ll need to build with the ‘-rdynamic’ flag.&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="Code">&lt;br />&lt;/div>&lt;blockquote class="tr_bq">&lt;span style="font-family: Courier New, Courier, monospace;">clang++ -g -fno-rtti -rdynamic toy.cpp `llvm-config --cppflags --ldflags --libs core mcjit native` -O3 –o toy&lt;/span>&lt;/blockquote>&lt;div class="Code">&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">Anyway, now we’ve got a functional Kaleidoscope interpreter built using MCJIT.&amp;nbsp; In the next installment I’ll do some crude performance analysis and look at ways that we can make it a little better.&lt;o:p>&lt;/o:p>&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>The full source code listing for this post is available in the trunk of the LLVM source tree at &amp;lt;llvm_root&amp;gt;/examples/Kaleidoscope/MCJIT.</description></item><item><title>LLDB 3.3 and beyond</title><link>https://blog.llvm.org/2013/06/lldb-33-and-beyond.html</link><pubDate>Fri, 28 Jun 2013 12:20:00 +0000</pubDate><guid>https://blog.llvm.org/2013/06/lldb-33-and-beyond.html</guid><description>&lt;div class="MsoNormal">The LLVM project debugger (LLDB) has seen a recent upswing of activity around the LLVM 3.3 release.&amp;nbsp; While the debugger has long been the default tool with Xcode, its potential beyond Darwin has had room to grow.&amp;nbsp; Especially within the last year, the development community has grown beyond its roots with OS/X and iOS to include substantial contributions for Linux, Windows, and FreeBSD. In addition, experimental packages are available for a growing number of distributions including Debian, Ubuntu and Arch.&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;/div>&lt;div class="MsoNormal">Much of the potential draws from the architecture of LLDB.&amp;nbsp; The debugger is well suited to debugging the latest C++ code because of its reuse of LLVM and Clang.&amp;nbsp; This includes the LLVM dynamic execution engine (MCJIT) for expression evaluation, the LLVM disassembler and the use of the Clang AST parser.&amp;nbsp; The reuse of LLVM project components has kept LLDB lightweight and has focused developer efforts on the core tasks of being a good debugger.&amp;nbsp;&amp;nbsp;&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">Overall, this modern debugger has been well designed from the ground up for multi-threaded debugging, lazy symbolication, versatile unwind, and a hierarchical command set including both C++ and Python interfaces.&amp;nbsp; The availability of these core interfaces allows LLDB to fulfill its name as a low-level debugger.&amp;nbsp; Developers can use the LLDB libraries for format-neutral access to information in object files such as debug information, symbols, types, functions, line tables and more.&amp;nbsp; &amp;nbsp;This information is useful to develop debuggers, symbolication tools, and analysis tools.&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">Python is currently embedded inside of LLDB and available through an interactive interpreter.&amp;nbsp; The available command set allows arbitrary Python code to be run on breakpoints, watch-points, data summaries and formatters, and the like. The LLDB shared library can also be accessed in Python scripts on the command line.&amp;nbsp; Overall, the ability to customize LLDB behavior using arbitrary Python code, write extensions using Python, and to evaluate arbitrary C++ expressions contribute to the versatility of this project.&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">Recent LLDB packages have closed some of the feature gap with LLDB on Linux relative to Darwin.&amp;nbsp; This includes support for multi-threaded debugging, watch-points and vector register sets.&amp;nbsp; In addition there have been many improvements to process control, expression evaluation, the build system and support of i386 targets.&amp;nbsp; Upcoming features include JIT debugging, core file support and support of new processor features.&amp;nbsp; Much of this work impacts any POSIX distribution including FreeBSD.&amp;nbsp; Currently, x86-64 Linux builds and targets are tested on trunk (using GCC and Clang) with every commit to LLVM, Clang and LLDB.&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">The activity on Linux for x86-64 is just part of the picture.&amp;nbsp; A Windows branch has been developed with the first port of remote debugging to a non-Darwin platform.&amp;nbsp; Work is just underway to assess LLDB on FreeBSD, with ICC and for i386 targets.&amp;nbsp; In fact, the number of active contributors to LLDB has more than doubled in the last year alone.&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">At this point in the growth of LLDB, feedback is very welcome, as we grow the test coverage and use the tool to debug increasingly more complex applications.&amp;nbsp; Increasingly, LLDB is a responsive debugger that can handle some of the harder cases of multi-threaded C++ debugging effectively.&amp;nbsp;&amp;nbsp;&lt;/div>&lt;div class="MsoNormal">&lt;br />&lt;/div>&lt;div class="MsoNormal">For more information about LLDB architecture, features, source code, packages, feature status or build information, visit &lt;a href="http://lldb.llvm.org/">lldb.llvm.org&lt;/a>. &amp;nbsp;If you have questions or comments about this release, please contact the&amp;nbsp;&lt;a href="http://lists.cs.uiuc.edu/mailman/listinfo/lldb-dev" target="_blank">lldb-dev&lt;/a>&amp;nbsp;mailing list!&lt;/div>&lt;br />&lt;div class="MsoNormal">&lt;br />&lt;/div></description></item><item><title>LLVM 3.3 Released!</title><link>https://blog.llvm.org/2013/06/llvm-33-released.html</link><pubDate>Wed, 19 Jun 2013 11:25:00 +0000</pubDate><guid>https://blog.llvm.org/2013/06/llvm-33-released.html</guid><description>LLVM 3.3 is &lt;a href="http://llvm.org/releases/">now available&lt;/a>! For details, you can read the &lt;a href="http://llvm.org/releases/3.3/docs/ReleaseNotes.html">Release Notes&lt;/a>.&lt;p> LLVM 3.3 is a big release: it adds new targets for the AArch64 and AMD R600 GPU architectures, adds support for IBM's z/Architecture S390 systems, and major enhancements for the PowerPC backend (including support for PowerPC 2.04/2.05/2.06 instructions, and an integrated assembler) and MIPS targets.&lt;p> Performance of code generated by LLVM 3.3 is substantially improved: the &lt;a href="http://blog.llvm.org/2013/05/llvm-33-vectorization-improvements.html">auto-vectorizer&lt;/a> produces much better code in many cases and is on by default at -O3, a new SLP vectorizer is available, and many general improvements landed in this release. Independent evaluations show that LLVM 3.3's performance exceeds that of LLVM 3.2 and of its primary competition on many benchmarks.&lt;p> 3.3 is also a major milestone for the Clang frontend: it is now &lt;a href="http://blog.llvm.org/2013/04/clang-support-for-c11-and-beyond.html">fully C++'11 feature complete&lt;/a>. At this point, Clang is the only compiler to support the full C++'11 standard, including important &lt;a href="http://libcxx.llvm.org">C++'11 library&lt;/a> features like std::regex. Clang now supports Unicode characters in identifiers, the &lt;a href="http://clang-analyzer.llvm.org">Clang Static Analyzer&lt;/a> supports several new checkers and can perform interprocedural analysis across C++ constructor/destructor boundaries, and Clang even has a nice "&lt;a href="http://blog.llvm.org/2013/04/status-of-c11-migrator.html">C++'11 Migrator&lt;/a>" tool to help upgrade code to use C++'11 features and a "&lt;a href="http://clang.llvm.org/docs/ClangFormat.html">Clang Format&lt;/a>" tool that plugs into vim and emacs (among others) to auto-format your code.&lt;p> LLVM 3.3 is the result of an incredible number of people working together over the last six months, but this release would not be possible without our volunteer release team! Thanks to Bill Wendling for shepherding the release, and to Ben Pope, Dimitry Andric, Nikola Smiljanic, Renato Golin, Duncan Sands, Arnaud A. de Grandmaison, Sebastian Dreßler, Sylvestre Ledru, Pawel Worach, Tom Stellard, Kevin Kim, and Erik Verbruggen for all of their contributions pulling the release together.&lt;p> If you have questions or comments about this release, please contact the &lt;a href="http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev">LLVMdev mailing list&lt;/a>! Onward to LLVM 3.4!</description></item><item><title>LLVM 3.3 Vectorization Improvements</title><link>https://blog.llvm.org/2013/05/llvm-33-vectorization-improvements.html</link><pubDate>Tue, 28 May 2013 07:05:00 +0000</pubDate><guid>https://blog.llvm.org/2013/05/llvm-33-vectorization-improvements.html</guid><description>I would like to give a brief update regarding vectorization in LLVM. When LLVM 3.2 was released, it featured a new experimental &lt;a href="http://blog.llvm.org/2012/12/new-loop-vectorizer.html">loop vectorizer&lt;/a> that was disabled by default. Since LLVM 3.2 was released, we have continued to work hard on improving vectorization, and we have some news to share. First, the loop vectorizer has new features and is now enabled by default on -O3. Second, we have a new SLP vectorizer. And finally, we have new clang command line flags to control the vectorizers.&lt;br />&lt;h4> &lt;a name='more'>&lt;/a>Loop Vectorizer &lt;/h4>The LLVM Loop Vectorizer has a number of new features that allow it to vectorize even more complex loops with better performance. One area that we focused on is the vectorization "cost model". When LLVM estimates if a loop may benefit from vectorization it uses a detailed description of the processor that can estimate the cost of various instructions. We improved both the X86 and ARM cost models. Improving the cost models helped the compiler to detect benefitting loops and improve the performance of many programs. During the analysis of vectorized programs, we also found and optimized many vector code sequences. &lt;br />&lt;br />Another important improvement to the loop vectorizer is the ability to unroll during vectorization. When the compiler unrolls loops it generates more independent instructions that modern out-of-order processors can execute in parallel. The loop below adds all of the numbers in the array. When compiling this loop, LLVM creates two independent chains of calculations that can be executed in parallel. &lt;br />&lt;pre style="background: #ffffff; color: black;">&lt;html>&lt;body style="background: #ffffff; color: black;">&lt;pre>&lt;br />&lt;span style="color: maroon; font-weight: bold;">int&lt;/span> sum_elements&lt;span style="color: #808030;">(&lt;/span>&lt;span style="color: maroon; font-weight: bold;">int&lt;/span> &lt;span style="color: #808030;">*&lt;/span>A&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: maroon; font-weight: bold;">int&lt;/span> n&lt;span style="color: #808030;">)&lt;/span> &lt;span style="color: purple;">{&lt;/span>&lt;br /> &lt;span style="color: maroon; font-weight: bold;">int&lt;/span> sum &lt;span style="color: #808030;">=&lt;/span> &lt;span style="color: #008c00;">0&lt;/span>&lt;span style="color: purple;">;&lt;/span>&lt;br /> &lt;span style="color: maroon; font-weight: bold;">for&lt;/span> &lt;span style="color: #808030;">(&lt;/span>&lt;span style="color: maroon; font-weight: bold;">int&lt;/span> i &lt;span style="color: #808030;">=&lt;/span> &lt;span style="color: #008c00;">0&lt;/span>&lt;span style="color: purple;">;&lt;/span> i &lt;span style="color: #808030;">&amp;lt;&lt;/span> n&lt;span style="color: purple;">;&lt;/span> &lt;span style="color: #808030;">+&lt;/span>&lt;span style="color: #808030;">+&lt;/span>i&lt;span style="color: #808030;">)&lt;/span>&lt;br /> sum &lt;span style="color: #808030;">+&lt;/span>&lt;span style="color: #808030;">=&lt;/span> A&lt;span style="color: #808030;">[&lt;/span>i&lt;span style="color: #808030;">]&lt;/span>&lt;span style="color: purple;">;&lt;/span>&lt;br /> &lt;span style="color: maroon; font-weight: bold;">return&lt;/span> sum&lt;span style="color: purple;">;&lt;/span>&lt;br />&lt;span style="color: purple;">}&lt;/span>&lt;br />&lt;/pre>&lt;/body>&lt;/html>&lt;/pre>The innermost loop of the program above is compiled into the X86 assembly sequence below, which processes 8 elements at once, in two parallel chains of computations. The vector registers XMM0 and XMM1 are used to store the partial sum of different parts of the array. This allows the processor to load two values and add two values simultaneously. &lt;br />&lt;pre style="background: #ffffff; color: black;">&lt;html>&lt;body style="background: #ffffff; color: black;">&lt;pre>&lt;br />LBB0&lt;span style="color: #808030;">_&lt;/span>4&lt;span style="color: #808030;">:&lt;/span>&lt;br /> movdqu &lt;span style="color: #008c00;">16&lt;/span>&lt;span style="color: #808030;">(&lt;/span>&lt;span style="color: #808030;">%&lt;/span>rdi&lt;span style="color: #808030;">,&lt;/span>&lt;span style="color: #808030;">%&lt;/span>rax&lt;span style="color: #008c00;">,4&lt;/span>&lt;span style="color: #808030;">)&lt;/span>&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>xmm2&lt;br /> paddd &lt;span style="color: #808030;">%&lt;/span>xmm2&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>xmm1&lt;br /> movdqu &lt;span style="color: #808030;">(&lt;/span>&lt;span style="color: #808030;">%&lt;/span>rdi&lt;span style="color: #808030;">,&lt;/span>&lt;span style="color: #808030;">%&lt;/span>rax&lt;span style="color: #008c00;">,4&lt;/span>&lt;span style="color: #808030;">)&lt;/span>&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>xmm2&lt;br /> paddd &lt;span style="color: #808030;">%&lt;/span>xmm2&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>xmm0&lt;br /> addq $&lt;span style="color: #008c00;">8&lt;/span>&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>rax&lt;br /> cmpq &lt;span style="color: #808030;">%&lt;/span>rax&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>rcx&lt;br /> jne LBB0&lt;span style="color: #808030;">_&lt;/span>4&lt;br />&lt;/pre>&lt;/body>&lt;/html>&lt;/pre>&lt;br />Another important improvement is the support for loops that contain IFs, and the detection of the popular min/max patterns. LLVM is now able to vectorize the code below: &lt;br />&lt;pre style="background: #ffffff; color: black;">&lt;html>&lt;body style="background: #ffffff; color: black;">&lt;pre>&lt;br />&lt;span style="color: maroon; font-weight: bold;">int&lt;/span> fins_max&lt;span style="color: #808030;">(&lt;/span>&lt;span style="color: maroon; font-weight: bold;">int&lt;/span> &lt;span style="color: #808030;">*&lt;/span>A&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: maroon; font-weight: bold;">int&lt;/span> n&lt;span style="color: #808030;">)&lt;/span> &lt;span style="color: purple;">{&lt;/span>&lt;br /> &lt;span style="color: maroon; font-weight: bold;">int&lt;/span> mx &lt;span style="color: #808030;">=&lt;/span> A&lt;span style="color: #808030;">[&lt;/span>&lt;span style="color: #008c00;">0&lt;/span>&lt;span style="color: #808030;">]&lt;/span>&lt;span style="color: purple;">;&lt;/span>&lt;br /> &lt;span style="color: maroon; font-weight: bold;">for&lt;/span> &lt;span style="color: #808030;">(&lt;/span>&lt;span style="color: maroon; font-weight: bold;">int&lt;/span> i &lt;span style="color: #808030;">=&lt;/span> &lt;span style="color: #008c00;">0&lt;/span>&lt;span style="color: purple;">;&lt;/span> i &lt;span style="color: #808030;">&amp;lt;&lt;/span> n&lt;span style="color: purple;">;&lt;/span> &lt;span style="color: #808030;">+&lt;/span>&lt;span style="color: #808030;">+&lt;/span>i&lt;span style="color: #808030;">)&lt;/span>&lt;br /> &lt;span style="color: maroon; font-weight: bold;">if&lt;/span> &lt;span style="color: #808030;">(&lt;/span>mx &lt;span style="color: #808030;">&amp;gt;&lt;/span> A&lt;span style="color: #808030;">[&lt;/span>i&lt;span style="color: #808030;">]&lt;/span>&lt;span style="color: #808030;">)&lt;/span>&lt;br /> mx &lt;span style="color: #808030;">=&lt;/span> A&lt;span style="color: #808030;">[&lt;/span>i&lt;span style="color: #808030;">]&lt;/span>&lt;span style="color: purple;">;&lt;/span>&lt;br /> &lt;span style="color: maroon; font-weight: bold;">return&lt;/span> mx&lt;span style="color: purple;">;&lt;/span>&lt;br />&lt;span style="color: purple;">}&lt;/span>&lt;br />&lt;/pre>&lt;/body>&lt;/html>&lt;/pre>In the last release, the loop vectorizer was able to vectorize many, but not all, loops that contained floating point arithmetic. Floating point operations are not associative due to the unique rounding rules. This means that the expression (a + b) + c is not always equal to a + (b + c). The compiler flag -ffast-math tells the compiler not to worry about rounding errors and to optimize for speed. One of the new features of the loop vectorizer is the vectorization of floating point calculations when -ffast-math mode is used. Users who decide to use the -ffast-math flag will notice that many more loops get vectorized with the upcoming 3.3 release of LLVM. &lt;br />&lt;h4> SLP Vectorizer &lt;/h4>The SLP vectorizer (short for superword-level parallelism) is a new vectorization pass. Unlike the loop vectorizer, which vectorizes consecutive loop iterations, the SLP vectorizer combines similar independent instructions in a straight-line code.&lt;br />The SLP Vectorizer is now available and will be useful for many people.&lt;br />The SLP Vectorizer can boost the performance of many programs in the LLVM test suite. In one benchmark, "Olden/Power", the SLP Vectorizer boosts the performance of the program by 16%. Here is one small example of a function that the SLP Vectorizer can vectorize. &lt;br />&lt;pre style="background: #ffffff; color: black;">&lt;html>&lt;body style="background: #ffffff; color: black;">&lt;pre>&lt;br />&lt;span style="color: maroon; font-weight: bold;">void&lt;/span> foo&lt;span style="color: #808030;">(&lt;/span>&lt;span style="color: maroon; font-weight: bold;">int&lt;/span> &lt;span style="color: #808030;">*&lt;/span> restrict A&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: maroon; font-weight: bold;">int&lt;/span> &lt;span style="color: #808030;">*&lt;/span> restrict B&lt;span style="color: #808030;">)&lt;/span> &lt;span style="color: purple;">{&lt;/span>&lt;br /> A&lt;span style="color: #808030;">[&lt;/span>&lt;span style="color: #008c00;">0&lt;/span>&lt;span style="color: #808030;">]&lt;/span> &lt;span style="color: #808030;">=&lt;/span> &lt;span style="color: #008c00;">7&lt;/span>&lt;span style="color: #808030;">+&lt;/span>&lt;span style="color: #808030;">(&lt;/span>B&lt;span style="color: #808030;">[&lt;/span>&lt;span style="color: #008c00;">0&lt;/span>&lt;span style="color: #808030;">]&lt;/span> &lt;span style="color: #808030;">*&lt;/span> &lt;span style="color: #008c00;">11&lt;/span>&lt;span style="color: #808030;">)&lt;/span>&lt;span style="color: purple;">;&lt;/span>&lt;br /> A&lt;span style="color: #808030;">[&lt;/span>&lt;span style="color: #008c00;">1&lt;/span>&lt;span style="color: #808030;">]&lt;/span> &lt;span style="color: #808030;">=&lt;/span> &lt;span style="color: #008c00;">6&lt;/span>&lt;span style="color: #808030;">+&lt;/span>&lt;span style="color: #808030;">(&lt;/span>B&lt;span style="color: #808030;">[&lt;/span>&lt;span style="color: #008c00;">1&lt;/span>&lt;span style="color: #808030;">]&lt;/span> &lt;span style="color: #808030;">*&lt;/span> &lt;span style="color: #008c00;">12&lt;/span>&lt;span style="color: #808030;">)&lt;/span>&lt;span style="color: purple;">;&lt;/span>&lt;br /> A&lt;span style="color: #808030;">[&lt;/span>&lt;span style="color: #008c00;">2&lt;/span>&lt;span style="color: #808030;">]&lt;/span> &lt;span style="color: #808030;">=&lt;/span> &lt;span style="color: #008c00;">5&lt;/span>&lt;span style="color: #808030;">+&lt;/span>&lt;span style="color: #808030;">(&lt;/span>B&lt;span style="color: #808030;">[&lt;/span>&lt;span style="color: #008c00;">2&lt;/span>&lt;span style="color: #808030;">]&lt;/span> &lt;span style="color: #808030;">*&lt;/span> &lt;span style="color: #008c00;">13&lt;/span>&lt;span style="color: #808030;">)&lt;/span>&lt;span style="color: purple;">;&lt;/span>&lt;br /> A&lt;span style="color: #808030;">[&lt;/span>&lt;span style="color: #008c00;">3&lt;/span>&lt;span style="color: #808030;">]&lt;/span> &lt;span style="color: #808030;">=&lt;/span> &lt;span style="color: #008c00;">4&lt;/span>&lt;span style="color: #808030;">+&lt;/span>&lt;span style="color: #808030;">(&lt;/span>B&lt;span style="color: #808030;">[&lt;/span>&lt;span style="color: #008c00;">3&lt;/span>&lt;span style="color: #808030;">]&lt;/span> &lt;span style="color: #808030;">*&lt;/span> &lt;span style="color: #008c00;">14&lt;/span>&lt;span style="color: #808030;">)&lt;/span>&lt;span style="color: purple;">;&lt;/span>&lt;br />&lt;span style="color: purple;">}&lt;/span>&lt;br />&lt;/pre>&lt;/body>&lt;/html>&lt;/pre>The code above is compiled into the ARMv7s assembly sequence below. Notice that the 4 additions and 4 multiplication operations became a single Multiply-Accumulate instruction "vmla". &lt;br />&lt;pre style="background: #ffffff; color: black;">&lt;html>&lt;body style="background: #ffffff; color: black;">&lt;pre>&lt;br />&lt;span style="color: #808030;">_&lt;/span>foo&lt;span style="color: #808030;">:&lt;/span>&lt;br /> adr r2&lt;span style="color: #808030;">,&lt;/span> LCPI0&lt;span style="color: #808030;">_&lt;/span>0&lt;br /> adr r3&lt;span style="color: #808030;">,&lt;/span> LCPI0&lt;span style="color: #808030;">_&lt;/span>1&lt;br /> vld1&lt;span style="color: #008c00;">.32&lt;/span> &lt;span style="color: #808030;">{&lt;/span>d18&lt;span style="color: #808030;">,&lt;/span> d19&lt;span style="color: #808030;">}&lt;/span>&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">[&lt;/span>r1&lt;span style="color: #808030;">]&lt;/span>&lt;br /> vld1&lt;span style="color: #008c00;">.64&lt;/span> &lt;span style="color: #808030;">{&lt;/span>d16&lt;span style="color: #808030;">,&lt;/span> d17&lt;span style="color: #808030;">}&lt;/span>&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">[&lt;/span>r3&lt;span style="color: #808030;">:&lt;/span>&lt;span style="color: #008c00;">128&lt;/span>&lt;span style="color: #808030;">]&lt;/span> &lt;br /> vld1&lt;span style="color: #008c00;">.64&lt;/span> &lt;span style="color: #808030;">{&lt;/span>d20&lt;span style="color: #808030;">,&lt;/span> d21&lt;span style="color: #808030;">}&lt;/span>&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">[&lt;/span>r2&lt;span style="color: #808030;">:&lt;/span>&lt;span style="color: #008c00;">128&lt;/span>&lt;span style="color: #808030;">]&lt;/span>&lt;br /> vmla&lt;span style="color: #008c00;">.&lt;/span>i32 q10&lt;span style="color: #808030;">,&lt;/span> q9&lt;span style="color: #808030;">,&lt;/span> q8 &lt;br /> vst1&lt;span style="color: #008c00;">.32&lt;/span> &lt;span style="color: #808030;">{&lt;/span>d20&lt;span style="color: #808030;">,&lt;/span> d21&lt;span style="color: #808030;">}&lt;/span>&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">[&lt;/span>r0&lt;span style="color: #808030;">]&lt;/span>&lt;br /> bx lr&lt;br />&lt;/pre>&lt;/body>&lt;/html>&lt;/pre>&lt;h4> Command Line Flags &lt;/h4>We've also added new command line flags to clang to control the vectorizers. The loop vectorizer is enabled by default for -O3, and it can be enabled or disabled for other optimization levels using the command line flags: &lt;br />&lt;pre style="background: #ffffff; color: black;">&lt;html>&lt;body style="background: #ffffff; color: black;">&lt;pre>&lt;br />$ clang &lt;span style="color: #808030;">.&lt;/span>&lt;span style="color: #808030;">.&lt;/span>&lt;span style="color: #808030;">.&lt;/span> &lt;span style="color: #808030;">-&lt;/span>fvectorize &lt;span style="color: #808030;">/&lt;/span> &lt;span style="color: #808030;">-&lt;/span>fno&lt;span style="color: #808030;">-&lt;/span>vectorize file&lt;span style="color: #008c00;">.&lt;/span>c&lt;br />&lt;/pre>&lt;/body>&lt;/html>&lt;/pre>The SLP vectorizer is disabled by default, and it can be enabled using the command line flags: &lt;br />&lt;pre style="background: #ffffff; color: black;">&lt;html>&lt;body style="background: #ffffff; color: black;">&lt;pre>&lt;br />$ clang &lt;span style="color: #808030;">.&lt;/span>&lt;span style="color: #808030;">.&lt;/span>&lt;span style="color: #808030;">.&lt;/span> &lt;span style="color: #808030;">-&lt;/span>fslp&lt;span style="color: #808030;">-&lt;/span>vectorize file&lt;span style="color: #008c00;">.&lt;/span>c&lt;br />&lt;/pre>&lt;/body>&lt;/html>&lt;/pre>LLVM has a second basic block vectorization phase which is more compile-time intensive (BB vectorizer). This optimization can be enabled through clang using the command line flag: &lt;br />&lt;pre style="background: #ffffff; color: black;">&lt;html>&lt;body style="background: #ffffff; color: black;">&lt;pre>&lt;br />$ clang &lt;span style="color: #808030;">.&lt;/span>&lt;span style="color: #808030;">.&lt;/span>&lt;span style="color: #808030;">.&lt;/span> &lt;span style="color: #808030;">-&lt;/span>fslp&lt;span style="color: #808030;">-&lt;/span>vectorize&lt;span style="color: #808030;">-&lt;/span>aggressive file&lt;span style="color: #008c00;">.&lt;/span>c&lt;br />&lt;/pre>&lt;/body>&lt;/html>&lt;/pre>We've made huge progress in improving vectorization during the development of LLVM 3.3. Special thanks to all of the people who contributed to this effort.</description></item><item><title>EuroLLVM 2013, Paris, France</title><link>https://blog.llvm.org/2013/05/eurollvm-2013-paris-france.html</link><pubDate>Mon, 06 May 2013 12:50:00 +0000</pubDate><guid>https://blog.llvm.org/2013/05/eurollvm-2013-paris-france.html</guid><description>&lt;a href="http://4.bp.blogspot.com/-ImeUwzkqcHs/UYLFH1m_E4I/AAAAAAAAA5o/PyXfOAmzQV8/s1600/paris.jpg" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;">&lt;img border="0" height="200" src="http://4.bp.blogspot.com/-ImeUwzkqcHs/UYLFH1m_E4I/AAAAAAAAA5o/PyXfOAmzQV8/s200/paris.jpg" width="132" />&lt;/a>Two days after the end of EuroLLVM 2013, I finally got the energy to write a piece about it. It was a lot of hard work by an amazing team of volunteer organizers lead by Tobias Grosser, Duncan Sands, Sylvestre Ledru and Arnaud de Grandmaison, plus the usual suspects of the previous events, and in the end there was very little that had gone wrong, even in the&amp;nbsp;slightest.&lt;br />&lt;br />&lt;a href="http://3.bp.blogspot.com/-dvRd-sZEf_c/UYLE66SPUgI/AAAAAAAAA48/xqzFSGbGKN8/s1600/ens-01.jpg" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;">&lt;img border="0" height="132" src="http://3.bp.blogspot.com/-dvRd-sZEf_c/UYLE66SPUgI/AAAAAAAAA48/xqzFSGbGKN8/s200/ens-01.jpg" width="200" />&lt;/a>&lt;br />This was our biggest event yet, with 187 attendees, 12 talks, 2 tutorials, 7 lightning talks and 10 posters! The posters, slides and videos are available on the &lt;a href="http://llvm.org/devmtg/2013-04/" target="_blank">EuroLLVM 2013 website&lt;/a>, as well as some idea on the abstracts, location (ENS, in Paris) and the great dinner cruise on Monday.&lt;br />&lt;br />You can also find on the site the results of our questionnaire, distilled and anonymized.&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;br />&lt;b>The Talks&lt;/b>&lt;br />&lt;br />&lt;a href="http://2.bp.blogspot.com/-OKtTowghfrg/UYLE-pI7_oI/AAAAAAAAA5I/28IT74VB5n4/s1600/keynote-01.jpg" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;">&lt;img border="0" height="132" src="http://2.bp.blogspot.com/-OKtTowghfrg/UYLE-pI7_oI/AAAAAAAAA5I/28IT74VB5n4/s200/keynote-01.jpg" width="200" />&lt;/a>The two key notes received high approval ratings (90+% overall). The first was Chandler's, speaking about the missing optimizations still lurking, hinting which ones would be low-hanging fruit, and others that we just have to fix nonetheless. On the second day we had Jakob with a nice break-down of source code into machine code and how it's executed on modern CPUs. Despite their highly technical nature, the talks were delivered in an easy-to-understand format, which the audience didn't find daunting.&lt;br />&lt;br />&lt;a href="http://4.bp.blogspot.com/-NXxIevmJbmM/UYLFPSe5JZI/AAAAAAAAA6Q/HuPC-bTHg8k/s1600/talks.jpg" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;">&lt;img border="0" height="132" src="http://4.bp.blogspot.com/-NXxIevmJbmM/UYLFPSe5JZI/AAAAAAAAA6Q/HuPC-bTHg8k/s200/talks.jpg" width="200" />&lt;/a>We also had many good talks, from Debug Information (Eric's) to PowerPC implementation (Ulrich's) to OpenMP support (Bokhanko &amp;amp; Bataev's), where the announcement that Intel had open sourced their OpenMP on a compatible BSD-license, which is always good news! There were also talks about tools (lld) and Clang usage (AST Tutorial, Pragma Handling).&lt;br />&lt;br />&lt;br />&lt;a href="http://1.bp.blogspot.com/-wXSqgpeGPKI/UYLFJMIBMdI/AAAAAAAAA54/i7KmbwLRR0A/s1600/parallel-track.jpg" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;">&lt;img border="0" height="132" src="http://1.bp.blogspot.com/-wXSqgpeGPKI/UYLFJMIBMdI/AAAAAAAAA54/i7KmbwLRR0A/s200/parallel-track.jpg" width="200" />&lt;/a>Since we had two parallel tracks, I was worried that we'd get people divided and not get much visibility on the second track. Some people mentioned it on the questionnaire, but the number of reviews on both tracks are compatible, which shows that there was enough space and content for all tastes.&lt;br />&lt;br />Other comments reinforced the idea to have more visibility on the official tools (lldb, bugpoint, lli) as well as more basic-level tutorials on how to use LLVM and tools, not just how to hack it. Let this be a lead to you (yes, you!) propose tutorials next time.&lt;br />&lt;br />&lt;b>Lightning Talks and Posters&lt;/b>&lt;br />&lt;br />&lt;a href="http://1.bp.blogspot.com/-5_4ROuWX3JQ/UYLFNz7YbYI/AAAAAAAAA6A/DdBaB_LMYIY/s1600/posters.jpg" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;">&lt;img border="0" height="132" src="http://1.bp.blogspot.com/-5_4ROuWX3JQ/UYLFNz7YbYI/AAAAAAAAA6A/DdBaB_LMYIY/s200/posters.jpg" width="200" />&lt;/a>There were many interesting lightning talks, all very quick and efficiently exposed. Part of the reason why we had so many was that many of the talks that we couldn't fit were transformed into lightning talks, others in posters, others in both.&lt;br />&lt;br />The idea was that, since a lightning talk can convey only a limited meaning, having a poster and specifically a poster session, was important to promote discussions between interested parties. That was actually very relevant, because some of the feedback was that there was little extra time to reinforce or create new connections.&lt;br />&lt;br />&lt;a href="http://4.bp.blogspot.com/-AMNAvjEukrs/UYLFC845YBI/AAAAAAAAA5g/OOX650oDlTk/s1600/lightning.jpg" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;">&lt;img border="0" height="132" src="http://4.bp.blogspot.com/-AMNAvjEukrs/UYLFC845YBI/AAAAAAAAA5g/OOX650oDlTk/s200/lightning.jpg" width="200" />&lt;/a>Again, there were topics from optimizations (like&amp;nbsp;adaptive&amp;nbsp;parallelization, user-defined optimization, FDO) to tools (MCLinker) to builds (Debian+LLVM), but perhaps the most unusual of the talks was&amp;nbsp;Henning's audio signal processing using LLVM and Haskell, in which we had a live demonstration of the hardware at work. It reminded me of early works from Kraftwerk.&lt;br />&lt;br />Of the 91 questionnaires returned, 94% said lightning talks were important and 90% that they would want to have it again in future events. Part of this acceptance, I imagine, is due to the extra connection you have with the presenter &lt;b>after&lt;/b>&amp;nbsp;the presentation.&lt;br />&lt;br />&lt;br />&lt;b>The Social&lt;/b>&lt;br />&lt;br />&lt;a href="http://2.bp.blogspot.com/-aBh8EkiCleo/UYLEvkhFxBI/AAAAAAAAA4Y/Fc0a6n8jcEY/s1600/cruise-03.jpg" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;">&lt;img border="0" height="132" src="http://2.bp.blogspot.com/-aBh8EkiCleo/UYLEvkhFxBI/AAAAAAAAA4Y/Fc0a6n8jcEY/s200/cruise-03.jpg" width="200" />&lt;/a>As highlighted above, there wasn't much time to socialize in between the talks, but there were specific coffee times, where the queue forced people to connect and meet others, the lunch time at the cafeteria, where finding a place to sit wasn't easy, so you'd end up sitting with completely unrelated people, and the amazing (let me say it again: &lt;b>amazing&lt;/b>!) cruise dinner.&lt;br />&lt;a href="http://1.bp.blogspot.com/-1yDJHmuvXSw/UYLEsNyCqfI/AAAAAAAAA4Q/aED2oI382Y0/s1600/cruise-02.jpg" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;">&lt;img border="0" height="132" src="http://1.bp.blogspot.com/-1yDJHmuvXSw/UYLEsNyCqfI/AAAAAAAAA4Q/aED2oI382Y0/s200/cruise-02.jpg" width="200" />&lt;/a>&lt;br />Floating easily through the Seine, admiring Paris' historical places from a very interesting point of view, we had a great meal and an enjoyable evening. I'd really like to thanks again our sponsors for providing such a great way to end a conference day.&lt;br />&lt;br />&lt;a href="http://4.bp.blogspot.com/-kP7ckIEo7IU/UYLEyRBpYqI/AAAAAAAAA4o/PaT-skA9ZSM/s1600/cruise-04.jpg" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;">&lt;img border="0" height="132" src="http://4.bp.blogspot.com/-kP7ckIEo7IU/UYLEyRBpYqI/AAAAAAAAA4o/PaT-skA9ZSM/s200/cruise-04.jpg" width="200" />&lt;/a>As some have pointed out, the only down-side of the dinner was that the social part fell a bit short, since most people haven't left their tables for the duration of the trip (I have, but I was taking the pictures!), which hindered a bit the &lt;i>social&lt;/i>&amp;nbsp;part of the event.&lt;br />&lt;br />&lt;br />But, to be honest, that wasn't so bad, since most (I really mean &lt;i>most&lt;/i>) of the people decided to walk to the river, spending no less than 1 hour together, enjoying the scenery and each others company.&lt;br />&lt;br />&lt;br />&lt;b>&lt;br />&lt;/b>&lt;b>Prize Draw and&amp;nbsp;Wrapping Up&lt;/b>&lt;br />&lt;b>&lt;br />&lt;/b>&lt;a href="http://3.bp.blogspot.com/-dz9N87WcuhY/UYLFOHEbFuI/AAAAAAAAA6E/tL64Syw9xIg/s1600/prize-draw.jpg" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;">&lt;img border="0" height="200" src="http://3.bp.blogspot.com/-dz9N87WcuhY/UYLFOHEbFuI/AAAAAAAAA6E/tL64Syw9xIg/s200/prize-draw.jpg" width="183" />&lt;/a>After the last session, just before the event ended, a great Parot headphone was delivered to Ahmed, who won the lottery.&lt;br />&lt;br />From my point of view, this was a very successful event, proof that Europe also has interesting LLVM engineering going on. It's also getting in shape with what people hope to find at these events, following the acceptance rates of talks and organization issues.&lt;br />&lt;br />With offers to help all over Europe (and beyond!), I wonder where the next EuroLLVM will be... But one thing I know: it's going to be great! :-)</description></item><item><title>Clang support for C++11 and beyond</title><link>https://blog.llvm.org/2013/04/clang-support-for-c11-and-beyond.html</link><pubDate>Sun, 21 Apr 2013 07:04:00 +0000</pubDate><guid>https://blog.llvm.org/2013/04/clang-support-for-c11-and-beyond.html</guid><description>As of &lt;a href="http://llvm.org/viewvc/llvm-project?view=revision&amp;amp;revision=179861">r179861&lt;/a>, Clang implements the &lt;b>entirety&lt;/b> of the C++11 language standard. The following features have been implemented since the release of Clang 3.2, along with our plans for "C++1y".&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;h3>Support for &lt;tt>[[attributes]]&lt;/tt>&lt;/h3>C++11's &lt;tt>[[attribute]]&lt;/tt> syntax is now fully supported, including support for the standard &lt;tt>[[noreturn]]&lt;/tt> and &lt;tt>[[carries_dependency]]&lt;/tt> attributes (although &lt;tt>[[carries_dependency]]&lt;/tt> does not provide improved code generation). This allows non-returning functions to be written with a standard syntax: &lt;br />&lt;br />&lt;pre>[[noreturn]] void foo() {&lt;br /> while (true) do_something();&lt;br />}&lt;br />&lt;/pre>&lt;pre>&lt;/pre>&lt;br />Just like &lt;tt>__attribute__((noreturn))&lt;/tt>, Clang will warn you if you use this attribute on a function which can return, and will optimize callers on the assumption that the function does not return. Unlike &lt;tt>__attribute__((noreturn))&lt;/tt>, &lt;tt>[[noreturn]]&lt;/tt> is never part of a function's type. &lt;br />&lt;br />As with g++'s implementation, &lt;tt>__attribute__((foo))&lt;/tt> attributes which are supported by g++ can be written as &lt;tt>[[gnu::foo]]&lt;/tt>. Clang-specific &lt;tt>__attribute__((...))&lt;/tt>s are not available through this syntax (patches to add &lt;tt>[[clang::...]]&lt;/tt> attribute names are welcome).&lt;br />&lt;br />Clang also now provides complete support for C++11's almost-attribute &lt;tt>alignas(...)&lt;/tt>. &lt;br />&lt;h3>Inheriting constructors&lt;/h3>Clang now supports C++11's inheriting constructor syntax, which provides a simple mechanism to re-export all the constructors from a base class, other than default constructors, or constructors which would be copy or move constructors for either the base or derived class. Example: &lt;br />&lt;br />&lt;pre>struct Base {&lt;br /> Base(); // default constructor, not inherited&lt;br /> Base(int, char);&lt;br /> template&amp;lt;typename T&amp;gt; Base(T &amp;amp;x);&lt;br />};&lt;br />struct Derived : Base {&lt;br /> using Base::Base;&lt;br />};&lt;br />Derived f(1, 'x');&lt;br />Derived d("foo"); // ok, calls inheriting constructor template&lt;br />&lt;/pre>&lt;h3>&lt;tt>thread_local&lt;/tt> variables&lt;/h3>Clang now supports C++11's &lt;tt>thread_local&lt;/tt> keyword, including dynamic initialization and destruction of thread-local objects. Dynamic destruction requires a C++ runtime library which provides &lt;tt>__cxa_thread_atexit&lt;/tt>, which is currently only provided by the g++4.8 C++ runtime library. &lt;br />&lt;h2>C++1y&lt;/h2>With C++11 out of the door, what's next? The C++ standardization committee voted yesterday to create the first Committee Draft for C++1y (which will very likely be C++14). Since this is only the first draft, there will probably be many minor changes before C++1y is done, but the rough feature set is unlikely to change much. This new language standard includes: &lt;br />&lt;ul>&lt;li>Generalized lambdas, allowing a templated call operator and arbitrary captures: &lt;br />&lt;br />&lt;pre>auto apply = [v(21)] (auto &amp;amp;&amp;amp;fn) { fn(v); };&lt;br />apply([] (int &amp;amp;n) { n += 21; });&lt;br />apply([] (int n) { std::cout &amp;lt;&amp;lt; n; });&lt;br />&lt;br />&lt;/pre>&lt;/li>&lt;li>Return type deduction for (non-lambda) functions: &lt;br />&lt;br />&lt;pre>auto fn(int n) { return something(n); }&lt;br />&lt;br />&lt;/pre>&lt;/li>&lt;li>A more powerful &lt;tt>constexpr&lt;/tt> feature, allowing variable mutation and loops: &lt;br />&lt;br />&lt;pre>&lt;/pre>&lt;pre>constexpr auto len(const char *str) {&lt;br /> int k = 0;&lt;br /> while (*str++) ++k;&lt;br /> return k;&lt;br />}&lt;br />static_assert(len("foo") == 3, "hooray");&lt;br />&lt;/pre>&lt;/li>&lt;/ul>The improved &lt;tt>constexpr&lt;/tt> feature comes with a backwards-compatibility cost, however. In order to support variable mutation for user-defined types, those types need to have &lt;tt>constexpr&lt;/tt> member functions which are not &lt;tt>const&lt;/tt>, so the C++11 rule which made &lt;tt>constexpr&lt;/tt> member functions implicitly &lt;tt>const&lt;/tt> has been removed. This means that you will need to make the &lt;tt>const&lt;/tt> explicit if you were previously relying on this shorthand. Rewrite: &lt;br />&lt;br />&lt;pre>&lt;/pre>&lt;pre>struct S {&lt;br /> int n;&lt;br /> constexpr int get() { return n; }&lt;br />};&lt;br />&lt;/pre>&lt;br />... as ... &lt;br />&lt;pre>&lt;/pre>&lt;pre>struct S {&lt;br /> int n;&lt;br /> constexpr int get() const { return n; }&lt;br />};&lt;br />&lt;/pre>&lt;br />... and your code will work in both C++11 and C++14. Clang already has a warning for code which is relying on the implicit &lt;tt>const&lt;/tt> rule, and will fix it for you if you run &lt;tt>clang -fixit&lt;/tt>. Other compilers supporting C++11 &lt;tt>constexpr&lt;/tt>&amp;nbsp;are expected to start providing similar warnings soon. &lt;br />&lt;br />Several of the new features were prototyped in Clang prior to standardization, and we expect implementations of those to land in Clang SVN over the coming weeks. See the &lt;a href="http://clang.llvm.org/cxx_status.html">Clang C++ status page&lt;/a> for the latest details on C++1y features and Clang's support for them. The implemented features can be enabled with the &lt;tt>-std=c++1y&lt;/tt> command-line flag. &lt;br />&lt;br />If you find bugs in the C++11 support, please report them on &lt;a href="http://llvm.org/bugs">our bug tracker&lt;/a>. If you want to get involved fixing bugs or working on C++1y support, &lt;a href="http://clang.llvm.org/get_involved.html">our website&lt;/a> has details of how you can help.</description></item><item><title>Euro LLVM 2013 in Paris</title><link>https://blog.llvm.org/2013/04/euro-llvm-2013-in-paris.html</link><pubDate>Thu, 18 Apr 2013 04:44:00 +0000</pubDate><guid>https://blog.llvm.org/2013/04/euro-llvm-2013-in-paris.html</guid><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on">&lt;div dir="ltr" style="text-align: left;" trbidi="on">In two weeks, the &lt;a href="http://llvm.org/devmtg/2013-04/">2013 edition of the Euro LLVM&lt;/a> conference will start in historic center of Paris, France.&amp;nbsp; The schedule has just been published. &amp;nbsp;Most of different aspects of the LLVM infrastructure will present at the event. &amp;nbsp;See below for the full details!&lt;/div>&lt;h3 id="monday">&lt;a name='more'>&lt;/a>&lt;/h3>&lt;h3 id="monday">Monday, April 29th&lt;/h3>&lt;table border="1"> &lt;tbody>&lt;tr> &lt;th>Time&lt;/th> &lt;th>Room&lt;/th> &lt;th>Subject&lt;/th> &lt;/tr>&lt;tr> &lt;td>11:00 - 13:00&lt;/td> &lt;td>Entrance&lt;/td> &lt;td>Registration&lt;/td> &lt;/tr>&lt;tr> &lt;td>12:30 - 13:15&lt;/td> &lt;td>ENS restaurant&lt;/td> &lt;td>Lunch&lt;/td> &lt;/tr>&lt;tr> &lt;td>13:14 - 13:30&lt;/td> &lt;td>Dussane&lt;/td> &lt;td>Welcome - Day 1&lt;/td> &lt;/tr>&lt;tr> &lt;td>13:30 - 14:30&lt;/td> &lt;td>Dussane&lt;/td> &lt;td>Keynote : &lt;a href="http://llvm.org/devmtg/2013-04/#talk3">Optimization in LLVM - Numbers, A Case Study, and Looking Forward&lt;/a>&lt;/td> &lt;/tr>&lt;tr> &lt;td rowspan="2">14:30 - 15:15&lt;/td> &lt;td>Dussane&lt;/td> &lt;td>Talk : &lt;a href="http://llvm.org/devmtg/2013-04/#talk2">Towards OpenMP Support in LLVM&lt;/a>&lt;/td> &lt;/tr>&lt;tr> &lt;td>Résistants&lt;/td> &lt;td>Talk : &lt;a href="http://llvm.org/devmtg/2013-04/#talk1">Dagger: decompilation to LLVM IR&lt;/a>&lt;/td> &lt;/tr>&lt;tr> &lt;td>15:15 - 15:45&lt;/td> &lt;td>&lt;/td> &lt;td>Coffee break&lt;/td> &lt;/tr>&lt;tr> &lt;td rowspan="2">15:45 - 16:30&lt;/td> &lt;td>Dussane&lt;/td> &lt;td>Talk : &lt;a href="http://llvm.org/devmtg/2013-04/#talk14">LLVM on IBM POWER processors: a progress report&lt;/a>&lt;/td> &lt;/tr>&lt;tr> &lt;td>Résistants&lt;/td> &lt;td>Talk : &lt;a href="http://llvm.org/devmtg/2013-04/#talk9">Performing Source-to-Source Transformations with Clang&lt;/a>&lt;/td> &lt;/tr>&lt;tr> &lt;td rowspan="2">16:30 - 17:15&lt;/td> &lt;td>Dussane&lt;/td> &lt;td>Talk : &lt;a href="http://llvm.org/devmtg/2013-04/#talk12">How to implement an LLVM Assembler&lt;/a>&lt;/td> &lt;/tr>&lt;tr> &lt;td>Résistants&lt;/td> &lt;td>Talk : &lt;a href="http://llvm.org/devmtg/2013-04/#talk4">clang-format - Automatic formatting for C++&lt;/a>&lt;/td> &lt;/tr>&lt;tr> &lt;td>20:00 - 23:00&lt;/td> &lt;td>&lt;/td> &lt;td>Dinner cruise on the Seine river, in Paris, for those who registered to the dinner&lt;/td> &lt;/tr>&lt;/tbody>&lt;/table>&lt;h3 id="tuesday">Tuesday, April 30th&lt;/h3>&lt;table border="1"> &lt;tbody>&lt;tr> &lt;th>Time&lt;/th> &lt;th>Room&lt;/th> &lt;th>Subject&lt;/th> &lt;/tr>&lt;tr> &lt;td>8:45 - 9:00&lt;/td> &lt;td>Dussane&lt;/td> &lt;td>Welcome - Day 2&lt;/td> &lt;/tr>&lt;tr> &lt;td>9:00 - 10:00&lt;/td> &lt;td>Dussane&lt;/td> &lt;td>Keynote : &lt;a href="http://llvm.org/devmtg/2013-04/#talk7">How Computers Work&lt;/a>&lt;/td> &lt;/tr>&lt;tr> &lt;td rowspan="2">10:00 - 10:45&lt;/td> &lt;td>Dussane&lt;/td> &lt;td>Talk : &lt;a href="http://llvm.org/devmtg/2013-04/#talk10">LLVM Interpreter, a key component in validation of OpenCL compilers&lt;/a>&lt;/td> &lt;/tr>&lt;tr> &lt;td>Résistants&lt;/td> &lt;td>Talk : &lt;a href="http://llvm.org/devmtg/2013-04/#talk6">Run-time tracking of uninitialized data with MemorySanitizer&lt;/a>&lt;/td> &lt;/tr>&lt;tr> &lt;td>10:45 - 11:05&lt;/td> &lt;td>&lt;/td> &lt;td>Coffee break&lt;/td> &lt;/tr>&lt;tr> &lt;td>11:05 - 12:05&lt;/td> &lt;td>Dussane&lt;/td> &lt;td>&lt;a href="http://llvm.org/devmtg/2013-04/#ltalkabstract">Lightning talks&lt;/a>&lt;/td> &lt;/tr>&lt;tr> &lt;td rowspan="2">12:05 - 12:35&lt;/td> &lt;td>Résistants&lt;/td> &lt;td>&lt;a href="http://llvm.org/devmtg/2013-04/#posterabstract">Posters&lt;/a>&lt;/td> &lt;/tr>&lt;tr> &lt;td>Cavailles&lt;/td> &lt;td>&lt;a href="http://llvm.org/devmtg/2013-04/#posterabstract">Posters&lt;/a>&lt;/td> &lt;/tr>&lt;tr> &lt;td>12:35 - 13:35&lt;/td> &lt;td>ENS restaurant&lt;/td> &lt;td>Lunch&lt;/td> &lt;/tr>&lt;tr> &lt;td rowspan="2">13:35 - 14:20&lt;/td> &lt;td>Dussane&lt;/td> &lt;td>Talk : &lt;a href="http://llvm.org/devmtg/2013-04/#talk8">lld - Solving the Linking Performance Problem&lt;/a>&lt;/td> &lt;/tr>&lt;tr> &lt;td>Résistants&lt;/td> &lt;td>Talk : &lt;a href="http://llvm.org/devmtg/2013-04/#talk13">An experimental framework for Pragma Handling in Clang&lt;/a>&lt;/td> &lt;/tr>&lt;tr> &lt;td rowspan="2">14:20 - 15:05&lt;/td> &lt;td>Dussane&lt;/td> &lt;td>Talk : &lt;a href="http://llvm.org/devmtg/2013-04/#talk5">Debug Info - Status and Directions&lt;/a>&lt;/td> &lt;/tr>&lt;tr> &lt;td>Résistants&lt;/td> &lt;td>Talk : &lt;a href="http://llvm.org/devmtg/2013-04/#talk11">Implementing Data Layout Optimizations in LLVM Framework&lt;/a>&lt;/td> &lt;/tr>&lt;tr> &lt;td>15:05 - 16:05&lt;/td> &lt;td>Dussane&lt;/td> &lt;td>Tutorial : &lt;a href="http://llvm.org/devmtg/2013-04/#tuto1">The Clang AST - a tutorial&lt;/a>&lt;/td> &lt;/tr>&lt;tr> &lt;td>16:05 - 16:20&lt;/td> &lt;td>Dussane&lt;/td> &lt;td>Closing word&lt;/td> &lt;/tr>&lt;/tbody>&lt;/table>&lt;br />The event is sponsored by &lt;a href="http://www.arm.com/">ARM&lt;/a>, &lt;a href="http://www.google.com/">Google&lt;/a>, &lt;a href="http://www.irill.org/">IRILL&lt;/a>/&lt;a href="http://www.inria.fr/">INRIA&lt;/a>, &lt;a href="http://www.intel.com/">Intel&lt;/a>, &lt;a href="http://www.parrot.com/">Parrot&lt;/a>, &lt;a href="http://www.qualcomm.com/quicinc/">QuIC&lt;/a>, &lt;a href="http://www.samsung.com/">Samsung&lt;/a>&lt;br />Edit:&amp;nbsp; See the &lt;a href="http://blog.llvm.org/2013/05/eurollvm-2013-paris-france.html">feedback from Renato Golin&lt;/a> on the event&lt;/div></description></item><item><title>Status of the C++11 Migrator</title><link>https://blog.llvm.org/2013/04/status-of-c11-migrator.html</link><pubDate>Mon, 15 Apr 2013 05:53:00 +0000</pubDate><guid>https://blog.llvm.org/2013/04/status-of-c11-migrator.html</guid><description>Since the &lt;a href="https://docs.google.com/document/d/1xXfpLPxXIlp3pUpASXC547sQFF-vvHhnQkRBogM9wX0/edit?usp=sharing" target="_blank">design document&lt;/a> for cpp11-migrate, the C++11 migrator tool, was first proposed in &lt;a href="http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=MTI0Mzc" target="_blank">early December 2012&lt;/a> development has been making steady progress. In this article I'll talk about what's been implemented in cpp11-migrate so far, what's coming up, and how you can get involved.&lt;br />&lt;br />The purpose of the C++11 Migrator is to do source-to-source translation to migrate existing C++ code to use C++11 features to enhance maintainability, readability, runtime performance, and compile-time performance. Development is still early and transforms fall mostly into the first two categories. The migrator is based on Clang's &lt;a href="http://clang.llvm.org/docs/LibTooling.html" target="_blank">LibTooling&lt;/a> and the&amp;nbsp;&lt;a href="http://clang.llvm.org/docs/LibASTMatchers.html" target="_blank">AST Matching library&lt;/a>.&lt;br />&lt;br />Most of the development so far has been carried out by a small core group at Intel. Our focus so far has been to set up project infrastructure and testing, implement a few basic transforms, and make sure those transforms work well. Our aim is to make this tool useful to the community so we're always listening for transform ideas and feedback.&lt;br />&lt;h2>&lt;a name='more'>&lt;/a>How to Get cpp11-migrate&lt;/h2>cpp11-migrate is located in the Extra Clang Tools repository. To build cpp11-migrate, you will need the LLVM and Clang sources as well. Follow the directions in Clang's &lt;a href="http://clang.llvm.org/get_started.html" target="_blank">Getting Started instructions&lt;/a>&amp;nbsp;making sure to perform the optional step of checking out the Extra Clang Tools repository. Once checked out into the correct directory the build system, after a reconfiguration, will automatically include the extra Clang tools as part of the next full build. If you're using the CMake build system, you can build just cpp11-migrate with the&amp;nbsp;&lt;span style="font-family: Courier New, Courier, monospace;">cpp11-migrate&lt;/span>&lt;span style="font-family: inherit;"> target&lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">.&lt;/span>&amp;nbsp;The &lt;span style="font-family: Courier New, Courier, monospace;">check-clang-tools&lt;/span> target provided by CMake will run all regression tests for extra Clang tools, including cpp11-migrate.&lt;br />&lt;h2>The Transforms So Far&lt;/h2>The C++11 Migrator currently supports four features of C++11:&lt;br />&lt;ul>&lt;li>Range-based for loops&lt;/li>&lt;li>The &lt;span style="font-family: Courier New, Courier, monospace;">nullptr&lt;/span>&lt;span style="font-family: inherit;">&amp;nbsp;&lt;/span>literal for null pointers&lt;/li>&lt;li>The &lt;span style="font-family: Courier New, Courier, monospace;">auto&lt;/span>&lt;span style="font-family: inherit;"> &lt;/span>type specifier&lt;/li>&lt;li>&lt;span style="font-family: Courier New, Courier, monospace;">override&lt;/span>&lt;span style="font-family: inherit;"> &lt;/span>virtual specifier&lt;/li>&lt;/ul>&lt;span style="font-size: large;">The range-based for-loop transform&lt;/span> once existed as a stand-alone tool called &lt;span style="font-family: Courier New, Courier, monospace;">loop-convert&lt;/span>&lt;span style="font-family: inherit;">&amp;nbsp;contributed by Sam Panzer. When development on more transforms started, the idea became to pull all transforms under the jurisdiction of a single tool and &lt;/span>&lt;span style="font-family: Courier New, Courier, monospace;">cpp11-migrate&lt;/span>&lt;span style="font-family: inherit;"> was born. The range-based for-loop transform replaces for-loops used in one of the following three common situations:&lt;/span>&lt;br />&lt;ol>&lt;li>Loops over containers using iterators&lt;/li>&lt;div style="text-indent: 0; vertical-align: middle;">&lt;div style="display: inline-block; vertical-align: middle; width: 50%;">&lt;pre style="background: #f6f8ff; color: #000020;">&lt;span style="color: #0066ee;">std&lt;/span>&lt;span style="color: #406080;">::&lt;/span>&lt;span style="color: #003060;">vector&lt;/span>&lt;span style="color: #406080;">&amp;lt;&lt;/span>&lt;span style="color: #200080; font-weight: bold;">int&lt;/span>&lt;span style="color: #406080;">&amp;gt;&lt;/span> myVec&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;span style="color: #200080; font-weight: bold;">for&lt;/span> &lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #0066ee;">std&lt;/span>&lt;span style="color: #406080;">::&lt;/span>&lt;span style="color: #003060;">vector&lt;/span>&lt;span style="color: #406080;">&amp;lt;&lt;/span>&lt;span style="color: #200080; font-weight: bold;">int&lt;/span>&lt;span style="color: #406080;">&amp;gt;&lt;/span>&lt;span style="color: #406080;">::&lt;/span>&lt;span style="color: #003060;">iterator&lt;/span> I &lt;span style="color: #308080;">=&lt;/span> myVec&lt;span style="color: #308080;">.&lt;/span>begin&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #308080;">,&lt;/span>&lt;br /> E &lt;span style="color: #308080;">=&lt;/span> myVec&lt;span style="color: #308080;">.&lt;/span>end&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br /> I &lt;span style="color: #308080;">!&lt;/span>&lt;span style="color: #308080;">=&lt;/span> E&lt;span style="color: #406080;">;&lt;/span> &lt;span style="color: #308080;">+&lt;/span>&lt;span style="color: #308080;">+&lt;/span>I&lt;span style="color: #308080;">)&lt;/span>&lt;br /> llvm&lt;span style="color: #406080;">::&lt;/span>outs&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span> &lt;span style="color: #308080;">&amp;lt;&lt;/span>&lt;span style="color: #308080;">&amp;lt;&lt;/span> &lt;span style="color: #308080;">*&lt;/span>I&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;/pre>&lt;/div>&lt;div style="display: inline-block; font-size: x-large; vertical-align: middle;">⇒ &lt;/div>&lt;div style="display: inline-block; vertical-align: middle; width: 45%;">&lt;pre style="background: #f6f8ff; color: #000020;">&lt;span style="color: #0066ee;">std&lt;/span>&lt;span style="color: #406080;">::&lt;/span>&lt;span style="color: #003060;">vector&lt;/span>&lt;span style="color: #406080;">&amp;lt;&lt;/span>&lt;span style="color: #200080; font-weight: bold;">int&lt;/span>&lt;span style="color: #406080;">&amp;gt;&lt;/span> myVec&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;span style="color: #200080; font-weight: bold;">for&lt;/span> &lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #200080; font-weight: bold;">auto&lt;/span> &lt;span style="color: #308080;">&amp;amp;&lt;/span> elem &lt;span style="color: #406080;">:&lt;/span> myVec&lt;span style="color: #308080;">)&lt;/span>&lt;br /> llvm&lt;span style="color: #406080;">::&lt;/span>outs&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span> &lt;span style="color: #308080;">&amp;lt;&lt;/span>&lt;span style="color: #308080;">&amp;lt;&lt;/span> elem&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;/pre>&lt;/div>&lt;/div>&lt;li>Loops over statically allocated arrays&lt;/li>&lt;div style="text-indent: 0; vertical-align: middle;">&lt;div style="display: inline-block; vertical-align: middle; width: 50%;">&lt;pre style="background: #f6f8ff; color: #000020;">&lt;span style="color: #200080; font-weight: bold;">int&lt;/span> arr&lt;span style="color: #308080;">[&lt;/span>&lt;span style="color: #308080;">]&lt;/span> &lt;span style="color: #308080;">=&lt;/span> &lt;span style="color: #406080;">{&lt;/span>&lt;span style="color: #008c00;">1&lt;/span>&lt;span style="color: #308080;">,&lt;/span>&lt;span style="color: #008c00;">2&lt;/span>&lt;span style="color: #308080;">,&lt;/span>&lt;span style="color: #008c00;">3&lt;/span>&lt;span style="color: #308080;">,&lt;/span>&lt;span style="color: #008c00;">4&lt;/span>&lt;span style="color: #308080;">,&lt;/span>&lt;span style="color: #008c00;">5&lt;/span>&lt;span style="color: #406080;">}&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;span style="color: #200080; font-weight: bold;">for&lt;/span> &lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #200080; font-weight: bold;">int&lt;/span> i &lt;span style="color: #308080;">=&lt;/span> &lt;span style="color: #008c00;">0&lt;/span>&lt;span style="color: #406080;">;&lt;/span> i &lt;span style="color: #308080;">&amp;lt;&lt;/span> &lt;span style="color: #008c00;">5&lt;/span>&lt;span style="color: #406080;">;&lt;/span> &lt;span style="color: #308080;">+&lt;/span>&lt;span style="color: #308080;">+&lt;/span>i&lt;span style="color: #308080;">)&lt;/span>&lt;br /> llvm&lt;span style="color: #406080;">::&lt;/span>outs&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span> &lt;span style="color: #308080;">&amp;lt;&lt;/span>&lt;span style="color: #308080;">&amp;lt;&lt;/span> arr&lt;span style="color: #308080;">[&lt;/span>i&lt;span style="color: #308080;">]&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;/pre>&lt;/div>&lt;div style="display: inline-block; font-size: x-large; vertical-align: middle;">⇒ &lt;/div>&lt;div style="display: inline-block; vertical-align: middle; width: 45%;">&lt;pre style="background: #f6f8ff; color: #000020;">&lt;span style="color: #200080; font-weight: bold;">int&lt;/span> arr&lt;span style="color: #308080;">[&lt;/span>&lt;span style="color: #308080;">]&lt;/span> &lt;span style="color: #308080;">=&lt;/span> &lt;span style="color: #406080;">{&lt;/span>&lt;span style="color: #008c00;">1&lt;/span>&lt;span style="color: #308080;">,&lt;/span>&lt;span style="color: #008c00;">2&lt;/span>&lt;span style="color: #308080;">,&lt;/span>&lt;span style="color: #008c00;">3&lt;/span>&lt;span style="color: #308080;">,&lt;/span>&lt;span style="color: #008c00;">4&lt;/span>&lt;span style="color: #308080;">,&lt;/span>&lt;span style="color: #008c00;">5&lt;/span>&lt;span style="color: #406080;">}&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;span style="color: #200080; font-weight: bold;">for&lt;/span> &lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #200080; font-weight: bold;">auto&lt;/span> &lt;span style="color: #308080;">&amp;amp;&lt;/span> elem &lt;span style="color: #406080;">:&lt;/span> arr&lt;span style="color: #308080;">)&lt;/span>&lt;br /> llvm&lt;span style="color: #406080;">::&lt;/span>outs&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span> &lt;span style="color: #308080;">&amp;lt;&lt;/span>&lt;span style="color: #308080;">&amp;lt;&lt;/span> elem&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;/pre>&lt;/div>&lt;/div>&lt;li>Loops over array-like containers using operator[] or at().&lt;/li>&lt;div style="text-indent: 0; vertical-align: middle;">&lt;div style="display: inline-block; vertical-align: middle; width: 50%;">&lt;pre style="background: #f6f8ff; color: #000020;">&lt;span style="color: #0066ee;">std&lt;/span>&lt;span style="color: #406080;">::&lt;/span>&lt;span style="color: #003060;">vector&lt;/span>&lt;span style="color: #406080;">&amp;lt;&lt;/span>&lt;span style="color: #200080; font-weight: bold;">int&lt;/span>&lt;span style="color: #406080;">&amp;gt;&lt;/span> myVec&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;span style="color: #200080; font-weight: bold;">for&lt;/span> &lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #200080; font-weight: bold;">int&lt;/span> i &lt;span style="color: #308080;">=&lt;/span> &lt;span style="color: #008c00;">0&lt;/span>&lt;span style="color: #406080;">;&lt;/span> i &lt;span style="color: #308080;">&amp;lt;&lt;/span> myVec&lt;span style="color: #308080;">.&lt;/span>size&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span> &lt;span style="color: #308080;">+&lt;/span>&lt;span style="color: #308080;">+&lt;/span>i&lt;span style="color: #308080;">)&lt;/span>&lt;br /> llvm&lt;span style="color: #406080;">::&lt;/span>outs&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span> &lt;span style="color: #308080;">&amp;lt;&lt;/span>&lt;span style="color: #308080;">&amp;lt;&lt;/span> v&lt;span style="color: #308080;">[&lt;/span>i&lt;span style="color: #308080;">]&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;/pre>&lt;/div>&lt;div style="display: inline-block; font-size: x-large; vertical-align: middle;">⇒ &lt;/div>&lt;div style="display: inline-block; vertical-align: middle; width: 45%;">&lt;pre style="background: #f6f8ff; color: #000020;">&lt;span style="color: #0066ee;">std&lt;/span>&lt;span style="color: #406080;">::&lt;/span>&lt;span style="color: #003060;">vector&lt;/span>&lt;span style="color: #406080;">&amp;lt;&lt;/span>&lt;span style="color: #200080; font-weight: bold;">int&lt;/span>&lt;span style="color: #406080;">&amp;gt;&lt;/span> myVec&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;span style="color: #200080; font-weight: bold;">for&lt;/span> &lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #200080; font-weight: bold;">auto&lt;/span> &lt;span style="color: #308080;">&amp;amp;&lt;/span> elem &lt;span style="color: #406080;">:&lt;/span> myVec&lt;span style="color: #308080;">)&lt;/span>&lt;br /> llvm&lt;span style="color: #406080;">::&lt;/span>outs&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span> &lt;span style="color: #308080;">&amp;lt;&lt;/span>&lt;span style="color: #308080;">&amp;lt;&lt;/span> elem&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;/pre>&lt;/div>&lt;/div>&lt;/ol>&lt;span style="font-size: large;">The nullptr transform&lt;/span> uses the new &lt;span style="font-family: Courier New, Courier, monospace;">nullptr&lt;/span> literal where pointers are being initialized with or assigned a null value. In cases where an explicit cast is used, the explicit cast is left behind to avoid introducing ambiguities into the code.&lt;br />&lt;div style="text-indent: 0; vertical-align: middle;">&lt;div style="display: inline-block; vertical-align: middle; width: 50%;">&lt;pre style="background: #f6f8ff; color: #000020;">&lt;span style="color: #200080; font-weight: bold;">void&lt;/span> foo&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #200080; font-weight: bold;">int&lt;/span> &lt;span style="color: #308080;">*&lt;/span>arg&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;span style="color: #200080; font-weight: bold;">void&lt;/span> foo&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #200080; font-weight: bold;">float&lt;/span> &lt;span style="color: #308080;">*&lt;/span>arg&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;br />&lt;span style="color: #200080; font-weight: bold;">int&lt;/span> &lt;span style="color: #308080;">*&lt;/span>IntPtr &lt;span style="color: #308080;">=&lt;/span> &lt;span style="color: #008c00;">0&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;span style="color: #200080; font-weight: bold;">float&lt;/span> &lt;span style="color: #308080;">*&lt;/span>FloatPtr &lt;span style="color: #308080;">=&lt;/span> &lt;span style="color: #7d0045;">NULL&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />foo&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #200080; font-weight: bold;">static_cast&lt;/span>&lt;span style="color: #406080;">&amp;lt;&lt;/span>&lt;span style="color: #200080; font-weight: bold;">int&lt;/span>&lt;span style="color: #308080;">*&lt;/span>&lt;span style="color: #406080;">&amp;gt;&lt;/span>&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #008c00;">0&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;/pre>&lt;/div>&lt;div style="display: inline-block; font-size: x-large; vertical-align: middle;">⇒ &lt;/div>&lt;div style="display: inline-block; vertical-align: middle; width: 45%;">&lt;pre style="background: #f6f8ff; color: #000020;">&lt;span style="color: #200080; font-weight: bold;">void&lt;/span> foo&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #200080; font-weight: bold;">int&lt;/span> &lt;span style="color: #308080;">*&lt;/span>arg&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;span style="color: #200080; font-weight: bold;">void&lt;/span> foo&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #200080; font-weight: bold;">float&lt;/span> &lt;span style="color: #308080;">*&lt;/span>arg&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;br />&lt;span style="color: #200080; font-weight: bold;">int&lt;/span> &lt;span style="color: #308080;">*&lt;/span>IntPtr &lt;span style="color: #308080;">=&lt;/span> nullptr&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;span style="color: #200080; font-weight: bold;">float&lt;/span> &lt;span style="color: #308080;">*&lt;/span>FloatPtr &lt;span style="color: #308080;">=&lt;/span> nullptr&lt;span style="color: #406080;">;&lt;/span>&lt;br />foo&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #200080; font-weight: bold;">static_cast&lt;/span>&lt;span style="color: #406080;">&amp;lt;&lt;/span>&lt;span style="color: #200080; font-weight: bold;">int&lt;/span>&lt;span style="color: #308080;">*&lt;/span>&lt;span style="color: #406080;">&amp;gt;&lt;/span>&lt;span style="color: #308080;">(&lt;/span>nullptr&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;/pre>&lt;/div>&lt;/div>&lt;br />&lt;span style="font-size: large;">The auto type specifier transform&lt;/span> replaces the type specifier for variable declarations with the new &lt;span style="font-family: Courier New, Courier, monospace;">auto&lt;/span> keyword. In general, such a replacement can be done whenever the type of the variable declaration matches the type of its initializer. However, the transform targets only a few specific useful situations with readability and maintainability in mind:&lt;br />&lt;ol>&lt;li>When the variable is an iterator for an STL container.&lt;/li>&lt;div style="text-indent: 0; vertical-align: middle;">&lt;div style="display: inline-block; vertical-align: middle; width: 50%;">&lt;pre style="background: #f6f8ff; color: #000020;">&lt;span style="color: #0066ee;">std&lt;/span>&lt;span style="color: #406080;">::&lt;/span>&lt;span style="color: #003060;">vector&lt;/span>&lt;span style="color: #406080;">&amp;lt;&lt;/span>&lt;span style="color: #0066ee;">std&lt;/span>&lt;span style="color: #406080;">::&lt;/span>&lt;span style="color: #003060;">pair&lt;/span>&lt;span style="color: #406080;">&amp;lt;&lt;/span>&lt;span style="color: #200080; font-weight: bold;">int&lt;/span>&lt;span style="color: #308080;">,&lt;/span> &lt;span style="color: #0066ee;">std&lt;/span>&lt;span style="color: #406080;">::&lt;/span>&lt;span style="color: #003060;">string&lt;/span>&lt;span style="color: #406080;">&amp;gt;&lt;/span> &lt;span style="color: #406080;">&amp;gt;&lt;/span>&lt;span style="color: #406080;">::&lt;/span>&lt;span style="color: #003060;">iterator&lt;/span> NameAgeI &lt;span style="color: #308080;">=&lt;/span> People&lt;span style="color: #308080;">.&lt;/span>begin&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;span style="color: #200080; font-weight: bold;">for&lt;/span> &lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #0066ee;">std&lt;/span>&lt;span style="color: #406080;">::&lt;/span>&lt;span style="color: #003060;">vector&lt;/span>&lt;span style="color: #406080;">&amp;lt;&lt;/span>MyType&lt;span style="color: #406080;">&amp;gt;&lt;/span>&lt;span style="color: #406080;">::&lt;/span>&lt;span style="color: #003060;">iterator&lt;/span> I &lt;span style="color: #308080;">=&lt;/span> Container&lt;span style="color: #308080;">.&lt;/span>begin&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #308080;">,&lt;/span>&lt;br /> E &lt;span style="color: #308080;">=&lt;/span> Container&lt;span style="color: #308080;">.&lt;/span>end&lt;span style="color: #406080;">;&lt;/span>&lt;br /> I &lt;span style="color: #308080;">!&lt;/span>&lt;span style="color: #308080;">=&lt;/span> E&lt;span style="color: #406080;">;&lt;/span> &lt;span style="color: #308080;">+&lt;/span>&lt;span style="color: #308080;">+&lt;/span>I&lt;span style="color: #308080;">)&lt;/span> &lt;span style="color: #406080;">{&lt;/span>&lt;br /> &lt;span style="color: #595979;">// ...&lt;/span>&lt;br />&lt;span style="color: #406080;">}&lt;/span>&lt;br />&lt;/pre>&lt;/div>&lt;div style="display: inline-block; font-size: x-large; vertical-align: middle;">⇒ &lt;/div>&lt;div style="display: inline-block; vertical-align: middle; width: 45%;">&lt;pre style="background: #f6f8ff; color: #000020;">&lt;span style="color: #200080; font-weight: bold;">auto&lt;/span> NameAgeI &lt;span style="color: #308080;">=&lt;/span> People&lt;span style="color: #308080;">.&lt;/span>begin&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;span style="color: #200080; font-weight: bold;">for&lt;/span> &lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #200080; font-weight: bold;">auto&lt;/span> I &lt;span style="color: #308080;">=&lt;/span> Container&lt;span style="color: #308080;">.&lt;/span>begin&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #308080;">,&lt;/span>&lt;br /> E &lt;span style="color: #308080;">=&lt;/span> Container&lt;span style="color: #308080;">.&lt;/span>end&lt;span style="color: #406080;">;&lt;/span>&lt;br /> I &lt;span style="color: #308080;">!&lt;/span>&lt;span style="color: #308080;">=&lt;/span> E&lt;span style="color: #406080;">;&lt;/span> &lt;span style="color: #308080;">+&lt;/span>&lt;span style="color: #308080;">+&lt;/span>I&lt;span style="color: #308080;">)&lt;/span> &lt;span style="color: #406080;">{&lt;/span>&lt;br /> &lt;span style="color: #595979;">// ...&lt;/span>&lt;br />&lt;span style="color: #406080;">}&lt;/span>&lt;br />&lt;/pre>&lt;/div>&lt;/div>&lt;li>When the initializer is an allocation using the&amp;nbsp;&lt;span style="font-family: Courier New, Courier, monospace;">new&lt;/span>&lt;span style="font-family: inherit;"> operator.&lt;/span>&lt;/li>&lt;div style="text-indent: 0; vertical-align: middle;">&lt;div style="display: inline-block; vertical-align: middle; width: 50%;">&lt;pre style="background: #f6f8ff; color: #000020;">MyType &lt;span style="color: #308080;">*&lt;/span>VarPtr &lt;span style="color: #308080;">=&lt;/span> &lt;span style="color: #200080; font-weight: bold;">new&lt;/span> MyType&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />MyType &lt;span style="color: #308080;">*&lt;/span> &lt;span style="color: #200080; font-weight: bold;">const&lt;/span> VarCPtr &lt;span style="color: #308080;">=&lt;/span> &lt;span style="color: #200080; font-weight: bold;">new&lt;/span> MyType&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;/pre>&lt;/div>&lt;div style="display: inline-block; font-size: x-large; vertical-align: middle;">⇒ &lt;/div>&lt;div style="display: inline-block; vertical-align: middle; width: 45%;">&lt;pre style="background: #f6f8ff; color: #000020;">&lt;span style="color: #200080; font-weight: bold;">auto&lt;/span> VarPtr &lt;span style="color: #308080;">=&lt;/span> &lt;span style="color: #200080; font-weight: bold;">new&lt;/span> MyType&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;span style="color: #200080; font-weight: bold;">auto&lt;/span> &lt;span style="color: #200080; font-weight: bold;">const&lt;/span> VarCPtr &lt;span style="color: #308080;">=&lt;/span> &lt;span style="color: #200080; font-weight: bold;">new&lt;/span> MyType&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;/pre>&lt;/div>&lt;/div>&lt;/ol>Support for a third situation is in development: creating objects with factory functions.&lt;br />&lt;div style="text-indent: 0; vertical-align: middle;">&lt;div style="display: inline-block; vertical-align: middle; width: 50%;">&lt;pre style="background: #f6f8ff; color: #000020;">MyType &lt;span style="color: #308080;">*&lt;/span>FooPtr &lt;span style="color: #308080;">=&lt;/span> makeObject&lt;span style="color: #406080;">&amp;lt;&lt;/span>MyType&lt;span style="color: #406080;">&amp;gt;&lt;/span>&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #595979;">/*...*/&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />MyType &lt;span style="color: #308080;">*&lt;/span>BarPtr &lt;span style="color: #308080;">=&lt;/span> MyType&lt;span style="color: #406080;">::&lt;/span>create&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #595979;">/*...*/&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;/pre>&lt;/div>&lt;div style="display: inline-block; font-size: x-large; vertical-align: middle;">⇒ &lt;/div>&lt;div style="display: inline-block; vertical-align: middle; width: 45%;">&lt;pre style="background: #f6f8ff; color: #000020;">&lt;span style="color: #200080; font-weight: bold;">auto&lt;/span> FooPtr &lt;span style="color: #308080;">=&lt;/span> makeObject&lt;span style="color: #406080;">&amp;lt;&lt;/span>MyType&lt;span style="color: #406080;">&amp;gt;&lt;/span>&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #595979;">/*...*/&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;span style="color: #200080; font-weight: bold;">auto&lt;/span> BarPtr &lt;span style="color: #308080;">=&lt;/span> MyType&lt;span style="color: #406080;">::&lt;/span>create&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #595979;">/*...*/&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;/pre>&lt;/div>&lt;/div>In each situation, the deduced type for the declared variable should be obvious to the reader. Iterators for standard containers are created by functions with specific names and are used in specific situations. For factory functions and operator &lt;span style="font-family: Courier New, Courier, monospace;">new&lt;/span>&lt;span style="font-family: inherit;">, &lt;/span>the type is spelled out in the initializer so repeating it in the variable declaration is not necessary.&lt;br />&lt;br />&lt;span style="font-size: large;">The &lt;span style="font-family: inherit;">override&amp;nbsp;&lt;/span>virtual specifier transform&lt;/span>, contributed by Philip Dunstan,&amp;nbsp;is the migrator's fourth transform and the first to be contributed from outside the core group at Intel. This transform detects virtual member functions in derived classes that override member functions from parent classes and adds the &lt;span style="font-family: Courier New, Courier, monospace;">override&lt;/span> virtual specifier to the function.&lt;br />&lt;div style="text-indent: 0; vertical-align: middle;">&lt;div style="display: inline-block; vertical-align: middle; width: 50%;">&lt;pre style="background: #f6f8ff; color: #000020;">&lt;span style="color: #200080; font-weight: bold;">class&lt;/span> Parent &lt;span style="color: #406080;">{&lt;/span>&lt;br />&lt;span style="color: #200080; font-weight: bold;">public&lt;/span>&lt;span style="color: #e34adc;">:&lt;/span>&lt;br /> &lt;span style="color: #200080; font-weight: bold;">virtual&lt;/span> &lt;span style="color: #200080; font-weight: bold;">int&lt;/span> getNumChildren&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;span style="color: #406080;">}&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;br />&lt;span style="color: #200080; font-weight: bold;">class&lt;/span> Child &lt;span style="color: #406080;">{&lt;/span>&lt;br />&lt;span style="color: #200080; font-weight: bold;">public&lt;/span>&lt;span style="color: #e34adc;">:&lt;/span>&lt;br /> &lt;span style="color: #200080; font-weight: bold;">virtual&lt;/span> &lt;span style="color: #200080; font-weight: bold;">int&lt;/span> getNumChildren&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;span style="color: #406080;">}&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;/pre>&lt;/div>&lt;div style="display: inline-block; font-size: x-large; vertical-align: middle;">⇒ &lt;/div>&lt;div style="display: inline-block; vertical-align: middle; width: 45%;">&lt;pre style="background: #f6f8ff; color: #000020;">&lt;span style="color: #200080; font-weight: bold;">class&lt;/span> Parent &lt;span style="color: #406080;">{&lt;/span>&lt;br />&lt;span style="color: #200080; font-weight: bold;">public&lt;/span>&lt;span style="color: #e34adc;">:&lt;/span>&lt;br /> &lt;span style="color: #200080; font-weight: bold;">virtual&lt;/span> &lt;span style="color: #200080; font-weight: bold;">int&lt;/span> getNumChildren&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;span style="color: #406080;">}&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;br />&lt;span style="color: #200080; font-weight: bold;">class&lt;/span> Child &lt;span style="color: #406080;">{&lt;/span>&lt;br />&lt;span style="color: #200080; font-weight: bold;">public&lt;/span>&lt;span style="color: #e34adc;">:&lt;/span>&lt;br /> &lt;span style="color: #200080; font-weight: bold;">virtual&lt;/span> &lt;span style="color: #200080; font-weight: bold;">int&lt;/span> getNumChildren&lt;span style="color: #308080;">(&lt;/span>&lt;span style="color: #308080;">)&lt;/span> &lt;span style="color: #200080; font-weight: bold;">override&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;span style="color: #406080;">}&lt;/span>&lt;span style="color: #406080;">;&lt;/span>&lt;br />&lt;/pre>&lt;/div>&lt;/div>&lt;br />More details on these transforms, what they can and can't do, how to adjust their behaviour, and known limitations can be found in the &lt;a href="http://clang.llvm.org/extra/cpp11-migrate.html" target="_blank">cpp11-migrate User's Manual&lt;/a>.&lt;br />&lt;h2>Testing on Real Projects&lt;/h2>&lt;div>What better way to test the C++11 Migrator than to run it on entire real projects? We've set up a continuous integration server to build and run cpp11-migrate on two projects so far and have plans for at least three more. For each project, the goal is to build the transformed code and run that project's test suite to ensure semantics haven't changed.&lt;/div>&lt;div style="margin-top: 1em; text-indent: 0; width: 20em;">&lt;div style="border-right: 1px solid grey; display: inline-block; padding-right: .5em; vertical-align: top;">&lt;b>Implemented: &lt;/b>&lt;br />&lt;ol>&lt;li>&lt;a href="http://www.llvm.org/" target="_blank">LLVM 3.1&lt;/a>&lt;/li>&lt;li>&lt;a href="http://www.itk.org/" target="_blank">ITK 4.3.1&lt;/a>&lt;/li>&lt;/ol>&lt;/div>&lt;div style="display: inline-block; padding-left: .5em; vertical-align: top;">&lt;b>Planned: &lt;/b>&lt;br />&lt;ol>&lt;li>&lt;a href="http://lldb.llvm.org/" target="_blank">LLDB&lt;/a>&lt;/li>&lt;li>&lt;a href="http://opencv.org/" target="_blank">OpenCV&lt;/a>&lt;/li>&lt;li>&lt;a href="http://pocoproject.org/" target="_blank">Poco&lt;/a>&lt;/li>&lt;/ol>&lt;/div>&lt;/div>Running the migrator on real code has been enormously helpful for finding bugs. Real code from varying projects often reveals code expressions not accounted for in the development and unit testing of the transforms. Every time a bug found from transforming these projects gets fixed, new test cases are added to the regression test suite and the migrator becomes more robust.&lt;br />&lt;h2>Future Work&lt;/h2>&lt;div>Fixing bugs found by migrating real code is of high priority right now since we want a good user experience for as many people as we can as soon as possible. Adding more transforms is another priority and those transforms with the most interest from the community will come first. Currently at the top of the list are:&lt;/div>&lt;div>&lt;ol>&lt;li>Use the standard library instead of TR1&lt;/li>&lt;li>Replace use of the deprecated &lt;span style="font-family: Courier New, Courier, monospace;">auto_ptr&lt;/span> class.&lt;/li>&lt;/ol>In addition to fixing bugs and adding transforms, there are also more general&amp;nbsp;improvements to consider. One such improvement we're making progress on is to remove the restriction that only source files are transformed and not any of the headers they include. The restriction has been in place until now because the migrator needs to know which headers are safe to transform. System headers and third-party library headers clearly shouldn't be touched.&lt;/div>&lt;h2>Get Involved!&lt;/h2>&lt;div>If you want to get involved, the first thing you can do is try out cpp11-migrate on your code. Bugs can be logged with &lt;a href="http://llvm.org/bugs/" target="_blank">LLVM's bug tracker&lt;/a>&amp;nbsp;under the product &lt;span style="font-family: Courier New, Courier, monospace;">clang-tools-extra&lt;/span>. Send an email to the &lt;a href="http://lists.cs.uiuc.edu/mailman/listinfo/cfe-dev" target="_blank">Clang Developer's Mailing List&lt;/a> if you need help or would like to get more involved. We look forward to hearing from you!&lt;br />&lt;br />&lt;/div></description></item><item><title>Static analysis tools: using Clang in CppDepend</title><link>https://blog.llvm.org/2013/04/static-analysis-tools-using-clang-in.html</link><pubDate>Mon, 15 Apr 2013 03:39:00 +0000</pubDate><guid>https://blog.llvm.org/2013/04/static-analysis-tools-using-clang-in.html</guid><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on">&lt;br />Static analysis is a method of computer program debugging that is done by examining the code without executing the program. The process provides an understanding of the code structure, can help to ensure that the code adheres to industry standards, and can find bugs not easy to detect.&lt;br />&lt;br />To develop a C / C++ static analysis tool, a parser is needed to parse the source code. C++ is a very powerful language but its syntax is a little bit complicated, what makes the parser not easy to develop.&lt;br />&lt;br />When we began the development of &lt;a href="http://www.cppdepend.com/">CppDepend &lt;/a>about four years ago we needed a reliable C / C++ parser. &amp;nbsp;At that time, Clang was an option but was not widely used and we didn’t know if it would ultimately develop into a fully-featured compiler frontend.&lt;br />&lt;br />Last year, for the&amp;nbsp;major release of CppDepend 3.0,&amp;nbsp;we re-evaluated our C / C++ parser with a goal of getting more reliable results. &amp;nbsp;We checked Clang to see where its evolution went and were very surprised that it now implements virtually all C++'11 features and became very popular. &amp;nbsp;Clang now provide solid infrastructure to write tools that need syntactic and semantic information about a program.&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;br />Clang is designed to be modular, and like other compilers it has three phases: &lt;br />&lt;ul style="text-align: left;">&lt;li>The front end that parses source code, checking it for errors, and builds a language-specific Abstract Syntax Tree (AST) to represent the input code.&lt;/li>&lt;li>The optimizer: its goal is to do some optimization on the AST generated by the front end.&lt;/li>&lt;li>The back end: generates the final code to be executed by the machine, it depends of the target architecture.&lt;/li>&lt;/ul>&lt;br />&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="http://4.bp.blogspot.com/-WDcl2mtJ8Do/UWnL-S-FgiI/AAAAAAAAAn0/3LTWx4a32XY/s1600/clang.gif" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" src="http://4.bp.blogspot.com/-WDcl2mtJ8Do/UWnL-S-FgiI/AAAAAAAAAn0/3LTWx4a32XY/s1600/clang.gif" />&lt;/a>&lt;/div>&lt;br />&lt;br />In our case we needed only to use the front end parser, and we use the generated AST. For that we added our custom&amp;nbsp;ASTFrontEndAction.&lt;br />Each ASTFrontEndAction create one or many ASTConsumer as shown by the following dependency gaph:&lt;br />&lt;br />&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="http://4.bp.blogspot.com/-Fvq7jfoaiwY/UWnTLIOexFI/AAAAAAAAAoE/86hDIkA9OaQ/s1600/clang2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" src="http://4.bp.blogspot.com/-Fvq7jfoaiwY/UWnTLIOexFI/AAAAAAAAAoE/86hDIkA9OaQ/s1600/clang2.png" />&lt;/a>&lt;/div>&lt;br />&lt;br />ASTConsumer is an abstract class, and we have to implement our AST consumer for our specific needs. And to do that we had take a look at the implementation of the existing AST Consumers to understand how they works, and here are all the classes inheriting from ASTConsumer:&lt;br />&lt;br />&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="http://3.bp.blogspot.com/-3I8Luf_nK8Y/UWnVKzU3ooI/AAAAAAAAAoQ/aBd4RBORAjM/s1600/clang3.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" src="http://3.bp.blogspot.com/-3I8Luf_nK8Y/UWnVKzU3ooI/AAAAAAAAAoQ/aBd4RBORAjM/s1600/clang3.png" />&lt;/a>&lt;/div>&lt;br />And we took &amp;nbsp;ASTPrinter and ASTDumpXML as examples to understand how to implements our specific AST consumer.&lt;br />&lt;br />&amp;nbsp;Thanks to all the developers behind LLVM and Clang for their big efforts to deliver a powerful compiler, and to thank all open source C / C++ contributors, we are giving you a CppDepend "Pro license" for free. &amp;nbsp;CppDepend can be used to analyze a code base in order to:&lt;br />&lt;br />•&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>Improve the code base quality.&lt;br />•&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>Help new contributors to understand the existing code base.&lt;br />•&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>Automate the code review to be sure that all the coding rules specified by the manager are satisfied.&lt;br />•&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>Generate custom reports for documentation purpose.&lt;br />&lt;br />To get your CppDepend Pro license, you can just send us a mail at support@cppdepend.com with the following infos:&lt;br />&lt;br />•&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>Name of the contributor.&lt;br />•&lt;span class="Apple-tab-span" style="white-space: pre;"> &lt;/span>Link to the patches that you have contributed.&lt;br />&lt;br />Thanks!&lt;/div></description></item><item><title>LLVM Recipient of the 2012 ACM System Software Award</title><link>https://blog.llvm.org/2013/04/llvm-recipient-of-2012-acm-system.html</link><pubDate>Wed, 10 Apr 2013 07:39:00 +0000</pubDate><guid>https://blog.llvm.org/2013/04/llvm-recipient-of-2012-acm-system.html</guid><description> The ACM &lt;a href="http://www.acm.org/press-room/news-releases/2013/acm-tech-awards-2012">just announced&lt;/a> that the LLVM project is the recipient of the &lt;a href="http://awards.acm.org/homepage.cfm?srt=all&amp;awd=149">2012 ACM System Software Award&lt;/a>. This award recognizes a "software system that has had a lasting influence, reflected in contributions to concepts, in commercial acceptance, or both." Many important software systems are previous recipients of this award, including Eclipse, VMware, Eiffel, Make, Java, Apache, TCP/IP, PostScript, SMALLTALK, TeX, and UNIX (among others).&lt;p> This is fantastic recognition for the impact LLVM has had on the compiler and languages industry, and is recognition that all LLVM Developers should feel proud of.</description></item><item><title>LLVM Debian/Ubuntu nightly packages</title><link>https://blog.llvm.org/2013/04/llvm-debianubuntu-nightly-packages.html</link><pubDate>Wed, 03 Apr 2013 13:32:00 +0000</pubDate><guid>https://blog.llvm.org/2013/04/llvm-debianubuntu-nightly-packages.html</guid><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on">&lt;br />In order to facilitate testing and to improve the deployment of the LLVM toolchain, we are happy to &lt;a href="http://llvm.org/apt/">publish LLVM Debian/Ubuntu nightly packages&lt;/a>. Read on for information about how it works and what we're building.&lt;br />&lt;br />&lt;a name='more'>&lt;/a>These packages provide LLVM, Clang, compiler-rt, polly and LLDB.&lt;br />They are built for Debian:&lt;br />&lt;ul style="text-align: left;">&lt;li>Wheezy (future stable)&lt;/li>&lt;li>Unstable&lt;/li>&lt;/ul>and Ubuntu:&lt;br />&lt;ul style="text-align: left;">&lt;li>Precise&lt;/li>&lt;li>Quantal&lt;/li>&lt;li>Raring&lt;/li>&lt;/ul>&amp;nbsp;For now, amd64 and i386 are supported.&lt;br />&lt;br />For example, installing the nightly build of clang 3.3 is as simple as:&lt;br />&lt;pre>&lt;/pre>&lt;i>echo "deb http://llvm.org/apt/wheezy/ llvm-toolchain-wheezy main"&amp;gt; /etc/apt/sources.list.d/llvm.list&lt;/i>&lt;br />&lt;i>apt-get update&lt;/i>&lt;br />&lt;i>apt-get install clang-3.3&lt;/i>&lt;br />&lt;i>&lt;br />&lt;/i>Packages are automatically built twice a day for every architecture and operating system in clean chroots. They are built by a &lt;a href="http://llvm-jenkins.debian.net/">Jenkins instance&lt;/a> hosted by &lt;a href="http://www.irill.org/">IRILL&lt;/a> and push the LLVM infrastructure.&lt;br />&lt;h2>&amp;nbsp;&lt;/h2>&lt;h2>Repositories&lt;/h2>&lt;div class="rel_section">&lt;h3 style="text-align: left;">&lt;b>Debian&lt;/b>&lt;/h3>&lt;/div>&lt;div class="rel_boxtext">wheezy (currently testing)&lt;small>&lt;/small>&lt;br />&lt;pre>deb http://llvm.org/apt/wheezy/ llvm-toolchain-wheezy main&lt;br />deb-src http://llvm.org/apt/wheezy/ llvm-toolchain-wheezy main&lt;br />&lt;/pre>&lt;br />sid (unstable)&lt;small>&lt;/small>&lt;br />&lt;pre>deb http://llvm.org/apt/unstable/ llvm-toolchain main&lt;br />deb-src http://llvm.org/apt/unstable/ llvm-toolchain main&lt;br />&lt;/pre>&lt;/div>&lt;div class="rel_section">&lt;/div>&lt;div class="rel_section" style="text-align: left;">&lt;h3>&lt;b>Ubuntu&lt;/b>&lt;/h3>&lt;/div>&lt;div class="rel_boxtext">Precise (12.04)&lt;small>&lt;/small>&lt;br />&lt;pre>deb http://llvm.org/apt/precise/ llvm-toolchain-precise main&lt;br />deb-src http://llvm.org/apt/precise/ llvm-toolchain-precise main&lt;/pre>&lt;pre>&amp;nbsp;&lt;/pre>Quantal (12.10)&lt;br />&lt;small>&lt;/small> &lt;br />&lt;pre>deb http://llvm.org/apt/quantal/ llvm-toolchain-quantal main&lt;br />deb-src http://llvm.org/apt/quantal/ llvm-toolchain-quantal main&lt;/pre>&lt;pre>&amp;nbsp;&lt;/pre>Raring (13.04)&lt;small>&lt;/small>&lt;br />&lt;pre>deb http://llvm.org/apt/raring/ llvm-toolchain-raring main&lt;br />deb-src http://llvm.org/apt/raring/ llvm-toolchain-raring main&lt;/pre>&lt;/div>&lt;h2>&amp;nbsp;&lt;/h2>&lt;h2>Install&lt;/h2>The following commands will install all packages provided by the llvm-toolchain:&lt;br />&lt;br />&lt;pre>apt-get install clang-3.3 clang-3.3-doc libclang-common-dev libclang-dev libclang1 libclang1-dbg libllvm-3.3-ocaml-dev libllvm3.3 libllvm3.3-dbg lldb-3.3 llvm-3.3 llvm-3.3-dev llvm-3.3-doc llvm-3.3-examples llvm-3.3-runtime&lt;br />&lt;/pre>&lt;h2>&amp;nbsp;&lt;/h2>&lt;h2>Technical workflow&lt;/h2>Twice a day, each jenkins job will checkout the debian/ directory necessary to build the packages. The repository is available on the Debian hosting infrastructure: &lt;a href="http://anonscm.debian.org/viewvc/pkg-llvm/llvm-toolchain/branches/">http://anonscm.debian.org/viewvc/pkg-llvm/llvm-toolchain/branches/&lt;/a>. In the &lt;i>llvm-toolchain-*-source&lt;/i>, the following tasks will be performed: &lt;br />&lt;ul>&lt;li>upstream sources will be checkout&lt;/li>&lt;li>tarballs will be created. They are named: &lt;ul>&lt;li>llvm-toolchain_X.Y~svn123456.orig-lldb.tar.bz2&lt;/li>&lt;li>llvm-toolchain_X.Y~svn123456.orig-compiler-rt.tar.bz2&lt;/li>&lt;li>llvm-toolchain_X.Y~svn123456.orig.tar.bz2&lt;/li>&lt;li>llvm-toolchain_X.Y~svn123456.orig-clang.tar.bz2&lt;/li>&lt;li>llvm-toolchain_X.Y~svn123456.orig-polly.tar.bz2&lt;/li>&lt;/ul>&lt;/li>&lt;li>Debian .dsc package description is created&lt;/li>&lt;li>Start the jenkins job &lt;i>llvm-toolchain-X-binary&lt;/i>&lt;/li>&lt;/ul>Then, the job &lt;i>llvm-toolchain-X-binary&lt;/i> will: &lt;br />&lt;ul>&lt;li>Create a chroot using cowbuilder or update it is already existing&lt;/li>&lt;li>Install libisl &amp;gt;=0.11 if necessary (for polly)&lt;/li>&lt;li>Build all the packages&lt;/li>&lt;li>Launch lintian, the Debian static analyzer&lt;/li>&lt;li>Publish the result on the LLVM repository&lt;/li>&lt;/ul>Note that a &lt;a href="http://anonscm.debian.org/viewvc/pkg-llvm/llvm-toolchain/branches/snapshot/debian/patches/">few patches&lt;/a> are applied over the LLVM tarballs (and should be merged upstream soon). &lt;br />&lt;h2>Future&lt;/h2>This versatile infrastructure allows some more interesting features like:&lt;br />&lt;ul style="text-align: left;">&lt;li>Automatic launch of scan-build on the whole code&lt;/li>&lt;li>Full bootstrap of LLVM/Clang&lt;/li>&lt;li>Code coverage on the latest release&lt;/li>&lt;/ul>&lt;/div></description></item><item><title>Testing libc++ with -fsanitize=undefined</title><link>https://blog.llvm.org/2013/04/testing-libc-with-fsanitizeundefined.html</link><pubDate>Mon, 01 Apr 2013 10:12:00 +0000</pubDate><guid>https://blog.llvm.org/2013/04/testing-libc-with-fsanitizeundefined.html</guid><description>&lt;i style="background-color: whitesmoke; font-family: 'Trebuchet MS', verdana, sans-serif; font-size: 13px; line-height: 22px; text-indent: 10px;">[This article is re-posted in a slightly expanded form&amp;nbsp;&lt;a href="http://cplusplusmusings.wordpress.com/2013/03/26/testing-libc-with-fsanitizeundefined/" style="border-bottom-color: red; border-bottom-style: dashed; border-bottom-width: 1px; color: purple; text-decoration: none;">from Marshall's blog&lt;/a>]&lt;/i>&lt;br />&lt;br />After my last article, &lt;a href="http://cplusplusmusings.wordpress.com/2013/03/20/testing-libc-with-address-sanitizer/">Testing libc++ with Address Sanitizer&lt;/a>, I thought "what other tests can I run?"&lt;br />&lt;br />Address Sanitizer (ASan) is not the only "sanitizer" that clang offers. There are "Thread Sanitizer" (TSan), "Undefined Behavior Sanitizer" (UBSan), and others. There's an integer overflow sanitizer which is called IOC coming in the 3.3 release of clang. The documentation for UBSan can be found &lt;a href="http://clang.llvm.org/docs/UsersManual.html">on the LLVM site&lt;/a>.&lt;br />&lt;br />I have been looking at the results of running the libc++ test suite with UBSan enabled. Even if you're not interested in libc++ specifically, this post can be a useful introduction to useful Clang bug detectors, and shows several classes of problems they can find. &lt;br />&lt;h3>&lt;a name='more'>&lt;/a>&lt;/h3>&lt;h3>The mechanics&lt;/h3>Like ASan, UBSan is a compiler pass and a custom runtime library. You enable this by passing &lt;code>-fsanitize=undefined&lt;/code> to the compiler and linker. I ran the libc++ test suite like this:&lt;br />&lt;pre>&lt;code>&lt;br />&lt;/code>&lt;/pre>&lt;pre>&lt;code>cd $LLVM/libcxx/test&lt;br />CC=/path/to/tot/clang OPTIONS="--std=c++11 -stdlib=libc++ -fsanitize=undefined" ./testit&lt;br />&lt;/code>&lt;/pre>&lt;br />Unfortunately, this failed; working with unreleased compilers and libraries, I needed updated versions of both libc++.dylib and libc++abi.dylib. So I built those from sources, and then used &lt;code>DYLD_LIBRARY_PATH&lt;/code> to make sure that the test program used the libraries that I'd just built. (I didn't want to replace the ones in /usr/lib, because lots of things in the system depend on them)&lt;br />&lt;pre>&lt;code>&lt;br />&lt;/code>&lt;/pre>&lt;pre>&lt;code>cd $LLVM/libcxx/test&lt;br />DYLD_LIBRARY_PATH=$LLVM/libcxx/lib:$LLVM/libcxxabi/lib CC=/path/to/tot/clang OPTIONS="-std=c++11 -stdlib=libc++ -fsanitize=undefined -L $LLVM/libcxxabi/lib -lc++abi" ./testit&lt;br />&lt;/code>&lt;/pre>&lt;br />where, as before "/path/to/tot/clang" is the clang that I just built from source, and $LLVM is where I've checked out the various parts of LLVM from Subversion. &lt;br />&lt;h3>The results&lt;/h3>And the tests were off and running. In the last article, I noted that these tests take about 30 minutes to run on my MacBook Pro. The ASan tests took about 90 minutes. I was pleasantly surprised when the UBSan tests finished in about 42 minutes, or about 40% slower than the baseline tests. There were 12 tests (out of more than 4800) that failed under normal circumstances. Using UBSan, 49 tests failed, and there were about 48,463 different runtime errors reported by UBSan. &lt;br />&lt;h4>The failing tests&lt;/h4>Of the 37 tests that failed under UBSan, 34 of them were aborted because of &lt;code>uncaught exception of type XXXX&lt;/code>, where XXX was from the standard library (&lt;code>std::out_of_range&lt;/code>, for example). This is caused by a mismatch between libc++ and libc++abi, specifically by the fact that both my custom-built libc++ and my custom-built libc++abi contained typeinfo records for some of the standard exception classes. Getting this right and getting all the bits of the test infrastructure to use the right libraries turned into a big mess very quickly, and I still don't have a good solution here.&lt;br />&lt;br />However, I was able to convince myself that these failures were not the result of a bug in either libc++, the test suite or UBSan.&lt;br />&lt;br />The other three failures were in the &lt;code>std::thread&lt;/code> test suite. When I investigated, it turned out that there was a race condition in some of the thread tests. &lt;em>A race condition? In threading code? Inconceivable!&lt;/em>&lt;br />&lt;br />Apparently the runtime environment under UBSan was different enough to trigger the (latent) race condition in these three tests. Looking at the test suite, I found the same race condition in 10 other tests as well. I committed revision 178029 to fix this in all 13 tests. &lt;br />&lt;h4>The error messages&lt;/h4>48K errors! I can't look at 48K error messages; so I decided to bin them.&lt;br />&lt;br />There were 37,675 messages of the form: &lt;code>0x000106ae3fff: runtime error: value inf is outside the range of representable values of type 'xxxx'&amp;nbsp;&lt;/code>where "xxxx" could be "double" or "float" (this also included "-inf" as well)&lt;br />&lt;br />and 10,693 messages of the form: &lt;code>0x000101a8f244: runtime error: value nan is outside the range of representable values of type 'xxxx';&lt;/code>&amp;nbsp;where "xxxx" could be "double" or "float".&lt;br />&lt;br />There were 52 messages of the form: &amp;nbsp;&lt;code>what.pass.cpp:24:9: runtime error: member call on address 0x7fff5e8f48d0 which does not point to an object of type 'std::logic_error'.&lt;/code>&lt;br />&lt;br />There were 29 messages like this: &amp;nbsp;&lt;code>eval.pass.cpp:180:14: runtime error: division by zero&lt;/code>&lt;br />&lt;br />There were 6 messages like this: &lt;code>/Sources/LLVM/libcxx/include/memory:3163:25 runtime error: load of misaligned address 0x7fff569a85c6 for type 'const unsigned long', which requires 8 byte alignment&lt;/code>&lt;br />&lt;br />There were 5 messages like this: &lt;code>0x0001037a329e: runtime error: load of value 4294967294, which is not a valid value for type 'std::regex_constants::match_flag_type'&lt;/code>&lt;br />&lt;br />There were 2 messages like this: &lt;code>/Sources/LLVM/libcxx/include/locale:3361:48: runtime error: index 40 out of bounds for type 'char_type [10]'&lt;/code>&lt;br />&lt;br />&amp;nbsp;There was one message like this: &lt;code>runtime error: load of value 64, which is not a valid value for type 'bool'&lt;/code>&lt;br />&lt;br />The first thing that I noticed is that sometimes UBSan will give you file and line number, and otherwise just a hex address. The file and line number is incredibly useful for tracking stuff down. &lt;br />&lt;h4>The Analysis&lt;/h4>Working from the bottom up:&lt;br />&lt;br />The &lt;code>load of value 64, which is not a valid value for type 'bool'&lt;/code> message came out of one of the atomics tests, where it is trying to clear and set an atomic flag that has been default constructed. I don't know what the correct behavior is here; I'm still looking at this one.&lt;br />&lt;br />The &lt;code>index 40 out of bounds for type 'char_type [10]'&lt;/code> errors came from the money formatting tests in libc++, and were failing only on "wide string" versions of the tests; i.e, with two (or four) byte characters. The offending line turned out to be:&lt;br />&lt;pre>&lt;code>*__nc = __src[find(__atoms, __atoms+sizeof(__atoms), *__w) - __atoms];&lt;/code>&lt;/pre>and the problem was that sizeof(__atoms) was assumed to be the same as the number of entries in that array. Perfectly fine for character arrays, not so fine for wide character arrays. Fixed in revision 177694. &lt;br />&lt;br />The &lt;code>load of value 4294967294, which is not a valid value for type 'std::regex_constants::match_flag_type'&lt;/code> errors turned out to be simple to fix as well, once we decided what the right fix was.&lt;br />&lt;br />This turned out to be complicated, because it involved a close reading of the standards document. The problem was that &lt;code>match_flag_type&lt;/code> was an enum, emulating a bitmask. The type also had an &lt;code>operator ~()&lt;/code>, which flipped all the bits in the type. But since the type was implemented as an enum, it had an underlying integer type that it was represented as, and the &lt;code>operator ~&lt;/code> just flipped all the bits. This led to values that UBSan didn't like. A large discussion followed, with sentiments like "does it matter" and "can any code actually tell", and so on. Eventually, I just changed the &lt;code>operator ~&lt;/code> to only flip the bits that are valid in the enumeration. Fixed in revision 177693.&lt;br />&lt;br />The &lt;code>load of misaligned address 0x7fff569a85c6 for type 'const unsigned long', which requires 8 byte alignment&lt;/code> were in the hashing code for strings. They are a performance optimization, and I haven't tried to touch them. Whatever changes are made here will have to be done very carefully, since this will affect the performance of all the associative containers.&lt;br />&lt;br />The "division by zero" messages were in three different tests. There were 3 of them in the numeric limits tests, and they were there on purpose. There were 2 of them in the complex number tests, and they were also on purpose. The other 24 of them were in the random number test suite, where the tests were generating a bunch of random numbers (using various distributions) and checking to see that the mean, variance, standard deviation, skew, etc, were all what the programmer expected. The problem is in the last measurement: skew. It is some calculated value divided by the variance. If the variance is zero, then the skew should be infinity. Many of the tests in the random number suite are testing "edge cases" of the random number generators, and some of these edge cases will produce a sequence where all the numbers are the same (and thus, the variance == 0). We solved this by commenting out the calculation of the skew for these degenerate cases, and leaving a comment in the test source file. Howard fixed this in revision 177826.&lt;br />&lt;br />The &lt;code>runtime error: member call on address 0x7fff5e8f48d0 which does not point to an object of type 'std::logic_error'&lt;/code> messages, as it turned out, were due to a bug in UBSan.&lt;br />&lt;br />I'm just getting started on the &lt;code>inf&lt;/code>/&lt;code>-inf&lt;/code>/&lt;code>nan&lt;/code> messages (about 48K of those). Most of these come from the complex number regression tests. Since this is a test suite for a library that implements a bunch of numeric routines, a lot of the tests actually do generate and use nan/inf, so I expect that many of these will be "false positives". Richard Smith has pointed out:&lt;br />&lt;br />&lt;blockquote>The C++ standard’s treatment of Inf and NaN values is highly underspecified, so for the most part it’s not clear what has defined behavior and what does not.&amp;nbsp;&lt;/blockquote>&lt;blockquote>Anyway… I’m updating UBSan to suppress the diagnostics for conversions of ‘Inf’ and ‘NaN’ between floating-point types, and will probably split out a separate flag for finite overflow in conversions to floating-point types, so that users can turn it off as needed. I think that’s the right compromise for the time being. &lt;/blockquote>&lt;h4>Conclusions&lt;/h4>This exercise, while not completed, has already turned up a set of bugs in the libc++ test suite, as well as a bug in libc++ and some undefined behavior in libc++. There's more to look at here, but I think this was a good exercise. There's kind of a mismatch of expectations here, especially in the complex and numeric test suites, because UBSan is looking for nan/inf/-inf and the libc++ test code is deliberately generating them.&lt;br />&lt;br />Thanks to Howard Hinnant for his patience and explanations about the C++ standard and libc++ and the libc++ test suite, and to Richard Smith for his help with UBSan and interpreting the C++ standard.</description></item><item><title>Testing libc++ with Address Sanitizer</title><link>https://blog.llvm.org/2013/03/testing-libc-with-address-sanitizer.html</link><pubDate>Thu, 28 Mar 2013 14:02:00 +0000</pubDate><guid>https://blog.llvm.org/2013/03/testing-libc-with-address-sanitizer.html</guid><description>&lt;i>[This article is re-posted in a slightly expanded form &lt;a href="http://cplusplusmusings.wordpress.com/2013/03/20/testing-libc-with-address-sanitizer/">from Marshall's blog&lt;/a>]&lt;/i>&lt;br />I've been running the libc++ tests off and on for a while. It's a quite extensive test suite, but I wondered if there were any bugs that the test suite was not uncovering. In the upcoming clang 3.3, there is a new feature named &lt;a href="http://clang.llvm.org/docs/AddressSanitizer.html">Address Sanitizer&lt;/a> which inserts a bunch of runtime checks into your executable to see if there are any "out of bounds" reads and writes to memory.&lt;br />In the back of my head, I've always thought that it would be nice to be able to say that libc++ was "ASan clean" (i.e, passed all of the test suite when running with Address Sanitizer).&lt;br />So I decided to do that.&lt;br />&lt;br />&lt;a name='more'>&lt;/a> [ All of this work was done on Mac OS X 10.8.2/3 ] &lt;h3> How to run the tests:&lt;/h3>There's a script for running the tests. It's called &lt;code>testit&lt;/code>.&lt;br />&lt;pre>&lt;code> $ cd $LLVM/libcxx/test ; ./testit&lt;br />&lt;/code>&lt;/pre>&lt;pre>&lt;code>&lt;br />&lt;/code>&lt;/pre>where $LLVM/libcxx is where libc++ is checked out. This takes about 30 minutes to run. Without Address Sanitizer, libc++ fails 12 out of the 4348 tests on my system. &lt;h3>Running the tests with Address Sanitizer&lt;/h3>&lt;pre>&lt;code> $ cd $LLVM/libcxx/test ; CC=/path/to/tot/clang++ OPTIONS= "-std=c++11 -stdlib=libc++ -fsanitize=address" ./testit&lt;br />&lt;/code>&lt;/pre>&lt;em>Note: the default options are "-std=c++11 -stdlib=libc++", that's what you get if you don't specify anything&lt;/em>.This takes about 92 minutes; just a bit more than three times as long. With Address Sanitizer, libc++ fails 54 tests (again, out of 4348)&lt;br />&lt;br />What are the failures?&lt;br />&lt;br />&lt;ul>&lt;li>In 11 tests, Address Sanitizer detected a one-byte write outside a heap block. All of these involve iostreams. I created a small test program that ASan also fires on, and sent it to Howard Hinnant (who wrote most of libc++), and he found a place where he was allocating a zero-byte buffer by mistake. One bug, multiple failures. He fixed this in revision &lt;a href="http://llvm.org/viewvc/llvm-project?rev=177452&amp;amp;view=rev">177452&lt;/a>.&lt;/li>&lt;li>2 tests for std::random were failing. This turned out to be an off-by-one error in the test code, not in libc++. I fixed these in revisions &lt;a href="http://llvm.org/viewvc/llvm-project?rev=177355&amp;amp;view=rev">177355&lt;/a> and &lt;a href="http://llvm.org/viewvc/llvm-project?rev=177464&amp;amp;view=rev">177464&lt;/a>.&lt;/li>&lt;li>Address Sanitizer detected memory allocations failing in 4 cases. This is expected, since some of the tests are testing the memory allocation system of libc++. However, it appears that ASan does not call the user-supplied &lt;code>new_handler&lt;/code> when memory allocation fails (and may not throw &lt;code>std::bad_alloc&lt;/code>, ether). I have filed &lt;a href="http://llvm.org/bugs/show_bug.cgi?id=15544">PR15544&lt;/a> to track this issue.&lt;/li>&lt;li>25 cases are failing where the program is failing to load, due to a missing symbol. This is most commonly &lt;code>std::__1::__get_sp_mut(void const *)&lt;/code>, but there are a couple others. Howard says that this was added to libc++ after 10.8 shipped, so it's not in the dylib in /usr/lib. If the tests are run with a copy of libc++ built from source, they pass.&lt;/li>&lt;li>There are the 12 cases that were failing before enabling Address Sanitizer.&lt;/li>&lt;/ul>Once Howard and I fixed the random tests and the bug in the iostreams code, I re-ran the tests using a recently build libc++.dylib.&lt;br />&lt;pre>&lt;code> $ cd $LLVM/libcxx/test ; DYLD_LIBRARY_PATH=$LLVM/libcxx/lib CC=/path/to/tot/clang++ OPTIONS= "-std=c++11 -stdlib=libc++ -fsanitize=address" ./testit&lt;br />&lt;/code>&lt;/pre>This gave us 16 failures: &lt;br />&lt;ul>&lt;li>The 4 failures that have to do with memory allocation failures.&lt;/li>&lt;li>The 12 failures that we started with.&lt;/li>&lt;/ul>&lt;br />&lt;h4>Conclusion&lt;/h4>I'm glad to see that there were so few problems in the libc++ code. It's a fundamental building block for applications on Mac OS X (and, as llvm becomes more popular, other systems). And now it's better than it was when we started this exercise.However, we did find a couple bugs in the test suite, and one heap-smashing bug in libc++. We also found a limitation in Address Sanitizer, too - which the developers are working on addressing.&lt;br />&lt;br />&lt;br />&lt;br />&lt;br />&lt;br />&lt;br />&lt;br />&lt;br />&lt;br />&lt;br /></description></item><item><title>Instruction Relationship Framework in LLVM</title><link>https://blog.llvm.org/2013/03/instruction-relationship-framework-in.html</link><pubDate>Wed, 20 Mar 2013 13:42:00 +0000</pubDate><guid>https://blog.llvm.org/2013/03/instruction-relationship-framework-in.html</guid><description>The article provides an overview of the new Relationship framework of TableGen. This TableGen feature is used to describe user defined relationships between instructions. It was added to LLVM in October 2012. &lt;a name='more'>&lt;/a> &lt;!-- ======================================================================= -->&lt;h3 id="Motivation">Motivation:&lt;/h3>&lt;!-- ======================================================================= --> The motivation for this feature stemmed from the Hexagon backend. Much like other processors, Hexagon provides multiple variations for many instructions. It is a common requirement in machine instruction passes to switch between various formats of the same instruction. For example, consider an &lt;tt>Add&lt;/tt> instruction with predicated true (&lt;tt>Add_pt&lt;/tt>) and predicated false (&lt;tt>Add_pf&lt;/tt>) forms. Let's assume that a non-predicated &lt;tt>Add&lt;/tt> instruction is selected during target lowering. However, during if-conversion, the optimization pass might decide to change the non-predicated &lt;tt>Add&lt;/tt> into the predicated true &lt;tt>Add_pt&lt;/tt> form. These transformations require a framework to relate non-predicated forms to the respective predicated forms. In the absence of such a framework, this transformation is typically achieved using large switch cases. There are many deficiencies in using a switch case based approach. The manual implementation of switch case clauses requires a very high maintenance cost. It also results in lost optimization opportunities due to incomplete implementation of switch cases. The lack of a relationship model resulted in around 15% of Hexagon backend code dedicated to switch cases with several of those functions growing to over thousands of lines of code.&lt;br />&lt;br />This problem inspired us to explore some alternatives. We started to look for a framework that was easy to maintain, flexible, scalable, and less error prone. After some initial discussions and brainstorming in the Hexagon group, we decided to modify TableGen to express instruction relations. The initial design was submitted to the LLVM-dev mailing list for review. Jakob Stoklund gave valuable suggestions and helped with the design of the relationship framework. The idea was to add a query language that can be used to define different kind of relationships between instructions. TableGen was extended to parse relationship models. It uses the information to construct tables which are queried to determine new opcodes corresponding to a relationship. The Hexagon backend relies heavily on the relationship framework and it has significantly improved the code quality of our target.&lt;br />&lt;br />Before getting into the implementation details, let's consider an API that takes an instruction opcode as input and returns its predicated true/false form. We'll first look at the switch-case based solution and then compare it with the relationship based implementation. &lt;br \>&lt;div class="highlight" style="background: #ffffff;">&lt;pre style="line-height: 150%;">&lt;br />&lt;br />short getPredicatedTrue(short opcode) {&lt;br />switch (opcode) {&lt;br />default:&lt;br /> return -1;&lt;br />case Hexagon::Add:&lt;br /> return Hexagon::Add_pt;&lt;br />case Hexagon::Sub:&lt;br /> return Hexagon::Sub_pt;&lt;br />case Hexagon::And:&lt;br /> return Hexagon::And_pt;&lt;br />case Hexagon::Or:&lt;br /> return Hexagon::Or_pt;&lt;br />case ... :&lt;br /> return ...&lt;br />}&lt;br />&lt;br />short getPredicatedFalse(short opcode) {&lt;br />switch (opcode) {&lt;br />default:&lt;br /> return -1;&lt;br />case Hexagon::Add:&lt;br /> return Hexagon::Add_pf;&lt;br />case Hexagon::Sub:&lt;br /> return Hexagon::Sub_pf;&lt;br />case Hexagon::And:&lt;br /> return Hexagon::And_pf;&lt;br />case Hexagon::Or:&lt;br /> return Hexagon::Or_pf;&lt;br />case ... :&lt;br /> return ...&lt;br />}&lt;br />&lt;br />short getPredicatedOpcode(short opcode, bool predSense) {&lt;br />return predSense ? getPredicatedTrue(opcode)&lt;br /> : getPredicatedFlase(opcode);&lt;br />}&lt;br />&lt;br />&lt;/pre>&lt;/div> The switch-case based approach becomes quite unwieldy because of the large number of cases. Also, it requires continuous maintenance as new instructions are added. The problem becomes more demanding when an instruction has multiple relations since each of these APIs must be updated.&lt;br />&lt;br />The relationship framework offers a very systematic solution to this problem. It requires instructions to model their attributes and categorize their groups. For instance, a field called 'PredSense' can be used to record whether an instruction is predicated or not and its sense of predication. Each instruction in the group has to be unique such that no two instructions can share all the same attributes. There must be at least one field with different value. The instruction groups are modeled by assigning a common base name to all the instructions in the group. One of the biggest advantages of this approach is that, by modeling these attributes and groups once, we can define multiple relationships with very little effort.&lt;br />&lt;br />With the relationship framework, the &lt;tt>getPredicatedOpcode&lt;/tt> API can be implemented as below: &lt;br />&lt;div class="highlight" style="background: #ffffff;">&lt;pre style="line-height: 150%;">&lt;br />&lt;br />short getPredicatedOpcode(short opcode, bool predSense) {&lt;br />return predSense ? getPredicated(opcode, PredSenseTrue)&lt;br /> : getPredicated(opcode, PredSenseFalse);&lt;br />}&lt;br />&lt;br />&lt;/pre>&lt;/div>Here, &lt;tt>getPredicated()&lt;/tt> function is automatically generated by the relationship framework. It performs a query into the corresponding relationship table, also generated by the framework, and returns the matching predicated opcode if found.&lt;br /> &lt;!-- ======================================================================= -->&lt;h3 id="architecture">Architecture:&lt;/h3>&lt;!-- ======================================================================= --> The entire framework is driven by a class called &lt;tt>InstrMapping&lt;/tt>. The TableGen back-end has been extended to include a new parser for the relationship models implemented using &lt;tt>InstrMapping&lt;/tt> class. Any relationship model must derive from this class and assign all the class members to the appropriate values. This is how the class looks like: &lt;br \>&lt;div class="highlight" style="background: #ffffff;">&lt;pre style="line-height: 150%;">&lt;br />&lt;br />class InstrMapping {&lt;br /> // Used to reduce search space only to the instructions using this relation model&lt;br /> string FilterClass;&lt;br />&lt;br /> // List of fields/attributes that should be same for all the instructions in&lt;br /> // a row of the relation table. Think of this as a set of properties shared&lt;br /> // by all the instructions related by this relationship.&lt;br /> list&lt;string> RowFields = [];&lt;br /> // List of fields/attributes that are same for all the instructions&lt;br /> // in a column of the relation table.&lt;br /> list&lt;string> ColFields = [];&lt;br />&lt;br /> // Values for the fields/attributes listed in 'ColFields' corresponding to&lt;br /> // the key instruction. This is the instruction that will be transformed&lt;br /> // using this relation model.&lt;br /> list&lt;string> KeyCol = [];&lt;br />&lt;br /> // List of values for the fields/attributes listed in 'ColFields', one for&lt;br /> // each column in the relation table. These are the instructions a key&lt;br /> // instruction will be transformed into.&lt;br /> list&lt;list string=""> &amp;gt; ValueCols = [];&lt;br />}&lt;br />&lt;br />&lt;/list>&lt;/string>&lt;/string>&lt;/string>&lt;/pre>&lt;/div>Now, let's revisit the &lt;tt>getPredicated&lt;/tt> API. As mentioned earlier, this function can be auto-generated by the relationship framework. It requires us to define a relationship model that can relate non-predicated instructions with their predicated forms: &lt;br \>&lt;div class="highlight" style="background: #ffffff;">&lt;pre style="line-height: 150%;">&lt;br />&lt;br />def getPredicated : InstrMapping {&lt;br /> // Choose a FilterClass that is used as a base class for all the instructions modeling&lt;br /> // this relationship. This is done to reduce the search space only to these set of instructions.&lt;br /> let FilterClass = "PredRel";&lt;br />&lt;br /> // Instructions with same values for all the fields in RowFields form a row in the resulting&lt;br /> // relation table.&lt;br /> // For example, if we want to relate 'Add' (non-predicated) with 'Add_pt'&lt;br /> // (predicated true) and 'Add_pf' (predicated false), then all 3&lt;br /> // instructions need to have a common base name, i.e., same value for BaseOpcode here. It can be &lt;br /> // any unique value (Ex: XYZ) and should not be shared with any other instruction not related to 'Add'.&lt;br /> let RowFields = ["BaseOpcode"];&lt;br />&lt;br /> // List of attributes that can be used to define key and column instructions for a relation.&lt;br /> // Here, key instruction is passed as an argument to the function used for querying relation tables.&lt;br /> // Column instructions are the instructions they (key) can transform into.&lt;br /> //&lt;br /> // Here, we choose 'PredSense' as ColFields since this is the unique attribute of the key&lt;br /> // (non-predicated) and column (true/false) instructions involved in this relationship model.&lt;br /> let ColFields = ["PredSense"];&lt;br />&lt;br /> // The key column contains non-predicated instructions.&lt;br /> let KeyCol = ["none"];&lt;br />&lt;br /> // Two value columns - first column contains instructions with PredSense=true while the second&lt;br /> // column has instructions with PredSense=false.&lt;br /> let ValueCols = [["true"], ["false"]];&lt;br />}&lt;br />&lt;br />&lt;/pre>&lt;/div>This relationship model is processed and the information is used to construct a table along with the API to query. All this is emitted in the &lt;tt>XXXInstrInfo.inc&lt;/tt> file. However, with the changes made so far, we may end up with an empty relation table since we haven't defined &lt;tt>PredSense&lt;/tt> and &lt;tt>BaseOpcode&lt;/tt> for any of the instructions yet. &lt;br \>&lt;div class="highlight" style="background: #ffffff;">&lt;pre style="line-height: 150%;">&lt;br />&lt;br />multiclass ALU32_Pred&lt;string bit="" mnemonic="" prednot=""> {&lt;br /> let &lt;span style="color: royalblue; font-weight: bold;">PredSense = !if(PredNot, "false", "true")&lt;/span>, isPredicated = 1 in&lt;br /> def NAME : ALU32_rr&amp;lt;(outs IntRegs:$dst),&lt;br /> (ins PredRegs:$src1, IntRegs:$src2, IntRegs: $src3),&lt;br /> !if(PredNot, "if (!$src1)", "if ($src1)")#&lt;br /> " $dst = "#mnemonic#"($src2, $src3)",&lt;br /> []&amp;gt;;&lt;br />}&lt;br />&lt;br />multiclass ALU32_base&lt;string baseop="" mnemonic="" opnode="" sdnode="" string=""> {&lt;br /> let &lt;span style="color: royalblue; font-weight: bold;">BaseOpcode = BaseOp&lt;/span> in {&lt;br /> let isPredicable = 1 in&lt;br /> def NAME : ALU32_rr&amp;lt;(outs IntRegs:$dst),&lt;br /> (ins IntRegs:$src1, IntRegs:$src2),&lt;br /> "$dst = "#mnemonic#"($src1, $src2)",&lt;br /> [(set (i32 IntRegs:$dst), (OpNode (i32 IntRegs:$src1),&lt;br /> (i32 IntRegs:$src2)))]&amp;gt;;&lt;br />&lt;br /> defm pt : ALU32_Pred&lt;mnemonic 0="">; // Predicate true&lt;br /> defm pf : ALU32_Pred&lt;mnemonic 1="">; // Predicate false&lt;br /> }&lt;br />}&lt;br />&lt;br />let isCommutable = 1 in {&lt;br /> defm Add : ALU32_base&amp;lt;"add", "ADD", add&amp;gt;, &lt;span style="color: royalblue; font-weight: bold;">PredRel&lt;/span>;&lt;br /> defm And : ALU32_base&amp;lt;"and", "AND", and&amp;gt;, &lt;span style="color: royalblue; font-weight: bold;">PredRel&lt;/span>;&lt;br /> defm Xor: ALU32_base&amp;lt;"xor", "XOR", xor&amp;gt;, &lt;span style="color: royalblue; font-weight: bold;">PredRel&lt;/span>;&lt;br /> defm Or : ALU32_base&amp;lt;"or", "OR", or&amp;gt;, &lt;span style="color: royalblue; font-weight: bold;">PredRel&lt;/span>;&lt;br />}&lt;br />defm Sub : ALU32_base&amp;lt;"sub", "SUB", sub&amp;gt;, &lt;span style="color: royalblue; font-weight: bold;">PredRel&lt;/span>;&lt;br />&lt;br />&lt;/mnemonic>&lt;/mnemonic>&lt;/string>&lt;/string>&lt;/pre>&lt;/div>Fields highlighted in blue are solely for the purpose of Relationship framework. Here, &lt;tt>PredRel&lt;/tt> is a filter class used to extract instructions that may be related using &lt;tt>getPredicated&lt;/tt> relationship model. All the instructions using this model are expected to derive from &lt;tt>PreRel&lt;/tt> class. &lt;tt>BaseOpcode&lt;/tt> is used to group related instructions together. In the above example, all the variants of &lt;tt>Add&lt;/tt> instruction, &lt;tt>Add, Add_pt, Add_pf&lt;/tt> will have their BaseOpcode set to &lt;tt>ADD&lt;/tt>. Similarly, &lt;tt>BaseOpcode&lt;/tt> for all the variants for &lt;tt>Sub&lt;/tt> is set to &lt;tt>SUB&lt;/tt>. It can be any string unique across all groups. &lt;tt>PredSense&lt;/tt> is used to identify instructions within each group.&lt;br />&lt;br />With the help of this extra information, TableGen is able to construct the following API. It offers the same functionality as switch-case based approach and significantly reduces the maintenance overhead: &lt;br \>&lt;div class="highlight" style="background: #ffffff;">&lt;pre style="line-height: 150%;">&lt;br />&lt;br />int getPredicated(uint16_t Opcode, enum PredSense inPredSense) {&lt;br />static const uint16_t getPredicatedTable[][3] = {&lt;br /> { Hexagon::Add, Hexagon::Add_pt, Hexagon::Add_pf },&lt;br /> { Hexagon::And, Hexagon::And_pt, Hexagon::And_pf },&lt;br /> { Hexagon::Or, Hexagon::Or_pt, Hexagon::Or_pf },&lt;br /> { Hexagon::Sub, Hexagon::Sub_pt, Hexagon::Sub_pf },&lt;br /> { Hexagon::Xor, Hexagon::Xor_pt, Hexagon::Xor_pf },&lt;br />}; // End of getPredicatedTable&lt;br />&lt;br /> unsigned mid;&lt;br /> unsigned start = 0;&lt;br /> unsigned end = 5;&lt;br /> while (start &amp;lt; end) {&lt;br /> mid = start + (end - start)/2;&lt;br /> if (Opcode == getPredicatedTable[mid][0]) {&lt;br /> break;&lt;br /> }&lt;br /> if (Opcode &amp;lt; getPredicatedTable[mid][0])&lt;br /> end = mid;&lt;br /> else&lt;br /> start = mid + 1;&lt;br /> }&lt;br /> if (start == end)&lt;br /> return -1; // Instruction doesn't exist in this table.&lt;br />&lt;br /> if (inPredSense == PredSense_true)&lt;br /> return getPredOpcodeTable[mid][1];&lt;br /> if (inPredSense == PredSense_false)&lt;br /> return getPredicatedTable[mid][2];&lt;br /> return -1;&lt;br />}&lt;br />&lt;br />&lt;/pre>&lt;/div>Once instructions have been defined to appropriately model their properties, defining new instruction mappings become extremely easy. Now, say we want to have an API that allows us to transform a &lt;tt>predicate-true&lt;/tt> instruction into its &lt;tt>predicate-false&lt;/tt> form. This can be done by defining a new relationship model. For this model, we don't have to modify any of the instruction definitions as they already have all the necessary information present. &lt;br \>&lt;div class="highlight" style="background: #ffffff;">&lt;pre style="line-height: 150%;">&lt;br />&lt;br />//===------------------------------------------------------------------===//&lt;br />// Generate mapping table to relate predicate-true instructions with their&lt;br />// predicate-false forms&lt;br />//&lt;br />def getFalsePredOpcode : InstrMapping {&lt;br /> let FilterClass = "PredRel";&lt;br /> let RowFields = ["BaseOpcode"];&lt;br /> let ColFields = ["PredSense"];&lt;br /> let KeyCol = ["true"];&lt;br /> let ValueCols = [["false"]];&lt;br />}&lt;br />&lt;br />&lt;/pre>&lt;/div> &lt;!-- ======================================================================= -->&lt;h3 id="conclusion">Conclusion:&lt;/h3>&lt;!-- ======================================================================= --> I hope this article succeeds in providing some useful information about the framework. The Hexagon backend makes extensive use of this feature and can be used as a reference for getting started on relationship framework.</description></item><item><title>New Loop Vectorizer</title><link>https://blog.llvm.org/2012/12/new-loop-vectorizer.html</link><pubDate>Fri, 07 Dec 2012 10:12:00 +0000</pubDate><guid>https://blog.llvm.org/2012/12/new-loop-vectorizer.html</guid><description>I would like to give a brief update regarding the development of the Loop Vectorizer. LLVM now has two vectorizers: The Loop Vectorizer, which operates on Loops, and the &lt;a href="http://llvm.org/devmtg/2012-04-12/Slides/Hal_Finkel.pdf">Basic Block Vectorizer&lt;/a>, which optimizes straight-line code. These vectorizers focus on different optimization opportunities and use different techniques. The BB vectorizer merges multiple scalars that are found in the code into vectors while the Loop Vectorizer widens instructions in the original loop to operate on multiple consecutive loop iterations. &lt;br />&lt;a name='more'>&lt;/a>&lt;br />LLVM’s Loop Vectorizer is now available and will be useful for many people. It is not enabled by default, but can be enabled through clang using the command line flag &lt;b>"-mllvm -vectorize-loops"&lt;/b>. We plan to enable the Loop Vectorizer by default as part of the LLVM 3.3 release. &lt;br />&lt;br />The Loop Vectorizer can boost the performance of many loops, including some loops that are not vectorizable by GCC. In one benchmark, Linpack-pc, the Loop Vectorizer boosts the performance of gaussian elimination of single precision matrices from 984 MFlops to 2539 MFlops - a 2.6X boost in performance. The vectorizer also boosts the “GCC vectorization examples” &lt;a href="http://llvm.org/viewvc/llvm-project/test-suite/trunk/SingleSource/UnitTests/Vectorizer/">benchmark&lt;/a> by a geomean of 2.15X.&lt;br />&lt;br />The LLVM Loop Vectorizer has a number of features that allow it to vectorize complex loops. Most of the features described in this post are available as part of the LLVM 3.2 release, but some features were added after the cutoff date. Here is one small example of a loop that the LLVM Loop Vectorizer can vectorize. &lt;br />&lt;pre style="background: #ffffff; color: black;">&lt;br />&lt;span style="color: maroon; font-weight: bold;">int&lt;/span> foo&lt;span style="color: #808030;">(&lt;/span>&lt;span style="color: maroon; font-weight: bold;">int&lt;/span> &lt;span style="color: #808030;">*&lt;/span>A&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: maroon; font-weight: bold;">int&lt;/span> &lt;span style="color: #808030;">*&lt;/span>B&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: maroon; font-weight: bold;">int&lt;/span> n&lt;span style="color: #808030;">)&lt;/span> &lt;span style="color: purple;">{&lt;/span>&lt;br /> &lt;span style="color: maroon; font-weight: bold;">unsigned&lt;/span> sum &lt;span style="color: #808030;">=&lt;/span> &lt;span style="color: #008c00;">0&lt;/span>&lt;span style="color: purple;">;&lt;/span>&lt;br /> &lt;span style="color: maroon; font-weight: bold;">for&lt;/span> &lt;span style="color: #808030;">(&lt;/span>&lt;span style="color: maroon; font-weight: bold;">int&lt;/span> i &lt;span style="color: #808030;">=&lt;/span> &lt;span style="color: #008c00;">0&lt;/span>&lt;span style="color: purple;">;&lt;/span> i &lt;span style="color: #808030;">&amp;lt;&lt;/span> n&lt;span style="color: purple;">;&lt;/span> &lt;span style="color: #808030;">+&lt;/span>&lt;span style="color: #808030;">+&lt;/span>i&lt;span style="color: #808030;">)&lt;/span>&lt;br /> &lt;span style="color: maroon; font-weight: bold;">if&lt;/span> &lt;span style="color: #808030;">(&lt;/span>A&lt;span style="color: #808030;">[&lt;/span>i&lt;span style="color: #808030;">]&lt;/span> &lt;span style="color: #808030;">&amp;gt;&lt;/span> B&lt;span style="color: #808030;">[&lt;/span>i&lt;span style="color: #808030;">]&lt;/span>&lt;span style="color: #808030;">)&lt;/span>&lt;br /> sum &lt;span style="color: #808030;">+&lt;/span>&lt;span style="color: #808030;">=&lt;/span> A&lt;span style="color: #808030;">[&lt;/span>i&lt;span style="color: #808030;">]&lt;/span> &lt;span style="color: #808030;">+&lt;/span> &lt;span style="color: #008c00;">5&lt;/span>&lt;span style="color: purple;">;&lt;/span>&lt;br /> &lt;span style="color: maroon; font-weight: bold;">return&lt;/span> sum&lt;span style="color: purple;">;&lt;/span>&lt;br />&lt;span style="color: purple;">}&lt;/span>&lt;br />&lt;/pre>&lt;br />In this example, the Loop Vectorizer uses a number of non-trivial features to vectorize the loop. The ‘sum’ variable is used by consecutive iterations of the loop. Normally, this would prevent vectorization, but the vectorizer can detect that ‘sum’ is a reduction variable. The variable ‘sum’ becomes a vector of integers, and at the end of the loop the elements of the array are added together to create the correct result. We support a number of different reduction operations, such as multiplication.&lt;br/>&lt;br/> Another challenge that the Loop Vectorizer needs to overcome is the presence of control flow in the loop. The Loop Vectorizer is able to "flatten" the IF statement in the code and generate a single stream of instructions. Another important feature is the vectorization of loops with an unknown trip count. In this example, ‘n’ may not be a multiple of the vector width, and the vectorizer has to execute the last few iterations as scalar code. Keeping a scalar copy of the loop increases the code size. &lt;br/>The loop above is compiled into the ARMv7s assembly sequence below. Notice that the IF structure is replaced by the "vcgt" and "vbsl" instructions.&lt;br />&lt;br />&lt;pre style='color:#000000;background:#ffffff;'>&lt;span style='color:#e34adc; '>LBB0_3:&lt;/span>&lt;br /> vld1.32 &lt;span style='color:#808030; '>{&lt;/span>d26&lt;span style='color:#808030; '>,&lt;/span> d27&lt;span style='color:#808030; '>}&lt;/span>&lt;span style='color:#808030; '>,&lt;/span> &lt;span style='color:#808030; '>[&lt;/span>r3&lt;span style='color:#808030; '>]&lt;/span>&lt;br /> vadd.i32 q12&lt;span style='color:#808030; '>,&lt;/span> q8&lt;span style='color:#808030; '>,&lt;/span> q9&lt;br /> subs r2&lt;span style='color:#808030; '>,&lt;/span> #&lt;span style='color:#008c00; '>4&lt;/span>&lt;br /> add.w r3&lt;span style='color:#808030; '>,&lt;/span> r3&lt;span style='color:#808030; '>,&lt;/span> #&lt;span style='color:#008c00; '>16&lt;/span>&lt;br /> vcgt.s32 q0&lt;span style='color:#808030; '>,&lt;/span> q13 &lt;span style='color:#808030; '>,&lt;/span> q10&lt;br /> vmla.i32 q12&lt;span style='color:#808030; '>,&lt;/span> q13&lt;span style='color:#808030; '>,&lt;/span> q11&lt;br /> vbsl q0&lt;span style='color:#808030; '>,&lt;/span> q12&lt;span style='color:#808030; '>,&lt;/span> q8&lt;br /> vorr q8&lt;span style='color:#808030; '>,&lt;/span> q0&lt;span style='color:#808030; '>,&lt;/span> q0&lt;br /> bne &lt;span style='color:#e34adc; '>LBB0_3&lt;/span>&lt;br />&lt;/pre> &lt;br />In the second example below, the Loop Vectorizer must use two more features in order to vectorize the loop. In the loop below, the iteration start and finish points are unknown, and the Loop Vectorizer has a mechanism to vectorize loops that do not start at zero. This feature is important for loops that are converted from Fortran, because Fortran loops start at 1. &lt;br />Another major challenge in this loop is memory safety. In our example, if the pointers A and B point to consecutive addresses, then it is illegal to vectorize the code because some elements of A will be written before they are read from array B.&lt;br />&lt;br />Some programmers use the 'restrict' keyword to notify the compiler that the pointers are disjointed, but in our example, the Loop Vectorizer has no way of knowing that the pointers A and B are unique. The Loop Vectorizer handles this loop by placing code that checks, at runtime, if the arrays A and B point to disjointed memory locations. If arrays A and B overlap, then the scalar version of the loop is executed. &lt;br />&lt;pre style="background: #ffffff; color: black;">&lt;br />&lt;span style="color: maroon; font-weight: bold;">void&lt;/span> bar&lt;span style="color: #808030;">(&lt;/span>&lt;span style="color: maroon; font-weight: bold;">float&lt;/span> &lt;span style="color: #808030;">*&lt;/span>A&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: maroon; font-weight: bold;">float&lt;/span> &lt;span style="color: #808030;">*&lt;/span>B&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: maroon; font-weight: bold;">float&lt;/span> K&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: maroon; font-weight: bold;">int&lt;/span> start&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: maroon; font-weight: bold;">int&lt;/span> end&lt;span style="color: #808030;">)&lt;/span> &lt;span style="color: purple;">{&lt;/span>&lt;br />&amp;nbsp;&lt;span style="color: maroon; font-weight: bold;">for&lt;/span> &lt;span style="color: #808030;">(&lt;/span>&lt;span style="color: maroon; font-weight: bold;">int&lt;/span> i &lt;span style="color: #808030;">=&lt;/span> start&lt;span style="color: purple;">;&lt;/span> i &lt;span style="color: #808030;">&amp;lt;&lt;/span> end&lt;span style="color: purple;">;&lt;/span> &lt;span style="color: #808030;">+&lt;/span>&lt;span style="color: #808030;">+&lt;/span>i&lt;span style="color: #808030;">)&lt;/span>&lt;br />&amp;nbsp; &amp;nbsp;A&lt;span style="color: #808030;">[&lt;/span>i&lt;span style="color: #808030;">]&lt;/span> &lt;span style="color: #808030;">*&lt;/span>&lt;span style="color: #808030;">=&lt;/span> B&lt;span style="color: #808030;">[&lt;/span>i&lt;span style="color: #808030;">]&lt;/span> &lt;span style="color: #808030;">+&lt;/span> K&lt;span style="color: purple;">;&lt;/span>&lt;br />&lt;span style="color: purple;">}&lt;/span>&lt;br />&lt;/pre>&lt;br />The loop above is compiled into this X86 assembly sequence. Notice the use of the 8-wide YMM registers on systems that support AVX.&lt;br />&lt;br />&lt;pre style="background: #ffffff; color: black;">&lt;br />&lt;span style="color: #e34adc;">LBB1_4:&lt;/span>&lt;br /> vmovups &lt;span style="color: #808030;">(&lt;/span>&lt;span style="color: #808030;">%&lt;/span>rdx&lt;span style="color: #808030;">)&lt;/span>&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>ymm2&lt;br /> vaddps &amp;nbsp;&lt;span style="color: #808030;">%&lt;/span>ymm1&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>ymm2&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>ymm2&lt;br /> vmovups &lt;span style="color: #808030;">(&lt;/span>&lt;span style="color: #808030;">%&lt;/span>rax&lt;span style="color: #808030;">)&lt;/span>&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>ymm3&lt;br /> vmulps &amp;nbsp;&lt;span style="color: #808030;">%&lt;/span>ymm2&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>ymm3&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>ymm2&lt;br /> vmovups &lt;span style="color: #808030;">%&lt;/span>ymm2&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">(&lt;/span>&lt;span style="color: #808030;">%&lt;/span>rax&lt;span style="color: #808030;">)&lt;/span>&lt;br /> addq &amp;nbsp; &lt;span style="color: green;">$32&lt;/span>&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>rax&lt;br /> addq &amp;nbsp; &lt;span style="color: green;">$32&lt;/span>&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>rdx&lt;br /> addq &amp;nbsp; $&lt;span style="color: #008c00;">-8&lt;/span>&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>r1&lt;span style="color: #008c00;">1&lt;/span>&lt;br />&lt;span style="color: maroon; font-weight: bold;"> jne&lt;/span> &lt;span style="color: #e34adc;">LBB1_4&lt;/span>&lt;br />&lt;/pre>&lt;br />In the last example, we don’t see a loop because it is hidden inside the "accumulate" function of the standard c++ library. This loop uses c++ iterators, which are pointers, and not integer indices, like we saw in the previous examples. The Loop Vectorizer detects pointer induction variables and can vectorize this loop. This feature is important because many C++ programs use iterators.&lt;br />&lt;pre style="background: #ffffff; color: black;">&lt;br />&lt;span style="color: maroon; font-weight: bold;">int&lt;/span> baz&lt;span style="color: #808030;">(&lt;/span>&lt;span style="color: maroon; font-weight: bold;">int&lt;/span> &lt;span style="color: #808030;">*&lt;/span>A&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: maroon; font-weight: bold;">int&lt;/span> n&lt;span style="color: #808030;">)&lt;/span> &lt;span style="color: purple;">{&lt;/span>&lt;br /> &lt;span style="color: maroon; font-weight: bold;">return&lt;/span> std&lt;span style="color: purple;">::&lt;/span>accumulate&lt;span style="color: #808030;">(&lt;/span>A&lt;span style="color: #808030;">,&lt;/span> A &lt;span style="color: #808030;">+&lt;/span> n&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #008c00;">0&lt;/span>&lt;span style="color: #808030;">)&lt;/span>&lt;span style="color: purple;">;&lt;/span>&lt;br />&lt;span style="color: purple;">}&lt;/span>&lt;br />&lt;/pre>The loop above is compiled into this x86 assembly sequence. &lt;br />&lt;pre style="background: #ffffff; color: black;">&lt;br />&lt;span style="color: #e34adc;">LBB2_8:&lt;/span>&lt;br /> vmovdqu &lt;span style="color: #808030;">(&lt;/span>&lt;span style="color: #808030;">%&lt;/span>rcx&lt;span style="color: #808030;">,&lt;/span>&lt;span style="color: #808030;">%&lt;/span>rdx&lt;span style="color: #808030;">,&lt;/span>&lt;span style="color: #008c00;">4&lt;/span>&lt;span style="color: #808030;">)&lt;/span>&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>&lt;span style="color: navy;">xmm1&lt;/span>&lt;br /> vpaddd &lt;span style="color: #808030;">%&lt;/span>&lt;span style="color: navy;">xmm0&lt;/span>&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>&lt;span style="color: navy;">xmm1&lt;/span>&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>&lt;span style="color: navy;">xmm0&lt;/span>&lt;br /> addq &lt;span style="color: green;">$4&lt;/span>&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>rdx&lt;br /> cmpq &lt;span style="color: #808030;">%&lt;/span>rdx&lt;span style="color: #808030;">,&lt;/span> &lt;span style="color: #808030;">%&lt;/span>rsi&lt;br />&lt;span style="color: maroon; font-weight: bold;"> jne&lt;/span> &lt;span style="color: #e34adc;">LBB2_8&lt;/span>&lt;br />&lt;/pre>&lt;br/> The Loop Vectorizer is a target independent IR-level optimization that depends on target-specific information from the different backends. It needs to select the optimal vector width and to decide if vectorization is worthwhile. Users can force a certain vector width using the command line flag &lt;b>"-mllvm -force-vector-width=X"&lt;/b>, where X is the number of vector elements. At the moment, only the X86 backend provides detailed cost information, while other targets use a less accurate method. &lt;br/>The work on the Loop Vectorizer is not complete and the vectorizer has a long way to go. We plan to add additional vectorization features such as automatic alignment of buffers, vectorization of function calls and support for user pragmas. We also plan to improve the quality of the generated code. &lt;br/> &lt;br/></description></item><item><title>LLVM Developer Meeting 2012</title><link>https://blog.llvm.org/2012/12/llvm-developer-meeting-2012.html</link><pubDate>Wed, 05 Dec 2012 19:45:00 +0000</pubDate><guid>https://blog.llvm.org/2012/12/llvm-developer-meeting-2012.html</guid><description>The &lt;a href="http://llvm.org/devmtg/2012-11/">2012 LLVM Developer Meeting&lt;/a> is now complete and was a great success. If you are interested in the talks, a complete set of &lt;a href="http://llvm.org/devmtg/2012-11/">slides, videos, and posters&lt;/a> are now available. The LLVM Developer Meeting would not be possible without support from our sponsors. Many thanks to Apple, QuIC, Google, and Intel. -Chris</description></item><item><title>Life of an instruction in LLVM</title><link>https://blog.llvm.org/2012/11/life-of-instruction-in-llvm.html</link><pubDate>Wed, 28 Nov 2012 15:31:00 +0000</pubDate><guid>https://blog.llvm.org/2012/11/life-of-instruction-in-llvm.html</guid><description>&lt;br />LLVM is a complex piece of software. There are several paths one may take on the quest of understanding how it works, none of which is simple. I recently had to dig in some areas of LLVM I was not previously familiar with, and this article is one of the outcomes of this quest.&lt;br />&lt;br />What I aim to do here is follow the various incarnations an "instruction" takes when it goes through LLVM’s multiple compilation stages, starting from a syntactic construct in the source language and until being encoded as binary machine code in an output object file.&lt;br />&lt;br />This article in itself will not teach one how LLVM works. It assumes some existing familiarity with LLVM’s design and code base, and leaves a lot of "obvious" details out. Note that unless otherwise stated, the information here is relevant to LLVM 3.2. LLVM and Clang are fast-moving projects, and future changes may render parts of this article incorrect. If you notice any discrepancies, please let me know and I’ll do my best to fix them.&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;div class="section" id="input-code">&lt;h3>Input code&lt;/h3>I want to start this exploration process at the beginning – C source. Here’s the simple function we’re going to work with:&lt;br />&lt;br />&lt;div class="highlight" style="background: #ffffff;">&lt;pre style="line-height: 125%;">&lt;span style="font-size: small;">&lt;br />&lt;span style="color: #00007f; font-weight: bold;">int&lt;/span> &lt;span style="color: #00007f;">foo&lt;/span>(&lt;span style="color: #00007f; font-weight: bold;">int&lt;/span> aa, &lt;span style="color: #00007f; font-weight: bold;">int&lt;/span> bb, &lt;span style="color: #00007f; font-weight: bold;">int&lt;/span> cc) {&lt;br /> &lt;span style="color: #00007f; font-weight: bold;">int&lt;/span> sum = aa + bb;&lt;br /> &lt;span style="color: #00007f; font-weight: bold;">return&lt;/span> sum / cc;&lt;br />}&lt;/span>&lt;br />&lt;/pre>&lt;/div>&lt;br />The focus of this article is going to be on the division operation.&lt;/div>&lt;div class="section" id="clang">&lt;h3>Clang&lt;/h3>Clang serves as the front-end for LLVM, responsible for converting C, C++ and ObjC source into LLVM IR. Clang’s main complexity comes from the ability to correctly parse and semantically analyze C++; the flow for a simple C-level operation is actually quite straightforward.&lt;br />&lt;br />Clang’s parser builds an Abstract Syntax Tree (AST) out of the input. The AST is the main "currency" in which various parts of Clang deal. For our division operation, a &lt;tt class="docutils literal">BinaryOperator&lt;/tt> node is created in the AST, carrying the &lt;tt class="docutils literal">BO_div&lt;/tt> "operator kind". Clang’s code generator then goes on to emit a &lt;tt class="docutils literal">sdiv&lt;/tt> LLVM IR instruction from the node, since this is a division of signed integral types.&lt;br />&lt;div class="section" id="llvm-ir">&lt;h3>LLVM IR&lt;/h3>Here is the LLVM IR created for the function:&lt;br />&lt;br />&lt;div class="highlight" style="background: #ffffff;">&lt;pre style="line-height: 125%;">define i32 @foo(i32 %aa, i32 %bb, i32 %cc) nounwind {&lt;br />entry:&lt;br /> %add = add nsw i32 %aa, %bb&lt;br /> %div = sdiv i32 %add, %cc&lt;br /> ret i32 %div&lt;br />}&lt;br />&lt;/pre>&lt;/div>&lt;br />In LLVM IR, &lt;tt class="docutils literal">sdiv&lt;/tt> is a &lt;tt class="docutils literal">BinaryOperator&lt;/tt>, which is a subclass of &lt;tt class="docutils literal">Instruction&lt;/tt> with the opcode &lt;tt class="docutils literal">SDiv&lt;/tt>. Like any other instruction, it can be processed by the LLVM analysis and transformation passes. For a specific example targeted at &lt;tt class="docutils literal">SDiv&lt;/tt>, take a look at &lt;tt class="docutils literal">SimplifySDivInst&lt;/tt>. Since all through the LLVM "middle-end" layer the instruction remains in its IR form, I won’t spend much time talking about it. To witness its next incarnation, we’ll have to look at the LLVM code generator.&lt;br />&lt;br />The code generator is one of the most complex parts of LLVM. Its task is to "lower" the relatively high-level, target-independent LLVM IR into low-level, target-dependent "machine instructions" (&lt;tt class="docutils literal">MachineInstr&lt;/tt>). On its way to a &lt;tt class="docutils literal">MachineInstr&lt;/tt>, an LLVM IR instruction passes through a "selection DAG node" incarnation, which is what I’m going to discuss next.&lt;/div>&lt;/div>&lt;h3>SelectionDAG node&lt;/h3>Selection DAG nodes are created by the &lt;tt class="docutils literal">SelectionDAGBuilder&lt;/tt> class acting "in the service of" &lt;tt class="docutils literal">SelectionDAGISel&lt;/tt>, which is the main base class for instruction selection. &lt;tt class="docutils literal">SelectionDAGISel&lt;/tt> goes over all the IR instructions and calls the &lt;tt class="docutils literal">&lt;span class="pre">SelectionDAGBuilder::visit&lt;/span>&lt;/tt> dispatcher on them. The method handling a &lt;tt class="docutils literal">SDiv&lt;/tt> instruction is &lt;tt class="docutils literal">&lt;span class="pre">SelectionDAGBuilder::visitSDiv&lt;/span>&lt;/tt>. It requests a new &lt;tt class="docutils literal">SDNode&lt;/tt> from the DAG with the opcode &lt;tt class="docutils literal">&lt;span class="pre">ISD::SDIV&lt;/span>&lt;/tt>, which becomes a node in the DAG.&lt;br />&lt;br />The initial DAG constructed this way is still only partially target dependent. In LLVM nomenclature it’s called "illegal" – the types it contains may not be directly supported by the target; the same is true for the operations it contains.&lt;br />&lt;br />There are a couple of ways to visualize the DAG. One is to pass the &lt;tt class="docutils literal">&lt;span class="pre">-debug&lt;/span>&lt;/tt> flag to &lt;tt class="docutils literal">llc&lt;/tt>, which will cause it to create a textual dump of the DAG during all the selection phases. Another is to pass one of the &lt;tt class="docutils literal">&lt;span class="pre">-view&lt;/span>&lt;/tt> options which causes it to dump and display an actual image of the graph (more details in the &lt;a class="reference external" href="http://llvm.org/docs/CodeGenerator.html">code generator docs&lt;/a>). Here’s the relevant portion of the DAG showing our &lt;tt class="docutils literal">SDiv&lt;/tt> node, right after DAG creation (the &lt;tt class="docutils literal">sdiv&lt;/tt> node is in the bottom):&lt;br />&lt;br />&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="http://2.bp.blogspot.com/-SjbbSsuPKbo/ULTDEf2o5hI/AAAAAAAAAgM/CmQd_eeGowY/s1600/sdiv_initial_dag.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" src="http://2.bp.blogspot.com/-SjbbSsuPKbo/ULTDEf2o5hI/AAAAAAAAAgM/CmQd_eeGowY/s1600/sdiv_initial_dag.png" />&lt;/a>&lt;/div>&lt;br />&lt;div class="separator" style="clear: both; text-align: center;">&lt;/div>&lt;br />&lt;br />Before the &lt;tt class="docutils literal">SelectionDAG&lt;/tt> machinery actually emits machine instructions from DAG nodes, these undergo a few other transformations. The most important are the type and operation legalization steps, which use target-specific hooks to convert all operations and types into ones that the target actually supports.&lt;br />&lt;h3>"Legalizing" sdiv into sdivrem on x86&lt;/h3>The division instruction (&lt;tt class="docutils literal">idiv&lt;/tt> for signed operands) of x86 computes both the quotient and the remainder of the operation, and stores them in two separate registers. Since LLVM’s instruction selection distinguishes between such operations (called &lt;tt class="docutils literal">&lt;span class="pre">ISD::SDIVREM&lt;/span>&lt;/tt>) and division that only computes the quotient (&lt;tt class="docutils literal">&lt;span class="pre">ISD::SDIV&lt;/span>&lt;/tt>), our DAG node will be "legalized" during the DAG legalization phase when the target is x86. Here’s how it happens.&lt;br />&lt;br />An important interface used by the code generator to convey target-specific information to the generally target-independent algorithms is &lt;tt class="docutils literal">TargetLowering&lt;/tt>. Targets implement this interface to describe how LLVM IR instructions should be lowered to legal &lt;tt class="docutils literal">SelectionDAG&lt;/tt> operations. The x86 implementation of this interface is &lt;tt class="docutils literal">X86TargetLowering&lt;/tt>. In its constructor it marks which operations need to be "expanded" by operation legalization, and &lt;tt class="docutils literal">&lt;span class="pre">ISD::SDIV&lt;/span>&lt;/tt> is one of them. Here’s an interesting comment from the code:&lt;br />&lt;br />&lt;div class="highlight" style="background: #ffffff;">&lt;pre style="line-height: 125%;">&lt;span style="color: #007f00;">&lt;br />// Scalar integer divide and remainder are lowered to use operations that&lt;/span>&lt;br />&lt;span style="color: #007f00;">// produce two results, to match the available instructions. This exposes&lt;/span>&lt;br />&lt;span style="color: #007f00;">// the two-result form to trivial CSE, which is able to combine x/y and x%y&lt;/span>&lt;br />&lt;span style="color: #007f00;">// into a single instruction.&lt;/span>&lt;br />&lt;/pre>&lt;/div>&amp;nbsp; &lt;br />When &lt;tt class="docutils literal">&lt;span class="pre">SelectionDAGLegalize::LegalizeOp&lt;/span>&lt;/tt> sees the &lt;tt class="docutils literal">Expand&lt;/tt> flag on a SDIV node it replaces it by &lt;tt class="docutils literal">&lt;span class="pre">ISD::SDIVREM&lt;/span>&lt;/tt>. This is an interesting example to demonstrate the transformation an operation can undergo while in the selection DAG form.&lt;br />&lt;br />Here is the relevant portion of the DAG after legalization:&lt;br />&lt;br />&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="http://1.bp.blogspot.com/-4Hr-DU4FbR0/ULTCadxhrgI/AAAAAAAAAgE/hzLJ9YqVdT4/s1600/sdivrem_legal_dag.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" src="http://1.bp.blogspot.com/-4Hr-DU4FbR0/ULTCadxhrgI/AAAAAAAAAgE/hzLJ9YqVdT4/s1600/sdivrem_legal_dag.png" />&lt;/a>&lt;/div>&lt;br />&lt;div class="section" id="instruction-selection-from-sdnode-to-machinesdnode">&lt;h3>Instruction selection – from SDNode to MachineSDNode&lt;/h3>The next step in the code generation process is &lt;i>instruction selection&lt;/i>. LLVM provides a generic table-based instruction selection mechanism that is auto-generated with the help of TableGen. Many target backends, however, choose to write custom code in their &lt;tt class="docutils literal">&lt;span class="pre">SelectionDAGISel::Select&lt;/span>&lt;/tt> implementations to handle some instructions manually. Other instructions are then sent to the auto-generated selector by calling &lt;tt class="docutils literal">SelectCode&lt;/tt>.&lt;br />&lt;br />The X86 backend handles &lt;tt class="docutils literal">&lt;span class="pre">ISD::SDIVREM&lt;/span>&lt;/tt> manually in order to take care of some special cases and optimizations. The DAG node created at this step is a &lt;tt class="docutils literal">MachineSDNode&lt;/tt>, a subclass of &lt;tt class="docutils literal">SDNode&lt;/tt> which holds the information required to construct an actual machine instruction, but still in DAG node form. At this point the actual X86 instruction opcode is selected – &lt;tt class="docutils literal">&lt;span class="pre">X86::IDIV32r&lt;/span>&lt;/tt> in our case.&lt;br />&lt;br />&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="http://3.bp.blogspot.com/-odnuGpLx3EA/ULTEEYSivqI/AAAAAAAAAgU/bcQZtTPOw2c/s1600/idiv_after_isel.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;">&lt;img border="0" src="http://3.bp.blogspot.com/-odnuGpLx3EA/ULTEEYSivqI/AAAAAAAAAgU/bcQZtTPOw2c/s1600/idiv_after_isel.png" />&lt;/a>&lt;/div>&lt;/div>&lt;h3>Scheduling and emitting a MachineInstr&lt;/h3>The code we have at this point is still represented as a DAG. But CPUs don’t execute DAGs, they execute a linear sequence of instructions. The goal of the scheduling step is to linearize the DAG by assigning an order to its operations (nodes). The simplest approach would be to just sort the DAG topologically, but LLVM’s code generator employs clever heuristics (such as register pressure reduction) to try and produce a schedule that would result in faster code.&lt;br />Each target has some hooks it can implement to affect the way scheduling is done. I won't dwell on this topic here, however.&lt;br />&lt;br />Finally, the scheduler emits a list of instructions into a &lt;tt class="docutils literal">MachineBasicBlock&lt;/tt>, using &lt;tt class="docutils literal">&lt;span class="pre">InstrEmitter::EmitMachineNode&lt;/span>&lt;/tt> to translate from &lt;tt class="docutils literal">SDNode&lt;/tt>. The instructions here take the &lt;tt class="docutils literal">MachineInstr&lt;/tt> form ("MI form" from now on), and the DAG can be destroyed.&lt;br />We can examine the machine instructions emitted in this step by calling &lt;tt class="docutils literal">llc&lt;/tt> with the &lt;tt class="docutils literal">&lt;span class="pre">-print-machineinstrs&lt;/span>&lt;/tt> flag and looking at the first output that says "After instruction selection":&lt;br />&lt;br />&lt;pre style="line-height: 125%;">&lt;span style="font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;">&lt;span style="font-size: x-small;">&lt;br /># After Instruction Selection:&lt;br /># Machine code for function foo: SSA&lt;br />Function Live Ins: %EDI in %vreg0, %ESI in %vreg1, %EDX in %vreg2&lt;br />Function Live Outs: %EAX&lt;br />&lt;br />BB#0: derived from LLVM BB %entry&lt;br /> Live Ins: %EDI %ESI %EDX&lt;br /> %vreg2&amp;lt;def&amp;gt; = COPY %EDX; GR32:%vreg2&lt;br /> %vreg1&amp;lt;def&amp;gt; = COPY %ESI; GR32:%vreg1&lt;br /> %vreg0&amp;lt;def&amp;gt; = COPY %EDI; GR32:%vreg0&lt;br /> %vreg3&amp;lt;def,tied1&amp;gt; = ADD32rr %vreg0&amp;lt;tied0&amp;gt;, %vreg1, %EFLAGS&amp;lt;imp-def,dead&amp;gt;; GR32:%vreg3,%vreg0,%vreg1&lt;br /> %EAX&amp;lt;def&amp;gt; = COPY %vreg3; GR32:%vreg3&lt;br /> CDQ %EAX&amp;lt;imp-def&amp;gt;, %EDX&amp;lt;imp-def&amp;gt;, %EAX&amp;lt;imp-use&amp;gt;&lt;br /> IDIV32r %vreg2, %EAX&amp;lt;imp-def&amp;gt;, %EDX&amp;lt;imp-def,dead&amp;gt;, %EFLAGS&amp;lt;imp-def,dead&amp;gt;, %EAX&amp;lt;imp-use&amp;gt;, %EDX&amp;lt;imp-use&amp;gt;; GR32:%vreg2&lt;br /> %vreg4&amp;lt;def&amp;gt; = COPY %EAX; GR32:%vreg4&lt;br /> %EAX&amp;lt;def&amp;gt; = COPY %vreg4; GR32:%vreg4&lt;br /> RET&lt;br />&lt;br /># End machine code for function foo.&lt;br />&lt;/span>&lt;/span>&lt;/pre>&lt;pre style="line-height: 125%;">&amp;nbsp;&lt;/pre>Note that the output mentions that the code is in SSA form, and we can see that some registers being used are "virtual" registers (e.g. &lt;tt class="docutils literal">%vreg1&lt;/tt>).&lt;br />&lt;div class="section" id="register-allocation-from-ssa-to-non-ssa-machine-instructions">&lt;h3>Register allocation – from SSA to non-SSA machine instructions&lt;/h3>Apart from some well-defined exceptions, the code generated from the instruction selector is in SSA form. In particular, it assumes it has an infinite set of "virtual" registers to act on. This, of course, isn’t true. Therefore, the next step of the code generator is to invoke a "register allocator", whose task is to replace virtual by physical registers, from the target’s register bank.&lt;br />&lt;br />The exceptions mentioned above are also important and interesting, so let’s talk about them a bit more.&lt;br />&lt;br />Some instructions in some architectures require fixed registers. A good example is our division instruction in x86, which requires its inputs to be in the EDX and EAX registers. The instruction selector knows about these restrictions, so as we can see in the code above, the inputs to &lt;tt class="docutils literal">IDIV32r&lt;/tt> are physical, not virtual registers. This assignment is done by &lt;tt class="docutils literal">&lt;span class="pre">X86DAGToDAGISel::Select&lt;/span>&lt;/tt>.&lt;br />&lt;br />The register allocator takes care of all the non-fixed registers. There are a few more optimization (and pseudo-instruction expansion) steps that happen on machine instructions in SSA form, but I’m going to skip these. Similarly, I’m not going to discuss the steps performed after register allocation, since these don’t change the basic form operations appear in (&lt;tt class="docutils literal">MachineInstr&lt;/tt>, at this point). If you’re interested, take a look at &lt;tt class="docutils literal">&lt;span class="pre">TargetPassConfig::addMachinePasses&lt;/span>&lt;/tt>.&lt;br />&lt;br />Here's the MIs dumped after register allocation:&lt;br />&lt;br />&lt;pre style="line-height: 125%;">&lt;span style="font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;">&lt;span style="font-size: x-small;">&lt;br /># After Virtual Register Rewriter:&lt;br /># Machine code for function foo: Post SSA&lt;br />Function Live Ins: %EDI in %vreg0, %ESI in %vreg1, %EDX in %vreg2&lt;br />Function Live Outs: %EAX&lt;br />&lt;br />0B BB#0: derived from LLVM BB %entry&lt;br /> Live Ins: %EDI %ESI %EDX&lt;br />16B %ECX&lt;def> = COPY %EDX&lt;br />64B %EAX&lt;def> = LEA64_32r %EDI&lt;kill>, 1, %ESI&lt;kill>, 0, %noreg&lt;br />96B CDQ %EAX&lt;imp-def>, %EDX&lt;imp-def>, %EAX&lt;imp-use>&lt;br />112B IDIV32r %ECX&lt;kill>, %EAX&lt;imp-def>, %EDX&lt;imp-def dead="dead">, %EFLAGS&lt;imp-def dead="dead">, %EAX&lt;imp-use>, %EDX&lt;imp-use>&lt;br />160B RET %EAX&lt;imp-use>&lt;br />&lt;br /># End machine code for function foo.&lt;br />&lt;/imp-use>&lt;/imp-use>&lt;/imp-use>&lt;/imp-def>&lt;/imp-def>&lt;/imp-def>&lt;/kill>&lt;/imp-use>&lt;/imp-def>&lt;/imp-def>&lt;/kill>&lt;/kill>&lt;/def>&lt;/def>&lt;/span>&lt;/span>&lt;/pre>&lt;br />&lt;/div>&lt;div class="section" id="emitting-code">&lt;h3>Emitting code&lt;/h3>So we now have our original C function translated to MI form – a &lt;tt class="docutils literal">MachineFunction&lt;/tt> filled with instruction objects (&lt;tt class="docutils literal">MachineInstr&lt;/tt>). This is the point at which the code generator has finished its job and we can emit the code. In current LLVM, there are two ways to do that. One is the (legacy) JIT which emits executable, ready-to-run code directly into memory. The other is MC, which is an ambitious object-file-and-assembly framework that’s been part of LLVM for a couple of years, replacing the previous assembly generator. MC is currently being used for assembly and object file emission for all (or at least the important) LLVM targets. MC also enables "MCJIT", which is a JIT-ting framework based on the MC layer. This is why I’m referring to LLVM’s JIT module as legacy.&lt;br />&lt;br />I will first say a few words about the legacy JIT and then turn to MC, which is more universally interesting.&lt;br />&lt;br />The sequence of passes to JIT-emit code is defined by &lt;tt class="docutils literal">&lt;span class="pre">LLVMTargetMachine::addPassesToEmitMachineCode&lt;/span>&lt;/tt>. It calls &lt;tt class="docutils literal">addPassesToGenerateCode&lt;/tt>, which defines all the passes required to do what most of this article has been talking about until now – turning IR into MI form. Next, it calls &lt;tt class="docutils literal">addCodeEmitter&lt;/tt>, which is a target-specific pass for converting MIs into actual machine code. Since MIs are already very low-level, it’s fairly straightforward to translate them to runnable machine code. The x86 code for that lives in &lt;tt class="docutils literal">lib/Target/X86/X86CodeEmitter.cpp&lt;/tt>. For our division instruction there’s no special handling here, because the &lt;tt class="docutils literal">MachineInstr&lt;/tt> it’s packaged in already contains its opcode and operands. It is handled generically with other instructions in &lt;tt class="docutils literal">emitInstruction&lt;/tt>.&lt;/div>&lt;h3>MCInst&lt;/h3>When LLVM is used as a static compiler (as part of &lt;tt class="docutils literal">clang&lt;/tt>, for instance), MIs are passed down to the MC layer which handles the object-file emission (it can also emit textual assembly files). Much can be said about MC, but that would require an article of its own. A good reference is &lt;a class="reference external" href="http://blog.llvm.org/2010/04/intro-to-llvm-mc-project.html">this post from the LLVM blog&lt;/a>. I will keep focusing on the path a single instruction takes.&lt;br />&lt;br />&lt;tt class="docutils literal">&lt;span class="pre">LLVMTargetMachine::addPassesToEmitFile&lt;/span>&lt;/tt> is responsible for defining the sequence of actions required to emit an object file. The actual MI-to-&lt;tt class="docutils literal">MCInst&lt;/tt> translation is done in the &lt;tt class="docutils literal">EmitInstruction&lt;/tt> of the &lt;tt class="docutils literal">AsmPrinter&lt;/tt> interface. For x86, this method is implemented by &lt;tt class="docutils literal">&lt;span class="pre">X86AsmPrinter::EmitInstruction&lt;/span>&lt;/tt>, which delegates the work to the &lt;tt class="docutils literal">X86MCInstLower&lt;/tt> class. Similarly to the JIT path, there is no special handling for our division instruction at this point, and it’s treated generically with other instructions.&lt;br />&lt;br />By passing &lt;tt class="docutils literal">&lt;span class="pre">-show-mc-inst&lt;/span>&lt;/tt> and &lt;tt>-show-mc-encoding&lt;/tt> to &lt;tt class="docutils literal">llc&lt;/tt>, we can see the MC-level instructions it creates with their encoding, alongside the actual assembly code:&lt;br />&lt;br />&lt;pre style="line-height: 125%;">&lt;span style="font-family: &amp;quot;Courier New&amp;quot;,Courier,monospace;">&lt;span style="font-size: x-small;">&lt;br />foo: # @foo&lt;br /># BB#0: # %entry&lt;br /> movl %edx, %ecx # encoding: [0x89,0xd1]&lt;br /> # &amp;lt;MCInst #1483 MOV32rr&lt;br /> # &amp;lt;MCOperand Reg:46&amp;gt;&lt;br /> # &amp;lt;MCOperand Reg:48&amp;gt;&amp;gt;&lt;br /> leal (%rdi,%rsi), %eax # encoding: [0x8d,0x04,0x37]&lt;br /> # &amp;lt;MCInst #1096 LEA64_32r&lt;br /> # &amp;lt;MCOperand Reg:43&amp;gt;&lt;br /> # &amp;lt;MCOperand Reg:110&amp;gt;&lt;br /> # &amp;lt;MCOperand Imm:1&amp;gt;&lt;br /> # &amp;lt;MCOperand Reg:114&amp;gt;&lt;br /> # &amp;lt;MCOperand Imm:0&amp;gt;&lt;br /> # &amp;lt;MCOperand Reg:0&amp;gt;&amp;gt;&lt;br /> cltd # encoding: [0x99]&lt;br /> # &amp;lt;MCInst #352 CDQ&amp;gt;&lt;br /> idivl %ecx # encoding: [0xf7,0xf9]&lt;br /> # &amp;lt;MCInst #841 IDIV32r&lt;br /> # &amp;lt;MCOperand Reg:46&amp;gt;&amp;gt;&lt;br /> ret # encoding: [0xc3]&lt;br /> # &amp;lt;MCInst #2227 RET&amp;gt;&lt;br />.Ltmp0:&lt;br /> .size foo, .Ltmp0-foo&lt;br />&lt;/span>&lt;/span>&lt;/pre>&lt;br />&lt;br />The object file (or assembly code) emission is done by implementing the &lt;tt class="docutils literal">MCStreamer&lt;/tt> interface. Object files are emitted by &lt;tt class="docutils literal">MCObjectStreamer&lt;/tt>, which is further subclassed according to the actual object file format. For example, ELF emission is implemented in &lt;tt class="docutils literal">MCELFStreamer&lt;/tt>. The rough path a &lt;tt class="docutils literal">MCInst&lt;/tt> travels through the streamers is &lt;tt class="docutils literal">&lt;span class="pre">MCObjectStreamer::EmitInstruction&lt;/span>&lt;/tt> followed by a format-specific &lt;tt class="docutils literal">EmitInstToData&lt;/tt>. The final emission of the instruction in binary form is, of course, target-specific. It’s handled by the &lt;tt class="docutils literal">MCCodeEmitter&lt;/tt> interface (for example &lt;tt class="docutils literal">X86MCCodeEmitter&lt;/tt>). While in the rest of LLVM code is often tricky because it has to make a separation between target-independent and target-specific capabilities, MC is even more challenging because it adds another dimension – different object file formats. So some code is completely generic, some code is format-dependent, and some code is target-dependent.&lt;br />&lt;h3>Assemblers and disassemblers&lt;/h3>A &lt;tt class="docutils literal">MCInst&lt;/tt> is deliberately a very simple representation. It tries to shed as much semantic information as possible, keeping only the instruction opcode and list of operands (and a source location for assembler diagnostics). Like LLVM IR, it’s an internal representation will multiple possible encodings. The two most obvious are assembly (as shown above) and binary object files.&lt;br />&lt;br />&lt;tt class="docutils literal">&lt;span class="pre">llvm-mc&lt;/span>&lt;/tt> is a tool that uses the MC framework to implement assemblers and disassemblers. Internally, &lt;tt class="docutils literal">MCInst&lt;/tt> is the representation used to translate between the binary and textual forms. At this point the tool doesn’t care which compiler produced the assembly / object file.&lt;br />&lt;br />&lt;h3>Conclusion&lt;/h3>&lt;br />Presenting a "big picture" view of a complex system as LLVM isn't easy. I hope that this article succeeds in giving some clues about the internal workings of LLVM in a way that is useful for further exploration. &lt;br />&lt;pre style="line-height: 125%;">&amp;nbsp;&lt;/pre>&lt;i>[This article is re-posted in a slightly expanded form &lt;a href="http://eli.thegreenplace.net/2012/11/24/life-of-an-instruction-in-llvm/">from here&lt;/a>]&lt;/i>&lt;br />&lt;br />&lt;br /></description></item><item><title>LLVM Developer Meeting 2011</title><link>https://blog.llvm.org/2012/01/llvm-developer-meeting-2011.html</link><pubDate>Tue, 03 Jan 2012 12:44:00 +0000</pubDate><guid>https://blog.llvm.org/2012/01/llvm-developer-meeting-2011.html</guid><description>The &lt;a href="http://www.llvm.org/devmtg/2011-11/">2011 LLVM Devloper Meeting&lt;/a> has come and gone, and it was a great event. It featured 17 great talks, several BOF sessions, a poster session, and lots of informal discussions between all sorts of people interested in LLVM and its subprojects. If you are interested in the talks, &lt;a href="http://www.llvm.org/devmtg/2011-11/">slides and videos&lt;/a> are now available.&lt;p> The Developer Meeting would not be possible without support from our sponsors. Many thanks to QuIC, Apple and Google.&lt;p> Happy 2012!&lt;p> -Chris</description></item><item><title>NVIDIA CUDA 4.1 Compiler Now Built on LLVM</title><link>https://blog.llvm.org/2011/12/nvidia-cuda-41-compiler-now-built-on.html</link><pubDate>Mon, 19 Dec 2011 14:28:00 +0000</pubDate><guid>https://blog.llvm.org/2011/12/nvidia-cuda-41-compiler-now-built-on.html</guid><description>From the NVIDIA CUDA compiler team:&lt;p> &lt;blockquote>CUDA is a parallel programming model and platform created by NVIDIA for harnessing the power of hundreds of cores in modern graphics processing units (GPUs). NVIDIA provides free support for CUDA C and C++ in the CUDA toolkit. The CUDA programming environment consists of a compiler targeting NVIDIA GPUs and has been adopted by thousands of developers.&lt;p> At NVIDIA we have switched over to using LLVM inside the CUDA C/C++ compiler for Fermi and future architectures. We use LLVM for optimizations and PTX code generation and for generating debug information for CUDA debugging. From a developer's perspective the new compiler is functionally on par with the previous compilers and produces better code with better compile times. We have extended the LLVM core compiler to understand data parallel programming model. It is now available, as part of CUDA 4.1 and you can &lt;a href="http://developer.nvidia.com/content/new-cuda-now-available">learn more here&lt;/a>.&lt;p> Our experience with the use of LLVM has been very positive, starting with a modern compiler infrastructure and with high quality optimizations contributed by a large community of developers. The effort required to learn LLVM infrastructure is quite small and reasonable. &lt;/blockquote></description></item><item><title>LLVM 3.1 vector changes</title><link>https://blog.llvm.org/2011/12/llvm-31-vector-changes.html</link><pubDate>Mon, 19 Dec 2011 04:10:00 +0000</pubDate><guid>https://blog.llvm.org/2011/12/llvm-31-vector-changes.html</guid><description>Intel uses the Low-Level Virtual Machine (LLVM) in a number of products, including the &lt;a href="http://software.intel.com/en-us/articles/vcsource-tools-opencl-sdk/">Intel® OpenCL SDK&lt;/a>. The SDK's implicit vectorization module generates LLVM-IR (intermediate representation) which uses vector types.&lt;p>LLVM-IR supports operations that use vector data types, and the LLVM code generator needs to do non-trivial work in order to efficiently compile vector operations into SIMD instructions. Recently, there were changes to the LLVM code generation that enabled better code generation for vector operations. In addition to many low level optimizations, this post talks about two major changes: the implementation of vector-select, and the support for vectors-of-pointers.&lt;a name='more'>&lt;/a>&lt;h2>The LLVM-IR select instruction&lt;/h2>The LLVM IR 'select' instruction is used to choose one value based on a condition. If the condition evaluates to 'True', the instruction returns the first value argument; otherwise, it returns the second value argument. For example:&lt;pre> %X = select i1 true, i8 17, i8 42 ; yields i8:17&lt;/pre>The 'select' instruction also supports vector data types, where the condition is a vector of boolean data type. If the condition is a vector of booleans (see above), then the selection is done per element.&lt;p>Vector-select instructions are very useful for vectorizing compilers, which use them to 'mask-out' inactive SIMD lanes. Until recently, the LLVM code generator did not support conditions with vector data types. Enabling them required enhancing several other areas of the code generator.&lt;h2>SSE blends&lt;/h2>Intel's SSE4.1 instruction set features the PBLENDVB instruction. This instruction selects byte values from registers XMM1 and XMM2, using a mask specified in the high bit of each byte in XMM0, and stores the values into XMM1. There are also other instructions for handling larger data types, such as 32-bit integers, etc. It may seem odd for the selector bits to be the high bit, but the vector-compare machine instructions also set the high bits, so that the compare and blend instructions can work together efficiently.&lt;p>As mentioned earlier, the LLVM-IR 'select' instruction represents the mask as a vector of booleans, which need to be translated into the high-bit of each SIMD vector element. This translation is done by the Type-Legalizer phase in the LLVM code generator.&lt;h2>Type Legalization&lt;/h2>The Type Legalizer is a code generation phase that converts operations of any arbitrary data type which is represented by the LLVM-IR, into operations that use types which are supported by the target machine. For example, on x86 architecture, general purpose registers support the types i8, i16, i32 and i64. These types are 'Legal' because they fit into a machine register. The type i24 is 'Illegal' because it does not match a native x86 machine register. The Type-Legalizer has a complex set of rules for legalizing different types, and in many cases the type legalization takes multiple steps.The Type-Legalizer has a number of strategies for handling illegal vector types:&lt;ul>&lt;li> Widening - The type-legalizer can widen vectors by adding additional elements. For example, the type &amp;lt;3 x float&amp;gt; would be widened to the legal type '&amp;lt;4 x float&amp;gt;'. &lt;/li>&lt;li> Splitting - The type-legalizer can split large vectors into smaller types. For example, a value of type &amp;lt;8 x float&amp;gt; can be split into two values of the legal type '&amp;lt;4 x float&amp;gt;'.&lt;/li>&lt;li> Scalarizing - The type-legalizer can break a vector into multiple scalars. For example, an operation of type &amp;lt;2 x i64&amp;gt; can be done on two 64-bit scalars using general purpose registers. &lt;/li>&lt;/ul>Notice that none of the strategies above can translate the type '&amp;lt;4 x i1&amp;gt;' into the register-sized type '&amp;lt;4 x i32&amp;gt;'. To support the code-generation of vector-select, we added a new legalization kind which can support the promotion of each element in the vector, rather than increasing the number of elements in the vector.&lt;p>LLVM already promotes small scalar integers into larger integers. For example, the type i8 is promoted to i32 on processors that do not support types smaller than 32 bits. Once the new type legalization technique was implemented, adding support for the select instruction was easy. Much like other instructions, a simple pattern in the TD file added support for different 'blend' instructions for different generations of the Intel Architecture (SSE4.1, AVX and AVX2). Processors that do not support the 'blend' instruction, lower the vector-select IR into a sequence of AND,XOR,OR with acceptable performance. &lt;h2>Optimizations for Element Promotion&lt;/h2>&lt;a href="http://2.bp.blogspot.com/-iEM0ks4VajM/Tu8sGVUjBcI/AAAAAAAAEao/Hn4uRBVoK7s/s1600/PackedStore.png">&lt;img alt="" border="0" id="BLOGGER_PHOTO_ID_5687813341706388930" src="http://2.bp.blogspot.com/-iEM0ks4VajM/Tu8sGVUjBcI/AAAAAAAAEao/Hn4uRBVoK7s/s320/PackedStore.png" style="cursor: hand; cursor: pointer; float: right; height: 132px; margin: 0 0 10px 10px; width: 320px;" />&lt;/a>The new type-legalization method for vectors and the new vector-select implementation is open for new optimizations. For example, consider the problem of saving a vector of type '&amp;lt;4 x i8&amp;gt;' into memory. The in-memory representation of this type is that of four consecutive bytes, but the vector's in-register representation is '&amp;lt;4 x i32&amp;gt;'. Without any additional optimizations, the naive way of saving the vector would be to extract each one of the bytes into a general purpose register and to save them one by one into memory. One of the optimizations that we added recently is to shuffle all of the saved bytes into the lower part of the vector and save the four bytes into memory using a single scalar 32 bit store.&lt;h2>Vectors of pointers&lt;/h2>Until recently, LLVM's vector type only contained elements which were integers or floating point. This abstraction matched the common SIMD instruction sets and enabled efficient code generation for many processors. In many cases vectorizing compilers wish to represent a vector of pointers, mainly for implementing scatter/gather memory operations. The lack of support in the IR made some vectorizing compilers worke around limitation by converting pointers to integers. This solution required the vectorizing compiler to implement address calculation manually, and added complexity to the software.&lt;p>To solve this, LLVM now supports the pointer-vector type, as well as the instructions to manipulate it. Much like other vector instructions, the pointer-vector can be created and modified using the instructions 'insertelement', 'extractelement' and 'shufflevector'. However, pointer-vector types would not be so useful without vector 'getelementptr' instructions. We extended LLVM's GEP instruction to support vectors of pointers. The new pointer-vector abstraction enables better code generation, even for processors which do not support explicit gather/scatter instructions, since address calculation is now done on vectors.The following code is now legal in LLVM:&lt;pre>define i32 @foo(&amp;lt;4 x i32*&amp;gt; %base, &amp;lt;4 x i32&amp;gt; %offset) nounwind { &lt;br/> entry: &lt;br/> %A2 = getelementptr &amp;lt;4 x i32*&amp;gt; %base, &amp;lt;4 x i32&amp;gt; %offset &lt;br/> %k = extractelement &amp;lt;4 x i32*&amp;gt; %A2, i32 3 &lt;br/> %v = load i32* %k &lt;br/> ret i32 %v &lt;br/> }&lt;/pre>We currently support only vectors of pointers to primitive types. In the future we may add additional capabilities and optimizations.&lt;h2>Conclusion&lt;/h2>Intel® OpenCL SDK features an implicit vectorization module which uses the LLVM compiler toolkit for code generation. We are continuing to improve LLVM's code generation support for vectors, in order to support future Intel Architectures.&lt;p>LLVM 3.1 will feature a number of changes that will enable vectorizing compilers to generate better code.</description></item><item><title>LLVM 3.0 Exception Handling Redesign</title><link>https://blog.llvm.org/2011/11/llvm-30-exception-handling-redesign.html</link><pubDate>Mon, 28 Nov 2011 13:16:00 +0000</pubDate><guid>https://blog.llvm.org/2011/11/llvm-30-exception-handling-redesign.html</guid><description>One of the biggest IR changes in the LLVM 3.0 release is a redesign and reimplementation of the LLVM IR exception handling model. The old model, while it worked for most cases, fell over in some key situations, leading to obscure miscompilations, missed optimizations, and poor compile time. This post talks about the changes in LLVM 3.0 and how to move an existing LLVM front-end to the new design. It assumes some familiarity with the Itanium C++ ABI for exception handling.&lt;a name='more'>&lt;/a>&lt;h2>Goals of the exception handling system&lt;/h2>Exception handling needs to be a first-class citizen of the LLVM IR. This allows us to manipulate the exception handling information in an intelligent fashion (e.g., during inlining). Also, code generation needs to be able to reliably find a variety of information associated specific &lt;tt>invoke&lt;/tt> call (e.g. the personality function for use with a call). Finally, we need to follow the established exception handling ABI to ensure binary compatibility with other compilers.&lt;p>While there are a lot of details to get right for exception handling to work (with regards to the ABI), our goal is to keep LLVM IR as simple to generate and manipulate as possible. By making EH a first-class citizen, the new instructions will have a simple, easily understood syntax and constraints which can be tested to ensure that the IR is correct after each code transformation.&lt;h2>The old exception handling system&lt;/h2>The old system used LLVM intrinsics to convey the exception handling information to the code generator. The primary problem with the old system is that there was nothing that bound these intrinsics to the invoke calls that could be unwound through, making code generation fragile, and optimizations like inlining impossible to represent (in the general case).&lt;p>Further, the intrinsics were very difficult for code transformations to maintain and update correctly: we would frequently get exception tables which had incorrect information in them (e.g., specifying that a specific type couldn't propagate past that point when it wasn't specified in the original program). It also couldn't handle "cleanup" situations without a lot of work.&lt;p>Because of normal code motion, the intrinsics, which held the information that the code generator needed to generate the correct tables, could be moved far away from the &lt;tt>invoke&lt;/tt> instruction they were associated with. I.e., they could be moved out of the &lt;tt>invoke&lt;/tt>'s landingpad. This made code generation of the previous exception handling constructs fragile, and sometimes caused miscompilations of exception handling code, which wasn't acceptable.&lt;p>A final (somewhat theoretical) issue is that the old system only worked with standard personality functions. It would be nearly impossible to use custom personality functions (e.g. that returned 3 registers in a landing pad instead of 2) with it. While we had no specific use case for this, we were unable to use custom personality functions to optimize code size or performance of C++ exceptions.&lt;h2>The LLVM 3.0 Exception Handling System&lt;/h2>The backbone of the new exception handling system are the two new instructions &lt;tt>landingpad&lt;/tt> and &lt;tt>resume&lt;/tt>:&lt;dl>&lt;dt>&lt;tt>&lt;a href="http://llvm.org/docs/LangRef.html#i_landingpad">landingpad&lt;/a>&lt;/tt>&lt;/dt> &lt;dd>Defines a landing pad basic block. It contains all of the information that's needed by the code generator to generate the correct EH tables. It's also required to be the first non-&lt;tt>PHI&lt;/tt> instruction in the unwind destination of an invoke instruction. In addition, a landing pad may &lt;em>only&lt;/em> be jumped to by the unwind edge of an &lt;tt>invoke&lt;/tt> instruction. These constraints ensure that it is always possible to accurately match up the unwind information with an invoke call. It replaces the&lt;tt>@llvm.eh.exception&lt;/tt> and &lt;tt>@llvm.eh.selector&lt;/tt>intrinsics.&lt;/dd>&lt;dt>&lt;tt>&lt;a href="http://llvm.org/docs/LangRef.html#i_resume">resume&lt;/a>&lt;/tt>&lt;/dt> &lt;dd>Causes the current exception to resume propagation up the stack. It replaces the &lt;tt>@llvm.eh.resume&lt;/tt> intrinsic.&lt;/dd>&lt;/dl>&lt;p>Here is a simple example of what the new syntax looks like. For this program:&lt;p>&lt;br />&lt;pre>&lt;br /> void bar();&lt;br /> void foo() throw (const char *) {&lt;br /> try {&lt;br /> bar();&lt;br /> } catch (int) {&lt;br /> }&lt;br /> }&lt;br />&lt;/pre>&lt;br />The IR looks like this:&lt;br />&lt;pre>&lt;br /> @_ZTIPKc = external constant i8*&lt;br /> @_ZTIi = external constant i8*&lt;br /> define void @_Z3foov() uwtable ssp {&lt;br /> entry:&lt;br /> invoke void @_Z3barv()&lt;br /> to label %try.cont unwind label %lpad&lt;br />&lt;br /> lpad:&lt;br /> &lt;b>%0 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)&lt;br /> catch i8* bitcast (i8** @_ZTIi to i8*)&lt;br /> filter [1 x i8*] [i8* bitcast (i8** @_ZTIPKc to i8*)]&lt;/b>&lt;br /> %1 = extractvalue { i8*, i32 } %0, 0&lt;br /> %2 = extractvalue { i8*, i32 } %0, 1&lt;br /> %3 = tail call i32 @llvm.eh.typeid.for(i8* bitcast (i8** @_ZTIi to i8*)) nounwind&lt;br /> %matches = icmp eq i32 %2, %3&lt;br /> br i1 %matches, label %catch, label %filter.dispatch&lt;br />&lt;br /> filter.dispatch:&lt;br /> %ehspec.fails = icmp slt i32 %2, 0&lt;br /> br i1 %ehspec.fails, label %ehspec.unexpected, label %eh.resume&lt;br />&lt;br /> ehspec.unexpected:&lt;br /> tail call void @__cxa_call_unexpected(i8* %1) no return&lt;br /> unreachable&lt;br />&lt;br /> catch:&lt;br /> %4 = tail call i8* @__cxa_begin_catch(i8* %1) nounwind&lt;br /> tail call void @__cxa_end_catch() nounwind&lt;br /> br label %try.cont&lt;br />&lt;br /> try.cont:&lt;br /> ret void&lt;br />&lt;br /> eh.resume:&lt;br /> &lt;b>resume { i8*, i32 } %0&lt;/b>&lt;br /> }&lt;br />&lt;/pre>&lt;br />The &lt;tt>landingpad&lt;/tt> instruction specifies the &lt;i>personality function&lt;/i>the EH runtime uses, a list of types which it can catch (&lt;tt>int&lt;/tt>), and a list of types which &lt;tt>foo&lt;/tt> is allowed to throw (&lt;tt>const char *&lt;/tt>).&lt;p>The &lt;tt>resume&lt;/tt> instruction resumes propagation of the exception if it's not caught and of an allowed type.&lt;h2>Converting to the LLVM 3.0 exception handling system&lt;/h2>Converting from the old EH API to the new EH API is rather simple because a lot of complexity has been removed. To generate the EH code in LLVM 2.9, you would have to do something akin to this:&lt;br />&lt;pre>&lt;br /> Function *ExcIntr =&lt;br /> Intrinsic::getDeclaration(TheModule, Intrinsic::eh_exception);&lt;br /> Function *SlctrIntr =&lt;br /> Intrinsic::getDeclaration(TheModule, Intrinsic::eh_selector);&lt;br /> Function *PersonalityFn =&lt;br /> Function::Create(FunctionType::get(Type::getInt32Ty(Context), true),&lt;br /> Function::ExternalLinkage,&lt;br /> "__gxx_personality_v0", TheModule);&lt;br />&lt;br /> // The exception pointer.&lt;br /> Value *ExnPtr = Builder.CreateCall(ExcIntr, "exn");&lt;br />&lt;br /> // The arguments to the @llvm.eh.selector instruction.&lt;br /> std::vector&amp;lt;Value*&amp;gt; Args; Args.push_back(ExnPtr);&lt;br /> Args.push_back(Builder.CreateBitCast(PersonalityFn,&lt;br /> Type::getInt8PtrTy(Context)));&lt;br />&lt;br /> &lt;i>// ... Complex code to add catch types, filters, cleanups, and catch-alls to Args ...&lt;/i>&lt;br />&lt;br /> // The selector call.&lt;br /> Value *Sel = Builder.CreateCall(SlctrIntr, Args, "exn.sel");&lt;br />&lt;/pre>&lt;br />You should instead generate a &lt;tt>landingpad&lt;/tt> instruction, that returns an exception object and selector value:&lt;br />&lt;pre>&lt;br /> LandingPadInst *LPadInst =&lt;br /> Builder.CreateLandingPad(StructType::get(Int8PtrTy, Int32Ty, NULL),&lt;br /> PersonalityFn, 0);&lt;br /> Value *ExnPtr = Builder.CreateExtractValue(LPadInst, 0);&lt;br /> Value *Sel = Builder.CreateExtractValue(LPadInst, 1);&lt;br />&lt;/pre>&lt;br />It's now trivial to add the individual clauses to the &lt;tt>landingpad&lt;/tt>instruction.&lt;br />&lt;pre>&lt;br /> &lt;b>&lt;i>// Adding a catch clause&lt;/i>&lt;/b>&lt;br /> Constant *TypeInfo = getTypeInfo();&lt;br /> LPadInst-&amp;gt;addClause(TypeInfo);&lt;br />&lt;br /> &lt;b>&lt;i>// Adding a C++ catch-all&lt;/i>&lt;/b>&lt;br /> LPadInst-&amp;gt;addClause(Constant::getNullValue(Builder.getInt8PtrTy()));&lt;br />&lt;br /> &lt;b>&lt;i>// Adding a cleanup&lt;/i>&lt;/b>&lt;br /> LPadInst-&amp;gt;setCleanup(true);&lt;br />&lt;br /> &lt;b>&lt;i>// Adding a filter clause&lt;/i>&lt;/b>&lt;br /> std::vector&amp;lt;Value*&amp;gt; TypeInfos;&lt;br /> Constant *TypeInfo = getFilterTypeInfo();&lt;br /> TypeInfos.push_back(Builder.CreateBitCast(TypeInfo, Builder.getInt8PtrTy()));&lt;br /> ArrayType *FilterTy = ArrayType::get(Int8PtrTy, TypeInfos.size());&lt;br /> LPadInst-&amp;lt;addClause(ConstantArray::get(FilterTy, TypeInfos));&lt;br />&lt;/pre>&lt;br />Converting from using the &lt;tt>@llvm.eh.resume&lt;/tt> intrinsic to the &lt;tt>resume&lt;/tt> instruction is trivial. It takes the exception pointer and exception selector values returned by the &lt;tt>landingpad&lt;/tt>instruction:&lt;br />&lt;pre>&lt;br /> Type *UnwindDataTy = StructType::get(Builder.getInt8PtrTy(),&lt;br /> Builder.getInt32Ty(), NULL);&lt;br /> Value *UnwindData = UndefValue::get(UnwindDataTy);&lt;br /> Value *ExcPtr = Builder.CreateLoad(getExceptionObjSlot());&lt;br /> Value *ExcSel = Builder.CreateLoad(getExceptionSelSlot());&lt;br /> UnwindData = Builder.CreateInsertValue(UnwindData, ExcPtr, 0, "exc_ptr");&lt;br /> UnwindData = Builder.CreateInsertValue(UnwindData, ExcSel, 1, "exc_sel");&lt;br /> Builder.CreateResume(UnwindData);&lt;br />&lt;/pre>&lt;br />&lt;h4>Conclusion&lt;/h4>The new EH system now works much better than the old system. It is much less fragile and complex. This makes it easier to understand when you have to read the IR to figure out what's going on. More importantly, it allows us to follow the ABI more closely than before.&lt;p>Better yet, it's rather straight-forward to convert from the old system to the new one. In fact, you may see your code become much simpler! If you're interested in more details and reference information, please see the &lt;a href="http://llvm.org/docs/ExceptionHandling.html">Exception Handling in LLVM IR&lt;/a> document.</description></item><item><title>LLVM 3.0 Type System Rewrite</title><link>https://blog.llvm.org/2011/11/llvm-30-type-system-rewrite.html</link><pubDate>Sat, 26 Nov 2011 09:04:00 +0000</pubDate><guid>https://blog.llvm.org/2011/11/llvm-30-type-system-rewrite.html</guid><description>One of the most pervasive IR (and thus compiler API) changes in LLVM 3.0 was a complete reimplementation of the LLVM IR type system. This change was long overdue (the original type system lasted from LLVM 1.0!) and made the compiler faster, greatly simplified a critical subsystem of VMCore, and eliminated some design points of IR that were frequently confusing and inconvenient. This post explains why the change was made along with how the new system works. &lt;a name='more'>&lt;/a>&lt;h3>Goals of the type system&lt;/h3> The &lt;a href="http://llvm.org/docs/LangRef.html#typesystem">LLVM IR type system&lt;/a> is a fairly straight-forward part of the IR. The type system consists of three major parts: primitive types (like 'double' and integer types), derived types (like structs, arrays and vectors), and a mechanism for handling forward declarations of types ('opaque').&lt;p> The type system has several important requirements that constrains its design: we want to be able to use efficient pointer equality checks to determine structural type equality, we want to allow late refinement of types (e.g. when linking, one module should be able to complete types in another module), we want it to be easy to express many different source languages, and we want a simple and predictable system.&lt;p> The only really difficult part of an IR type system is handling forward declarations of types. To see this, observe that the type system is actually represented with a complex graph of types (which is often cyclic). For example, a simple singly linked list of integers might be declared like this: &lt;pre>&lt;br /> %intlist = type { %intlist*, i32 }&lt;br />&lt;/pre> In this case, the type graph includes a StructType which points to an IntegerType and a PointerType. The PointerType points back to the StructType. In many real programs the graph is complex and heavily cyclic, particularly for C++ applications.&lt;p> With this as background, lets start by talking about how LLVM 2.9 and earlier worked. &lt;h3>The old type system&lt;/h3> The &lt;a href="http://llvm.org/releases/2.9/docs/LangRef.html#typesystem">LLVM 2.9&lt;/a> type system has all of the straight-forward pieces and represents forward type declarations with an instance of &lt;a href="http://llvm.org/releases/2.9/docs/LangRef.html#t_opaque">OpaqueType&lt;/a>. When this type is later resolved (e.g. at link time), a process know as "type refinement" &lt;em>updates all pointers&lt;/em> to the old OpaqueType to point to the new definition, mutating the type graph on the fly, and then deletes the original OpaqueType. For example, if a module contained: &lt;pre>&lt;br /> %T1 = type opaque&lt;br /> %T2 = type %T1*&lt;br />&lt;/pre> then T2 is a PointerType to an OpaqueType. If we resolve %T1 to {} (an empty struct), then %T2 &lt;em>mutates&lt;/em> to be a PointerType to the empty StructType. For more information on this, please see the &lt;a href="http://llvm.org/releases/2.9/docs/ProgrammersManual.html#TypeResolve ">type resolution section&lt;/a> of the LLVM 2.9 Programmer's Manual.&lt;p> &lt;h4>Ramifications of mutating and moving types&lt;/h4> Unfortunately, while conceptually simple, this type system had several problems. In order to guarantee that pointer equality checks work for structural type equivalence checks, VMCore is required to re-unique types whenever they are mutated during type resolution. This may not seem like such a big deal, but a single type refinement can cause hundreds of other types to be mutated, and it is quite common to refine hundreds or thousands of types (e.g. when linking an application for LTO). The performance of this was not acceptable, particularly because uniquing cyclic graphs requires full graphic isomorphism checks to be done, and our previous implementation was not algorithmically efficient.&lt;p> Another problem is that more than just types need to be updated: anything that contains a pointer to a type has to be updated, or it gets a dangling pointer. This issue manifested in a number of ways: for example every Value has a pointer to a type. In order to make the system a bit more efficient, Value::getType() actually performed a lazy "union find" step to ensure that it always returned a canonicalized and uniqued type. This made Value::getType() (a very common call) more expensive than it should be.&lt;p> An even worse problem that this "type updating" problem caused is when you were manipulating and building IR through the LLVM APIs. Because types could move, it was very easy to get dangling pointers, causing a lot of confusion and a lot of broken clients of the LLVM API. This was compounded by the fact that it was &lt;em>required&lt;/em> to use type refinement to build &lt;a href="http://llvm.org/releases/2.9/docs/ProgrammersManual.html#BuildRecType">simple recursive types&lt;/a>. We tried to make this simpler with the PATypeHolder and PATypeHandle classes, but they only worked if you used them exactly right and they were generally poorly understood.&lt;p> &lt;h4>Surprising behavior with type uniquing&lt;/h4> Many clients of LLVM, once they got things working, then quickly ran into a surprising aspect of type uniquing: type names were not part of the type system, they were an "on the side" data structure. The names were not taking into consideration during type uniquing, and you could have multiple names for one type (which led to a lot of confusion). For example, consider: &lt;pre>&lt;br /> %T1 = type opaque&lt;br /> @G1 = external global %T1*&lt;br />&lt;br /> %T2 = type {}&lt;br /> @G2 = external global %T2*&lt;br />&lt;/pre> If %T1 was later resolved to {}, then %T1 and %T2 would both become names for the same empty structure type, the type formerly known as "%T1*" would be unified with the type formerly known as "%T2*", and now the IR would print out as: &lt;pre>&lt;br /> %T1 = type {}&lt;br /> @G1 = external global %T1*&lt;br />&lt;br /> %T2 = type {}&lt;br /> @G2 = external global %T1*&lt;br />&lt;/pre> ... note that G2 now has type "%T1*"! This is because the names in the type system was just a hash table on the side, so that asmprinter would pick one of the arbitrarily large number of names for a type when printing. This was "correct", but highly confusing the folks who did not know the ins and outs of the type system, and not helpful behavior. It also made reading .ll dumps from a C++ compiler very difficult, because it is very common to have many structurally identical types with different names. &lt;h4>Type Up-references&lt;/h4> A final problem (that I don't want to dwell on too much) is that we previously could have the situation where a type existed that had no name at all. While this is fine from the type system graph's perspective, this made printing types impossible if they were cyclic and had no names. The solution to this problem was a system known as &lt;a href="http://llvm.org/releases/2.9/docs/LangRef.html#t_uprefs">type up-references&lt;/a>.&lt;p> Type up-references were an elegant solution that allowed the asmprinter (and parser) to be able to represent an arbitrary recursive type in finite space, without requiring names. For example, the %intlist example above could be represented as "{\2*, i32}". It also allowed for construction of some nice (but surprising) types like "\1*" which was a pointer to itself!&lt;p> Despite having some amount of beauty and elegance, type up-references were never well understood by most people and caused a lot of confusion. It is important to be able to strip the names out of an LLVM IR module (e.g. the -strip pass), but it is also important for compiler hackers to be able to understand the system! &lt;h4>Preparing for the new type system&lt;/h4> With all of these problems, I realized that LLVM needed a newer and simpler type system. However, it is also important that new versions of LLVM be able to read old .bc and .ll files. To enable this, the big rewrite was carefully staged: the LLVM 2.9 asmprinter was enhanced to emit opaque types as numbered types instead of using up-references. Therefore, instead of emitting the %intlist example with up-references, LLVM 2.9 would emit it as: &lt;pre>&lt;br /> %0 = type { %0*, i32 }&lt;br />&lt;/pre> The plan for LLVM 3.0 was to drop compatibility with LLVM 2.8 (and earlier) files, so this made the "upgrade" logic needed in LLVM 3.0 much simpler. &lt;h2>The LLVM 3.0 Type System&lt;/h2> To most clients, the new type system in LLVM 3.0 looks and smells a lot like the 2.9 type system. For example, .bc files and .ll files produced by LLVM 2.9 are readable and automatically upgraded to 3.0 features when read by the bitcode reader and .ll parser (though LLVM 3.1 will drop compatibility with 2.9). This is because the type system retains almost everything it had before: the primitive and derived types are the same, only OpaqueType has been removed and StructType has been enhanced.&lt;p> In short, instead of a refinement based type system where types mutate in memory (requiring re-uniquing and moving/updating of pointers), LLVM 3.0 uses a type system very similar to what C has, based on type &lt;em>completion&lt;/em>. Basically, instead of creating an opaque type and replacing it later, you now create an StructType with no body, then specify the body later. To create the %intlist type, you'd now write something like this: &lt;pre>&lt;br /> StructType *IntList = StructType::create(SomeLLVMContext, "intlist");&lt;br /> Type *Elts[] = { PointerType::getUnqual(IntList), Int32Type };&lt;br /> IntList->setBody(Elts);&lt;br />&lt;/pre> ... which is simple and to the point, much better than &lt;a href="http://llvm.org/releases/2.9/docs/ProgrammersManual.html#BuildRecType">the 2.9 way&lt;/a>. There are a few non-obvious ramifications to this design though. &lt;h4>Only struct types can be recursive&lt;/h4> In the previous type system, an OpaqueType could be resolved to any arbitrary type, allowing such oddities as "%t1 = type %t1*", which is a pointer to itself. In the new type system, only IR structure types can have their body missing, so it is impossible to create a recursive type that doesn't involve a struct. &lt;h4>Literal and Identified structs&lt;/h4> In the new type system, there are actually two different kinds of structure type: a "literal" structure (e.g. "{i32, i32}") and an "identified" structure (e.g. "%ty = type {i32, i32}").&lt;p> Identified structures are the kind we are talking about: they can have a name, and can have their body specified after the type is created. The identified structure is not uniqued with other structure types, which is why they are produced with StructType::create(...). Because identified types are potentially recursive, the asmprinter always prints them by their name (or a number like %42 if the identified struct has no name).&lt;p> Literal structure types work similarly to the old IR structure types: they never have names and are uniqued by &lt;em>structural&lt;/em> identity: this means that they must have their body elements available at construction time, and they can never be recursive. When printed by the asmprinter, they are always printed inline without a name. Literal structure types are created by the StructType::get(...) methods, reflecting that they are uniqued (the call may or may not actually allocate a new StructType).&lt;p> We expect that identified structure types will be the most common, and that a frontend will only produce a literal structure type in special cases. For example, it is reasonable to use literal structure types for tuples, complex numbers, and other simple cases where a name would be arbitrary and would make the IR more difficult to read. The optimizer doesn't care one way or the other, so if you're the author of a front-end, just use whatever you prefer to see in your IR dumps. &lt;h4>Identified structs have a 1-1 mapping with a name&lt;/h4> Where type names were kept as an "on the side" hash table before, they are now an intrinsic part of a type, and the only types that can be named are identified structs. This means that LLVM 3.0 doesn't exhibit the previous confusing behavior where two seemingly different structs would be printed with the same name. When stripping type names from a module, the identified structs just become anonymous: they are still 'identified', but they have no name. As with other anonymous entities in LLVM IR, they are asmprinted in a numeric form. &lt;h4>Struct names are uniqued at the LLVMContext level&lt;/h4> Because StructType::create always returns a new identified type, we need some behavior for when you try to create two types with the same name. The solution is that VMCore detects the conflict and autorenames the later request by adding a suffix to the type: when you request a "foo" type, you may actually get back a type named "foo.42". This is consistent with other IR objects like instructions and functions, and the names are uniqued at the LLVMContext level. &lt;h4>The Linker "links" types and retypes IR objects&lt;/h4> An interesting aspect of this design is that it makes the IR linker's job a bit more complex. Consider what happens when you link these two IR modules together: &lt;pre>&lt;br />x.ll:&lt;br /> %A = type { i32 }&lt;br /> @G = external global %A&lt;br />y.ll:&lt;br /> %A = type { i32 }&lt;br /> @G = global %A zeroinitializer&lt;br />&lt;/pre> The first thing the linker does is load the two modules into the same LLVMContext. Since the two types named "A" &lt;em>must be different&lt;/em> types, and since there can only be one type named %A, we actually get these two modules in memory: &lt;pre>&lt;br />x.ll module:&lt;br /> %A = type { i32 }&lt;br /> @G = external global %A&lt;br />y.ll module:&lt;br /> %A.1 = type { i32 }&lt;br /> @G = global %A.1 zeroinitializer&lt;br />&lt;/pre> ... and now it is quite clear that the @G objects have different types. When linking these two global variables, it is now up to the linker to remap the types of IR objects into a consistent set of types, and rewrite things into a consistent state. This requires the linker to compute the set of identical types and solve the same graph isomorphism problems that VMCore used to (see the "remapType" logic in lib/Linker/LinkModules.cpp if you're interested).&lt;p> Putting this logic in the IR linker instead of VMCore is better that the previous design on many levels: now the cost for this merging and uniquing is only paid by the IR linker, not by all bitcode reading and other IR creation code. The code is easier to understand and algorithmically optimize, because we're merging two complete graphs at once - instead of resolving types one at a time. Finally, this shrinks the size of VMCore by moving some complex logic out of it. &lt;h4>Identifying magic IR types in the optimizer (or later)&lt;/h4> As in LLVM 2.9, type names are not really designed to be used as semantic information in IR: we expect everything to continue working if the -strip pass is used to remove all extraneous names from the IR. However, for research and other purposes, it can sometimes be a convenient hack to propagate information from a front-end into LLVM IR by using type names. This will work reliably in LLVM 3.0 (so long as you don't run the strip pass or something equivalent) because identified types aren't uniqued. However, be aware that the suffix can be added and write your code to tolerate it.&lt;p> A more robust way to be able to identify a specific type in the optimizer (or some other point after the frontend has run) is to use a named metadata node to find the type. For example, if you want to find the %foo type, you could generate IR that looks like this: &lt;pre>&lt;br /> %foo = type { ... }&lt;br /> ...&lt;br /> !magic.types = !{ %foo zeroinitializer }&lt;br />&lt;/pre> Then to find the "foo" type, you'd just look up the "magic.types" named metadata, and get the type of the first element. Even if type names are stripped or types get auto-renamed, the type of the first element will always be correct and stable.&lt;p> There seems to be some confusion around named metadata: unlike instruction-level metadata, they will &lt;b>not&lt;/b> be dropped or invalidated by optimizer passes (so long as they don't point to functions or other IR objects that are modified by the optimizer). In general, named metadata is a much, much, better way to pass information from a frontend to an optimizer or backend than trying to play games with type names. &lt;h2>Conclusion&lt;/h2> In conclusion, the new type system has solved a number of long-standing problems in LLVM IR. If you're upgrading some code from LLVM 2.x to 3.x, it is likely to be something that you'll run into. Hopefully, this helps answer some common questions about why we made the change and how it works!&lt;p> -&lt;a href="http://nondot.org/sabre/">Chris Lattner&lt;/a></description></item><item><title>Greedy Register Allocation in LLVM 3.0</title><link>https://blog.llvm.org/2011/09/greedy-register-allocation-in-llvm-30.html</link><pubDate>Sun, 18 Sep 2011 21:34:00 +0000</pubDate><guid>https://blog.llvm.org/2011/09/greedy-register-allocation-in-llvm-30.html</guid><description>LLVM has two new register allocators: Basic and Greedy. When LLVM 3.0 is released, the default optimizing register allocator will no longer be linear scan, but the new greedy register allocator.&lt;br />With its global live range splitting, the greedy algorithm generates code that is 1-2% smaller, and up to 10% faster than code produced by linear scan.&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;h2> Lessons learned from linear scan&lt;/h2>Linear scan has been the default register allocator in LLVM since 2004. It has worked surprisingly well for such a simple algorithm. In fact, the simple design made it easier to tweak the algorithm in order to make small improvements to the generated code. More advanced register allocation algorithms often need to build expensive data structures, or they make assumptions about live ranges being invariant. That makes it difficult to, say, commute a two-address instruction on the fly, or rematerialize a constant pool load instead of spilling it to the stack.&lt;br />A new register allocation algorithm needs to preserve this simplicity. It must be possible to change the machine code while the algorithm is running.&lt;br />Linear scan depends on the virtual register rewriter to clean up the code after registers have been assigned. In theory, the rewriter should only rewrite virtual registers to their assigned physical registers, but it knows many other tricks. When linear scan does something silly like reloading a register from a stack slot twice, the rewriter will clean up the code by reusing the first register and eliminating the second reload. The algorithm is local, and it cannot clean up messes that extend beyond a single basic block. The rewriter always saves the day by removing obvious mistakes. It comes at a high price, though. It accounts for about half of the linear scan compile time, and its large collection of tricks makes the code very hard to maintain.&lt;br />A new register allocator should avoid making obvious mistakes so the rewriter can concentrate on rewriting registers.&lt;br />As the name implies, linear scan works by visiting live ranges in a linear order. It maintains an &lt;em>active list&lt;/em> of live ranges that are live at the current point in the function, and this is how it detects interference without computing the full interference graph. The active list is the key to linear scan's speed, but it is also its greatest weakness.&lt;br />When all physical registers are blocked by interfering live ranges in the active list, a live range is selected for spilling. Live ranges being spilled without being split first cause the mess that the rewriter is working so hard to clean up. We would much rather split them into smaller pieces that might be assignable, but this would require the linear scan algorithm to backtrack. This is very expensive, and full live range splitting isn't really feasible with linear scan.&lt;br />&lt;h2> Basic allocator&lt;/h2>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="http://2.bp.blogspot.com/-wd-VjahgQ7s/Uf2yGLeR9QI/AAAAAAAAAAc/Rf-W3y1fKPA/s1600/rabasic.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;">&lt;img border="0" src="http://2.bp.blogspot.com/-wd-VjahgQ7s/Uf2yGLeR9QI/AAAAAAAAAAc/Rf-W3y1fKPA/s1600/rabasic.png" />&lt;/a>&lt;/div>The new basic allocator does away with linear scan's dependence on visiting live ranges in linear order. Instead, it uses a priority queue to visit live range in order of decreasing spill weight. The active list used for interference checks is replaced with a set of &lt;em>live interval unions&lt;/em>. Implemented as a B+ tree per physical register, they are an efficient way of checking for interference with already assigned live ranges. Unlike the active list, live interval unions work with any priority queue order.&lt;br />When a live range cannot be assigned to any physical register in its register class, it is spilled. Because live ranges are assigned in order of decreasing spill weight, all the interfering live ranges in the live interval union have a higher spill weight. It is not necessary to look for a better spill candidate.&lt;br />On CISC architectures, the spill slot memory accesses can often be folded into existing instructions. On RISC architectures, explicit load and store instructions must be inserted. This will also create new tiny live ranges between the spill code and the original instructions using the spilled live range. These new live ranges are put back on the priority queue with an infinite spill weight—they cannot be spilled again.&lt;br />Technically, these small live ranges with high spill weight should have been assigned first, but the basic allocator never backtracks. Therefore, it can happen that such a live range is blocked by already assigned live ranges with smaller spill weights. In that case, the allocator picks a physical register and spills the interfering live ranges assigned to that register instead.&lt;br />The basic allocator produces code very similar to linear scan's output, and it also depends on the virtual register rewriter to clean up the code for good results. It doesn't offer significant advantages over linear scan, and it is intended mostly for testing the framework of priority queues and live interval unions. The basic algorithm is very simple, and it offers many opportunities for tweaking. Greedy does just that.&lt;br />&lt;h2> Greedy allocator&lt;/h2>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="http://4.bp.blogspot.com/-4fMcjz5dFzE/Uf2yVe2AE5I/AAAAAAAAAAk/Jz0XiwrwHxA/s1600/ragreedy.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;">&lt;img border="0" src="http://4.bp.blogspot.com/-4fMcjz5dFzE/Uf2yVe2AE5I/AAAAAAAAAAk/Jz0XiwrwHxA/s1600/ragreedy.png" />&lt;/a>&lt;/div>The first thing to notice about the basic algorithm is that its priority queue order doesn't work well for coloring registers optimally. Spill weights are computed as use densities, and small live ranges tend to have high spill weights. This means that all the tiny live ranges are allocated first. They use up the first registers in the register class, and the large live ranges get to fight over the leftovers. Most of them end up spilling.&lt;br />Greedy avoids this problem by allocating the large live ranges first. This makes the full register class available for the large ranges, and the small ranges can often fit in the gaps. Some functions have too many large live ranges, so there is not enough room for all the small live ranges. It would be really bad to spill small live ranges with high spill weights, so instead already assigned live ranges with lower spill weight can be evicted from the live range union. Evicted live ranges are unassigned from their physical register and put back in the priority queue. They get a second chance at being assigned somewhere else, or they can move on to &lt;em>live range splitting&lt;/em>.&lt;br />When a live range cannot find interfering live ranges it is allowed to evict, it is not spilled right away. If possible, it is split into smaller pieces that are put back on the priority queue. This is a very important optimization. A large live range may be idle a lot of the time, but used intensively in a hot loop. By creating a separate live range covering the hot loop, there is a good chance it will be assigned a register. The remaining live range may spill outside the loop where it was idle anyway. A live range is only spilled when the splitter decides that splitting it won't help. That usually happens after all the busy regions have been separated, and the remaining live range only has a few copies to and from the busy registers.&lt;br />The interaction between live range splitting and eviction creates a process of gradual refinement. As live ranges are split around busy regions, they get a higher spill weight. This may allow them to evict older live ranges that are less busy in that region. The evicted ranges are split, and so on.&lt;br />The gradual process of splitting usually terminates before the live ranges become tiny, and the end result is a set of live ranges covering multiple instructions, or even multiple basic blocks. This means that there is nothing for the rewriter to clean up, and indeed greedy uses a completely trivial rewriter that is 85 lines of code compared to 2600 in the old rewriter.&lt;br />The code generated by the greedy algorithm is almost always better than what linear scan can do. Usually this is because live range splitting was able to eliminate spill code from loops. Greedy does know some more tricks, though.&lt;br />&lt;h2> Tweaks&lt;/h2>It was an important design goal to make the algorithm as flexible as possible, and to avoid introducing arbitrary constraints. It is possible to change machine code and live ranges at any time. Simply evict the relevant live ranges, make the change, and put them back on the queue.&lt;br />This flexibility allows many tweaks to the register allocator:&lt;br />&lt;ul>&lt;li>Register preferences. Function arguments are passed in specific physical registers defined by the ABI. LLVM represents this with copies between physical and virtual registers before and after function calls. The register allocator tries to assign the virtual registers to the same physical registers, so the copies can be eliminated. Linear scan was never really good at this—the preferred physical register had often been occupied by an earlier assignment. Greedy can simply evict the earlier assignment when that happens.&lt;/li>&lt;li>Prefer small encodings. On architectures like ARM Thumb2 and x86-64, some registers require a larger instruction encoding. Greedy will evict less important live ranges from the cheap registers before it assigns an expensive register. This means that the larger instruction encodings are used less often, and overall code size decreases.&lt;/li>&lt;li>Dead code elimination. Optimizations like rematerialization cause live ranges to be shorter, or even completely unused. Greedy will recompute the live ranges exactly, and recursively eliminate dead code.&lt;/li>&lt;li>Register class inflation. Live range splitting creates virtual registers that are used by fewer instructions. This sometimes lifts a constraint, so the virtual register can be moved to a larger register class. Depending on the architecture, this can double the number of registers available to the new live range.&lt;/li>&lt;/ul>The greedy register allocator still has lots of room for improvement. That was the whole point of replacing linear scan.</description></item><item><title>LLVM @ "The Architecture of Open Source Applications"</title><link>https://blog.llvm.org/2011/05/llvm-architecture-of-open-source.html</link><pubDate>Sun, 29 May 2011 20:37:00 +0000</pubDate><guid>https://blog.llvm.org/2011/05/llvm-architecture-of-open-source.html</guid><description>&lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="http://www.aosabook.org/images/cover1.jpg" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;">&lt;img border="0" src="http://www.aosabook.org/images/cover1.jpg" height="250" width="190" />&lt;/a>&lt;/div>&lt;br />LLVM is featured in &lt;a href="http://www.aosabook.org/en/llvm.html">a chapter&lt;/a> of the new book &lt;a href="http://www.aosabook.org/">The Architecture of Open Source Applications&lt;/a>. This chapter talks about the high-level design of LLVM, and how it differs from other contemporary compilers and JITs out there, why you might want to use it (if you're looking for compiler libraries), a simple example of writing an optimization, how the code is structured, a 10,000 foot view of how the code generator works, and some of the interesting capabilities LLVM has due to its design. If you're curious what this whole LLVM thing is, then this is a great place to start.&lt;br />&lt;br />This book is &lt;a href="http://www.aosabook.org/en/index.html#purchase">available inexpensively&lt;/a> in dead tree or PDF form, and the author royalties are donated to charity. The content is &lt;a href="http://www.aosabook.org/en/llvm.html">also available for free&lt;/a> under the creative commons license. Share and enjoy,&lt;br />&lt;br />-&lt;a href="http://nondot.org/sabre/">Chris Lattner&lt;/a></description></item><item><title>C++ at Google: Here Be Dragons</title><link>https://blog.llvm.org/2011/05/c-at-google-here-be-dragons.html</link><pubDate>Mon, 23 May 2011 13:00:00 +0000</pubDate><guid>https://blog.llvm.org/2011/05/c-at-google-here-be-dragons.html</guid><description>Google has one of the largest monolithic C++ codebases in the world. We have thousands of engineers working on millions of lines of C++ code every day. To help keep the entire thing running and all these engineers fast and productive we have had to build some unique C++ tools, centering around the Clang C++ compiler. These help engineers understand their code and prevent bugs before they get to our production systems.&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;i>(Cross-posted on the &lt;a href="http://google-engtools.blogspot.com/2011/05/c-at-google-here-be-dragons.html">Google Engineering Tools Blog&lt;/a>)&lt;/i>&lt;br />&lt;br />Of course, improving the speed of Google engineers—their productivity—doesn’t always correlate to &lt;i>speed&lt;/i> in the traditional sense. It requires the holistic acceleration of Google’s engineering efforts. Making any one tool faster just doesn’t cut it; the entire process has to be improved from end to end.&lt;br />&lt;br />As a performance junkie, I like to think of this in familiar terms. It’s analogous to an &lt;b>algorithmic&lt;/b> performance improvement. You get “algorithmic” improvements in productivity when you reduce the total work required for an engineer to get the job done, or fundamentally shift the time scale that the work requires. However, improving the time a single task requires often runs afoul of all the adages about performance tuning, 80/20 rules, and the pitfalls of over-optimizing.&lt;br />&lt;br />One of the best ways to get these algorithmic improvements to productivity is to completely remove a set of tasks. Let’s take the task of triaging and debugging serious production bugs. If you’ve worked on a large software project, you’ve probably seen bugs which are somehow missed during code review, testing, and QA. When these bugs make it to production they cause a massive drain on developer productivity as the engineers cope with outages, data loss, and user complaints.&lt;br />&lt;br />What if we could build a tool that would find these exact kinds of bugs in software automatically? What if we could prevent them from ever bringing down a server, reaching a user’s data, or causing a pager to go off? Many of these bugs boil down to simple C++ programming errors. Consider this snippet of code:&lt;br />&lt;pre>&lt;br />Response ProcessRequest(Widget foo, Whatsit bar, bool *charge_acct) {&lt;br /> // Do some fancy stuff...&lt;br /> if (/* Detect a subscription user */) {&lt;br /> charge_acct = false;&lt;br /> }&lt;br /> // Lots more fancy stuff...&lt;br />}&lt;/pre>&lt;br />&lt;br />Do you see the bug? Careful testing and code reviews catch these and other bugs constantly, but inevitably one will sneak through, because the code &lt;b>looks fine&lt;/b>. It says that it shouldn’t charge the account right there, plain as day. Unfortunately, C++ insists that ‘false’ is the same as ‘0’ which can be a pointer just as easily as it can be a boolean flag. This code sets the pointer to NULL, and never touches the flag.&lt;br />&lt;br />Humans aren’t good at spotting this type of devious typo, any more than humans are good at translating C++ code into machine instructions. We have tools to do that, and the tool of choice in this case is the compiler. Not just any compiler will do, because while the code above is &lt;em>one&lt;/em> example of a bug, we need to teach our compiler to find lots of other examples. We also have to be careful to make certain that developers will act upon the information these tools provide. Within Google’s C++ codebase, that means we break the build for every compiler diagnostic, even warnings. We continually need to enhance our tools to find new bugs in new code based on new patterns, all while maintaining enough precision to immediately break the build and have high confidence that the code is wrong.&lt;br />&lt;br />To address these issues we started a project at Google which is working with the &lt;a href="http://llvm.org/">LLVM Project&lt;/a> to develop the &lt;a href="http://clang.llvm.org/">Clang&lt;/a> C++ compiler. We can rapidly add warnings to Clang and customize them to emit precise diagnostics about dangerous and potentially buggy constructs. Clang is designed as a collection of libraries with the express goal of supporting diverse tools and application uses. These libraries can be directly integrated into IDEs and commandline tools while still forming the core of the compiler itself.&lt;br />&lt;br />We’ve been working on Clang for over a year now so that it can understand and reason about all of the C++ code at Google. But building the tools and technology to catch these bugs is only half the battle; we have to get engineers to &lt;em>use&lt;/em> them as well. When other teams at Google respond to production bugs, our team will often begin working to enable any Clang diagnostics that might have caught the bug. Within one week of production issues, we can sweep the entire code base using these diagnostics to fix any latent bugs.&lt;br />&lt;br />Recently we enabled the Clang C++ compiler for every C++ build at Google in order to provide accurate and helpful warnings and diagnostics to engineers. Some examples of how Clang can help developers with bad code are discussed on &lt;a href="http://blog.llvm.org/2010/04/amazing-feats-of-clang-error-recovery.html"> this post&lt;/a> to the LLVM blog. Beyond that, once we have swept the codebase with a bug-finding diagnostic, we can enable it for all our engineers to catch future bugs before they’re committed. These diagnostics break the entire build of that piece of software to ensure that they aren’t ignored and are acted on immediately. For the code sample above, the user gets an error message:&lt;br />&lt;pre>&lt;br />&lt;b>example1.cc:4:17: error: initialization of pointer of type 'bool *' from literal 'false' [-Werror,-Wbool-conversions]&lt;/b>&lt;br /> charge_acct = false;&lt;br /> &lt;b>^&lt;/b>&lt;/pre>&lt;br />&lt;br />Here are two other classes of bugs we’ve found::&lt;br />&lt;pre>&lt;br />long kMaxDiskSpace = 10 &amp;lt;&amp;lt; 30; // Ten gigs ought to be enough for anybody.&lt;br />&lt;br />void SomeService() {&lt;br /> // Setup task using external resource...&lt;br /> while (/* Check if resource is available yet ... */) {&lt;br /> sleep(0.5); // Yield the CPU&lt;br /> }&lt;br />}&lt;/pre>&lt;br />&lt;br />Which now trigger the following errors:&lt;br />&lt;pre>&lt;br />&lt;b>example2.cc:12:25: error: shift result (10737418240) requires 35 bits to represent, but 'int' only has 32 bits [-Werror,-Wshift-overflow]&lt;/b>&lt;br />long kMaxDiskSpace = 10 &amp;lt;&amp;lt; 30;&lt;br /> &lt;b>~~ ^ ~~&lt;/b>&lt;br />&lt;b>example2.cc:16:11: error: implicit conversion turns literal floating-point number into integer: 'double' to 'unsigned int' [-Werror,-Wliteral-conversion]&lt;/b>&lt;br /> sleep(0.5);&lt;br /> &lt;b>~~~~~ ^~~&lt;/b>&lt;/pre>&lt;br />&lt;br />All of these represent real bugs that we have found in our code, and that we are catching and fixing with the help of Clang today.&lt;br />&lt;br />Clang and its diagnostics don’t in any way obviate the need for careful code review and thorough testing. Rather, they complement these practices, combining to help reduce the number of bugs in our code. This is the platform on which we are developing new and better diagnostics for engineers going forward. This is how we are providing an algorithmic improvement to their productivity, and accelerating Google.&lt;br />&lt;br />Stay tuned for more posts about how we rolled Clang out to Google engineers, how we have enhanced Clang to make it even more relevant for our code and our developers’ needs, and some of the exciting tools we’re building on top of this platform.</description></item><item><title>What Every C Programmer Should Know About Undefined Behavior #3/3</title><link>https://blog.llvm.org/2011/05/what-every-c-programmer-should-know_21.html</link><pubDate>Sat, 21 May 2011 00:48:00 +0000</pubDate><guid>https://blog.llvm.org/2011/05/what-every-c-programmer-should-know_21.html</guid><description>In &lt;a href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html">Part 1&lt;/a> of the series, we took a look at undefined behavior in C and showed some cases where it allows C to be more performant than "safe" languages. In &lt;a href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html">Part 2&lt;/a>, we looked at the surprising bugs this causes and some widely held misconceptions that many programmers have about C. In this article, we look at the challenges that compilers face in providing warnings about these gotchas, and talk about some of the features and tools that LLVM and Clang provide to help get the performance wins, while taking away some of the surprise.&lt;br />&lt;a name='more'>&lt;/a>&lt;br /> Translation available in: &lt;a href="http://blog-ja.intransient.info/2011/06/c-33.html">Japanese&lt;/a> &lt;h2>Why can't you warn when optimizing based on undefined behavior?&lt;/h2>&lt;br />People often ask why the compiler doesn't produce warnings when it is taking advantage of undefined behavior to do an optimization, since any such case might actually be a bug in the user code. The challenges with this approach are that it is 1) likely to generate far too many warnings to be useful - because these optimizations kick in all the time when there is no bug, 2) it is really tricky to generate these warnings only when people want them, and 3) we have no good way to express (to the user) how a series of optimizations combined to expose the opportunity being optimized. Lets take each of these in turn:&lt;br />&lt;br />&lt;b>It is "really hard" to make it actually useful&lt;/b>&lt;br />&lt;br />Lets look at an example: even though invalid type casting bugs are frequently exposed by type based alias analysis, it would not be useful to produce a warning that "the optimizer is assuming that P and P[i] don't alias" when optimizing "zero_array" (from &lt;a href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html">Part #1 of our series&lt;/a>).&lt;br />&lt;br />&lt;pre>float *P;&lt;br /> void zero_array() {&lt;br /> int i;&lt;br /> for (i = 0; i &amp;lt; 10000; ++i)&lt;br /> P[i] = 0.0f;&lt;br />}&lt;br />&lt;/pre>&lt;br />Beyond this "false positive" problem, a logistical problem is that the optimizer doesn't have enough information to generate a reasonable warning. First of all, it is working on an already-abstract representation of the code (&lt;a href="http://llvm.org/docs/LangRef.html">LLVM IR&lt;/a>) which is quite different from C, and second, the compiler is highly layered to the point where the optimization trying to "hoist a load from P out of the loop" doesn't know that TBAA was the analysis that resolved the pointer alias query. Yes, this is "the compiler guy whining" part of the article :), but it really is a hard problem.&lt;br />&lt;br />&lt;b>It is hard to generate these warnings &lt;i>only&lt;/i> when people want them&lt;/b>&lt;br />&lt;br />Clang implements numerous warnings for simple and obvious cases of undefined behavior, such as out of range shifts like "x &amp;lt;&amp;lt; 421". You might think that this is a simple and obvious thing, but it turns out that this is hard, because &lt;a href="http://llvm.org/bugs/show_bug.cgi?id=5544">people don't want to get warnings about undefined behavior in dead code&lt;/a> (see also &lt;a href="http://llvm.org/bugs/show_bug.cgi?id=6933">the duplicates&lt;/a>).&lt;br />&lt;br />This dead code can take several forms: a macro that expands out in a funny way when when passed a constant, we've even had complaints that we warn in cases that would require &lt;a href="http://llvm.org/bugs/show_bug.cgi?id=9322">control flow analysis&lt;/a> of switch statements to prove that cases are not reachable. This is not helped by the fact that switch statements in C are &lt;a href="http://en.wikipedia.org/wiki/Duff's_device">not necessarily properly structured&lt;/a>.&lt;br />&lt;br />The solution to this in Clang is a growing infrastructure for handling "runtime behavior" warnings, along with code to prune these out so that they are not reported if we later find out that the block is unexecutable. This is something of an arms race with programmers though, because there are always idioms that we don't anticipate, and doing this sort of thing in the frontend means that it doesn't catch every case people would want it to catch.&lt;br />&lt;br />&lt;b>Explaining a series of optimizations that exposed an opportunity&lt;/b>&lt;br />&lt;br />If the frontend has challenges producing good warnings, perhaps we can generate them &lt;em>from the optimizer&lt;/em> instead! The biggest problem with producing a useful warning here is one of data tracking. A compiler optimizer includes dozens of optimization passes that each change the code as it comes through to canonicalize it or (hopefully) make it run faster. If the inliner decides to inline a function, this may expose other opportunities for &lt;a href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html#signed_overflow">optimizing away an "X*2/2"&lt;/a>, for example.&lt;br />&lt;br />While I've given &lt;a href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html#optimizations">relatively simple and self-contained examples&lt;/a> to demonstrate these optimizations, most of the cases where they kick in are in code coming from macro instantiation, inlining, and other abstraction-elimination activities the compiler performs. The reality is that humans don't commonly write such silly things directly. For warnings, this means that in order to relay back the issue to the users code, the warning would have to reconstruct exactly how the compiler got the intermediate code it is working on. We'd need the ability to say something like:&lt;br />&lt;br />&lt;blockquote>&lt;tt>&lt;br />warning: after 3 levels of inlining (potentially across files with Link Time Optimization), some common subexpression elimination, after hoisting this thing out of a loop and proving that these 13 pointers don't alias, we found a case where you're doing something undefined. This could either be because there is a bug in your code, or because you have macros and inlining and the invalid code is dynamically unreachable but we can't prove that it is dead.&lt;/tt>&lt;/blockquote>&lt;br />Unfortunately, we simply don't have the internal tracking infrastructure to produce this, and even if we did, the compiler doesn't have a user interface good enough to express this to the programmer.&lt;br />&lt;br />Ultimately, undefined behavior is valuable to the optimizer because it is saying "this operation is invalid - you can assume it never happens". In a case like "*P" this gives the optimizer the ability to reason that P cannot be NULL. In a case like "*NULL" (say, after some constant propagation and inlining), this allows the optimizer to know that the code must not be reachable. The important wrinkle here is that, because it cannot solve the halting problem, the compiler cannot know whether code is actually dead (as the C standard says it must be) or whether it is a bug that was exposed after a (potentially long) series of optimizations. Because there isn't a generally good way to distinguish the two, almost all of the warnings produced would be false positives (noise).&lt;br />&lt;br />&lt;h2>Clang's Approach to Handling Undefined Behavior&lt;/h2>&lt;br />Given the sorry state that we're in when it comes to undefined behavior, you might be wondering what Clang and LLVM are doing to try to improve the situation. I mentioned a couple of them already: the &lt;a href="http://clang-analyzer.llvm.org/">Clang Static Analyzer&lt;/a>, &lt;a href="http://klee.llvm.org/">Klee project&lt;/a>, and the &lt;tt>-fcatch-undefined-behavior&lt;/tt> flag are useful tools for tracking down some classes of these bugs. The problem is that these aren't as widely used as the compiler is, so anything we can do directly in the compiler offers even higher goodness than doing it in these other tools. Keep in mind though that the compiler is limited by not having dynamic information and by being limited to what it can without burning lots of compile time.&lt;br />&lt;br />Clang's first step to improve the world's code is to turn on a whole lot more warnings by default than other compilers do. While some developers are disciplined and build with "&lt;tt>-Wall -Wextra&lt;/tt>" (for example), many people don't know about these flags or don't bother to pass them. Turning more warnings on by default catches more bugs more of the time.&lt;br />&lt;br />The second step is that Clang generates warnings for many classes of undefined behavior (including dereference of null, oversized shifts, etc) that are obvious in the code to catch some common mistakes. Some of the caveats are mentioned above, but these seem to work well in practice.&lt;br />&lt;br />The third step is that the LLVM optimizer generally takes much less liberty with undefined behavior than it could. Though the standard says that any instance of undefined behavior has completely unbound effects on the program, this is not a particularly useful or developer friendly behavior to take advantage of. Instead, the LLVM optimizer handles these optimizations in a few different ways (the links describe rules of LLVM IR, not C, sorry!):&lt;br />&lt;br />&lt;ol>&lt;li>Some cases of undefined behavior are silently transformed into implicitly trapping operations if there is a good way to do that. For example, with Clang, this C++ function:&lt;br />&lt;br />&lt;pre>int *foo(long x) {&lt;br /> return new int[x];&lt;br />}&lt;br />&lt;/pre>&lt;br />compiles into this X86-64 machine code:&lt;br />&lt;br />&lt;pre>__Z3fool:&lt;br /> movl $4, %ecx&lt;br /> movq %rdi, %rax&lt;br /> mulq %rcx&lt;br /> movq $-1, %rdi # Set the size to -1 on overflow&lt;br /> cmovnoq %rax, %rdi # Which causes 'new' to throw std::bad_alloc&lt;br /> jmp __Znam&lt;br />&lt;/pre>&lt;br />instead of the code GCC produces:&lt;br />&lt;br />&lt;pre>__Z3fool:&lt;br /> salq $2, %rdi&lt;br /> jmp __Znam # Security bug on overflow!&lt;br />&lt;/pre>&lt;br />The difference here is that we've decided to invest a few cycles in preventing a potentially &lt;a href="http://cert.uni-stuttgart.de/advisories/calloc.php">serious integer overflow bug&lt;/a> that can lead to buffer overflows and exploits (operator new is typically fairly expensive, so the overhead is almost never noticable). The GCC folks have been aware of this &lt;a href="http://gcc.gnu.org/bugzilla/show_bug.cgi?id=19351">since at least 2005&lt;/a> but haven't fixed this at the time of this writing.&lt;/li>&lt;li>Arithmetic that &lt;a href="http://llvm.org/docs/LangRef.html#undefvalues">operates on undefined values&lt;/a> is considered to produce a undefined value instead of producing undefined behavior. The distinction is that undefined values can't format your hard drive or produce other undesirable effects. A useful refinement happens in cases where the arithmetic would produce the same output bits given any possible instance of the undefined value. For example, the optimizer assumes that the result of "undef &amp;amp; 1" has zeros for its top bits, treating only the low bit as undefined. This means that ((undef &amp;amp; 1) &amp;gt;&amp;gt; 1) is defined to be 0 in LLVM, not undefined.&lt;/li>&lt;li>Arithmetic that dynamically executes an undefined operation (such as a signed integer overflow) generates a logical &lt;a href="http://llvm.org/docs/LangRef.html#trapvalues">trap value&lt;/a> which poisons any computation based on it, but that does not destroy your entire program. This means that logic downstream from the undefined operation may be affected, but that your entire program isn't destroyed. This is why the optimizer ends up deleting code that operates on uninitialized variables, for example.&lt;/li>&lt;li>Stores to null and calls through null pointers are turned into a __builtin_trap() call (which turns into a trapping instruction like "ud2" on x86). These happen all of the time in optimized code (as the result of other transformations like inlining and constant propagation) and we used to just delete the blocks that contained them because they were "obviously unreachable".&lt;br />&lt;br />While (from a pedantic language lawyer standpoint) this is strictly true, we quickly learned that people do occasionally dereference null pointers, and having the code execution just fall into the top of the next function makes it very difficult to understand the problem. From the performance angle, the most important aspect of exposing these is to squash downstream code. Because of this, clang turns these into a runtime trap: if one of these is actually dynamically reached, the program stops immediately and can be debugged. The drawback of doing this is that we slightly bloat code by having these operations and having the conditions that control their predicates.&lt;/li>&lt;li>The optimizer does go to some effort to "do the right thing" when it is obvious what the programmer meant (such as code that does "*(int*)P" when P is a pointer to float). This helps in many common cases, but you really don't want to rely on this, and there are lots of examples that you might think are "obvious" that aren't after a long series of transformations have been applied to your code.&lt;/li>&lt;li>Optimizations that don't fall into any of these categories, such the zero_array and set/call examples in Part #1 are optimized as described, silently, without any indication to the user. We do this because we don't have anything useful to say, and it is very uncommon for (buggy) real-world code to be broken by these optimizations.&lt;/li>&lt;/ol>&lt;br />One major area of improvement we can make is with respect to trap insertion. I think it would be interesting to add an (off-by-default) warning flag that would cause the optimizer to warn whenever it generates a trap instruction. This would be extremely noisy for some codebases, but could be useful for others. The first limiting factor here is the infrastructure work to make the optimizer produce warnings: it doesn't have useful source code location information unless debugging information is turned on (but this could be fixed).&lt;br />&lt;br />The other, more significant, limiting factor is that the warning wouldn't have any of the "tracking" information to be able to explain that an operation is the result of unrolling a loop three times and inlining it through four levels of function calls. At best we'll be able to point out the file/line/column of the original operation, which will be useful in the most trivial cases, but is likely to be extremely confusing in other cases. In any event, this hasn't been a high priority for us to implement because a) it isn't likely to give a good experience b) we won't be able to turn it on by default, and c) is a lot of work to implement.&lt;br />&lt;br />&lt;h2>Using a Safer Dialect of C (and other options)&lt;/h2>&lt;br />A final option you have if you don't care about "ultimate performance", is to use various compiler flags to enable dialects of C that eliminate these undefined behaviors. For example, using the &lt;tt>-fwrapv&lt;/tt> flag eliminates undefined behavior that results from signed integer overflow (however, note that it does &lt;b>not&lt;/b> eliminate possible integer overflow security vulnerabilities). The &lt;tt>-fno-strict-aliasing&lt;/tt> flag disables Type Based Alias Analysis, so you are free to ignore these type rules. If there was demand, we could add a flag to Clang that implicitly zeros all local variables, one that inserts an "and" operation before each shift with a variable shift count, etc. Unfortunately, there is no tractable way to &lt;b>completely&lt;/b> eliminate undefined behavior from C without breaking the ABI and completely destroying its performance. The other problem with this is that you're not writing C anymore, you're writing a similar, but non-portable dialect of C.&lt;br />&lt;br />If writing code in a non-portable dialect of C isn't your thing, then the &lt;tt>-ftrapv&lt;/tt> and &lt;tt>-fcatch-undefined-behavior&lt;/tt> flags (along with the other tools mentioned before) can be useful weapons in your arsenal to track down these sorts of bugs. Enabling them in your debug builds can be a great way to find related bugs early. These flags can also be useful in production code if you are building security critical applications. While they provide no guarantee that they will find all bugs, they do find a useful subset of bugs.&lt;br />&lt;br />Ultimately, the real problem here is that C just isn't a "safe" language and that (despite its success and popularity) many people do not really understand how the language works. In its decades of evolution prior to standardization in 1989, C migrated from being a "low level systems programming language that was a tiny layer above PDP assembly" to being a "low level systems programming language, trying to provide decent performance by &lt;em>breaking many people's expectations&lt;/em>". On the one hand, these C "cheats" almost always work and code is generally more performant because of it (and in some cases, &lt;em>much&lt;/em> more performant). On the other hand, the places where C cheats are often some of the most surprising to people and typically strike at the worst possible time.&lt;br />&lt;br />C is much more than a portable assembler, sometimes in very surprising ways. I hope this discussion helps explain some of the issues behind undefined behavior in C, at least from a compiler implementer's viewpoint.&lt;br />&lt;br />-&lt;a href="http://nondot.org/sabre/">Chris Lattner&lt;/a></description></item><item><title>What Every C Programmer Should Know About Undefined Behavior #2/3</title><link>https://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html</link><pubDate>Sat, 14 May 2011 12:33:00 +0000</pubDate><guid>https://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html</guid><description>In &lt;a href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html">Part 1&lt;/a>of our series, we discussed what undefined behavior is, and how it allows C and C++ compilersto produce higher performance applications than "safe" languages. This post talks about how"unsafe" C really is, explaining some of the highly surprising effects that undefined behaviorcan cause. In &lt;a href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_21.html">Part#3&lt;/a>, we talk about what friendly compilers can do to mitigate some of the surprise, evenif they aren't required to. &lt;br />&lt;br />I like to call this "&lt;b>Why undefined behavior is often a scary and terrible thing for Cprogrammers&lt;/b>". :-)&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />Translation available in: &lt;a href="http://blog-ja.intransient.info/2011/05/c-23.html">Japanese&lt;/a>,and &lt;a href="https://chicksx.com/blog/c-programmer-part-2">Spanish&lt;/a>a>.&lt;h2>Interacting Compiler Optimizations Lead to Surprising Results&lt;/h2>&lt;br />A modern compiler optimizer contains many optimizations that are run in specific orders, sometimes iterated, and change as the compiler evolves over time (e.g. new releases come out). Also, different compilers often have substantially different optimizers. Because optimizations run at different stages, emergent effects can occur due to previous optimizations changing the code.&lt;br />&lt;br />Lets take a look at a silly example (simplified from an exploitable bug that was found in the Linux Kernel) to make this more concrete:&lt;br />&lt;br />&lt;pre>void contains_null_check(int *P) {&lt;br /> int dead = *P;&lt;br /> if (P == 0)&lt;br /> return;&lt;br /> *P = 4;&lt;br />}&lt;br />&lt;/pre>&lt;br />In this example, the code "clearly" checks for the null pointer. If the compiler happens to run "Dead Code Elimination" before a "Redundant Null Check Elimination" pass, then we'd see the code evolve in these two steps:&lt;br />&lt;br />&lt;pre>void contains_null_check_after_DCE(int *P) {&lt;br /> &lt;strike>//int dead = *P;&lt;/strike> // deleted by the optimizer.&lt;br /> if (P == 0)&lt;br /> return;&lt;br /> *P = 4;&lt;br />}&lt;br />&lt;/pre>&lt;br />and then:&lt;br />&lt;br />&lt;pre>void contains_null_check_after_DCE_and_RNCE(int *P) {&lt;br /> if (P == 0) // Null check not redundant, and is kept.&lt;br /> return;&lt;br /> *P = 4;&lt;br />}&lt;br />&lt;/pre>&lt;br />However, if the optimizer happens to be structured differently, it could run RNCE before DCE. This would give us these two steps:&lt;br />&lt;br />&lt;pre>void contains_null_check_after_RNCE(int *P) {&lt;br /> int dead = *P;&lt;br /> if (&lt;b>false&lt;/b>) // P was dereferenced by this point, so it can't be null &lt;br /> return;&lt;br /> *P = 4;&lt;br />}&lt;br />&lt;/pre>&lt;br />and then dead code elimination runs:&lt;br />&lt;br />&lt;pre>void contains_null_check_after_RNCE_and_DCE(int *P) {&lt;br /> &lt;strike>//int dead = *P;&lt;/strike>&lt;br /> &lt;strike>//if (false)&lt;/strike>&lt;br /> &lt;strike>// return;&lt;/strike>&lt;br /> *P = 4;&lt;br />}&lt;br />&lt;/pre>&lt;br />To many (reasonable!) programmers, deleting the null check from this function would be very surprising (and they'd probably file a bug against the compiler :). However, both "contains_null_check_after_DCE_and_RNCE" and "contains_null_check_after_RNCE_and_DCE" are perfectly valid optimized forms of "contains_null_check" according to the standard, and both of the optimizations involved are important for the performance of various applications.&lt;br />&lt;br />While this is intentionally a simple and contrived example, this sort of thing happens all the time with inlining: inlining a function often exposes a number of secondary optimization opportunities. This means that if the optimizer decides to inline a function, a variety of local optimizations can kick in, which change the behavior of the code. This is both perfectly valid according to the standard, and important for performance in practice.&lt;br />&lt;br />&lt;h2>Undefined Behavior and Security Don't Mix Well&lt;/h2>&lt;br />The C family of programming languages is used to write a wide range of security critical code, such as kernels, setuid daemons, web browsers, and much more. This code is exposed to hostile input and bugs can lead to all sorts of exploitable security problems. One of the widely cited advantages of C is that it is relatively easy to understand what is going on when you read the code.&lt;br />&lt;br />However, undefined behavior takes this property away. After all, most programmers would think that "contains_null_check" would do a null check above. While this case isn't too scary (the code will probably crash in the store if passed a null check, which is relatively easy to debug) there are a wide range of &lt;i>very reasonable&lt;/i> looking C fragments that are completely invalid. This problem has bit many projects (including the Linux Kernel, OpenSSL, glibc, etc) and even led to CERT issuing a &lt;a href="http://www.kb.cert.org/vuls/id/162289">vulnerability note&lt;/a> against GCC (though my personal belief is that all widely-used optimizing C compilers are vulnerable to this, not just GCC).&lt;br />&lt;br />Lets look at an example. Consider this carefully written C code:&lt;br />&lt;br />&lt;pre>void process_something(int size) {&lt;br /> // Catch integer overflow.&lt;br /> if (size &amp;gt; size+1)&lt;br /> abort();&lt;br /> ...&lt;br /> // Error checking from this code elided.&lt;br /> char *string = malloc(size+1);&lt;br /> read(fd, string, size);&lt;br /> string[size] = 0;&lt;br /> do_something(string);&lt;br /> free(string);&lt;br />}&lt;br />&lt;/pre>This code is checking to make sure that the malloc is big enough to hold the data read from the file (because a nul terminator byte needs to be added), bailing out if an integer overflow error occurs. However, this is &lt;a href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html#signed_overflow">exactly the example we gave before&lt;/a> in which the compiler is allowed to (validly) optimize out the check. This means that it is perfectly possible for the compiler to turn this into:&lt;br />&lt;br />&lt;pre>void process_something(int *data, int size) {&lt;br /> char *string = malloc(size+1);&lt;br /> read(fd, string, size);&lt;br /> string[size] = 0;&lt;br /> do_something(string);&lt;br /> free(string);&lt;br />}&lt;br />&lt;/pre>&lt;br />When being built on a 64-bit platform, it is quite likely that this is an exploitable bug when "size" is INT_MAX (perhaps the size of a file on disk). Lets consider how terrible this is: a code auditor reading the code would very reasonably think that a proper overflow check is happening. Someone testing the code would find no problem unless they specifically tested that error path. The secure code seems to work, until someone goes ahead and exploits the vulnerability. All in all, this is a surprising and quite scary class of bugs. Fortunately, the fix is simple in this case: just use "size == INT_MAX" or similar.&lt;br />&lt;br />As it turns out, integer overflow is a security problem for many reasons. Even if you are using fully defined integer arithmetic (either by using &lt;tt>-fwrapv&lt;/tt> or by using unsigned integers), there is a &lt;a href="http://en.wikipedia.org/wiki/Integer_overflow#Security_ramifications">wholly different class&lt;/a> of integer overflow bug possible. Fortunately, this class is visible in the code and knowledgable security auditors are usually aware of the problem.&lt;br />&lt;br />&lt;br />&lt;h2>Debugging Optimized Code May Not Make Any Sense&lt;/h2>Some people (for example, low level embedded programmers who like to look at generated machine code) do all of their development with optimizations turned on. Because code &lt;b>frequently&lt;/b> has bugs when it is being developed, these folks end up seeing a disproportionate number of surprising optimizations that can lead to difficult-to-debug behaviors at runtime. For example, accidentally leaving out the "i = 0" in the "zero_array" example from the first article allows the compiler to completely discard the loop (compiling zero_array into "return;") because it is a use of an uninitialized variable.&lt;br />&lt;br />Another interesting case that bit someone recently happened when they had a (global) function pointer. A simplified example looks like this:&lt;br />&lt;br />&lt;pre>static void (*FP)() = 0;&lt;br />static void impl() {&lt;br /> printf("hello\n");&lt;br />}&lt;br />void set() {&lt;br /> FP = impl;&lt;br />}&lt;br />void call() {&lt;br /> FP();&lt;br />}&lt;br />&lt;/pre>which clang optimizes into:&lt;br />&lt;br />&lt;pre>void set() {}&lt;br />void call() {&lt;br /> printf("hello\n");&lt;br />}&lt;br />&lt;/pre>It is allowed to do this because calling a null pointer is undefined, which permits it to assume that set() must be called before call(). In this case, the developer forgot to call "set", did not crash with a null pointer dereference, and their code broke when someone else did a debug build.&lt;br />&lt;br />The upshot is that it is a fixable issue: if you suspect something weird is going on like this, try building at -O0, where the compiler is much less likely to be doing any optimizations at all.&lt;br />&lt;br />&lt;br />&lt;h2>"Working" code that uses undefined behavior can "break" as the compiler evolves or changes &lt;/h2>We've seen many cases where applications that "appear to be work" suddenly break when a newer LLVM is used to build it, or when the application was moved from GCC to LLVM. While LLVM does occasionally have a bug or two itself :-), this is most often because of latent bugs in the application that are now being exposed by the compiler. This can happen all sorts different ways, two examples are:&lt;br />&lt;br />1. an uninitialized variable which was zero initialized by luck "before", and now it shares some other register that isn't zero. This is commonly exposed by register allocation changes.&lt;br />&lt;br />2. an array overflow on the stack which starts clobbering a variable that actually matters, instead of something that was dead. This is exposed when the compiler rearranges how it packs things on the stack, or gets more aggressive about sharing stack space for values with non-overlapping lifetimes.&lt;br />&lt;br />The important and scary thing to realize is that just about *any* optimization based on undefined behavior can start being triggered on buggy code at any time in the future. Inlining, loop unrolling, memory promotion and other optimizations will keep getting better, and a significant part of their reason for existing is to expose secondary optimizations like the ones above.&lt;br />&lt;br />To me, this is deeply dissatisfying, partially because the compiler inevitably ends up getting blamed, but also because it means that huge bodies of C code are land mines just waiting to explode. This is even worse because...&lt;br />&lt;br />&lt;h2>There is No Reliable Way to Determine if a Large Codebase Contains Undefined Behavior&lt;/h2>Making the landmine a much much worse place to be is the fact that there is &lt;b>no good way&lt;/b> to determine whether a large scale application is free of undefined behavior, and thus not susceptible to breaking in the future. There are many useful tools that can help find &lt;b>some&lt;/b> of the bugs, but nothing that gives full confidence that your code won't break in the future. Lets look at some of these options, along with their strengths and weaknesses:&lt;br />&lt;br />1. The &lt;a href="http://valgrind.org/">Valgrind&lt;/a> &lt;a href="http://valgrind.org/info/tools.html#memcheck">memcheck tool&lt;/a> is a fantastic way to find all sorts of uninitialized variables and other memory bugs. Valgrind is limited because it is quite slow, it can only find bugs that still exist in the generated machine code (so it &lt;a href="http://blog.regehr.org/archives/519">can't find things the optimizer removes&lt;/a>), and doesn't know that the source language is C (so it can't find shift-out-of-range or signed integer overflow bugs).&lt;br />&lt;br />2. Clang has an experimental &lt;tt>-fcatch-undefined-behavior&lt;/tt> mode that inserts runtime checks to find violations like shift amounts out of range, some simple array out of range errors, etc. This is limited because it slows down the application's runtime and it can't help you with random pointer dereferences (like Valgrind can), but it can find other important bugs. Clang also fully supports the &lt;tt>-ftrapv&lt;/tt> flag (not to be confused with &lt;tt>-fwrapv&lt;/tt>) which causes signed integer overflow bugs to trap at runtime (GCC also has this flag, but it is completely unreliable/buggy in my experience). Here is a quick demo of &lt;tt>-fcatch-undefined-behavior&lt;/tt>:&lt;br />&lt;br />&lt;pre>$ cat t.c&lt;br />int foo(int i) {&lt;br /> int x[2];&lt;br /> x[i] = 12;&lt;br /> return x[i];&lt;br />}&lt;br />&lt;br />int main() {&lt;br /> return foo(2);&lt;br />}&lt;br />$ clang t.c &lt;br />$ ./a.out &lt;br />$ clang t.c -fcatch-undefined-behavior &lt;br />$ ./a.out &lt;br />Illegal instruction&lt;br />&lt;/pre>3. Compiler warning messages are good for finding some classes of these bugs, like uninitialized variables and simple integer overflow bugs. It has two primary limitations: 1) it has no dynamic information about your code as it executes, and 2) it must run very quickly because any analysis it does slows down compile time.&lt;br />&lt;br />4. &lt;a href="http://clang-analyzer.llvm.org/">The Clang Static Analyzer&lt;/a> performs a much deeper analysis to try to find bugs (including use of undefined behavior, like null pointer dereferences). You can think of it as generating souped up compiler warning messages, because it is not bound by the compile time constraints of normal warnings. The primary disadvantages of the static analyzer is that it 1) doesn't have dynamic information about your program as it runs, and 2) is not integrated into normal workflows for many developers (though its integration into &lt;a href="http://developer.apple.com/technologies/mac/snowleopard/static.html">Xcode 3.2 and later&lt;/a> is fantastic). &lt;br />&lt;br />5. The &lt;a href="http://klee.llvm.org/">LLVM "Klee" Subproject&lt;/a> uses symbolic analysis to "try every possible path" through a piece of code to find bugs in the code and it &lt;b>produces a testcase&lt;/b>. It is a great little project that is mostly limited by not being practical to run on large-scale applications.&lt;br />&lt;br />6. While I have never tried it, the &lt;a href="http://code.google.com/p/c-semantics/">C-Semantics tool&lt;/a> by Chucky Ellison and Grigore Rosu is a very interesting tool that can apparently find some classes of bugs (such as sequence point violations). It is still a research prototype, but may be useful for finding bugs in (small and self-contained) programs. I recommend reading &lt;a href="http://blog.regehr.org/archives/523">John Regehr's post about it&lt;/a> for more information.&lt;br />&lt;br />The end result of this is that we have lots of tools in the toolbox to find some bugs, but no good way to prove that an application is free of undefined behavior. Given that there are lots of bugs in real world applications and that C is used for a broad range of critical applications, this is pretty scary. In our &lt;a href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_21.html">final article&lt;/a>, I look at various options that C compilers have when dealing with undefined behavior, with a specific focus on &lt;a href="http://clang.llvm.org/">Clang&lt;/a>.&lt;br />&lt;br />-&lt;a href="http://nondot.org/sabre/">Chris Lattner&lt;/a></description></item><item><title>What Every C Programmer Should Know About Undefined Behavior #1/3</title><link>https://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html</link><pubDate>Fri, 13 May 2011 11:25:00 +0000</pubDate><guid>https://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html</guid><description>People occasionally ask why LLVM-compiled code sometimes generates SIGTRAP signals when the optimizer is turned on.After digging in, they find that Clang generated a "ud2" instruction (assuming X86 code) - the same as is generatedby __builtin_trap(). There are several issues at work here, all centering around undefined behavior in C code andhow LLVM handles it.&lt;br />&lt;br />This blog post (the first in a series of three) tries to explain some of theseissues so that you can better understand the tradeoffs and complexities involved, and perhaps learn a few moreof the dark sides of C. It turns out that C is &lt;i>not&lt;/i> a "high level assembler" like many experienced Cprogrammers (particularly folks with a low-level focus) like to think, and that C++ and Objective-C have directlyinherited plenty of issues from it.&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;h2>Introduction to Undefined Behavior&lt;/h2>&lt;br />Translation available in: &lt;a href="http://blog-ja.intransient.info/2011/05/c-13.html">Japanese&lt;/a> and&lt;a href="https://chicksgold.com/blog/c-programmer-should-know">Spanish&lt;/a>&lt;br />&lt;br />Both LLVM IR and the C programming language have the concept of "undefined behavior". Undefined behavior is abroad topic with a lot of nuances. The best introduction I've found to it is a post on&lt;a href="http://blog.regehr.org/archives/213">John Regehr's Blog&lt;/a>. The short version of this excellent articleis that many seemingly reasonable things in C actually have undefined behavior, and this is a common source of bugsin programs. Beyond that, any undefined behavior in C gives license to the implementation (the compiler and runtime) to produce code that formats your hard drive, does completely unexpected things, &lt;a href="http://www.catb.org/jargon/html/N/nasal-demons.html">or worse&lt;/a>. Again, I would highly recommend reading &lt;a href="http://blog.regehr.org/archives/213">John's article&lt;/a>.&lt;br />&lt;br />Undefined behavior exists in C-based languages because the designers of C wanted it to be an extremely efficient low-level programming language. In contrast, languages like Java (and many other 'safe' languages) have eschewed undefined behavior because they want safe and reproducible behavior across implementations, and willing to sacrifice performance to get it. While neither is "the right goal to aim for," if you're a C programmer you really should understand what undefined behavior is.&lt;br />&lt;br />Before getting into the details, it is worth briefly mentioning what it takes for a compiler to get good performance out a broad range of C apps, because &lt;b>there is no magic bullet&lt;/b>. At a very high level, compilers produce high performance apps by a) doing a good job at bread and butter algorithms like register allocation, scheduling, etc. b) knowing lots and lots of "tricks" (e.g. peephole optimizations, loop transformations, etc), and applying them whenever profitable. c) being good at eliminating unnecessary abstractions (e.g. redundancy due to macros in C, inlining functions, eliminating temporary objects in C++, etc) and d) not screwing anything up. While any of the optimizations below may sound trivial, it turns out that saving just one cycle out of a critical loop can make some codec run 10% faster or take 10% less power.&lt;br />&lt;br />&lt;h2 id="optimizations">Advantages of Undefined Behavior in C, with Examples&lt;/h2>&lt;br />Before getting into the dark side of undefined behavior and LLVM's policy and behavior when used as a C compiler, I thought it would be helpful to consider a few specific cases of undefined behavior, and talk about how each enables better performance than a safe language like Java. You can look at this either as "optimizations enabled" by the class of undefined behavior or as the "overhead avoided" that would be required to make each case defined. While the compiler optimizer could eliminate some of these overheads some of the time, to do so in general (for every case) would require solving the halting problem and many other "interesting challenges".&lt;br />&lt;br />It is also worth pointing out that both Clang and GCC nail down a few behaviors that the C standard leaves undefined. The things I'll describe are both undefined according to the standard and treated as undefined behavior by both of these compilers in their default modes.&lt;br />&lt;br />&lt;b>Use of an uninitialized variable:&lt;/b> This is commonly known as source of problems in C programs and there are many tools to catch these: from compiler warnings to static and dynamic analyzers. This improves performance by not requiring that all variables be zero initialized when they come into scope (as Java does). For most scalar variables, this would cause little overhead, but stack arrays and malloc'd memory would incur a memset of the storage, which could be quite costly, particularly since the storage is usually completely overwritten.&lt;br />&lt;br />&lt;b id="signed_overflow">Signed integer overflow:&lt;/b> If arithmetic on an 'int' type (for example) overflows, the result is undefined. One example is that "INT_MAX+1" is not guaranteed to be INT_MIN. This behavior enables certain classes of optimizations that are important for some code. For example, knowing that INT_MAX+1 is undefined allows optimizing "X+1 &amp;gt; X" to "true". Knowing the multiplication "cannot" overflow (because doing so would be undefined) allows optimizing "X*2/2" to "X". While these may seem trivial, these sorts of things are commonly exposed by inlining and macro expansion. A more important optimization that this allows is for "&amp;lt;=" loops like this:&lt;br />&lt;br />&lt;pre>for (i = 0; i &amp;lt;= N; ++i) { ... }&lt;br />&lt;/pre>&lt;br />In this loop, the compiler can assume that the loop will iterate exactly N+1 times if "i" is undefined on overflow, which allows a broad range of loop optimizations to kick in. On the other hand, if the variable is defined to wrap around on overflow, then the compiler must assume that the loop is possibly infinite (which happens if N is INT_MAX) - which then disables these important loop optimizations. This particularly affects 64-bit platforms since so much code uses "int" as induction variables.&lt;br />&lt;br />It is worth noting that unsigned overflow is guaranteed to be defined as 2's complement (wrapping) overflow, so you can always use them. The cost to making signed integer overflow defined is that these sorts of optimizations are simply lost (for example, a common symptom is a ton of sign extensions inside of loops on 64-bit targets). Both Clang and GCC accept the "-fwrapv" flag which forces the compiler to treat signed integer overflow as defined (other than divide of INT_MIN by -1).&lt;br />&lt;br />&lt;b>Oversized Shift Amounts:&lt;/b> Shifting a uint32_t by 32 or more bits is undefined. My guess is that this originated because the underlying shift operations on various CPUs do different things with this: for example, X86 truncates 32-bit shift amount to 5 bits (so a shift by 32-bits is the same as a shift by 0-bits), but PowerPC truncates 32-bit shift amounts to 6 bits (so a shift by 32 produces zero). Because of these hardware differences, the behavior is completely undefined by C (thus shifting by 32-bits on PowerPC could format your hard drive, it is &lt;b>*not*&lt;/b> guaranteed to produce zero). The cost of eliminating this undefined behavior is that the compiler would have to emit an extra operation (like an 'and') for variable shifts, which would make them twice as expensive on common CPUs.&lt;br />&lt;br />&lt;b>Dereferences of Wild Pointers and Out of Bounds Array Accesses:&lt;/b> Dereferencing random pointers (like NULL, pointers to free'd memory, etc) and the special case of accessing an array out of bounds is a common bug in C applications which hopefully needs no explanation. To eliminate this source of undefined behavior, array accesses would have to each be range checked, and the ABI would have to be changed to make sure that range information follows around any pointers that could be subject to pointer arithmetic. This would have an extremely high cost for many numerical and other applications, as well as breaking binary compatibility with every existing C library.&lt;br />&lt;br />&lt;b>Dereferencing a NULL Pointer:&lt;/b> contrary to popular belief, dereferencing a null pointer in C is undefined. It is &lt;i>not defined to trap&lt;/i>, and if you mmap a page at 0, it is &lt;i>not defined to access that page&lt;/i>. This falls out of the rules that forbid dereferencing wild pointers and the use of NULL as a sentinel. NULL pointer dereferences being undefined enables a broad range of optimizations: in contrast, Java makes it invalid for the compiler to move a side-effecting operation across any object pointer dereference that cannot be proven by the optimizer to be non-null. This significantly punishes scheduling and other optimizations. In C-based languages, NULL being undefined enables a large number of simple scalar optimizations that are exposed as a result of macro expansion and inlining.&lt;br />&lt;br />If you're using an LLVM-based compiler, you can dereference a "volatile" null pointer to get a crash if that's what you're looking for, since volatile loads and stores are generally not touched by the optimizer. There is currently no flag that enables random NULL pointer loads to be treated as valid accesses or to make random loads know that their pointer is "allowed to be null".&lt;br />&lt;br />&lt;b>Violating Type Rules:&lt;/b> It is undefined behavior to cast an int* to a float* and dereference it (accessing the "int" as if it were a "float"). C requires that these sorts of type conversions happen through memcpy: using pointer casts is not correct and undefined behavior results. The rules for this are quite nuanced and I don't want to go into the details here (there is an exception for char*, vectors have special properties, unions change things, etc). This behavior enables an analysis known as "Type-Based Alias Analysis" (TBAA) which is used by a broad range of memory access optimizations in the compiler, and can significantly improve performance of the generated code. For example, this rule allows clang to optimize this function:&lt;br />&lt;br />&lt;pre>float *P;&lt;br /> void zero_array() {&lt;br /> int i;&lt;br /> for (i = 0; i &amp;lt; 10000; ++i)&lt;br /> P[i] = 0.0f;&lt;br /> }&lt;br />&lt;/pre>&lt;br />into "&lt;tt>memset(P, 0, 40000)&lt;/tt>". This optimization also allows many loads to be hoisted out of loops, common subexpressions to be eliminated, etc. This class of undefined behavior can be disabled by passing the -fno-strict-aliasing flag, which disallows this analysis. When this flag is passed, Clang is required to compile this loop into 10000 4-byte stores (which is several times slower), because it has to assume that it is possible for any of the stores to change the value of P, as in something like this:&lt;br />&lt;br />&lt;pre>int main() {&lt;br /> P = (float*)&amp;amp;P; // cast causes TBAA violation in zero_array.&lt;br /> zero_array();&lt;br />}&lt;br />&lt;/pre>&lt;br />This sort of type abuse is pretty uncommon, which is why the standard committee decided that the significant performance wins were worth the unexpected result for "reasonable" type casts. It is worth pointing out that Java gets the benefits of type-based optimizations without these drawbacks because it doesn't have unsafe pointer casting in the language at all.&lt;br />&lt;br />Anyway, I hope that this gives you an idea of some of the classes of optimizations enabled by undefined behavior in C. There are many other kinds of course, including sequence point violations like "foo(i, ++i)", race conditions in multithreaded programs, violating 'restrict', divide by zero, etc.&lt;br />&lt;br />In our &lt;a href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html">next post&lt;/a>, we'll discuss why undefined behavior in C is a pretty scary thing if performance is not your only goal. In our final post in the series, we'll talk about how LLVM and Clang handle it.&lt;br />&lt;br />-&lt;a href="http://nondot.org/sabre/">Chris Lattner&lt;/a></description></item><item><title>Regular Expression Commands</title><link>https://blog.llvm.org/2011/04/regular-expression-commands.html</link><pubDate>Fri, 22 Apr 2011 10:19:00 +0000</pubDate><guid>https://blog.llvm.org/2011/04/regular-expression-commands.html</guid><description>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';"> Greetings LLDB users. I want to start writing regular blog posts for the new and cool features and things you can do in LLDB. Today I will start with one that was just added: regular expression commands.&lt;/span>&lt;/span>&lt;br />&lt;div>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;br />&lt;/span>&lt;/span>&lt;br />&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;/span>&lt;/span>&lt;br />&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;a name='more'>&lt;/a>&lt;/span>&lt;/span>&lt;br />&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;br />What is a regular expression command? It is a smart alias to other commands that you can define using the "&lt;/span>&lt;/span>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">command regex" &lt;/span>&lt;/span>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">command. You define a regular expression command by giving it a command name followed by a series of regular expression and substitution pairs. The regular expression and substitution pairs are supplied in a standard stream editor search and replace format:&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span class="Apple-tab-span" style="white-space: pre;">&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';"> &lt;/span>&lt;/span>&lt;/span>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">s/&amp;lt;regex&amp;gt;/&amp;lt;subst&amp;gt;/&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">When a command in later entered, it will strip off the regular expression command name and any spaces that follow, it and pass the raw argument string to be matched against your regular expression list in the order in which they were entered. The first &lt;/span>&lt;/span>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">&amp;lt;regex&lt;/span>&lt;/span>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">&amp;gt;&lt;/span>&lt;/span>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';"> to match the raw argument string will then be allowed substitute in &lt;/span>&lt;/span>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">the command defined by &lt;/span>&lt;/span>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;span class="Apple-style-span" style="font-family: 'courier new';">&amp;lt;subst&amp;gt;&lt;/span>.&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">Lets supposed we want to use the &lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">"f"&lt;/span>&lt;/span>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';"> as a command to select a frame by frame index. The command to select a frame by the frame index is the &lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">"frame select &amp;lt;num&amp;gt;&lt;/span>&lt;/span>&lt;frame-idx>&lt;num>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">"&lt;/span>&lt;/span>&lt;/num>&lt;/frame-idx>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';"> command which you might not always want to type out. We can make this a bit easier this using a regular expression command:&lt;br />&lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;br />&lt;/span>&lt;/span>&lt;/code>&lt;/div>&lt;div>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">(lldb) command regex f 's/([0-9]+)/frame select %1/' &lt;/span>&lt;/span>&lt;/code>&lt;/div>&lt;div>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;br />&lt;/span>&lt;/span>&lt;/code>&lt;/div>&lt;div>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">"command regex f"&lt;/span>&lt;/span>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';"> tells the interpreter to create a new regex command named &lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">"f"&lt;/span>&lt;/span>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">, and when a command is entered on the command line that starts with &lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">"f"&lt;/span>&lt;/span>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">, it will match the remaining command text against the regular expression &lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">"([0-9]+)"&lt;/span>&lt;/span>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">, and it if matches, it will substitute any parenthesized subexpressions. Here we enclosed the number regular expression &lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">"[0-9]+"&lt;/span>&lt;/span>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';"> in parentheses which will save the results in the first match and allow the matching string to be substituted into the match substitution text &lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">"frame select %1"&lt;/span>&lt;/span>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">. When we use our new regular expression command from the LLDB command line, it will show us what command resulted from our regular expression substitution:&lt;br />&lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;br />&lt;/span>&lt;/span>&lt;/code>&lt;/div>&lt;div>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">(lldb) f 12&lt;/span>&lt;/span>&lt;/code>&lt;/div>&lt;div>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">frame select 12&lt;/span>&lt;/span>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;span class="Apple-style-span" style="font-family: 'courier new';">&lt;br />&lt;/span>&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">Any leading spaces that follow the regular expression command &lt;span class="Apple-style-span" style="font-family: 'courier new';">"f"&lt;/span> will always be stripped prior to matching the regular expression, but there may be trailing spaces since we are processing the remaining raw command string that follows the initial &lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">"f"&lt;/span>&lt;/span>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';"> command name. The regular expression is also just looking for any sequence of one or more digits. Our current regular expression will actually match:&lt;br />&lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;br />&lt;/span>&lt;/span>&lt;/code>&lt;/div>&lt;div>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">(lldb) f 11 22 33&lt;br />frame select 11&lt;/span>&lt;/span>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;span class="Apple-style-span" style="font-family: 'courier new';">&lt;br />&lt;/span>&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">Since this isn't desired, we should make the regular expression more complete by checking for the start of the line (&lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">^&lt;/span>&lt;/span>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">) and the end of the line (&lt;/span>&lt;/span>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">$&lt;/span>&lt;/span>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">) and also allow for zero or more spaces (&lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">[[:space:]]*&lt;/span>&lt;/span>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">) to come after the number. Our newer and safer regular expression command line looks like:&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;br />&lt;/span>&lt;/span>&lt;/code>&lt;/div>&lt;div>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">(lldb) command regex f 's/^([0-9]+)[[:space:]]*$/frame select %1/'&lt;/span>&lt;/span>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;br />&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">Now we can type in a command as &lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">"f 12 "&lt;/span>&lt;/span>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';"> (note the trailing spaces), and still get correct substitutions, while our previous example of &lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">"f 11 22 33"&lt;/span>&lt;/span>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';"> will no longer match:&lt;br />&lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;br />&lt;/span>&lt;/span>&lt;/code>&lt;/div>&lt;div>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">(lldb) f 11 22 33&lt;br />error: Command contents '11 22 33' failed to match any regular expression in the 'f' regex command.&lt;/span>&lt;/span>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;span class="Apple-style-span" style="font-family: 'courier new';">&lt;br />&lt;/span>&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">Lets take this a bit further by also using the &lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">f&lt;/span>&lt;/span>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';"> command to emulate GDB's &lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">finish&lt;/span>&lt;/span>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';"> command when it is typed without any arguments. We will also modify this command to watch for a single "+" or "-" followed by a digit to signify a relative frame change using the frame select command with the --relative option:&lt;br />&lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;br />&lt;/span>&lt;/span>&lt;/code>&lt;/div>&lt;div>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">(lldb) frame select --relative &lt;/span>&lt;/span>&lt;integer>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;offset>&lt;/offset>&lt;/span>&lt;/span>&lt;/integer>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;br />&lt;br />&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">Multiple regular expressions can be entered in on the command line, or using the multi-line mode when typing in a live LLDB debug session. Below the text in bold is user entered:&lt;br />&lt;/span>&lt;/span>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;br />&lt;/span>&lt;/span>&lt;/code>&lt;/div>&lt;div>&lt;code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">(lldb) &lt;/span>&lt;/span>&lt;b>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">commands regex f&lt;/span>&lt;/span>&lt;/b>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">&lt;br />Enter regular expressions in the form 's/&lt;/span>&lt;/span>&lt;regex>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">/&lt;/span>&lt;/span>&lt;subst>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">/' and terminate with an empty line:&lt;br />&lt;/span>&lt;/span>&lt;b>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">s/^([0-9]+)[[:space:]]*$/frame select %1/&lt;br />s/^([+-][0-9]+)[[:space:]]*$/frame select --relative=%1/&lt;br />s/^[[:space:]]*$/finish/&lt;/span>&lt;/span>&lt;/b>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;span class="Apple-style-span" style="font-family: 'courier new';">&lt;br />&lt;/span>&lt;br />&lt;span class="Apple-style-span" style="font-family: 'courier new';">(lldb) &lt;/span>&lt;/span>&lt;/span>&lt;b>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">f&lt;/span>&lt;/span>&lt;/b>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">&lt;br />finish&lt;br />...&lt;br />(lldb) &lt;/span>&lt;/span>&lt;b>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">f -1&lt;/span>&lt;/span>&lt;/b>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">&lt;br />frame select --relative=-1&lt;br />...&lt;br />(lldb) &lt;/span>&lt;/span>&lt;b>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">f +1&lt;/span>&lt;/span>&lt;/b>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">&lt;br />frame select --relative=+1&lt;br />...&lt;br />(lldb) &lt;/span>&lt;/span>&lt;b>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">f 12&lt;/span>&lt;/span>&lt;/b>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">&lt;br />frame select 12&lt;br />&lt;/span>&lt;/span>&lt;/subst>&lt;/regex>&lt;/code>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">&lt;br />I hope you can see the possilbities in how you can customize your command line experience in LLDB using these commands. You can add any regular expression commands to your &lt;/span>&lt;/span>&lt;b>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'courier new';">~/.lldbinit&lt;/span>&lt;span class="Apple-style-span" style="font-family: 'lucida grande';"> &lt;/span>&lt;/span>&lt;/b>&lt;span class="Apple-style-span" style="font-size: small;">&lt;span class="Apple-style-span" style="font-family: 'lucida grande';">file to always have your regular expression commands defined in your debug sessions.&lt;/span>&lt;/span>&lt;/div>&lt;div>&lt;span class="Apple-style-span" style="font-family: Times;">&lt;br />&lt;/span>&lt;/div></description></item><item><title>LLVM Developer Meeting 2010</title><link>https://blog.llvm.org/2010/12/llvm-developer-meeting-2010.html</link><pubDate>Thu, 23 Dec 2010 20:03:00 +0000</pubDate><guid>https://blog.llvm.org/2010/12/llvm-developer-meeting-2010.html</guid><description>The &lt;a href="http://www.llvm.org/devmtg/2010-11/">2010 edition&lt;/a> of the &lt;a href="http://www.llvm.org/devmtg/">LLVM Developer's Meeting&lt;/a> has come and gone, and it was a great event. It featured 17 great talks, several BOF sessions, and lots of informal discussions between all sorts of people interested in LLVM and its subprojects. Lang Hames wrote up a great summary of &lt;a href="http://google-opensource.blogspot.com/2010/12/notes-from-2010-llvm-developers-meeting.html">his experience at the meeting&lt;/a>.&lt;br />&lt;br />Unfortunately, there was more people who wanted to attend than we were able to accomodate, but fortunately the slides and videos of all the talks are &lt;a href="http://www.llvm.org/devmtg/2010-11/">available the web page&lt;/a>. Many thanks go our to our sponsors: Apple, QuIC, Google, Qualcomm.&lt;br />&lt;br />Happy holidays,&lt;br />&lt;br />-Chris</description></item><item><title>LLVM in ClamAV</title><link>https://blog.llvm.org/2010/09/llvm-in-clamav.html</link><pubDate>Tue, 07 Sep 2010 21:05:00 +0000</pubDate><guid>https://blog.llvm.org/2010/09/llvm-in-clamav.html</guid><description>New in version 0.96, the ClamAV antivirus system extends its internal bytecode interpreter to support an LLVM JIT compiler. This JIT compiler allows for improved execution speeds, but also provides the ability to write virus checks directly in C code. For more details, see the &lt;a href="http://vrt-sourcefire.blogspot.com/2010/09/introduction-to-clamavs-low-level.html">Sourcefire Vulnerability Research Team's Blog&lt;/a>.&lt;br />&lt;br />-Chris</description></item><item><title>TCE project: Co-design of application-specific processors with LLVM-based compilation support</title><link>https://blog.llvm.org/2010/06/tce-project-co-design-of-application.html</link><pubDate>Tue, 29 Jun 2010 08:38:00 +0000</pubDate><guid>https://blog.llvm.org/2010/06/tce-project-co-design-of-application.html</guid><description>&lt;a href="http://tce.cs.tut.fi/">TTA-based Codesign Environment&lt;/a> (TCE) is an application-specific instruction-set processor (ASIP) design toolset developed in &lt;a href="http://www.tut.fi/">Tampere University of Technology&lt;/a> in several research projects since 2003. This blog post introduces the project and how LLVM is used in it to provide high-level language compiler support for the designed ASIPs.&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;br />&lt;br />&lt;span style="font-size:medium;">The use case for application-specific processors&lt;/span>&lt;br />&lt;br />Especially in embedded devices so called general purpose "off-the-shelf processors" are often not optimal for the application at hand. The readily available processors might be too large in chip area, might consume too much power, might be too expensive (for a mass product) or are not running the set of programs fast enough. In order to tackle the performance problem, a common design choice is to run parts of the application in software while speeding up the performance critical functions with a custom hand-tailored hardware accelerator or a co-processor implemented as an &lt;a href="http://en.wikipedia.org/wiki/Application-specific_integrated_circuit">application-specific integrated circuit&lt;/a> (ASIC).&lt;br />&lt;br />The design, implementation and verification time of the hardware accelerators costs money and lengthens the time-to-market for the designed device. In addition, a fixed function hardware accelerator designed with an hardware description language (HDL) such as VHDL or Verilog has the problem of being "carved in stone", thus not providing programmability that enables late bug fixes and on-the-field updates to the supported set of functions.&lt;br />&lt;br />&lt;a href="http://en.wikipedia.org/wiki/Fpga">Field-Programmable Gate Arrays&lt;/a> (FPGAs) allow reconfiguring the implemented hardware logic on the field. However, as FPGA is only an hardware design implementation technique, the "&lt;a href="http://en.wikipedia.org/wiki/Non-recurring_engineering">non-recurring engineering cost&lt;/a>" of designing the hardware logic in an HDL is still there.&lt;br />&lt;br />Application-specific processors can be spotted in the "design space" between off-the-shelf processors, such as ARM products or Texas Instruments DSPs where functionality is described fully in software by the designer, and custom fixed function hardware accelerators where functionality is described fully in hardware description language by the designer. In case of ASIPs, the engineer is able to design both software and hardware at the same time (co-design) and is free to the choose the level of application specialization applied to the processor.&lt;br />&lt;br />What can be customized in an ASIP depends on the used processor template. A commonly customized part of the processor is the instruction set. Customizable instruction set allows the designer to define new application specific instructions for the processor to implement the desired functionality faster than a set of basic software operations such as additions or shifts can. Examples of such special instructions include complex arithmetic, non-standard floating point arithmetic, application-specific precision fixed point arithmetic, more than two input adders, etc.&lt;br />&lt;br />TCE places few restrictions on the types of custom instructions that can be added to the processor design. For example, there are no limits to the number of input operands or produced results nor the number of clock cycles the operation can execute. In addition to the custom operations, the number and size of the register files (RF), the number and type of the functional units (FU) and the connectivity between the RFs and FUs can be freely customized.&lt;br />&lt;br />&lt;span style="font-size:medium;">About Transport Triggered Architectures&lt;/span>&lt;br />&lt;br />TCE is based on a simple but scalable architecture template called &lt;a href="http://en.wikipedia.org/wiki/Transport_triggered_architecture">Transport Triggered Architecture&lt;/a> (TTA, not to be confused with "Time Triggered Architecture"). TTA can be described as an exposed datapath VLIW architecture. The "exposed datapath" part means that the data transports that take place between the functional units (e.g. arithmetic logic unit or a multiplier) and the register files are explicitly visible to the programmer. In other words, while processors are commonly programmed by defining which operations to execute (including information of the sources of the operands and the destinations of the results), TTA is programmed by defining the transports of the operands and results. The name TTA comes from the way operations are executed: when operand data is moved to the triggering port of the functional unit, the operation starts executing. After a fixed latency (from the architecture point of view) the results can be read from the output ports of the functional unit to the next destination.&lt;br />&lt;br />The programming model can be illustrated more easily with an assembly code snippet example.&lt;br />&lt;br />1) &lt;span style="font-style: italic;">Traditional "operation triggered" (first parameter is the destination)&lt;/span>&lt;br />&lt;br />&lt;ol>&lt;li>ADD R1, R2, R3&lt;/li>&lt;li>MUL R4, R1, R5&lt;br />&lt;/li>&lt;/ol>&lt;br />2) &lt;span style="font-style: italic;">Transport triggered&lt;/span>&lt;br />&lt;br />&lt;ol>&lt;li>R2 -&amp;gt; ADD.OPERAND, R3 -&amp;gt; ADD.TRIGGER&lt;/li>&lt;li>ADD.RESULT -&amp;gt; R1&lt;/li>&lt;li>R1 -&amp;gt; MUL.OPERAND, R5 -&amp;gt; MUL.TRIGGER&lt;/li>&lt;li>MUL.RESULT -&amp;gt; R4&lt;br />&lt;/li>&lt;/ol>Transport programming enables some specific software optimizations such as software (register) bypassing which in turn can enable "dead result read elimination", that can be applied in case all result reads can be transported directly to the destination functional units. This can lead to reduced register (file) pressure. An example follows:&lt;br />&lt;br />3. &lt;span style="font-style: italic;">Transport triggered with software bypassing and dead result read elimination&lt;/span>&lt;br />&lt;br />&lt;ol>&lt;li>R2 -&amp;gt; ADD.OPERAND, R3 -&amp;gt; ADD.TRIGGER&lt;/li>&lt;li>ADD.RESULT -&amp;gt; MUL.OPERAND, R5 -&amp;gt; MUL.TRIGGER&lt;/li>&lt;li>MUL.RESULT -&amp;gt; R4&lt;br />&lt;/li>&lt;/ol>Here the result from the adder is copied directly to the operand input port of the multiplier, thus removing the need for the general purpose register R1 used as a temporary storage. In addition to reducing register pressure, the freedom to schedule the movement of operand/result data in multiple cycles reduces the register file port pressure, which is one of the TTA's main motivations. In the traditional VLIW the number of RF ports needs to be scaled according to the number of connected functional units and their worst case RF port requirements (maximum simultaneous operand reads and result writes), leading to more complex RFs with higher delay and area.&lt;br />&lt;br />&lt;span style="font-size:medium;">Toolset assisted processor design with TCE&lt;/span>&lt;br />&lt;br />Designing new processors from the scratch is not a straightforward task. One needs to take care of the design, verification and porting a high level language programming toolchain for each of the processors so the programmers are happy (writing peculiar assembler syntax for a changing target would get quite depressing quickly!). Thus, the design process should be automated as fully as possible to make experimenting with different processor architecture alternatives feasible.&lt;br />&lt;br />The ultimate goal for an ASIP design toolset is to be as easy to use as taking a high-level language program as input and producing as a result an optimal processor implementation in VHDL or Verilog. It should parallelize the program for the processor's resources efficiently while exploiting custom instructions intelligently without any user intervention. In our experience, this type of fully automated "design space exploration" tends not to produce good enough results as the codesign process is often something that a human can do more efficiently. For example, sometimes the software needs to be refactored to a form that can exploit instruction level parallelism better. Sometimes it can be hard, or even impossible, for a software algorithm to realize that a complex-looking loop can be replaced with a simple single cycle custom instruction if implemented in hardware, and so on. Thus, we see that the realistic use case for an ASIP design toolset is to assist in the design task as much as possible while still leaving leeway for the engineer to exploit their knowledge in the field of algorithms or hardware design. This way, in case the engineer is skilled enough and the toolset assisting the ASIP design task is flexible enough, the processor design can eventually reach the performance of a fixed function hardware accelerator, while the design process can also be stopped at any point when the result is good enough.&lt;br />&lt;br />TCE is at a relatively mature state, providing graphical tools to design the TTA architectures, architecture description driven instruction set simulators, a retargetable compiler, and a processor implementation generator supporting VHDL output. Because TCE uses TTA, a static ILP architecture, as its processor template, the efficiency of the end result is highly dependent on an efficient compiler. The compiler has been our main focus in recent years and will most likely be in the future also.&lt;br />&lt;br />&lt;span style="font-size:medium;">LLVM in TCE&lt;/span>&lt;br />&lt;br />We were introduced to the LLVM project at about 2006. Until that point we used an old gcc v2.7.0 compiler ported from MOVE, the toolset preceeding TCE. It goes without saying that maintaining such an ancient piece of gcc code was quite a challenge and we actively tried to look for something easier to work with.&lt;br />&lt;br />In addition to a clean C++-based code base, one of the main things that lured us towards LLVM from a purely gcc-based compiler were the interprocedural optimizations. Interprocedural optimizations are very useful for us as we work with standalone (no operating system with a runtime linker assumed) fully linked programs. In fact, our compiler toolchain does not currently include any linker at all but inputs fully linked LLVM bitcodes to its code generation phase. This means that most programs benefit from the LLVM global optimizations such as aggressive inlining and dead code elimination as the externally visible interface in the compiled programs can be limited merely to the startup functions.&lt;br />&lt;br />After poking around and doing some experimental TTA code generation prototyping with LLVM (I think LLVM was at version 1.7 or so at that point) we noted that LLVM was getting more and more traction and started to look for a proper way for using LLVM for parts of the TCE code generation process.&lt;br />&lt;br />As described previously, our target, on top of being customizable, is transport triggered, thus nothing like any other architecture supported by LLVM. This caused some trial-and-error coding efforts while figuring out the best way of taking advantage of the existing code base of LLVM while still supporting instruction scheduling that exploits the special trickery and the extra scheduling freedom enabled by TTA. Another requirement, the automated retargeting of the LLVM backend for the resources of different designed processors caused some long work days to get functioning robustly.&lt;br />&lt;br />In the end, we came up with a plugin based backend approach. TCE code generation chain now includes a tool that generates LLVM backends from our XML-format architecture description files, compiles them with a C++ compiler to a dynamic library, and loads the generated LLVM backend on the fly during the code generation. At this point each TTA is modeled as a simple operation triggered architecture so the supported instruction set and registers can be described in the TableGen format. This way we could use the LLVM instruction selection and register allocation code, but the resulting sequential code is not yet something we can execute in a TTA. To finalize the code generation, after LLVM register allocation we convert the MachineInstructions to another internal representation (CFG+DDG with moves as the graph nodes) and do the rest of the code generation and TTA-specific optimizations on the TCE side.&lt;br />&lt;br />The main missing piece for us in LLVM code generation framework is a VLIW-type instruction scheduler. In case of TTA which is a statically scheduled architecture with programmer visible operation latencies, the compiler instruction scheduling is not merely an optimization that can be optionally executed to get more performance. It's fully up to the compiler to schedule the operations in such a way that the operations are not started too early (in case a previous operation is executing) nor the results read too soon (in case the operation has not yet finished). Thus, in our case, the instruction scheduling is actually mandatory to get correct results. Also, in order to exploit the instruction level parallelism in an architecture like TTA or VLIW, one needs a way to bundle multiple instructions (in our case data transport moves) in a single wide instruction (or "a cycle") to be executed in parallel. Finally, a way to model the processor resources (with resource tables or similar) during scheduling is needed to produce correct code in the absence of structural hazard detection.&lt;br />&lt;br />It would be really nice to have such a VLIW-style scheduling framework in LLVM so we could move more of our code generation to LLVM-side. Unfortunately due to a lack of time, we have not yet started to work on this as our existing instruction scheduler does the job well enough when starting from the "sequential RISC-like operation triggered" output from the LLVM code generation.&lt;br />&lt;br />In general, LLVM and it core developers have been a pleasure to work with and we hope to be able to contribute to the LLVM project more in the future. Keep up the good work!&lt;br />&lt;br />&lt;span style="font-size:medium;">Future work and final words&lt;/span>&lt;br />&lt;br />Currently we are looking into GPGPU-style workload compilation issues. We are experimenting with OpenCL to describe the applications for easier extraction of parallelism while still providing clean support for calling custom operations from the kernel code. There is also work ongoing to extend TCE to better support task level parallelism with multicore ASIP generation and compiler assisted multithreading.&lt;br />&lt;br />In case you got interested in the project or have questions to ask, please join the mailing list &lt;a href="http://tce.cs.tut.fi/index.php/discussion">tce-users@cs.tut.fi&lt;/a>.&lt;br />&lt;br />I hope to see you there!&lt;br />&lt;br />&lt;span style="font-style: italic;">--Pekka Jääskeläinen,&lt;/span>&lt;br />&lt;span style="font-style: italic;font-size:x-small;" >a researcher that has been working in the TCE project from the start.&lt;/span>&lt;br />&lt;br />&lt;span style="font-size:medium;">&lt;/span></description></item><item><title>New "lldb" Debugger</title><link>https://blog.llvm.org/2010/06/new-lldb-debugger.html</link><pubDate>Tue, 08 Jun 2010 21:00:00 +0000</pubDate><guid>https://blog.llvm.org/2010/06/new-lldb-debugger.html</guid><description>I'm happy to announce a great new subproject of LLVM: LLDB. LLDB is a modern debugger infrastructure which is built (like the rest of LLVM) as a series of modular and reusable libraries. LLDB builds on existing LLVM technologies like the &lt;a href="http://blog.llvm.org/2010/01/x86-disassembler.html">enhanced disassembler&lt;/a> APIs, the Clang ASTs and expression parser, the LLVM code generator and JIT compiler.&lt;br />&lt;br />While still in early development, LLDB supports basic command line debugging scenarios on the Mac, is scriptable, and has great support for multithreaded debugging. LLDB is already much faster than GDB when debugging large programs, and has the promise to provide a much better user experience (particularly for C++ programmers). We are excited to see the new platforms, new features, and enhancements that the broader LLVM community is interested in.&lt;br />&lt;br />If you'd like to try out LLDB and participate in its development, please visit &lt;a href="http://lldb.llvm.org/">http://lldb.llvm.org/&lt;/a> and consider signing up for the &lt;a href="http://lists.cs.uiuc.edu/mailman/listinfo/lldb-dev">lldb-dev&lt;/a> and &lt;a href="http://lists.cs.uiuc.edu/mailman/listinfo/lldb-commits">lldb-commits&lt;/a> mailing lists.&lt;br />&lt;br />-Chris and the LLDB Team</description></item><item><title>LLVM receives first ever SIGPLAN Software Systems Award</title><link>https://blog.llvm.org/2010/06/llvm-receives-first-ever-sigplan.html</link><pubDate>Mon, 07 Jun 2010 23:37:00 +0000</pubDate><guid>https://blog.llvm.org/2010/06/llvm-receives-first-ever-sigplan.html</guid><description>Today the &lt;a href="http://www.acm.org/press-room/news-releases/2010/sigplan-software-award/view">ACM announced&lt;/a> that Chris Lattner and the LLVM Project are the recipient of the &lt;a href="http://www.sigplan.org/award-software.htm">Programming Languages Software Award&lt;/a>.&lt;br />&lt;br />This award recognizes the impact that LLVM has had on the compiler research community, which can be seen in the large number of &lt;a href="http://llvm.org/pubs/">research publications using LLVM&lt;/a> and the number of compiler courses that are using LLVM to teach compiler construction and optimization techniques. As part of this award, the ACM is donating $2500 to the LLVM project.</description></item><item><title>Clang++ Builds Boost!</title><link>https://blog.llvm.org/2010/05/clang-builds-boost.html</link><pubDate>Thu, 20 May 2010 13:42:00 +0000</pubDate><guid>https://blog.llvm.org/2010/05/clang-builds-boost.html</guid><description>&lt;a href="http://www.boost.org/">Boost&lt;/a> is a collection of open-source, peer-reviewed C++ libraries that's well-known for having many good utility components for C++ programmers. It's also well-known for using bleeding-edge C++ techniques, such as extensive template and preprocessor metaprogramming, that have pushed many C++ compilers beyond their breaking point. Beyond just being a library, Boost has become a benchmark and a selling point for C++ compilers: is your compiler standards-confomant enough to build Boost?&lt;br />&lt;div>&lt;br />&lt;/div>&lt;div>Clang is.&lt;/div>&lt;div>&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;/div>&lt;div>This morning, Clang++ had its first fully-successful Boost regression test run, passing every applicable C++ test on the Boost release branch [*]. According to today's &lt;a href="http://www.boost.org/development/tests/release/developer/summary.html">results&lt;/a>, Clang is successfully compiling more of Boost than other, established compilers for which Boost has historically been tailored (through various workarounds and configuration switches). In fact, Clang's &lt;a href="http://svn.boost.org/svn/boost/branches/release/boost/config/compiler/clang.hpp">compiler configuration&lt;/a> in Boost is completely free of any of Boost's C++98/03 defect macros.&lt;/div>&lt;div>&lt;br />&lt;div>As for the specifics: tests were run on Mac OS X 10.6 (Snow Leopard) with Clang targeting x86-64, debug build of Boost with the Clang toolset and a Release build of Clang from Subversion trunk.&lt;br />&lt;div>&lt;div>&lt;br />&lt;/div>&lt;div>If you want to try Boost with Clang, first &lt;a href="http://clang.llvm.org/get_started.html">get Clang from Subversion&lt;/a> trunk and then &lt;a href="https://svn.boost.org/trac/boost/wiki/BoostSubversion">get Boost from Subversion&lt;/a> (the release branch is most stable) and edit your &lt;span class="Apple-style-span" style="font-family:'courier new';">~/user-config.jam&lt;/span> file by adding the following line:&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>&lt;span class="Apple-style-span" style="font-family:'courier new';"> using clang ;&lt;/span>&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>assuming that "clang++" is in your path. Then, you can run&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>&lt;span class="Apple-style-span" style="font-family:'courier new';">bjam toolset=clang&lt;/span>&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>to instruct Boost.Build to use Clang as its compiler.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>[*] For those keeping score, the "build" results are build-system tests, not compiler tests, and the MPI tests are disabled due to &lt;a href="https://svn.boost.org/trac/boost/ticket/4214">breakage&lt;/a> in the Serialization library. We are working with the library author to address the Serialization problems in Boost.&lt;/div>&lt;/div>&lt;/div>&lt;/div></description></item><item><title>The Glasgow Haskell Compiler and LLVM</title><link>https://blog.llvm.org/2010/05/glasgow-haskell-compiler-and-llvm.html</link><pubDate>Mon, 17 May 2010 21:19:00 +0000</pubDate><guid>https://blog.llvm.org/2010/05/glasgow-haskell-compiler-and-llvm.html</guid><description>If you read the LLVM 2.7 release notes carefully you would have noticed that one of the new external users is the &lt;a href="http://www.haskell.org/ghc">Glasgow Haskell Compiler&lt;/a> (GHC). As the author of the &lt;a href="http://hackage.haskell.org/trac/ghc/wiki/Commentary/Compiler/Backends/LLVM">LLVM backend for GHC&lt;/a>, I have been invited to write a post detailing the design of the backend and my experiences with using LLVM. This is that post :).&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;br />I began work on the backend around July last year, undertaking it as part of an honours thesis for my bachelor of Computer Science. Currently the backend is quite stable and capable on Linux x86, able to bootstrap GHC itself. Other platforms haven't received any attention yet.&lt;br />&lt;br />&lt;h2>What is GHC and Haskell&lt;br />&lt;/h2>GHC is a compiler for Haskell, a standardized, lazy, functional programming language. Haskell supports features such as static typing with type inference, lazy evaluation, pattern matching, list comprehension, type classes and type polymorphism. GHC is the most popular Haskell compiler, it compiles Haskell to native code and is supported of X86, PowerPC and SPARC.&lt;br />&lt;br />&lt;h2>Existing pipeline&lt;/h2>Before the LLVM backend was added, GHC already supported two backends, a C code generator and a native code generator (NCG).&lt;br />&lt;br />The C code generator was the first backend implemented and it works pretty well but is slow and fragile due to its use of many GCC specific extensions and need to post processes the assembly code produced by GCC to implement optimisations which aren't possible to do in the C code. The native code generator was started later to avoid these problems. It is around 2-3x quicker than the C backend and generally reduces the runtime of a Haskell program by around 5%. GHC developers are hoping to depreciate the C backend in the next major release.&lt;br />&lt;br />&lt;h2>Why an LLVM backend?&lt;/h2>&lt;ul>&lt;li>&lt;em>Offload work&lt;/em>: Building a high performance compiler backend is a huge amount of work, LLVM for example was started around 10 years ago. Going forward, the LLVM backend should be a lot less work to maintain and extend than either the C backend or NCG. It will also benefit from any future improvements to LLVM.&lt;/li>&lt;li>&lt;em>Optimisation passes&lt;/em>: GHC does a great job of producing fast Haskell programs. However, there are a large number of lower level optimisations (particularly the kind that require machine specific knowledge) that it doesn't currently implement. Using LLVM should give us most of them for free.&lt;/li>&lt;li>&lt;em>The LLVM Framework&lt;/em>: Perhaps the most appealing feature of LLVM is that it has been designed from the start to be a compiler framework. For researchers like the GHC developers, this is a great benefit and makes LLVM a very fun playground. For example, within a couple of days of the public release of the LLVM backend one developer, Don Stewart, wrote a genetic algorithm to find the best LLVM optimisation pipeline to use for various Haskell programs (you can find his blog post about this &lt;a href="http://donsbot.wordpress.com/2010/03/01/evolving-faster-haskell-programs-now-with-llvm/">here&lt;/a>).&lt;/li>&lt;/ul>&lt;br />&lt;h2>Show me the speed&lt;/h2>That's enough reasoning for now though, lets instead jump right in and see GHC's LLVM backend in action. I'll also use this opportunity to do a little Haskell promoting as well, so you've been warned :).&lt;br />&lt;br />For a nice simple &lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=14">problem&lt;/a> to solve lets find the starting number under 1 million that generates the longest &lt;a href="http://en.wikipedia.org/wiki/Hailstone_sequence">hailstone sequence&lt;/a>. The hailstone sequence is a number sequence generated from a starting number n by the following rules:&lt;br />&lt;ul>&lt;li>if n is even, the next number is n/2&lt;/li>&lt;li>if n is odd, the next number is 3n + 1&lt;/li>&lt;li>if n is 1, stop.&lt;/li>&lt;/ul>Here is a solution in both C and Haskell:&lt;br />&lt;pre>&lt;code>&lt;br />#include &amp;lt;stdio.h&amp;gt;&lt;br />&lt;br />int main(int argc, char **argv) {&lt;br /> int longest = 0, terms = 0, this_terms = 1, i;&lt;br /> unsigned long j;&lt;br />&lt;br /> for (i = 1; i &amp;lt; 1000000; i++) {&lt;br /> j = i;&lt;br /> this_terms = 1;&lt;br />&lt;br /> while (j != 1) {&lt;br /> this_terms++;&lt;br /> j = j % 2 == 0 ? j / 2 : 3 * j + 1;&lt;br /> }&lt;br />&lt;br /> if (this_terms &amp;gt; terms) {&lt;br /> terms = this_terms;&lt;br /> longest = i;&lt;br /> }&lt;br /> }&lt;br /> printf("longest: %d (%d)\n", longest, terms);&lt;br /> return 0;&lt;br />}&lt;br />&lt;br />--------&lt;br />&lt;br />import Data.Word&lt;br />&lt;br />collatzLen :: Int -&amp;gt; Word32 -&amp;gt; Int&lt;br />collatzLen c 1 = c&lt;br />collatzLen c n | n `mod` 2 == 0 = collatzLen (c+1) $ n `div` 2&lt;br /> | otherwise = collatzLen (c+1) $ 3*n+1&lt;br />&lt;br />pmax x n = x `max` (collatzLen 1 n, n)&lt;br />&lt;br />main = print . solve $ 1000000&lt;br /> where solve xs = foldl pmax (1,1) [2..xs-1]&lt;br />&lt;/code>&lt;br />&lt;/pre>&lt;br />Compiling the Haskell solution with the various backend gives the following runtime:&lt;br />&lt;ul>&lt;li>&lt;em>GHC-6.13 (NCG)&lt;/em>: 2.876s&lt;/li>&lt;li>&lt;em>GHC-6.13 (C)&lt;/em>: 0.576s&lt;/li>&lt;li>&lt;em>GHC-6.13 (LLVM)&lt;/em>: 0.516s&lt;/li>&lt;li>&lt;em>Clang-1.1&lt;/em>: 0.526s&lt;/li>&lt;li>&lt;em>GCC-4.4.3&lt;/em>: 0.335s&lt;/li>&lt;/ul>Pretty great results for LLVM, it's the fastest backend of the three! The NCG performs quite badly in this case, despite my claim it usually outperforms the C backend. Recently when the GHC developers posted a message to the mailing list detailing plans to depreciate the C code generator due to the ongoing maintenance problems. A few GHC users responded, providing examples where the C code generator easily outperformed the native code generator as it does above. Thankfully for all those cases the LLVM backend does even better.&lt;br />&lt;br />One of the reasons I went with this example program is that I wanted to show off Haskell a little by demonstrating how easy it is to parallelize the solution:&lt;br />&lt;pre>&lt;br />&lt;code>&lt;br />import Control.Parallel&lt;br />import Data.Word&lt;br />&lt;br />collatzLen :: Int -&amp;gt; Word32 -&amp;gt; Int&lt;br />collatzLen c 1 = c&lt;br />collatzLen c n | n `mod` 2 == 0 = collatzLen (c+1) $ n `div` 2&lt;br /> | otherwise = collatzLen (c+1) $ 3*n+1&lt;br />&lt;br />pmax x n = x `max` (collatzLen 1 n, n)&lt;br />main = print soln&lt;br /> where&lt;br /> solve xs = foldl pmax (1,1) xs&lt;br /> s1 = solve [2..500000]&lt;br /> s2 = solve [500001..999999]&lt;br /> soln = s2 `par` (s1 `pseq` max s1 s2)&lt;br />&lt;/code>&lt;br />&lt;/pre>&lt;br />That's all! We simply divide the problem into two parts and combine them using Haskell's 'par' and 'pseq' constructs that tell the compiler to run the two parts 's1' and 's2' in parallel. And the run time (using LLVM of course):&lt;br />&lt;ul>&lt;li>&lt;em>GHC-6.13 (Parallel, LLVM)&lt;/em>: 0.312&lt;/li>&lt;/ul>Great! We're even beating C here. Sure this is a very easy problem to parallelize but its still pretty cool.&lt;br />&lt;br />Finally, lets look at a bigger and more 'realistic' program and see how the LLVM backend performs. For this we will use HRay, a ray tracer implemented in Haskell. Using it to generate the image below we get the following run times:&lt;br />&lt;br />&lt;a href="http://3.bp.blogspot.com/_Br4acuar1QM/S-OxB5nGI1I/AAAAAAAAAP4/qRIcxsMsx6Q/s1600/mirror.jpg" onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}">&lt;img alt="Ray Traced Image" border="0" id="BLOGGER_PHOTO_ID_5468409018760700754" src="http://3.bp.blogspot.com/_Br4acuar1QM/S-OxB5nGI1I/AAAAAAAAAP4/qRIcxsMsx6Q/s400/mirror.jpg" style="cursor: hand; cursor: pointer; display: block; height: 306px; margin: 0px auto 10px; text-align: center; width: 400px;" />&lt;/a>&lt;br />&lt;ul>&lt;li>&lt;em>GHC (NCG):&lt;/em> 29.499&lt;/li>&lt;li>&lt;em>GHC (C):&lt;/em> 29.043&lt;/li>&lt;li>&lt;em>GHC (LLVM):&lt;/em> 20.774&lt;/li>&lt;/ul>A 30% reduction in run time with LLVM!&lt;br />&lt;br />&lt;h2>Backend overview&lt;/h2>Lets look quickly at the job that the LLVM backend has to perform. GHC uses two major intermediate representations for compiling Haskell, the first being Core. Core is a functional language, basically a form of typed lambda calculus and its in this form that GHC does most of its optimisation work. There is also a IR called STG, its very similar to Core but is slightly easier to work with for procedural code generation.&lt;br />&lt;br />&lt;a href="http://3.bp.blogspot.com/_Br4acuar1QM/S-OwnYREOZI/AAAAAAAAAPw/2ZELH-agCFU/s1600/pipeline.png" onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}">&lt;img alt="" border="0" ghc="" id="BLOGGER_PHOTO_ID_5468408563133331858" pipeline"="" src="http://3.bp.blogspot.com/_Br4acuar1QM/S-OwnYREOZI/AAAAAAAAAPw/2ZELH-agCFU/s400/pipeline.png" style="cursor: hand; cursor: pointer; display: block; height: 98px; margin: 0px auto 10px; text-align: center; width: 400px;" />&lt;/a>&lt;br />The second major IR is C minus minus (Cmm), which is low level imperative language designed to act as an interface between the high level Haskell compiler parts and the low level code generation. Cmm as a language is quite similar to LLVM in terms of design and feature set (e.g both use bit types such as i32...). The syntax is quite different though with Cmm looking a little like C and LLVM looking like assembly. The similarity of the two shouldn't really come as much of a surprise since they are both positioned at the same point in a compiler pipeline and also because Cmm is mostly a subset of the &lt;a href="http://www.cminusminus.org/">C--&lt;/a> language. C-- is a language designed by one of the primary GHC developers (Simon Peyton Jones) and others to act as a universal IR for compiler writers to target, very much like LLVM. (The research focus of C-- was quite different from LLVM though, C-- was designed to try to solve the problem of supporting high level language features like garbage collection and exceptions in a universal language with zero overhead. LLVM seems to be focused on supporting aggressive optimisation of a universal language). The C-- project never managed to take off like LLVM did though and so now Cmm simply serves as a good IR for GHC backends to work with.&lt;br />&lt;br />The LLVM backend fits into the GHC pipeline after Cmm, so its job is to compile from Cmm to LLVM Assembly. This is mostly straight forward because of the similarity of the two languages.&lt;br />&lt;br />&lt;h2>The new calling convention&lt;/h2>There was one major challenge though in writing the backend where LLVM didn't provide the features needed to properly implement Haskell and so I needed to extend LLVM. This extension is the new calling convention I wrote of at the start of the post and to explain why its necessary we'll have to look very briefly at the execution model for Haskell used by GHC.&lt;br />&lt;br />GHC defines an abstract machine that implements the execution model for Haskell code. This is called the 'STG Machine' (or Spineless Tagless G-Machine) and its job is to evaluate the final, functional IR used by GHC, STG. The STG machine consists of three main parts, registers, a stack and a heap. For this stack, GHC doesn't use the standard C stack but implements its own. What we are concerned with though is just how the registers are implemented. The easiest method is to just store them all in memory as a structure and indeed GHC supports this method (its refereed to as 'unregistered mode' and is used for easier porting of GHC). However because of how often they are accessed a far more efficient way to implement them is to map them onto real hardware registers, which roughly halves the runtime of a typical Haskell program. So this is what GHC does, although as there are far too many STG machine registers to map onto real registers, it has to still store some of them in memory.&lt;br />&lt;br />This is a problem for the LLVM backend though as it has no control over the register allocation. We can still create a working backend by only supporting 'unregistered mode' but this isn't very useful due to the poor performance. Also we aren't just focused on performance, compatibility with the other backends is a major concern. We need to support the same register mapping as they use so that Haskell code compiled by LLVM will be able to link with code compiled by the other backends. Lets look quickly at how the other backends achieve this register mapping.&lt;br />&lt;br />With the native code generator its very straight forward since it has full control over the register allocation. How about the C backend though? Typically this would be a problem for C as well since it offers no control over register allocation. Thankfully GCC offers an extension, '&lt;a href="http://gcc.gnu.org/onlinedocs/gcc-4.5.0/gcc/Global-Reg-Vars.html#Global-Reg-Vars">Global Register Variables&lt;/a>', which allows you to assign a global variable to always reside in a specific hardware register. GCC implements this feature basically by removing the register specified from the list of known registers that its register allocator uses.&lt;br />&lt;br />So the solution for LLVM is a new calling convention but how does this work? Well the calling convention passes arguments in the hardware registers that GHC expects to find the STG machine registers in. So on entry to any function they're in the correct place. Unlike with the NCG or C backend this doesn't exclusively reserve the registers, so in the middle of a function we can't guarantee that the STG machine registers will still be in the hardware registers, they may have been spilled to the stack. This is fine, in fact its an improvement. It allows LLVM to generate the most efficient register allocation, having more registers and flexibility than the other backends, while still maintaining compatibility with them since on any function entry the STG machine registers are guaranteed to be in the correct hardware registers.&lt;br />&lt;br />&lt;h2>Evaluation of the backend&lt;/h2>The two benchmarks at the start gave you a taste of the performance improvements that LLVM is able to bring to GHC. However, how does it perform across the board? The best way I have to test this at the moment is by using a benchmark suite included with GHC called 'nofib'. Currently this suite puts the native code generators in first place, with the LLVM code generator a close second at 3% behind in run time and the C code generator in last place at 6% behind. An important characteristic of the LLVM code generator though is that its consistent. At its best its able to beat the existing backends with a 2x speed-up in run time while at its worst its usually within 3 - 30% of the performance of the best of the NCG or C backend. So you don't get any cases like the NCG has where it really looses out. Its also worth noting that no work has been done yet on optimising the performance of the LLVM backend.&lt;br />&lt;br />The other great benefit of the LLVM code generator is its smaller size and simpler code base. The NCG clocks in at ~20,500 lines of code, the C backend at ~5,300 and the LLVM backend at ~3,100. For the C backend, around 2,000 lines of that code are Perl code which does the post processing of the GCC produced assembly, fragile and complex code full of regular expressions. For the LLVM backend around 1,200 lines of its code are a library for generating and printing out LLVM Assembly, so the complex code generation code is only at around 1,800 lines.&lt;br />&lt;br />&lt;h2>Problems with backend&lt;/h2>There is one major issue remaining with the LLVM backend that I currently know of, its inability to implement a optimisation used by GHC called &lt;em>'TABLES_NEXT_TO_CODE'&lt;/em> (TNTC).&lt;br />&lt;br />For functions, GHC needs to associate some meta-data with them, referred to as an info table. This table contains information about the function used by the run time system. Without the TNTC optimisation the linking of a table and function is done by having the info table contain a pointer to the function. With the TNTC optimisation the code and data is laid out so that the info table resides immediately before the function. This allows both the function and its info table to be accessed from the same pointer, which speeds up access of a function (one pointer lookup instead of two) and reduces the size of info tables.&lt;br />&lt;br />&lt;a href="http://1.bp.blogspot.com/_Br4acuar1QM/S-OwSLPvitI/AAAAAAAAAPo/BSjScxNzjY8/s1600/heap_layout.png" onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}">&lt;img alt="GHC Code Layout Modes" border="0" id="BLOGGER_PHOTO_ID_5468408198860868306" src="http://1.bp.blogspot.com/_Br4acuar1QM/S-OwSLPvitI/AAAAAAAAAPo/BSjScxNzjY8/s400/heap_layout.png" style="cursor: hand; cursor: pointer; display: block; height: 191px; margin: 0px auto 10px; text-align: center; width: 400px;" />&lt;/a>&lt;br />How the other two backends handle this is the similar to the STG machine registers. The NCG can implement this with no problems, while the C backend is unable to do this in plain C. However, this time with no GCC extensions able to implement the optimisation either it resorts to post processing the assembly code produced by GCC. For LLVM we have the same problem as the C backend, LLVM doesn't provide a way to explicitly layout the code and data in the object file like we need. This optimisation is fairly significant, giving about a 5% reduction in run times when enabled, so its something I hope to fix up in the future either by adding support for it to LLVM or by post processing the assembly as the C backend does.&lt;br />&lt;br />&lt;h2>Success of LLVM?&lt;/h2>When I asked for the GHC calling convention to be included in LLVM a price was asked of me, a blog post, this one. So I asked Chris what he felt I should write about. There is just one point left to cover to make sure I've paid in full.&lt;br />&lt;pre>&amp;gt; [Chris Lattner]: Talking about what you think is good and what you think should be improved in LLVM would also be great. :)&lt;/pre>&lt;br />I'd like to see LLVM gain the needed features to be able to implement the TNTC optimisation in the GHC backend. It would also be great if LLVM was better supported on Sparc as that's a platform GHC works reasonably well on where LLVM doesn't. As for what is good? When you look at the GHC LLVM backend, it achieves very close or better performance than existing backends that have been around for years, while having a smaller and simpler code base. I think you also gain a lot from the LLVM type system, it really helped catch most of the bugs fixed so far in the backend. Finally the great documentation. This is something I really appreciate and often is lacking in many projects. &lt;br />&lt;br />&lt;h2>Future&lt;/h2>Since finishing my thesis at the end of 2009, I haven't been able to get much work done on the LLVM backend. However I was lucky enough to receive an internship with Microsoft Research in Cambridge, UK, where two of the primary GHC developers (Simon Marlow &amp;amp; Simon Peyton Jones) work. As part of this I'll be looking to implement the TNTC optimisation as well as general stabilisation and optimisation work. The backend only takes advantage of features offered in 2.5, so I also need to investigate and update it to use the newer 2.6 and 2.7 features. There is also a Google Summer of Code student, &lt;a href="http://socghop.appspot.com/gsoc/student_project/show/google/gsoc2010/haskell/t127230760615">Alp Mestanogullari&lt;/a>, who is working on the backend. He is looking to improve the binding used by the backend to interface with LLVM. This binding currently works by producing LLVM assembly code in a temporary file. We want to change this to use the LLVM API instead as this should bring faster compile speeds and allow us to extend the API offered by GHC to include LLVM features. Should all this work go well, hopefully you'll see LLVM become the default backend for GHC in the next major release :)&lt;br />&lt;br />If you feel like looking into any of this in more detail, you can find my thesis paper on the backend &lt;a href="http://docs.google.com/viewer?url=http%3A%2F%2Fwww.cse.unsw.edu.au%2F~pls%2Fthesis%2Fdavidt-thesis.pdf">here&lt;/a>.&lt;br />&lt;br />- David</description></item><item><title>New "libc++" C++ Standard Library</title><link>https://blog.llvm.org/2010/05/new-libc-c-standard-library.html</link><pubDate>Tue, 11 May 2010 13:32:00 +0000</pubDate><guid>https://blog.llvm.org/2010/05/new-libc-c-standard-library.html</guid><description>I'm happy to announce a new subproject of LLVM: "libc++". libc++ is an implementation of the C++ Standard Library, with a focus on standards compliance, highly efficient generated code, and with an aim to support C++'0x when the standard is ratified. libc++ is written and maintained by Howard Hinnant, but we look forward to contributions from the LLVM community.&lt;br />&lt;br />libc++ is approximately 85% complete at this point (including C++'0x features), and while it is intended to support and complement the Clang++ compiler, it can be ported to work with a broad variety of different C++ compilers. For more information, see the &lt;a href="http://libcxx.llvm.org ">http://libcxx.llvm.org&lt;/a> web page.&lt;br />&lt;br />-Chris</description></item><item><title>Extensible Metadata in LLVM IR</title><link>https://blog.llvm.org/2010/04/extensible-metadata-in-llvm-ir.html</link><pubDate>Wed, 14 Apr 2010 00:23:00 +0000</pubDate><guid>https://blog.llvm.org/2010/04/extensible-metadata-in-llvm-ir.html</guid><description>A common request by front-end authors is to be able to add some sort of metadata to LLVM IR. This metadata could be used to influence language-specific optimization passes (for example, Type Based Alias Analysis in C), tag information for a custom code generator, or pass through information to link time optimization. LLVM 2.7 provides first-class support for this, and has switched debug information over to use it (improving debug info!). &lt;br />&lt;br />While the details of this feature can be found in the &lt;a href="http://llvm.org/docs/LangRef.html">LLVM Language Reference&lt;/a> manual, sometimes it is hard to distill the big picture from the low-level details. This post tries to fill the gap by explaining some history, motivation and example use cases for this new LLVM 2.7 feature.&lt;br />&lt;br />This post was written by Devang Patel and myself.&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;br />Before we dive into how metadata works, it is useful to describe how debug information was represented in LLVM 2.6 and earlier:&lt;br />&lt;br />&lt;h2>Debug Information in LLVM 2.6&lt;/h2>&lt;br />Debugging information communicates source location information, type information and variable information to the debugger. This information is not used during the execution of program and does not result in executable code in the object file, but the code generator uses it to produce DWARF information. In this way, debug information is a sort of side channel from the front-end to the DWARF emitter in the code generator.&lt;br />&lt;br />For lack of a better mechanism, in LLVM 2.6 and earlier, debugging information is encoded using global variables tagged with a special "llvm.metadata" section. For example, we would generate something like this to describe C code like "int my_data;":&lt;br />&lt;br />&lt;pre>@my_data = common global i32 0, align 4&lt;br />&lt;br />@llvm.dbg.global_variable = internal constant %llvm.dbg.global_variable.type { &lt;br /> i32 458804, &lt;br /> {}* bitcast (%llvm.dbg.anchor.type* @llvm.dbg.global_variables to { }*), &lt;br /> {}* bitcast (%llvm.dbg.compile_unit.type* @llvm.dbg.compile_unit to { }*), &lt;br /> i8* getelementptr ([8 x i8]* @.str4, i32 0, i32 0), &lt;br /> i8* getelementptr ([8 x i8]* @.str4, i32 0, i32 0), &lt;br /> i8* null, &lt;br /> {}* bitcast (%llvm.dbg.compile_unit.type* @llvm.dbg.compile_unit to { }*), &lt;br /> i32 2, &lt;br /> {}* bitcast (%llvm.dbg.basictype.type* @llvm.dbg.basictype to { }*), &lt;br /> i1 false, &lt;br /> i1 true, &lt;br /> {}* bitcast (i32* @my_data to {}*)&lt;br />}, section "llvm.metadata"&lt;br />&lt;br />@.str4 = internal constant [8 x i8] c"my_data\00", section "llvm.metadata"&lt;br />&lt;/pre>&lt;br />In this example, @my_data is the actual global variable generated for the C variable. This is what gets generated regardless of whether debug info is enabled or not.&lt;br />&lt;br />Here, @.str4 and @llvm.dbg.global_variable were interpreted by the code generator as descriptors holding information about @my_data, with various fields indicating the line number the global is declared, the compile unit, etc. You can see a full description of these fields in the &lt;a href="http://llvm.org/releases/2.6/docs/SourceLevelDebugging.html#format_global_variables">LLVM2.6 Debug Info docs&lt;/a>. At code generation time, the dwarf writer would walk this and convert it to DWARF information. The LLVM globals would not get emitted as normal code because they are in the magic llvm.metadata section.&lt;br />&lt;br />While this did provide a basic level of functionality, it had a number of drawbacks. First, the @my_data global variable has an extra use in the IR, which may influence optimization of @my_data. For example the dead global elimination pass wouldn't delete it if dead, and the mod/ref analysis pass wouldn't analyze it because it appears that its address is taken. One major goal of debug information is that turning it on should not affect the executable code generated by the compiler. If it did, turning on debug info could hide the bug you're trying to track down!&lt;br />&lt;br />A second drawback of this implementation is that it has lots of pointless bitcast constant expressions. These extra objects bloat memory footprint, take time to allocate, unique and optimize, etc. The bitcasts also negatively impact readability of LLVM intermediate code, and are completely unnecessary: the dwarf emitter doesn't care about the types, it is walking this information as a data structure, not emitting it to memory.&lt;br />&lt;br />&lt;h2>Motivation for LLVM IR Metadata&lt;/h2>&lt;br />Based on our experiences with debug info, and a desire to implement new cool things, we &lt;a href="http://nondot.org/~sabre/LLVMNotes/EmbeddedMetadata.txt">designed&lt;/a> and implemented a brave new world where metadata was actually a first-class part of LLVM IR. The design aims to solve the issues mentioned above:&lt;br />&lt;br />&lt;ol>&lt;li>Optimizations shouldn't be affected by metadata unless they explicitly try to look at it.&lt;/li>&lt;li>We want to reduce the memory footprint and cost of debug info.&lt;/li>&lt;li>Metadata shouldn't have LLVM IR types.&lt;/li>&lt;li>Ideally, the syntactic clutter should be reduced, improving the odds that someone can decode this stuff.&lt;/li>&lt;/ol>&lt;br />Another important design point is that we want to be able to add new forms of metadata without the optimizers having to be updated to support them. This is a critical design point, because we want the metadata to be &lt;em>extensible&lt;/em> by front-end authors to do whatever they want, and shouldn't require hacking the optimizers.&lt;br />&lt;br />&lt;h2>Metadata in LLVM 2.7&lt;/h2>&lt;br />Metadata support includes several different related IR extensions: a new '&lt;a href="http://llvm.org/docs/LangRef.html#t_metadata">metadata&lt;/a>' type in LLVM IR, new &lt;a href="http://llvm.org/docs/LangRef.html#metadata">MDString&lt;/a>, &lt;a href="http://llvm.org/docs/LangRef.html#metadata">MDNode&lt;/a>, and &lt;a href="http://llvm.org/docs/LangRef.html#namedmetadatastructure">NamedMDNode&lt;/a> classes (all three of which derive from 'Value'), added support for referencing metadata from &lt;a href="http://llvm.org/docs/LangRef.html#intrinsics">intrinsics&lt;/a>, and support for &lt;a href="http://llvm.org/docs/LangRef.html#metadata">attaching it to instructions&lt;/a>. Metadata support is generally in the &lt;a href="http://llvm.org/doxygen/Metadata_8h-source.html">llvm/Metadata.h&lt;/a> header. We'll walk through each of these constructs in turn:&lt;br />&lt;br />The new &lt;b>'metadata' type&lt;/b> is the LLVM Type of each new IR object. This ensures that you can't use metadata as operands to random instructions, for example, you can't do '&lt;tt>add i32 4, !"str"&lt;/tt>' since metadata is not a first-class type. The restrictions on metadata mean that it can only appear as an argument to an intrinsic, as an operand to another metadata, at top-level in a module (NamedMDNode), or be attached to an instruction.&lt;br />&lt;br />The new &lt;b>MDString class&lt;/b> is used to represent string data in metadata, and it always has a metadata type. Since MDStrings are meant as metadata, not code, they are not null terminated in the .ll file. The MDString class allows C++ code walking the IR to access the arbitrary string data with a StringRef. In the .ll file, its syntax is something like:&lt;br />&lt;br />&lt;pre>!"foo"&lt;br />&lt;/pre>&lt;br />The new &lt;b>MDNode class&lt;/b> is a tuple that can reference arbitrary LLVM IR values in the program as well as other metadata. In the .ll file, MDNodes are numbered and the syntax for referring to one is "!123" where 123 is the number of the node being referenced. An MDNode is declared with something like:&lt;br />&lt;br />&lt;pre>!23 = !{ i32 4, !"foo", i32 *@G, metadata !22 }&lt;br />&lt;/pre>&lt;br />In this case, the MDNode has four operands, the first is a ConstantInt, the second is a MDString, the third is a global variable, the fourth is another MDNode. MDNode's come in two flavors: one is a normal global MDNode which references global variables, constants etc. The second is a function-local MDNode, which can (potentially transitively) refer to instructions within a particular function. One important aspect of MDNodes is that they are not considered to be "uses" of a value: for example, they won't be found with use_iterator and aren't counted for predicates like Value::hasOneUse(). This prevents metadata from accidentally affecting code generation.&lt;br />&lt;br />The new &lt;b>NamedMDNode class&lt;/b> provides named access to metadata at a module level, and each NamedMDNode contains a list of MDNode's. This gives clients of metadata (e.g. debug info) the ability to find all the metadata of a particular form (e.g. global variable debug descriptors). The Module class maintains a list of NamedMDNode instances just like it does global variables, functions, and aliases. In the .ll file, a NamedMDNode looks like this:&lt;br />&lt;br />&lt;pre>!my_named_mdnode = !{ !1, !2, !4212 }&lt;br />&lt;/pre>&lt;br />This defines a NamedMDNode with three referenced MDNodes.&lt;br />&lt;br />&lt;b>LLVM intrinsics may reference metadata&lt;/b> as normal operands. More specifically, they can directly reference MDNode and MDString objects even though other calls and other operations cannot. In .ll files, this looks something like:&lt;br />&lt;br />&lt;pre>!0 = metadata !{i32 524544, ...&lt;br />&lt;br />...&lt;br /> %x = alloca i32&lt;br /> call void @llvm.dbg.declare(metadata !{i32* %x}, metadata !0)&lt;br />&lt;/pre>&lt;br />This passes the module-level !0 MDNode into the second argument and passes a function-local MDNode as the first argument (which, since it is an mdnode, does not count as a use of %X). In this case, the code generator uses this information to know that the metadata !0 is the variable descriptor for the alloca %X. Note that intrinsics themselves are not considered metadata, so they can affect code generation etc.&lt;br />&lt;br />Finally, &lt;b>metadata can be attached to instructions&lt;/b>. Instructions can have an arbitrary list of MDNodes attached to them with string tags. For example:&lt;br />&lt;br />&lt;pre>store i32 0, i32* %P, !nontemporal !2, !frobnatz !123&lt;br /> ret void, !dbg !9&lt;br />&lt;/pre>&lt;br />The first case is a store with two instruction-level metadata records attached to it, one named 'nontemporal' (which is &lt;a href="http://llvm.org/docs/LangRef.html#i_store">implemented in LLVM 2.7&lt;/a>) and one named 'frobnatz' (which is a great new feature that might be in LLVM 2.8). The second is a return instruction with a debug location attached to it.&lt;br />&lt;br />&lt;br />&lt;h2>Using Extensible Metadata for Debug Info&lt;/h2>&lt;br />To contrast with the LLVM 2.6 debug info example above, in LLVM 2.7 we get something like this:&lt;br />&lt;br />&lt;pre>@my_data = common global i32 0, align 4&lt;br /> !llvm.dbg.gv = !{!0}&lt;br />&lt;br /> !0 = metadata !{&lt;br /> i32 524340, i32 0, metadata !1, metadata !"my_data", metadata !"my_data",&lt;br /> metadata !"", metadata !1, i32 2, metadata !3,&lt;br /> i1 false, i1 true, i32* @my_data&lt;br /> }&lt;br />&lt;/pre>&lt;br />This replaces the global variables with an MDNode and MDString. This shrinks the IR by eliminating the pointless bitcasts, eliminating the irrelevant IR types, and the use of @my_data by !0 is no longer considered a "use". However, we still have lots of &lt;a href="http://llvm.org/docs/SourceLevelDebugging.html#format_global_variables">magic fields that are documented elsewhere&lt;/a>.&lt;br />&lt;br />If you'd like to see more examples of debug info, you can see what the frontend generates by using something like "&lt;tt>clang foo.c -g -S -o - -emit-llvm | less&lt;/tt>".&lt;br />&lt;br />&lt;h2>What to use Metadata for&lt;/h2>&lt;br />A subtle point that was touched on above is that we don't want the optimizers to have to know about metadata. While it is very feasible to make optimizations preserve specific metadata (e.g. loop strength reduction could do some sort of fancy thing to update debug info it if wanted) by default, optimizations ignore and destroy it. For example, if an optimization deletes an instruction and there is a function-level MDNode referencing it, the reference in the MDNode will implicitly drop to null.&lt;br />&lt;br />This has some important implications on what it is safe to use metadata for: it can only be used for "value add" information, information that does not change the semantics of the program. To repeat this important point, &lt;b>use of metadata is only safe if the program retains its semantics when the metadata is silently dropped&lt;/b>.&lt;br />&lt;br />For example, it is trivially safe for debug information to use metadata (though the dwarf emitter has to be careful to tolerate null pointers!): if metadata is dropped, it just means that debug information &lt;em>quality&lt;/em> is reduced, it doesn't invalidate the debug info itself. In our example above, if the global "my_data" is deleted by the optimizer, the reference will drop to null and the debug info emitter won't generate a location for my_data.&lt;br />&lt;br />While this may sound limiting, there are lots of potential uses cases for metadata, you just have to be careful how you structure it. Lets run through a few examples:&lt;br />&lt;br />&lt;h2>Current and Potential Clients of Metadata&lt;/h2>&lt;br />LLVM 2.7 supports generating &lt;b>non-temporal &lt;a href="http://llvm.org/docs/LangRef.html#i_load">loads&lt;/a> and &lt;a href="http://llvm.org/docs/LangRef.html#i_store">stores&lt;/a>&lt;/b> using the !nontemporal instruction-level modifier as documented in the LangRef manual. A non-temporal access is normal access with a hint to the CPU that it can avoid pulling data into the cache, as it won't be accessed again recently. This is safe because !nontemporal is an optimization hint: dropping the !nontemporal hint will result in the optimizer producing a normal load and store, which may have lower performance, but provides the same semantics as an actual non-temporal access.&lt;br />&lt;br />A potential future use case is to support &lt;b>Type-Based Alias Analysis&lt;/b> (TBAA). TBAA is an optimization to know that "float *P1" and "int *P2" can never alias (in GCC, this is enabled with -fstrict-aliasing). The trick with this is that it isn't safe to implement TBAA in terms of LLVM IR types, you really need to be able to encode and express a type-subset graph according to the complex source-level rules (e.g. in C, "char*" can alias anything).&lt;br />&lt;br />An LLVM implementation of TBAA would encode the type-subset graph with MDNodes, and add type tags to load and store operations with a !tbaa instruction tag. A new &lt;a href="http://llvm.org/docs/AliasAnalysis.html">AliasAnalysis&lt;/a> implementation would look for these tags on accesses and walk the type subset graph to determine if the two accesses might alias each other. This use of metadata is also safe, because it is an optimization: if the type tag gets dropped, it is always safe to assume that the access aliases everything for TBAA purposes.&lt;br />&lt;br />More broadly, metadata is a great way for a &lt;b>front-end to communicate arbitrary information to custom language-specific optimization passes&lt;/b>. TBAA is one example, but this could equally apply to things like devirtualization (through class hierarchy analysis), doing locking and exception handling optimizations, even library-centric optimizations could be implemented with this.&lt;br />&lt;br />Since LLVM 2.7 is only the first release that supports metadata in its IR, we have yet to see how it will ultimately get used. If you end up using it in a novel or interesting way, please send me a link describing your use and I'll link to it from this post.&lt;br />&lt;br />-Chris and Devang</description></item><item><title>Intro to the LLVM MC Project</title><link>https://blog.llvm.org/2010/04/intro-to-llvm-mc-project.html</link><pubDate>Fri, 09 Apr 2010 23:27:00 +0000</pubDate><guid>https://blog.llvm.org/2010/04/intro-to-llvm-mc-project.html</guid><description>The LLVM Machine Code (aka MC) sub-project of LLVM was created to solve a number of problems in the realm of assembly, disassembly, object file format handling, and a number of other related areas that CPU instruction-set level tools work in. It is a sub-project of &lt;a href="http://llvm.org/">LLVM&lt;/a> which provides it with a number of advantages over other compilers that do not have tightly integrated assembly-level tools.&lt;br />&lt;br />This blog post talks about how the MC project evolved, describes a few different aspects of it , talks about the improvements/capabilities it brings to LLVM, and finishes off with the current status of the project.&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;br />&lt;h2>History and Background&lt;/h2>&lt;br />Before MC came around, LLVM was already a mature compiler system that support both static compilation (through a normal assembler) and as well as JIT compilation (which emitted encoded instruction bytes directly to memory) on many different targets and sub-targets. However, despite these capabilities, the implementation of these subsystems was not designed wonderfully: why should the X86 instruction encoder (used by the JIT) have to know how to encode the weird pseudo instructions that the X86 code generator uses for its convenience? Why was this code emitter specific to the one code model used by the JIT?&lt;br />&lt;br />Beyond lack of elegance, it has been a goal for quite a while (for example, see &lt;a href="http://llvm.org/devmtg/2009-10/">Bruno's 2009 devmtg talk&lt;/a>) to directly integrate an assembler into the compiler. Doing so would solve a number of problems: For fast compiles, it is incredibly wasteful for the compiler to carefully format a massive text file, then fork/exec an assembler, which then has to lex/parse/validate the file. In fact, since the rest of Clang is so fast, &lt;a href="http://clang.llvm.org/performance.html">the assembler takes ~20% of compile time&lt;/a> for C code at -O0 -g. In addition to winning back this performance, not relying on an external assembler is attractive for several other reasons: the compiler doesn't have to worry about lots of different buggy assemblers which have similar but inconsistent syntax, Windows users typically don't have assemblers (and MASM is not fully-featured enough to be targeted by a compiler), some systems like FreeBSD have old versions of binutils that lack modern features, etc.&lt;br />&lt;br />Previously, we tried implementing a "&lt;a href="http://wiki.llvm.org/Notes:Machine_Code_Emission_in_an_ideal_world">direct object emission&lt;/a>" system to allow the code generator to write .o files without an assembler, but this project hit a number of problems. One of the biggest problems is that it tried to re-implement all of the logic in AsmPrinter which handled "lowering" of the codegen IR to machine level constructs. This includes the logic that handled selection of linkage types, section selection, constant lowering and emission, lowering of debug info and exception info, etc. While these may not sound like a big deal, this logic is very delicate and having subtle differences between the .o file writer and .s file writer (e.g. one emitted a strong symbol and one emitting a weak symbol) wasn't acceptable. This previous project never even got to the interesting parts of an assembler, like relaxation support.&lt;br />&lt;br />Finally, beyond the previous scope of LLVM, there is a bigger toolchain out there that has to deal with things like assembly and disassembly of instructions. When a new instruction set extension comes around (e.g. SSE 4.2) the new instructions need to be added to the assembler, the disassembler, and the compiler. Since LLVM already had a JIT, it already knew how to do encoding of instructions, and we speculated that it might be reasonable to produce an assembler from the textual descriptions of the instructions in the code generator's tables. It would be great to be able to add an instruction description to one place and get the assembler, disassembler, and compiler backend support all at once.&lt;br />&lt;br />&lt;h2>Primary MC Components&lt;/h2>&lt;br />You can break down the MC-related data structures and components into "that which operates on instructions" and "that which does other stuff". To provide a consistent abstraction we introduced the new &lt;b>&lt;a href="http://llvm.org/doxygen/classllvm_1_1MCInst.html">MCInst&lt;/a>&lt;/b> class to represent an instruction with operands (e.g. registers, immediates, etc) which is separate from the code generator's existing notion of an instruction (MachineInstr). The "other stuff" includes a variety of classes like &lt;a href="http://llvm.org/doxygen/classllvm_1_1MCSymbol.html">MCSymbol&lt;/a> (which represents a label in a .s file), &lt;a href="http://llvm.org/doxygen/classllvm_1_1MCSection.html">MCSection&lt;/a>, &lt;a href="http://llvm.org/doxygen/classllvm_1_1MCExpr.html">MCExpr&lt;/a> etc. You can read the headers in the llvm/include/MC directory for more information on these.&lt;br />&lt;br />These MC classes live at a very low level in the LLVM system, depending only on the support and system libraries. The idea of this is that you can build something low-level (like a disassembler library) that doesn't have to link in the entire LLVM code generator (a disassembler doesn't need a register allocator :).&lt;br />&lt;br />Given this background, I'll talk about the major components of the MC project: the instruction printer, the instruction encoder, the instruction parser, the instruction decoder, the assembly parser, the assembler backend, and the compiler integration. LLVM already had these (except the instruction decoder and assembly parser), but the existing code has been refactored out and reworked substantially.&lt;br />&lt;br />&lt;b>Instruction Printer&lt;/b>&lt;br />&lt;br />The instruction printer is a very simple target-specific component that implements the MCInstPrinter API. Given a single MCInst, it formats and emits the textual representation of the instruction to a raw_ostream. Targets can have multiple MCInstPrinters, for example the X86 backend includes an AT&amp;amp;T and an Intel Syntax instruction printer. MCInstPrinters don't know anything about sections, directives, or other things like that so they are independent of object file format.&lt;br />&lt;br />Instruction printing is somewhat fiddly code (formatting all the operands exactly right, dealing with inconsistencies in the syntax of various instructions, etc) but LLVM already had a &lt;a href="http://llvm.org/docs/TableGenFundamentals.html">TableGen&lt;/a> backend that auto-generated much of this from the .td files. Getting an old-style LLVM target to support this requires introducing a new MachineInstr -&amp;gt; MCInst lowering pass, which then passes the MCInst to the InstPrinter.&lt;br />&lt;br />&lt;b>&lt;br />Instruction Encoder&lt;/b>&lt;br />&lt;br />The instruction encoder is another target-specific component which transforms an MCInst into a series of bytes and a list of relocations, implementing the MCCodeEmitter API. The API is quite general, allowing any bytes generated to be written to a raw_ostream. Because the X86 instruction encoding is very complex (aka "completely insane"), the X86 backend implements this interface with custom C++ code that is driven from data encoded in the .td files. This is the only realistic way to handle all the prefix bytes, REX bytes etc, and is derived from the old JIT encoder for X86. We hope and expect that encoders for future RISC targets will be directly generated from the .td files. When used by the compiler, the same MachineInst -&amp;gt; MCInst lowering code is used as for the instruction printer.&lt;br />&lt;br />&lt;b>&lt;br />Instruction Parser&lt;/b>&lt;br />&lt;br />In order to parse instructions when reading a .s file, targets can implement lexers and parsers for their syntax, providing the TargetAsmParser API. The lexer is largely shared code that is parameterized based on common assembly syntax features (e.g. what is the comment character?), but the parser is all target-specific. Once an instruction opcode and its operands have been parsed, it goes through a 'matching' process which decides which concrete instruction is being specified. For example, on X86, "addl $4, %eax" is an instruction with a 1-byte immediate, but "addl $256, %eax" uses a 4-byte immediate field and is represented as a different MCInst.&lt;br />&lt;br />The output of an parsed instruction is an opcode + list of operands, and the parser also exposes the API for matching. Not all instructions can be matched as they are parsed from a .s file (for example, an immediate size might depend on the distance between two labels) so instructions can be held in a more abstract-than-MCInst representation until relaxation is performed if required.&lt;br />&lt;br />&lt;b>&lt;br />Instruction Decoder&lt;/b>&lt;br />&lt;br />As you might expect, the instruction decoder implements the MCDisassembler API and turns an abstract series of bytes (implemented with the MemoryObject API, to handle remote disassembly) into an MCInst and a size. As with previous components, a target may implement multiple different decoders (the X86 backend implements X86-16, X86-32, and X86-64 decoders). The decoder turns immediate fields into simple integer immediate operands, if there is a reference to a symbol, the relocation representing the symbol has to be handled by a client of the decoder.&lt;br />&lt;br />&lt;b>&lt;br />Assembly Parser&lt;/b>&lt;br />&lt;br />The assembly parser handles all the directives and other gunk that is in an .s file that is not an instruction (which may be generic or may be object-file specific). This is the thing that knows what .word, .globl etc are, and it uses the instruction parser to handle instructions. The input to the Assembly parser is a MemoryBuffer object (which contains the input file) and the assembly parser invokes actions of an MCStreamer interface for each thing it does.&lt;br />&lt;br />&lt;b>MCStreamer is a very important API&lt;/b>: it is essentially an "assembler API" with one virtual method per directive and one "EmitInstruction" method that takes an MCInst. The MCStreamer API is implemented by the MCAsmStreamer assembly printer (which implements support for printing these directives to a .s file and uses the Instruction Printer to format the MCInsts) as well as the assembler backend (which writes out a .o file). It is impossible to overstate how important the MCStreamer API is for the overall MC picture to fit together as we'll see later. &lt;br />&lt;br />&lt;b>&lt;br />Assembler Backend&lt;/b>&lt;br />&lt;br />The assembler backend is one implementation of the MCStreamer API (along with the "MCAsmStreamer" text assembly code emitter) which implements all the "hard stuff" that assemblers do. For example, the assembler has to do "relaxation" which is the process that handles things like branch shortening, situations like "the size of this instruction depends on how far apart these two labels are, but the instruction is between the two labels, how do we break the cycle?" etc. It lays out fragments into sections, resolves instructions with symbolic operands down to immediates and passes this information off to object-file specific code that writes out (say) an ELF or MachO .o file.&lt;br />&lt;br />&lt;b>&lt;br />Compiler Integration&lt;/b>&lt;br />&lt;br />The final major piece of the puzzle is integrating this all into the compiler. In practice this meant making the compiler talk directly to the MCStreamer API to emit directives and instructions instead of emitting a text file. Converting over all the targets, debug info, eh emission, etc was a major project, and doubly so because it was taken as an opportunity to fix a bunch of major design issues in the AsmPrinter implementations (lots of copy and paste code etc). The new system is much better factored and lowers directly to MC constructs like MCSection and MCSymbol instead of passing around strings and using other ad-hoc data structures.&lt;br />&lt;br />The end result of this work is that the compiler backend now invokes the same MCStreamer interface to emit code that the stand-alone assembler parser does. This gives us high confidence that using the compiler backend to emit a text file (with the "MCAsmStreamer") and reading it back in with the asmparser will result in the same MCStreamer calls as when the code generator directly invokes them. &lt;br />&lt;br />&lt;h2>Building on these Primitive Components&lt;/h2>&lt;br />Now that you know about the major components of the MC ecosystem, and you've seen how key data structures like MCInst and MCStreamer are used to communicate between the components, we can talk about building nice things out of them.&lt;br />&lt;br />&lt;b>&lt;br />Disassembler Library&lt;/b>&lt;br />&lt;br />One major high-level API built on this is the "enhanced disassembler" API, which uses these components in this sequence:&lt;br />&lt;br />&lt;ol>&lt;li>It uses the Instruction Decoder to read machine code bytes in memory into an MCInst and determine instruction sizes.&lt;/li>&lt;li>It uses the Instruction Printer to print the textual form of the instruction to a buffer.&lt;/li>&lt;li>It uses the Instruction Parser to re-parse the textual form to find precise operand boundaries in the text and build a symbolic form of the operand.&lt;/li>&lt;/ol>&lt;br />This library provides a number of great capabilities. Sean described it and the X86 implementation in &lt;a href="http://blog.llvm.org/2010/01/x86-disassembler.html">his previous blog post&lt;/a>, and the interface is in the &lt;tt>llvm/include/llvm-c/EnhancedDisassembly.h&lt;/tt> header.&lt;br />&lt;br />You can also access some of the functionality on the command line by using the llvm-mc tool:&lt;br />&lt;br />&lt;pre>$ &lt;b>echo "0xCD 0x21" | llvm-mc --disassemble -triple=x86_64-apple-darwin9&lt;/b>&lt;br /> int $33&lt;br />$ &lt;b>echo "0 0" | llvm-mc --disassemble -triple=x86_64-apple-darwin9&lt;/b>&lt;br /> addb %al, (%rax)&lt;br />$ &lt;b>echo "0 0" | llvm-mc --disassemble -triple=i386-apple-darwin9&lt;/b>&lt;br /> addb %al, (%eax)&lt;br />$ &lt;b>echo "0x0f 0x01 0xc2" | llvm-mc --disassemble -triple=i386-apple-darwin9&lt;/b>&lt;br /> vmlaunch&lt;br />&lt;/pre>&lt;br />&lt;b>&lt;br />Stand-alone Assembler&lt;/b>&lt;br />&lt;br />If you combine the Assembly Parser, Instruction Parser, the Assembler Backend and the Instruction Encoder, you get a traditional stand-alone system assembler. The llvm-mc tool provides this capability with a command like:&lt;br />&lt;br />&lt;pre>$ &lt;b>llvm-mc foo.s -filetype=obj -o foo.o&lt;/b>&lt;br />$ &lt;b>echo " invalid_inst _foo, %ebx" | llvm-mc -filetype=obj -o /dev/null&lt;/b>&lt;br />&amp;lt;stdin&amp;gt;:1:5: error: unrecognized instruction&lt;br /> invalid_inst _foo, %ebx&lt;br /> ^&lt;br />&lt;/pre>&lt;br />The second example shows that the assembly parser gives nice caret diagnostics, not just "parse error on line 1" that many assemblers produce.&lt;br />&lt;br />&lt;b>&lt;br />Really Complicated Assembly 'cat'&lt;/b>&lt;br />&lt;br />If you want to, you can take the stand-alone assembler and hook the MCAsmStreamer interface up to the MCStreamer the assembler is calling. This allows you to read in a .s file (validating it) and then immediately print it back out. You can also play with options like -show-encoding and -show-inst (which shows MCInsts). Assembly cat is the default mode of llvm-mc for testing's sake, and you can play with it like this:&lt;br />&lt;br />&lt;pre>$ &lt;b>llvm-mc foo.s -o bar.s&lt;/b>&lt;br />$ &lt;b>echo "addl %eax, %ebx" | llvm-mc -show-encoding -show-inst&lt;/b>&lt;br /> .section __TEXT,__text,regular,pure_instructions&lt;br /> addl %eax, %ebx ## encoding: [0x01,0xc3]&lt;br /> ## &amp;lt;MCInst #66 ADD32rr&lt;br /> ## &amp;lt;MCOperand Reg:29&amp;gt;&lt;br /> ## &amp;lt;MCOperand Reg:29&amp;gt;&lt;br /> ## &amp;lt;MCOperand Reg:27&amp;gt;&amp;gt;&lt;br />$ &lt;b>echo "xorl _foo, %ebx" | llvm-mc -show-encoding&lt;/b>&lt;br /> .section __TEXT,__text,regular,pure_instructions&lt;br /> xorl _foo, %ebx ## encoding: [0x33,0x1c,0x25,A,A,A,A]&lt;br /> ## fixup A - offset: 3, value: _foo, kind: FK_Data_4&lt;br />&lt;/pre>&lt;br />The last example shows that the instruction encoder generates a fixup (aka relocation) as well as the data bytes for the instruction.&lt;br />&lt;br />&lt;b>&lt;br />Assembly Generating Compiler&lt;/b>&lt;br />&lt;br />Now that the compiler is wired up to emit all of its code through the MCStreamer API, we can connect various streamers to it. To get a "classic compiler", we can hook up an MCAsmStreamer to the and get a normal .s file out of the compiler:&lt;br />&lt;br />&lt;pre>$ &lt;b>clang foo.c -S -o foo.s&lt;/b>&lt;br />&lt;/pre>&lt;br />This uses the MCAsmStreamer and the Instruction Printers for the current target. One interesting observation is that .s file printing is very performance critical in the old world (when you don't have direct .o file writing support). Generating that huge text file requires a lot of detailed formatting and the compiler isn't doing a lot else at "-O0" mode, so it is a significant percentage of compile time.&lt;br />&lt;br />However, most build systems (e.g. makefiles) use the compiler in "-c" mode which asks for a .o file. If the compiler supports directly writing a .o file, the .s path isn't hot at all because it isn't being used. This means that we can reasonably make -S mode default to emitting a .s file with tons of helpful comments in it: this mode (e.g. gcc -fverbose-asm) is supported in some form by many compilers, but most people don't know it exists. The presence of direct .o file writing support means that we can turn this on by default! Also, the LLVM implementation of this is pretty nice, with information about spills, loop nests etc.&lt;br />&lt;br />&lt;b>&lt;br />Compiler-Integrated Assembler&lt;/b>&lt;br />&lt;br />As you might have guessed by now, LLVM also supports an integrated assembler. While this will eventually become the default for targets that support it, right now clang requires you to pass the -integrated-as flag:&lt;br />&lt;br />&lt;pre>$ &lt;b>clang foo.c -c -o foo.o -integrated-as&lt;/b>&lt;br />&lt;/pre>&lt;br />To the user, this works just like the non-integrated-as support. If you pass -v though, you'll see that the compiler is directly emitting the .o file and the assembler isn't run by the driver.&lt;br />&lt;br />This works very simply: the assembler backend is provided as the MCStreamer to the compiler, and it handles the various things the system assembler used to take care of. This means that the assembler never has to (for example) print out MCInsts to a textual representation and reparse them, it just passes the well-formed MCInsts the code generator is using directly to the assembler backend.&lt;br />&lt;br />This is all well and good except for one thing: inline assembly. With inline assembly, arbitrary assembly language can be included in the source file (optionally munged by the compiler to insert operand constraint information etc), and we have no choice but to parse this with the assembly parser. Fortunately, we have a nice clean and well decomposed system, so we the assembly handling code just creates a new temporary assembly parser to handle the inline asm, and has it talk to the same MCStreamer instance that the compiler is using. This means that the current state of the streamer is the same when the inline assembly is parsed as it would be if the system assembler is used.&lt;br />&lt;br />Using an integrated has other benefits as well: we can tightly integrate it with the clang diagnostics system instead of having the assembler detect the error late and report it with a foreign error. Beyond consistency, we can actually give really good information about where the error occurs, relaying it back to where in the &lt;em>original source code&lt;/em> the problem is. Compare these examples with and without the integrated assembler:&lt;br />&lt;br />&lt;pre>$ &lt;b>cat t.c&lt;/b>&lt;br />int foo(int X) {&lt;br /> __asm__ ("frob %0" : "+r" (X));&lt;br /> return X;&lt;br />}&lt;br />$ &lt;b>gcc t.c&lt;/b> &lt;br />/var/folders/51/51Qw875vFdGa9KojoIi7Zk+++TM/-Tmp-//ccyXfgfZ.s:11:no such instruction: `frob %eax'&lt;br />$ &lt;b>clang t.c&lt;/b>&lt;br />/var/folders/51/51Qw875vFdGa9KojoIi7Zk+++TM/-Tmp-/cc-4zimMn.s:15:no such instruction: `frob %eax'&lt;br />clang: error: assembler command failed with exit code 1 (use -v to see invocation)&lt;br />$ &lt;b>clang t.c -integrated-as&lt;/b>&lt;br />&lt;b>t.c:2:11: &lt;font color="red">error:&lt;/font> unrecognized instruction&lt;/b>&lt;br /> frob %eax&lt;br />&lt;font color="green"> ^&lt;/font>&lt;br />&lt;b>&amp;lt;inline asm&amp;gt;:1:2: note:&lt;/b> instantated into assembly here&lt;br /> __asm__ ("frob %0" : "+r" (X));&lt;br />&lt;font color="green"> ^&lt;/font>&lt;br />1 error generated.&lt;br />&lt;/inline>&lt;/pre>&lt;br />I don't know about you, but I find it much more useful to know that line 2 of my C file is the problem than to find out that line 15 of a deleted file is. :) It is worth pointing out that it is incredibly important to show the code being parsed by the assembler, because after operand substitution etc it is not always clear from the source code what the problem is.&lt;br />&lt;br />&lt;h2>Status and Open Projects!&lt;/h2>&lt;br />As described above, the architecture of the MC subsystems is already quite advanced and we have a lot of code written. However, not all of it is production quality and we don't yet have people signed up to do all the interesting work! As of this writing here is the high level status:&lt;br />&lt;br />&lt;ol>&lt;li>All the clang-side work is done: the driver knows -integrated-as, the diagnostics subsystem can handle assembler errors, the code generator is fully switched over to use MCStreamer, etc.&lt;/li>&lt;li>The X86 and ARM &lt;a href="http://blog.llvm.org/2010/01/x86-disassembler.html">disassemblers&lt;/a> are in good shape and considered to be at or near production quality.&lt;/li>&lt;li>The X86 instruction printer is done for both AT&amp;amp;T and Intel Syntax.&lt;/li>&lt;li>The MC components have been designed to be object file independent (e.g. work for MachO, ELF, PE-COFF etc) but only have an implementation for MachO (used on Mac OS/X systems). Adding support for ELF and/or PE-COFF should be reasonably straight-forward.&lt;/li>&lt;li>The X86 AT&amp;amp;T-syntax assembly parser is missing some important features, e.g. forward/backward labels, support for inferring suffixes on instructions (e.g. add -&amp;gt; addl), macros etc. However, it is sufficiently advanced to reliably parse everything generated by the LLVM X86 backend. Adding these missing features should be quite straight-forward.&lt;/li>&lt;li>The X86 Intel-syntax assembly parser doesn't exist.&lt;/li>&lt;li>The ARM assembly parser is not complete (probably 50% to useful), and the instruction printer is about 50% refactored from the old-style printer.&lt;/li>&lt;li>The assembler backend works quite well and currently tries to produces bitwise identical object files to the system assembler on the Mac (to allow validating through "/usr/bin/cmp"). That said, it's algorithms aren't all performance tuned, so it could probably be substantially faster.&lt;/li>&lt;li>The old JIT code path is still alive in LLVM, it should be killed off once it is replaced with a new MC implementation. One win of this is that the JIT will support inline assembly :)&lt;/li>&lt;/ol>&lt;br />If you're interested in this level of the tool chain, this is a great area to get involved in, because there are lots of small to mid-sized projects just waiting to be tackled. I believe that the long term impact of this work is huge: it allows building new interesting CPU-level tools and it means that we can add new instructions to one .td file instead of having to add them to the compiler, the assembler, the disassembler, etc.&lt;br />&lt;br />-Chris</description></item><item><title>ARM Advanced SIMD (NEON) Intrinsics and Types in LLVM</title><link>https://blog.llvm.org/2010/04/arm-advanced-simd-neon-intrinsics-and.html</link><pubDate>Wed, 07 Apr 2010 21:34:00 +0000</pubDate><guid>https://blog.llvm.org/2010/04/arm-advanced-simd-neon-intrinsics-and.html</guid><description>LLVM now supports all the intrinsic functions defined by ARM for the Advanced SIMD (aka "NEON") instruction set, but if you are migrating from GCC to LLVM, there are some implementation differences that you may encounter. LLVM follows ARM's specification of the standard NEON types more closely than GCC. It is also more strict about checking types of arguments to the NEON intrinsics.&lt;br />&lt;br />&lt;br />This post describes the NEON-related differences between LLVM and GCC and gives a few examples of how to adapt your code to work with LLVM.&lt;br />&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;h2>Background&lt;/h2>&lt;br />NEON is a vector processing extension to the ARM architecture. It is included in most recent ARM processors such as the Cortex A8 and A9. Some of the NEON instructions perform operations that are not simple to specify in C or C++, so ARM has defined a standard set of intrinsic functions for those operations. For example, the vqadd_s16 intrinsic performs a saturating add of two 64-bit vectors with elements that are 16-bit signed integers. ARM has also defined a standard set of NEON vector types to be used with these intrinsics. For example, the arguments and return value of the vqadd_s16 intrinsic have a type of int16x4_t. These intrinsics and types are declared in the &amp;lt;arm_neon.h&amp;gt; header file, which is provided by the compiler.&lt;br />&lt;br />&lt;br />There are at least two prior implementations of these NEON intrinsics. ARM's RealView Compilation Tools (RVCT) compiler provides the full set of them, and not surprisingly, RVCT adheres closely to ARM's specification. GCC also has an implementation of NEON intrinsics, but it differs in some ways from RVCT and ARM's specification (at least in the 4.2.1 version from which llvm-gcc is derived).&lt;br />&lt;br />&lt;br />The current status of NEON intrinsics in LLVM is that llvm-gcc has full support for them, although there is undoubtedly room for further performance tuning. Clang does not yet support NEON. Patches are welcome!&lt;br />&lt;br />&lt;br />&lt;h2>Different Types&lt;/h2>&lt;br />ARM defines the NEON vector types as opaque "containerized vectors". These types are defined in &amp;lt;arm_neon.h&amp;gt; as C structures. The user-visible type names are typedefs to these internal structures. For example, the type for a vector of 4 floats is defined as:&lt;br />&lt;br />&lt;pre> typedef struct __simd128_float32_t float32x4_t;&lt;br />&lt;/pre>&lt;br />The content of the internal structures is not specified, so the only thing you can portably do with values of these types is to pass them to NEON intrinsics.&lt;br />&lt;br />&lt;br />GCC has its own syntax for specifying vector types. This syntax is not specific to NEON. A vector type is defined by adding a "__vector_size__" attribute with the total vector size in bytes. For example:&lt;br />&lt;br />&lt;pre> typedef float float32x4_t __attribute__ ((__vector_size__ (16)));&lt;br />&lt;/pre>&lt;br />Instead of using the opaque containerized vectors, GCC's implementation of the standard NEON types uses its own vector syntax.&lt;br />&lt;br />&lt;br />So what about LLVM? We compromise and do both! The NEON types are defined as structures in &amp;lt;arm_neon.h&amp;gt;, following ARM's specification, but the contents of those structures are vectors defined with GCC's syntax. Each internal structure has a single element named "val" with a GCC vector type. The GCC vector types are defined with a "__neon_" prefix to the standard NEON type name. So, if you want to access the GCC vector type directly, you can do it with LLVM. That code won't be portable &amp;mdash; it won't work with RVCT &amp;mdash; but it may ease the transition from GCC.&lt;br />&lt;br />&lt;br />What are the implications of this difference in the NEON types? The main thing is that the LLVM NEON types are aggregates, not scalars, so you can't do things like casting them to integer types. You also can't assign NEON variables to specific NEON registers using "asm" register attributes, since that is not supported for aggregates. See below for some related differences in the way you initialize vectors.&lt;br />&lt;br />&lt;br />&lt;h2>Stricter Type Checking&lt;/h2>&lt;br />Arguments to LLVM's NEON intrinsics are subject to much stricter type checking than with GCC. GCC's vector types can be cast to other vector types as long as the total size remains the same and you don't mix integer and floating-point vectors. The arguments to GCC's NEON intrinsics get this same treatment. You can pass a uint8x8_t value for a int32x2_t argument and GCC will not even warn you. LLVM requires the argument types to match exactly. If your code is sloppy with vector types, you will have to clean it up to compile with LLVM.&lt;br />&lt;br />&lt;br />If you really want to cast NEON vector types, the right way to do it is with the vreinterpret intrinsics. For example, vreinterpret_s32_u8 will perform the cast from uint8x8_t to int32x2_t that was mentioned above.&lt;br />&lt;br />&lt;br />&lt;h2>How to Initialize a Vector?&lt;/h2>&lt;br />GCC's vector types can be directly assigned a brace-enclosed list of values corresponding to the vector elements. For example:&lt;br />&lt;br />&lt;pre> int32x2_t vec = { 1, 2 };&lt;br />&lt;/pre>&lt;br />initializes a vector with element values 1 and 2. This is convenient but not portable. In general, the best way to assign a vector value is to load it from memory with a NEON intrinsic. That is completely portable and often as fast or faster than the alternatives.&lt;br />&lt;br />&lt;br />There are some special cases where you can do better. If all the vector elements have the same value, one of the vdup intrinsics would be a good solution. You can use the vcreate intrinsics to construct vectors from 64-bit values, and the vcombine intrinsics can put two of them together to form a 128-bit vector. However, moving values from general-purpose ARM registers to the NEON register file can be quite slow, so this may not be faster than a load. If the vector elements are floating-point values, then they are likely already in the right register file, and using vset_lane intrinsics to put them together into a vector may be faster. Generating the fastest code for these different cases is a work in progress, so you may need to experiment with different approaches to see which is fastest.</description></item><item><title>What's wrong with this code?</title><link>https://blog.llvm.org/2010/04/whats-wrong-with-this-code.html</link><pubDate>Wed, 07 Apr 2010 11:49:00 +0000</pubDate><guid>https://blog.llvm.org/2010/04/whats-wrong-with-this-code.html</guid><description>A user on IRC sent me this interesting KLEE example today, which I thought was cute enough I should post it.&lt;br />&lt;br />&lt;div>If you aren't familiar with it, &lt;a href="http://klee.llvm.org/">KLEE&lt;/a> is a tool for symbolic execution of LLVM code. It is way too complicated to explain here, but for the purposes of this example all you need to know is that it tries to explore all possible paths through a program.&lt;/div>&lt;div>&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;br />&lt;br />&lt;/div>&lt;div>In this case, the user was actually talking to me because he thought there was a bug in KLEE, because it was only finding one path through the code. Here is the example:&lt;/div>&lt;div>&lt;pre>$ cat t.c&lt;br />#include "klee/klee.h"&lt;br />&lt;br />int f0(int x) {&lt;br />if (x * x == 1000)&lt;br />return 1;&lt;br />else&lt;br />return 0;&lt;br />}&lt;br />&lt;br />int main() {&lt;br />return f0(klee_int("x"));&lt;br />}&lt;br />&lt;/pre>The idea here is that &lt;tt>klee_int("x")&lt;/tt> creates a new symbolic variable, which can be &lt;i>anything&lt;/i> (well, any possible &lt;tt>int&lt;/tt>).&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>The user was expecting that there would be two possible paths through this program, one returning 1 and one returning 0. But KLEE only finds one:&lt;/div>&lt;div>&lt;pre>$ clang -I ~/public/klee/include -flto -c t.c&lt;br />$ ~/public/klee.obj.64/Debug/bin/klee t.o&lt;br />KLEE: output directory = "klee-out-5"&lt;br />&lt;br />KLEE: done: total instructions = 24&lt;br />KLEE: done: completed paths = 1&lt;br />KLEE: done: generated tests = 1&lt;/pre>&lt;br />&lt;/div>&lt;div>Upon showing the example to me, I was also confused for a moment. However, since I happen to trust KLEE, I knew to look for a problem in the test case! And of course, the square root of 1000 isn't an integer, so there is no way this code can return 1. If we change the 1000 to 100, KLEE finds two paths as we would expect:&lt;/div>&lt;div>&lt;pre>$ cat t.c&lt;br />#include "klee/klee.h"&lt;br />&lt;br />int f0(int x) {&lt;br />if (x * x == 100)&lt;br />return 1;&lt;br />else&lt;br />return 0;&lt;br />}&lt;br />&lt;br />int main() {&lt;br />return f0(klee_int("x"));&lt;br />}&lt;br />$ clang -I ~/public/klee/include -flto -c t.c&lt;br />$ ~/public/klee.obj.64/Debug/bin/klee t.o&lt;br />KLEE: output directory = "klee-out-6"&lt;br />&lt;br />KLEE: done: total instructions = 31&lt;br />KLEE: done: completed paths = 2&lt;br />KLEE: done: generated tests = 2&lt;/pre>&lt;br />&lt;/div>This example shows exactly what KLEE was designed for -- reasoning about code (or math) is hard, and it is great to let a machine do it for you!</description></item><item><title>Amazing feats of Clang Error Recovery</title><link>https://blog.llvm.org/2010/04/amazing-feats-of-clang-error-recovery.html</link><pubDate>Mon, 05 Apr 2010 23:20:00 +0000</pubDate><guid>https://blog.llvm.org/2010/04/amazing-feats-of-clang-error-recovery.html</guid><description>In addition to parsing and generating machine code for your source files when valid, a compiler frontend's job is also to detect invalid code and give you a hint that explains what is wrong so you can fix the problem. The bug could either be straight-up invalid (an error) or could just be something that is legal but looks really dubious (a warning). These errors and warnings are known as compiler 'diagnostics', and Clang aims to go above and beyond the call of duty to provide a really amazing experience.&lt;br />&lt;br />After the break, we show some examples of areas where Clang tries particularly hard. For other examples, the Clang web page also has &lt;a href="http://clang.llvm.org/diagnostics.html">a page on diagnostics&lt;/a> and Doug showed how Clang diagnoses two-phase name lookup issues in &lt;a href="http://blog.llvm.org/2009/12/dreaded-two-phase-name-lookup.html">a prior blog post&lt;/a>.&lt;br />&lt;br />&lt;b>Update&lt;/b>: Other people are starting to compare their favorite compiler. Here's the &lt;a href="http://labs.hoffmanlabs.com/node/1540">OpenVMS Compiler&lt;/a>. Email Chris if you have a comparison you want posted.&lt;br />&lt;br />&lt;a href="http://softdroid.net/udivitelnye-tryuki-vosstanovleniya-oshibok-clang">Секреты восстановления (Russian Translation)&lt;/a>&amp;nbsp;&lt;span style="font-family: &amp;quot;helvetica&amp;quot;; font-size: 12px;">&amp;nbsp;provided by&amp;nbsp;&lt;/span>&lt;a href="http://softdroid.net/" style="font-family: Helvetica; font-size: 12px;">Softdroid Recovery&lt;/a>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;;">&lt;span style="font-size: 12px;">.&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;helvetica&amp;quot;;">&lt;span style="font-size: 12px;">&lt;a href="http://www.opensourceinitiative.net/edu/llvm/" target="_blank">Ukrainian Translation&lt;/a>&amp;nbsp;provided by&amp;nbsp;Sandi Wolfe.&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;helvetica&amp;quot;;">&lt;span style="font-size: 12px;">&lt;a href="https://www.autonvaraosatpro.fi/blogi/2018/04/23/hammastav-feats-ukskoik-error-recovery/" rel="nofollow" target="_blank">Estonian Translation&lt;/a> provided by Johanne Teerink.&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;helvetica&amp;quot;;">&lt;span style="font-size: 12px;">&lt;a href="https://studhilfe.de/translations/#Amazing-feats-of-Clang-Error-Recovery:DE">German Translation&lt;/a> provided by&amp;nbsp;&lt;/span>&lt;/span>&lt;span style="font-family: &amp;quot;helvetica&amp;quot;;">&lt;span style="font-size: 12px;">Philip Egger.&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;helvetica&amp;quot;;">&lt;span style="font-size: 12px;">&lt;a href="http://expereb.com/amazing-feats-of-clang-error-recovery/">Spanish Translation&lt;/a> provided by&amp;nbsp;&lt;/span>&lt;/span>&lt;span style="font-family: helvetica;">&lt;span style="font-size: 12px;">Laura Mancini&lt;/span>&lt;/span>&lt;br />&lt;span style="font-family: &amp;quot;helvetica&amp;quot;;">&lt;span style="font-size: 12px;">&lt;br />&lt;/span>&lt;/span>&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;br />These examples use Apple GCC 4.2 as a comparison on these examples, but this isn't meant to bash (an old version of) GCC. Many compilers have these sorts of issues and we strongly encourage you to try the examples on your favorite compiler to see how it does. The examples all shown are necessarily small (reduced) examples that demonstrate a problem, when you see these in real life, they are often much more convincing :).&lt;br />&lt;br />&lt;h2>&lt;a href="https://www.blogger.com/blogger.g?blogID=6088150582281556517" name="unknown_typenames">Unknown Typenames&lt;/a>&lt;/h2>&lt;br />One annoying thing about parsing C and C++ is that you have to know what is a typename in order to parse the code. For example "(x)(y)" can be either a cast of the expression "(y)" to type "x" or it could be a call of the "x" function with the "(y)" argument list, depending on whether x is a type or not. Unfortunately, a common mistake is to forget to include a header file, which means that the compiler really has no idea whether something is a type or not, and therefore has to make a strongly educated guess based on context. Here are a couple examples:&lt;br />&lt;br />&lt;pre>$ &lt;b>cat t.m&lt;/b>&lt;br />NSString *P = @"foo";&lt;br />$ &lt;b>clang t.m&lt;/b>&lt;br />t.m:4:1: error: unknown type name 'NSString'&lt;br />NSString *P = @"foo";&lt;br />^&lt;br />$ &lt;b>gcc t.m&lt;/b>&lt;br />t.m:4: error: expected '=', ',', ';', 'asm' or '__attribute__' before '*' token&lt;br />&lt;/pre>&lt;br />and:&lt;br />&lt;br />&lt;pre>$ &lt;b>cat t.c&lt;/b>&lt;br />int foo(int x, pid_t y) {&lt;br /> return x+y;&lt;br />}&lt;br />$ &lt;b>clang t.c&lt;/b>&lt;br />t.c:1:16: error: unknown type name 'pid_t'&lt;br />int foo(int x, pid_t y) {&lt;br /> ^&lt;br />$ &lt;b>gcc t.c&lt;/b>&lt;br />t.c:1: error: expected declaration specifiers or '...' before 'pid_t'&lt;br />t.c: In function 'foo':&lt;br />t.c:2: error: 'y' undeclared (first use in this function)&lt;br />t.c:2: error: (Each undeclared identifier is reported only once&lt;br />t.c:2: error: for each function it appears in.)&lt;br />&lt;/pre>&lt;br />This sort of thing also happens in C if you forget to use 'struct stat' instead of 'stat'. As is a common theme in this post, recovering well by inferring what the programmer meant helps Clang avoid emitting bogus follow-on errors like the three lines GCC emits on line 2. &lt;br />&lt;br />&lt;h2>&lt;a href="https://www.blogger.com/blogger.g?blogID=6088150582281556517" name="spell_checker">Spell Checker&lt;/a>&lt;/h2>&lt;br />One of the &lt;a href="http://zi.fi/shots/clang.png">more visible&lt;/a> things that Clang includes is a spell checker (also &lt;a href="http://www.reddit.com/r/programming/comments/b8ws6/why_you_should_use_clang/">on reddit&lt;/a>). The spell checker kicks in when you use an identifier that Clang doesn't know: it checks against other close identifiers and suggests what you probably meant. Here are a few examples:&lt;br />&lt;br />&lt;pre>$ &lt;b>cat t.c&lt;/b>&lt;br />#include &amp;lt;inttypes.h&amp;gt;&lt;br />int64 x;&lt;br />$ &lt;b>clang t.c&lt;/b>&lt;br />t.c:2:1: error: unknown type name 'int64'; did you mean 'int64_t'?&lt;br />int64 x;&lt;br />^~~~~&lt;br />int64_t&lt;br />$ &lt;b>gcc t.c&lt;/b>&lt;br />t.c:2: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'x'&lt;br />&lt;/pre>&lt;br />another example is:&lt;br />&lt;br />&lt;pre>$ &lt;b>cat t.c&lt;/b>&lt;br />#include &amp;lt;sys/stat.h&amp;gt;&lt;br />int foo(int x, struct stat *P) { &lt;br /> return P-&amp;gt;st_blocksize*2;&lt;br />}&lt;br />$ &lt;b>clang t.c&lt;/b>&lt;br />t.c:4:13: error: no member named 'st_blocksize' in 'struct stat'; did you mean 'st_blksize'?&lt;br /> return P-&amp;gt;st_blocksize*2;&lt;br /> ^~~~~~~~~~~~&lt;br /> st_blksize&lt;br />$ &lt;b>gcc t.c&lt;/b>&lt;br />t.c: In function ‘foo’:&lt;br />t.c:4: error: 'struct stat' has no member named 'st_blocksize'&lt;br />&lt;/pre>&lt;br />The great thing about the spell checker is that it catches a wide variety of common errors, and it also assists in later recovery. Code that later used 'x', for example, knows that it is declared as an int64_t, so it doesn't lead to other weird follow on errors that don't make any sense. Clang uses the well known &lt;a href="http://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein distance function&lt;/a> to compute the best match out of the possible candidates.&lt;br />&lt;br />&lt;h2>&lt;a href="https://www.blogger.com/blogger.g?blogID=6088150582281556517" name="typedef_tracking">Typedef Tracking&lt;/a>&lt;/h2>&lt;br />Clang tracks the typedefs you write in your code carefully so that it can relate errors to the types you use in your code. This allows it to print out error messages in your terms, not in fully resolved and template instantiated compiler terms. It also uses its range information and caret to show you what you wrote instead of trying to print it back out at you. There are several examples of this on the Clang diagnostics page, but one more example can't hurt:&lt;br />&lt;br />&lt;pre>$ &lt;b>cat t.cc&lt;/b>&lt;br />namespace foo {&lt;br /> struct x { int y; };&lt;br />}&lt;br />namespace bar {&lt;br /> typedef int y;&lt;br />}&lt;br />void test() {&lt;br /> foo::x a;&lt;br /> bar::y b;&lt;br /> a + b;&lt;br />}&lt;br />$ &lt;b>clang t.cc&lt;/b>&lt;br />t.cc:10:5: error: invalid operands to binary expression ('foo::x' and 'bar::y' (aka 'int'))&lt;br /> a + b;&lt;br /> ~ ^ ~&lt;br />$ &lt;b>gcc t.cc&lt;/b>&lt;br />t.cc: In function 'void test()':&lt;br />t.cc:10: error: no match for 'operator+' in 'a + b'&lt;br />&lt;/pre>&lt;br />This shows that clang gives you the source names as you typed them ("foo::x" and "bar::y", respectively) but it also unwraps the y type with "aka" in case the underlying representation is important. Other compilers typically give completely unhelpful information which doesn't really tell you what the problem is. This is a surprisingly concise example from GCC, but it also seems to be missing some critical information (such as why there is no match). Also, if the expression was more than a single "a+b", you can imagine that pretty printing it back at you isn't the most helpful.&lt;br />&lt;br />&lt;h2>&lt;a href="https://www.blogger.com/blogger.g?blogID=6088150582281556517" name="most_vexing_parse">The Most Vexing Parse&lt;/a>&lt;/h2>&lt;br />One mistake many beginner programmers mistake is that they accidentally define functions instead of objects on the stack. This is due to an ambiguity in the C++ grammar which is resolved in an arbitrary way. This is an unavoidable part of C++, but at least the compiler should help you understand what is going wrong. Here's a trivial example:&lt;br />&lt;br />&lt;pre>$ &lt;b>cat t.cc&lt;/b>&lt;br />#include &amp;lt;vector&amp;gt;&lt;br />&lt;br />int foo() {&lt;br /> std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; X();&lt;br /> return X.size();&lt;br />}&lt;br />$ &lt;b>clang t.cc&lt;/b>&lt;br />t.cc:5:11: error: base of member reference has function type 'std::vector&amp;lt;std::vector&amp;lt;int&amp;gt; &amp;gt; ()'; perhaps you meant to call this function with '()'?&lt;br /> return X.size();&lt;br /> ^&lt;br /> ()&lt;br />$ &lt;b>gcc t.cc&lt;/b>&lt;br />t.cc: In function ‘int foo()’:&lt;br />t.cc:5: error: request for member ‘size’ in ‘X’, which is of non-class type ‘std::vector&amp;lt;std::vector&amp;lt;int, std::allocator&amp;lt;int&amp;gt; &amp;gt;, std::allocator&amp;lt;std::vector&amp;lt;int, std::allocator&amp;lt;int&amp;gt; &amp;gt; &amp;gt; &amp;gt; ()()’&lt;br />&lt;/pre>&lt;br />I run into this thing when I originally declared the vector as taking some arguments (e.g. "10" to specify an initial size) but refactor the code and eliminate that. Of course if you don't remove the parentheses, the code is actually declaring a function, not a variable.&lt;br />&lt;br />Here you can see that Clang points out fairly clearly that we've gone and declared a function (it even offers to help you call it in case you forgot ()'s). GCC, on the other hand, is both hopelessly confused about what you're doing, but also spews out a big typename that you didn't write (where did std::allocator come from?). It's sad but true that being an experienced C++ programmer really means that you're adept at decyphering the error messages that your compiler spews at you.&lt;br />&lt;br />If you go on to try the more classical example where this bites people, you can see Clang try even harder:&lt;br />&lt;br />&lt;pre>$ &lt;b>cat t.cc&lt;/b>&lt;br />#include &amp;lt;fstream&amp;gt;&lt;br />#include &amp;lt;vector&amp;gt;&lt;br />#include &amp;lt;iterator&amp;gt;&lt;br />&lt;br />int main() {&lt;br /> std::ifstream ifs("file.txt");&lt;br /> std::vector&amp;lt;char&amp;gt; v(std::istream_iterator&amp;lt;char&amp;gt;(ifs),&lt;br /> std::istream_iterator&amp;lt;char&amp;gt;());&lt;br /> &lt;br /> std::vector&amp;lt;char&amp;gt;::const_iterator it = v.begin();&lt;br /> return 0; &lt;br />}&lt;br />$ &lt;b>clang t.cc&lt;/b>&lt;br />t.cc:8:23: warning: parentheses were disambiguated as a function declarator&lt;br /> std::vector&amp;lt;char&amp;gt; v(std::istream_iterator&amp;lt;char&amp;gt;(ifs),&lt;br /> ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;br />t.cc:11:45: error: member reference base type 'std::vector&amp;lt;char&amp;gt; (*)(std::istream_iterator&amp;lt;char&amp;gt;, std::istream_iterator&amp;lt;char&amp;gt; (*)())' is not a structure or union&lt;br /> std::vector&amp;lt;char&amp;gt;::const_iterator it = v.begin();&lt;br /> ~ ^&lt;br />$ &lt;b>gcc t.cc&lt;/b>&lt;br />t.cc: In function ‘int main()’:&lt;br />t.cc:11: error: request for member ‘begin’ in ‘v’, which is of non-class type&lt;br />‘std::vector&amp;lt;char, std::allocator&amp;lt;char&amp;gt; &amp;gt; ()(std::istream_iterator&amp;lt;char, char, std::char_traits&amp;lt;char&amp;gt;, long int&amp;gt;, std::istream_iterator&amp;lt;char, char, std::char_traits&amp;lt;char&amp;gt;, long int&amp;gt; (*)())’&lt;br />&lt;/pre>&lt;br />In this case, Clang's second error isn't particularly great (though it does give much more concise type names), but it gives a really critical warning, telling you that the parens in the example are declaring a function, not being used as parens for an argument.&lt;br />&lt;br />&lt;h2>&lt;a href="https://www.blogger.com/blogger.g?blogID=6088150582281556517" name="missing_semicolons">Missing Semicolons&lt;/a>&lt;/h2>&lt;br />One error that I frequently make (perhaps due to the wildly inconsistent grammar of C++, or perhaps because I am sloppy and have a short attention span...) is dropping a semicolon. Fortunately these are pretty trivial to fix once you know what is going on, but they can lead to some really confusing error messages from some compilers. This happens even in cases where it is immediately obvious what is going on to a human (if they are paying attention!). For example:&lt;br />&lt;br />&lt;pre>$ &lt;b>cat t.c&lt;/b>&lt;br />struct foo { int x; }&lt;br />&lt;br />typedef int bar;&lt;br />$ &lt;b>clang t.c&lt;/b>&lt;br />t.c:1:22: error: expected ';' after struct&lt;br />struct foo { int x; }&lt;br /> ^&lt;br /> ;&lt;br />$ &lt;b>gcc t.c&lt;/b>&lt;br />t.c:3: error: two or more data types in declaration specifiers&lt;br />&lt;/pre>&lt;br />Note that GCC emits the error on the thing that &lt;em>follows the problem&lt;/em>. If the struct was the last thing at the end of a header, this means that you'll end up getting the error message &lt;em>in a completely different file&lt;/em> than where the problem lies. This problem also compounds itself in C++ (as do many others), for example:&lt;br />&lt;br />&lt;pre>$ &lt;b>cat t2.cc&lt;/b>&lt;br />template&amp;lt;class t&amp;gt;&lt;br />class a{}&lt;br />&lt;br />class temp{};&lt;br />a&amp;lt;temp&amp;gt; b;&lt;br />&lt;br />class b {&lt;br />}&lt;br />$ &lt;b>clang t2.cc&lt;/b>&lt;br />t2.cc:2:10: error: expected ';' after class&lt;br />class a{}&lt;br /> ^&lt;br /> ;&lt;br />t2.cc:8:2: error: expected ';' after class&lt;br />}&lt;br /> ^&lt;br /> ;&lt;br />$ &lt;b>gcc t2.c&lt;/b>&lt;br />t2.cc:4: error: multiple types in one declaration&lt;br />t2.cc:5: error: non-template type ‘a’ used as a template&lt;br />t2.cc:5: error: invalid type in declaration before ‘;’ token&lt;br />t2.cc:8: error: expected unqualified-id at end of input&lt;br />&lt;/pre>&lt;br />In addition to emitting the confusing error "multiple types in one declaration", GCC goes on to confuse itself in other ways.&lt;br />&lt;br />&lt;h2>&lt;a href="https://www.blogger.com/blogger.g?blogID=6088150582281556517" name="dot_arrow_thinko">. vs -&amp;gt; Thinko&lt;/a>&lt;/h2>&lt;br />In C++ code, pointers and references often get used fairly interchangeably and it is common to use . where you mean -&amp;gt;. Clang recognizes this common sort of mistake and helps you out:&lt;br />&lt;br />&lt;pre>$ &lt;b>cat t.cc&lt;/b>&lt;br />#include &amp;lt;map&amp;gt;&lt;br />&lt;br />int bar(std::map&amp;lt;int, float&amp;gt; *X) {&lt;br /> return X.empty();&lt;br />}&lt;br />$ &lt;b>clang t.cc&lt;/b>&lt;br />t.cc:4:11: error: member reference type 'std::map&amp;lt;int, float&amp;gt; *' is a pointer; maybe you meant to use '-&amp;gt;'?&lt;br /> return X.empty();&lt;br /> ~^&lt;br /> -&amp;gt;&lt;br />$ &lt;b>gcc t.cc&lt;/b>&lt;br />t.cc: In function ‘int bar(std::map&amp;lt;int, float, std::less&amp;lt;int&amp;gt;, std::allocator&amp;lt;std::pair&amp;lt;const int, float&amp;gt; &amp;gt; &amp;gt;*)’:&lt;br />t.cc:4: error: request for member ‘empty’ in ‘X’, which is of non-class type ‘std::map&amp;lt;int, float, std::less&amp;lt;int&amp;gt;, std::allocator&amp;lt;std::pair&amp;lt;const int, float&amp;gt; &amp;gt; &amp;gt;*’&lt;br />&lt;/pre>&lt;br />In addition to helpfully informing you that your pointer is a "non-class type", it goes out of its way to spell the full definition of std::map out, which is certainly not helpful.&lt;br />&lt;br />&lt;h2>&lt;a href="https://www.blogger.com/blogger.g?blogID=6088150582281556517" name="scope_typo">:: vs : Typo&lt;/a>&lt;/h2>&lt;br />Perhaps it's just me, but I tend to make this mistake quite a bit, again while in a hurry. The C++ :: operator is used to separate nested name specifiers, but somehow I keep typing : instead. Here is a minimal example that shows the idea:&lt;br />&lt;br />&lt;pre>$ &lt;b>cat t.cc&lt;/b>&lt;br />namespace x {&lt;br /> struct a { };&lt;br />}&lt;br />&lt;br />x:a a2;&lt;br />x::a a3 = a2;&lt;br />$ &lt;b>clang t.cc&lt;/b>&lt;br />t.cc:5:2: error: unexpected ':' in nested name specifier&lt;br />x:a a2;&lt;br /> ^&lt;br /> ::&lt;br />$ &lt;b>gcc t.cc&lt;/b>&lt;br />t.cc:5: error: function definition does not declare parameters&lt;br />t.cc:6: error: ‘a2’ was not declared in this scope&lt;br />&lt;/pre>&lt;br />In addition to getting the error message right (and suggesting a fixit replacement to "::"), Clang "knows what you mean" so it handles the subsequent uses of a2 correctly. GCC, in contrast, gets confused about what the error is which leads it to emit bogus errors on every use of a2. This can be seen with a slightly elaborated example:&lt;br />&lt;br />&lt;pre>$ &lt;b>cat t2.cc&lt;/b>&lt;br />namespace x {&lt;br /> struct a { };&lt;br />}&lt;br />&lt;br />template &amp;lt;typename t&amp;gt;&lt;br />class foo {&lt;br />};&lt;br />&lt;br />foo&amp;lt;x::a&amp;gt; a1;&lt;br />foo&amp;lt;x:a&amp;gt; a2;&lt;br />&lt;br />x::a a3 = a2;&lt;br />$ &lt;b>clang t2.cc&lt;/b>&lt;br />t2.cc:10:6: error: unexpected ':' in nested name specifier&lt;br />foo&amp;lt;x:a&amp;gt; a2;&lt;br /> ^&lt;br /> ::&lt;br />t2.cc:12:6: error: no viable conversion from 'foo&amp;lt;x::a&amp;gt;' to 'x::a'&lt;br />x::a a3 = a2;&lt;br /> ^ ~~&lt;br />t2.cc:2:10: note: candidate constructor (the implicit copy constructor) not viable: no known conversion from 'foo&amp;lt;x::a&amp;gt;' to 'x::a const' for 1st argument&lt;br /> struct a { };&lt;br /> ^&lt;br />$ &lt;b>gcc t2.cc&lt;/b>&lt;br />t2.cc:10: error: template argument 1 is invalid&lt;br />t2.cc:10: error: invalid type in declaration before ‘;’ token&lt;br />t2.cc:12: error: conversion from ‘int’ to non-scalar type ‘x::a’ requested&lt;br />&lt;/pre>&lt;br />Here you can see that Clang's second error message is exactly right (and is explained). GCC gives a confusing follow on message about converting an "int" to x::a. Where did "int" come from?&lt;br />&lt;br />&lt;h2>&lt;a href="https://www.blogger.com/blogger.g?blogID=6088150582281556517" name="near_hopeless">Helping out in near-hopeless situations&lt;/a>&lt;/h2>&lt;br />C++ is a power tool that gives you plenty of rope to shoot yourself in the foot as well as mix your multi-paradigmed metaphors. Unfortunately, this power gives you plenty of opportunities to find yourself in a near hopeless situation where you know "something is wrong" but have no idea what the real problem is or how to fix it. Thankfully, Clang tries to be there for you, even in the toughest of times. For example, here's a case involving ambiguous lookup:&lt;br />&lt;br />&lt;pre>$ &lt;b>cat t.cc&lt;/b>&lt;br />struct B1 { void f(); };&lt;br />struct B2 { void f(double); };&lt;br />&lt;br />struct I1 : B1 { };&lt;br />struct I2 : B1 { };&lt;br />&lt;br />struct D: I1, I2, B2 {&lt;br /> using B1::f; using B2::f;&lt;br /> void g() {&lt;br /> f(); &lt;br /> }&lt;br />};&lt;br />$ &lt;b>clang t.cc&lt;/b>&lt;br />t.cc:10:5: error: ambiguous conversion from derived class 'D' to base class 'B1':&lt;br /> struct D -&amp;gt; struct I1 -&amp;gt; struct B1&lt;br /> struct D -&amp;gt; struct I2 -&amp;gt; struct B1&lt;br /> f(); &lt;br /> ^&lt;br />$ &lt;b>gcc t.cc&lt;/b>&lt;br />t.cc: In member function ‘void D::g()’:&lt;br />t.cc:10: error: ‘B1’ is an ambiguous base of ‘D’&lt;br />&lt;/pre>&lt;br />In this case, you can see that not only does clang tell you that there is an ambiguity, it tells you &lt;em>exactly the paths through the inheritance hierarchy that are the problems&lt;/em>. When you're dealing with a non-trivial hierarchy, and all the classes aren't in a single file staring at you, this can be a real life saver.&lt;br />&lt;br />To be fair, GCC occasionally tries to help out. Unfortunately, when it does so it's not clear if it helps more than it hurts. For example, if you comment out the two using declarations in the example above you get:&lt;br />&lt;br />&lt;pre>$ &lt;b>clang t.cc&lt;/b>&lt;br />t.cc:10:5: error: non-static member 'f' found in multiple base-class subobjects of type 'B1':&lt;br /> struct D -&amp;gt; struct I1 -&amp;gt; struct B1&lt;br /> struct D -&amp;gt; struct I2 -&amp;gt; struct B1&lt;br /> f(); &lt;br /> ^&lt;br />t.cc:1:18: note: member found by ambiguous name lookup&lt;br />struct B1 { void f(); };&lt;br /> ^&lt;br />$ &lt;b>gcc t.cc&lt;/b>&lt;br />t.cc: In member function ‘void D::g()’:&lt;br />t.cc:10: error: reference to ‘f’ is ambiguous&lt;br />t.cc:2: error: candidates are: void B2::f(double)&lt;br />t.cc:1: error: void B1::f()&lt;br />t.cc:1: error: void B1::f()&lt;br />t.cc:10: error: reference to ‘f’ is ambiguous&lt;br />t.cc:2: error: candidates are: void B2::f(double)&lt;br />t.cc:1: error: void B1::f()&lt;br />t.cc:1: error: void B1::f()&lt;br />&lt;/pre>&lt;br />It looks like GCC is trying here, but why is it emitting two errors on line 10 and why is it printing B1::f twice in each? When I get these sort of errors (which is pretty rare, since I don't use multiple inheritance like this often) I really value clarity when unraveling what is going on.&lt;br />&lt;br />&lt;h2>&lt;a href="https://www.blogger.com/blogger.g?blogID=6088150582281556517" name="merge_conflicts">One more thing... Merge Conflicts&lt;/a>&lt;/h2>&lt;br />Okay, this may be going a bit far, but how else are you going to fall completely in love with a compiler?&lt;br />&lt;br />&lt;pre>$ &lt;b>cat t.c&lt;/b>&lt;br />void f0() {&lt;br />&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;br /> int x;&lt;br />=======&lt;br /> int y;&lt;br />&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; whatever&lt;br />}&lt;br />$ &lt;b>clang t.c&lt;/b>&lt;br />t.c:2:1: error: version control conflict marker in file&lt;br />&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;br />^&lt;br />$ &lt;b>gcc t.c&lt;/b>&lt;br />t.c: In function ‘f0’:&lt;br />t.c:2: error: expected expression before ‘&amp;lt;&amp;lt;’ token&lt;br />t.c:4: error: expected expression before ‘==’ token&lt;br />t.c:6: error: expected expression before ‘&amp;gt;&amp;gt;’ token&lt;br />&lt;/pre>&lt;br />Yep, clang actually detects the merge conflict and parses one side of the conflict. You don't want to get tons of nonsense from your compiler on such a simple error, do you?&lt;br />&lt;br />Clang: crafted for real programmers who make might make the occasional mistake. Why settle for less?&lt;br />&lt;br />-Chris</description></item><item><title>Dragonegg Successfully Self-Hosts!</title><link>https://blog.llvm.org/2010/02/dragonegg-successfully-self-hosts.html</link><pubDate>Sun, 21 Feb 2010 05:07:00 +0000</pubDate><guid>https://blog.llvm.org/2010/02/dragonegg-successfully-self-hosts.html</guid><description>The &lt;a href="http://dragonegg.llvm.org/">dragonegg GCC plugin&lt;/a> can host itself! Dragonegg lets you use the &lt;a href="http://llvm.org/">LLVM&lt;/a> optimizers with &lt;a href="http://gcc.gnu.org/">GCC-4.5&lt;/a>, much like &lt;a href="http://llvm.org/cmds/llvmgcc.html">llvm-gcc&lt;/a>, but unlike llvm-gcc does not involve modifying GCC, thanks to the new GCC plugin infrastructure (currently one small patch is required). We built all of GCC-4.5, LLVM and dragonegg with dragonegg, then used the resulting binaries to build them all again. Why? Because we love to build! And because this was a great way of checking that nothing was miscompiled. The final dragonegg plugin was fully functional, successfully passing the entire dragonegg test suite.</description></item><item><title>Clang Successfully Self-Hosts!</title><link>https://blog.llvm.org/2010/02/clang-successfully-self-hosts.html</link><pubDate>Thu, 04 Feb 2010 19:13:00 +0000</pubDate><guid>https://blog.llvm.org/2010/02/clang-successfully-self-hosts.html</guid><description>Today, Clang completed its first complete self-host! We built all of LLVM and Clang with Clang (over 550k lines of C++ code). The resulting binaries passed all of Clang and LLVM's regression test suites, and the Clang-built Clang could then build all of LLVM and Clang again. The third-stage Clang was also fully-functional, completing the bootstrap.&lt;div>&lt;br />&lt;/div>&lt;div>Congratulations to all of the Clang developers on this amazing achievement!&lt;/div></description></item><item><title>The x86 Disassembler</title><link>https://blog.llvm.org/2010/01/x86-disassembler.html</link><pubDate>Wed, 06 Jan 2010 13:34:00 +0000</pubDate><guid>https://blog.llvm.org/2010/01/x86-disassembler.html</guid><description>Disassemblers make binary analysis work. With a reliable disassembler, you can solve high-level problems like tracing back through a program's call stack or analyzing sample-based profiles to low-level problems like figuring out how your compiler unrolled a tight floating-point loop or what advantages declaring a variable const actually had at the other end of the optimization chain. A reliable disassembler, which takes sequences of bytes and prints human-readable instruction mnemonics, is a crucial part of any development platform. You're about to go on a whirlwind tour of the LLVM disassembler: why one should exist, what's great about this one, and how you can use it.&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;h3>The case for an LLVM-based disassembler&lt;/h3>Disassemblers are all over the place. A disassembler you may well be familiar with is the disassembler from GNU gdb (&lt;a href="http://opensource.apple.com/source/gdb/gdb-1346/src/include/dis-asm.h">source&lt;/a>). In fact, any debugger needs one: Sun mdb has a disassembler too (&lt;a href="http://src.opensolaris.org/source/xref/onnv/onnv-gate/usr/src/cmd/mdb/common/mdb/mdb_disasm.h">source&lt;/a>). Some specialized applications like Dtrace need disassemblers as well (&lt;a href="http://src.opensolaris.org/source/xref/onnv/onnv-gate/usr/src/uts/intel/dtrace/fasttrap_isa.c">source&lt;/a>). So because this is well-traveled ground, there are several common properties you should expect from a disassembler:&lt;br />&lt;br />&lt;ul>&lt;li>A large library can contain hundreds of thousands of instructions, so disassembly must be &lt;em>fast&lt;/em>.&lt;br />&lt;/li>&lt;li>A disassembler with a large memory footprint can steal memory and cache from analysis algorithms that need them more, so its code and data should be &lt;em>compact&lt;/em>.&lt;br />&lt;/li>&lt;li>Because disassemblers are used in a variety of applications, they should provide information about instructions in a &lt;em>generic&lt;/em>, preferably even architecture-independent form.&lt;br />&lt;/li>&lt;li>For the benefit of future code maintainers, disassemblers should be as &lt;em>table-driven&lt;/em> as possible.&lt;/li>&lt;/ul>Enter the LLVM MC architecture. In MC, instructions are represented using the architecture-independent &lt;code>MCInst&lt;/code> class (&lt;code>include/llvm/MC/MCInst.h&lt;/code>). The translation between MC instructions and machine code is specified by pre-existing &lt;a href="http://llvm.org/docs/TableGenFundamentals.html">TableGen&lt;/a> tables (&lt;code>lib/Target/X86/X86.td&lt;/code> for x86 platforms). Writing a disassembler inside the MC framework makes sense because it solves the generality and table-driven problems naturally, but we still need to solve two problems: speed and compactness.&lt;br />&lt;h3>&lt;span class="Apple-style-span" style="font-size: medium; font-weight: normal;">&lt;h3>Quick Testdrive of the Disassembler&lt;/h3>&lt;/span>&lt;/h3>&lt;br />The llvm-mc tool provides a simple command line wrapper around the disassembler that we primarily use for testing (e.g. &lt;span style="font-family: 'Courier New', Courier, monospace;">test/MC/Disassembler/simple-tests.txt&lt;/span>). &amp;nbsp;It reads a text file containing input bytes and prints out the instructions that correspond to those bytes. &amp;nbsp;For example, here's a simple transcript of using it:&lt;br />&lt;br />&lt;pre>$ echo '1 2' | llvm-mc -disassemble -triple=x86_64-apple-darwin9&lt;br />addl %eax, (%rdx)&lt;br />$ echo '0x0f 0x1 0x9' | llvm-mc -disassemble -triple=x86_64-apple-darwin9&lt;br />sidt (%rcx)&lt;br />$ echo '0x0f 0xa2' | llvm-mc -disassemble -triple=x86_64-apple-darwin9&lt;br />cpuid&lt;br />$ echo '0xd9 0xff' | llvm-mc -disassemble -triple=i386-apple-darwin9&lt;br />fcos&lt;br />&lt;/pre>&lt;br />&lt;div>&lt;span class="Apple-style-span" style="font-size: 19px; font-weight: bold;">Design of the decode process&lt;/span>&lt;/div>Fast disassemblers can be classified into two categories, depending on the instruction format. On platforms with fixed-length instructions, it is possible to pull out all bits of the instruction at once and filter based on arbitrary ranges of those bits. In contrast, platforms with variable-length instructions require that the instruction be parsed byte by byte. In this article, I will discuss the variable-length case, and in particular the case of x86, which includes the &lt;code>i386&lt;/code> and &lt;code>x86_64&lt;/code> targets.&lt;br />The structure of an x86 instruction is determined by several important factors, each of which is of vital importance when decoding:&lt;br />&lt;ul>&lt;li>The &lt;em>context&lt;/em> of the instruction determines the meaning of the instruction and the size of its operands. The context includes the address and operand sizes of the instruction, as well as the presence (and position!) of prefixes such as the &lt;code>REX.w&lt;/code> prefix on &lt;code>x86_64&lt;/code> targets and the &lt;code>f3&lt;/code> prefix on architectures with SSE.&lt;br />&lt;/li>&lt;li>The &lt;em>opcode&lt;/em> of the instruction is of varying size, and determines what operands are required. Opcodes come in four different types: one-byte opcodes of the form &lt;code>xx&lt;/code>, two-byte opcodes of the form &lt;code>0f&lt;/code> &lt;code>xx&lt;/code>, three-byte opcodes of the form &lt;code>0f&lt;/code> &lt;code>38&lt;/code> &lt;code>xx&lt;/code>, and three-byte opcodes of the form &lt;code>0f&lt;/code>&lt;code>3a&lt;/code> &lt;code>xx&lt;/code>.&lt;br />&lt;/li>&lt;li>The &lt;em>addressing bytes&lt;/em> of the instruction determine the addressing mode of the instruction's memory operand (there is only one memory operand possible with a selectable mode). The addressing bytes include the ModR/M (Modifier - Register/Memory) byte and the SIB (Scale - Index - Base) byte.&lt;/li>&lt;/ul>&lt;table border="1">&lt;tbody>&lt;tr> &lt;td>&lt;b class="phase2">&lt;span style="color: #339999;">Other prefixes?&lt;/span>&lt;/b>&lt;br />&lt;/td> &lt;td>&lt;b class="phase2">&lt;span style="color: #339999;">Mandatory prefix?&lt;/span>&lt;/b>&lt;br />&lt;/td> &lt;td>&lt;b class="phase2">&lt;span style="color: #339999;">REX prefix?&lt;/span>&lt;/b>&lt;br />&lt;/td> &lt;td>&lt;b class="phase1">&lt;code>&lt;span style="color: #993399;">0f&lt;/span>&lt;/code>&lt;span style="color: #993399;"> [&lt;/span>&lt;code>&lt;span style="color: #993399;">38&lt;/span>&lt;/code>&lt;span style="color: #993399;">/&lt;/span>&lt;code>&lt;span style="color: #993399;">3a&lt;/span>&lt;/code>&lt;span style="color: #993399;">]?&lt;/span>&lt;/b>&lt;br />&lt;/td> &lt;td>&lt;b class="phase3">&lt;span style="color: #009900;">Opcode&lt;/span>&lt;/b>&lt;br />&lt;/td> &lt;td>&lt;b class="phase4">&lt;span style="color: #3333ff;">ModR/M byte?&lt;/span>&lt;/b>&lt;br />&lt;/td> &lt;td>&lt;b class="phase5">&lt;span style="color: #cc9933;">SIB byte?&lt;/span>&lt;/b>&lt;br />&lt;/td> &lt;/tr>&lt;/tbody>&lt;/table>&lt;div class="caption">&lt;em>Table 1:&lt;/em> Portions of an instruction relevant to decode&lt;br />&lt;/div>You can read more about the meaning of all of these bytes in Chapter 2 of the Intel instruction manual, volume 2A (&lt;a href="http://www.intel.com/Assets/PDF/manual/253666.pdf">large PDF&lt;/a>). The x86 disassembler is structured around hierarchical tables that assume a 5-phase decode process. You can follow along with this discussion by looking at &lt;code>lib/Target/X86/Disassembler/X86DisassemblerDecoderCommon.h&lt;/code>, and the steps below are colored consistently with the data they access in Table 1.&lt;br />&lt;dl>&lt;dt>&lt;b class="phase1">&lt;span style="color: #993399;">Phase 1&lt;/span>&lt;/b>&lt;/dt>&lt;dd>Record all prefixes but do not use them. Determine the type of the opcode, and obtain a &lt;code>ContextDecision&lt;/code> on that basis: &lt;code>&lt;span style="color: #cc9933;">&lt;b>ONEBYTE_SYM&lt;/b>&lt;/span>&lt;/code>, &lt;code>&lt;span style="color: #cc9933;">&lt;b>TWOBYTE_SYM&lt;/b>&lt;/span>&lt;/code>, &lt;code>&lt;b>&lt;span style="color: #cc9933;">THREEBYTE38_SYM&lt;/span>&lt;/b>&lt;/code>, and &lt;code>&lt;b>&lt;span style="color: #cc9933;">THREEBYTE3A_SYM&lt;/span>&lt;/b>&lt;/code>. &lt;/dd>&lt;dt>&lt;b class="phase2">&lt;span style="color: #339999;">Phase 2&lt;/span>&lt;/b>&lt;/dt>&lt;dd>Develop a context mask based on the prefixes that are present and the machine architecture being decoded for. Look up this mask in a lookup table (&lt;code>&lt;b>&lt;span style="color: #cc9933;">CONTEXTS_SYM&lt;/span>&lt;/b>&lt;/code>) to get a context ID. Consult the &lt;code>&lt;span style="color: #339999;">&lt;b>ContextDecision&lt;/b>&lt;/span>&lt;/code> to find the &lt;code>&lt;span style="color: #339999;">&lt;b>OpcodeDecision&lt;/b>&lt;/span>&lt;/code> that corresponds to the context. As the comments in the header point out, the many possible contexts are boiled down to &lt;code>&lt;span style="color: #339999;">&lt;b>IC_max&lt;/b>&lt;/span>&lt;/code> distinct context IDs that actually matter when decoding. This saves a lot of space. &lt;/dd>&lt;dt>&lt;b class="phase3">&lt;span style="color: #009900;">Phase 3&lt;/span>&lt;/b>&lt;/dt>&lt;dd>Read the opcode and use it to consult the &lt;code>&lt;span style="color: #339999;">&lt;b>OpcodeDecision&lt;/b>&lt;/span>&lt;/code> to find the right &lt;code>&lt;span style="color: #339999;">&lt;b>ModRMDecision&lt;/b>&lt;/span>&lt;/code>. &lt;/dd>&lt;dt>&lt;b class="phase4">&lt;span style="color: #3333ff;">Phase 4&lt;/span>&lt;/b>&lt;/dt>&lt;dd>The ModR/M byte not only specifies the addressing mode, but also sometimes serves to identify the specific instruction intended. For example, extended opcodes and escape opcodes (often seen in SSE) use the Reg/Opcode field in the ModR/M byte as part of the opcode. You can see these oddities in Chapters A.4 and A.5 of the Intel instruction manual, volume 2B (&lt;a href="http://www.intel.com/Assets/PDF/manual/253666.pdf">large PDF&lt;/a>). Given the value of the ModR/M byte, look up the LLVM opcode for the decoded instruction in the &lt;code>&lt;span style="color: #339999;">&lt;b>ModRMDecision&lt;/b>&lt;/span>&lt;/code>. &lt;/dd>&lt;dt>&lt;b class="phase5">&lt;span style="color: #cc9933;">Phase 5&lt;/span>&lt;/b>&lt;/dt>&lt;dd>If the ModR/M byte indicates that an SIB byte is needed, read the SIB byte. This phase occurs as operands are read. &lt;/dd>&lt;/dl>Once these five steps have been performed, the disassembler consumes the operands, whose forms are now completely specified.&lt;br />&lt;h3>Using the disassemblers in real code&lt;/h3>If you want to use a disassembler in your own code, then &lt;code>tools/llvm-mc/Disassembler.cpp&lt;/code> is a good example of how to use one. You can instantiate a disassembler given a Target using the following code:&lt;br />&lt;pre>&lt;b class="namespace">&lt;span style="color: #6600cc;">llvm&lt;/span>&lt;/b>::&lt;b class="identifier">&lt;span style="color: #339999;">OwningPtr&lt;/span>&lt;/b>&amp;lt;&lt;b class="keyword">&lt;span style="color: #993399;">const&lt;/span>&lt;/b> &lt;b class="namespace">&lt;span style="color: #6600cc;">llvm&lt;/span>&lt;/b>::&lt;b class="identifier">&lt;span style="color: #339999;">MCDisassembler&lt;/span>&lt;span style="font-weight: normal;">&amp;gt;&lt;/span>&lt;/b>&lt;br />&lt;b class="identifier">&lt;span style="color: #339999;"> disassembler&lt;/span>&lt;/b>(&lt;b class="identifier">&lt;span style="color: #339999;">target&lt;/span>&lt;/b>.&lt;b class="function">&lt;span style="color: #336666;">createMCDisassembler&lt;/span>&lt;/b>());&lt;br />&lt;/pre>This disassembler works with &lt;code>&lt;b>&lt;span style="color: #339999;">MemoryObject&lt;/span>&lt;/b>&lt;/code>s (&lt;code>include/llvm/Support/MemoryObject.h&lt;/code>), and you will need to subclass &lt;code>&lt;span style="color: #339999;">&lt;b>MemoryObject&lt;/b>&lt;/span>&lt;/code> to perform the proper reading functions. A very &lt;span style="color: #330033;">simple &lt;/span>&lt;code>&lt;span style="color: #339999;">&lt;b>MemoryObject&lt;/b>&lt;/span>&lt;/code> subclass might look like this:&lt;br />&lt;pre>&lt;b class="keyword">&lt;span style="color: #993399;">class&lt;/span>&lt;/b> &lt;b class="identifier">&lt;span style="color: #339999;">BufferMemoryObject&lt;/span>&lt;/b> : &lt;span style="color: #993399;">&lt;b>public&lt;/b>&lt;/span> &lt;b class="namespace">&lt;span style="color: #6600cc;">llvm&lt;/span>&lt;/b>::&lt;b class="identifier">&lt;span style="color: #339999;">MemoryObject&lt;/span>&lt;/b> {&lt;br />&lt;b class="keyword">&lt;span style="color: #993399;">private&lt;/span>&lt;/b>:&lt;br />&lt;b class="keyword">&lt;span style="color: #993399;"> const&lt;/span>&lt;/b> &lt;b class="identifier">&lt;span style="color: #339999;">uint8_t&lt;/span>&lt;/b> *&lt;b class="identifier">&lt;span style="color: #339999;">Bytes&lt;/span>&lt;/b>;&lt;br />&lt;b class="identifier">&lt;span style="color: #339999;"> uint64_t&lt;/span>&lt;/b> &lt;b class="identifier">&lt;span style="color: #339999;">Length&lt;/span>&lt;/b>;&lt;br />&lt;b class="keyword">&lt;span style="color: #993399;">public&lt;/span>&lt;/b>:&lt;br />&lt;b class="function">&lt;span style="color: #339999;"> BufferMemoryObject&lt;/span>&lt;/b>(&lt;b class="keyword">&lt;span style="color: #993399;">const&lt;/span>&lt;/b> &lt;b class="identifier">&lt;span style="color: #339999;">uint8_t&lt;/span>&lt;/b> *&lt;b class="identifier">&lt;span style="color: #339999;">bytes&lt;/span>&lt;/b>, &lt;b class="identifier">&lt;span style="color: #339999;">uint64_t&lt;/span>&lt;/b> &lt;b class="identifier">&lt;span style="color: #339999;">length&lt;/span>&lt;/b>) :&lt;br />&lt;b class="identifier">&lt;span style="color: #339999;">Bytes&lt;/span>&lt;/b>(&lt;b class="identifier">&lt;span style="color: #339999;">bytes&lt;/span>&lt;/b>), &lt;b class="identifier">&lt;span style="color: #339999;">Length&lt;/span>&lt;/b>(&lt;b class="identifier">&lt;span style="color: #339999;">length&lt;/span>&lt;/b>) {&lt;br />}&lt;br />&lt;br />&lt;b class="identifier">&lt;span style="color: #339999;"> uint64_t&lt;/span>&lt;/b> &lt;b class="function">&lt;span style="color: #336666;">getBase&lt;/span>&lt;/b>() &lt;b class="keyword">&lt;span style="color: #993399;">const&lt;/span>&lt;/b> { &lt;b class="keyword">&lt;span style="color: #993399;">return&lt;/span>&lt;/b> &lt;b class="literal">&lt;span style="color: #3333ff;">0&lt;/span>&lt;/b>; }&lt;br />&lt;b class="identifier">&lt;span style="color: #339999;"> uint64_t&lt;/span>&lt;/b> &lt;b class="function">&lt;span style="color: #336666;">getExtent&lt;/span>&lt;/b>() &lt;b class="keyword">&lt;span style="color: #993399;">const&lt;/span>&lt;/b> { &lt;b class="keyword">&lt;span style="color: #993399;">return&lt;/span>&lt;/b> &lt;b class="identifier">&lt;span style="color: #339999;">Length&lt;/span>&lt;/b>; }&lt;br />&lt;br />&lt;b class="keyword">&lt;span style="color: #993399;"> int&lt;/span>&lt;/b> &lt;b class="function">&lt;span style="color: #336666;">readByte&lt;/span>&lt;/b>(&lt;b class="identifier">&lt;span style="color: #339999;">uint64_t&lt;/span>&lt;/b> &lt;b class="identifier">&lt;span style="color: #339999;">addr&lt;/span>&lt;/b>, &lt;b class="identifier">&lt;span style="color: #339999;">uint8_t&lt;/span>&lt;/b> *&lt;b class="identifier">&lt;span style="color: #339999;">byte&lt;/span>&lt;/b>) &lt;b class="keyword">&lt;span style="color: #993399;">const&lt;/span>&lt;/b> {&lt;br />&lt;b class="keyword">&lt;span style="color: #993399;">if&lt;/span>&lt;/b> (&lt;b class="identifier">&lt;span style="color: #339999;">addr&lt;/span>&lt;/b> &amp;gt; &lt;b class="function">&lt;span style="color: #336666;">getExtent&lt;/span>&lt;/b>())&lt;br />&lt;b class="keyword">&lt;span style="color: #993399;">return&lt;/span>&lt;/b> &lt;b class="literal">&lt;span style="color: #3333ff;">-1&lt;/span>&lt;/b>;&lt;br />*&lt;b class="identifier">&lt;span style="color: #339999;">byte&lt;/span>&lt;/b> = &lt;b class="identifier">&lt;span style="color: #339999;">Bytes&lt;/span>&lt;/b>[&lt;b class="identifier">&lt;span style="color: #339999;">addr&lt;/span>&lt;/b>];&lt;br />&lt;b class="keyword">&lt;span style="color: #993399;">return&lt;/span>&lt;/b> &lt;b class="literal">&lt;span style="color: #3333ff;">0&lt;/span>&lt;/b>;&lt;br />}&lt;br />};&lt;br />&lt;/pre>Given a &lt;code>&lt;span style="color: #339999;">&lt;b>BufferMemoryObject&lt;/b>&lt;/span>&lt;/code>, all you have to do to extract &lt;code>&lt;span style="color: #339999;">&lt;b>MCInst&lt;/b>&lt;/span>&lt;/code> objects is to call the &lt;code>getInstruction&lt;/code> method of the disassembler you got earlier:&lt;br />&lt;pre>&lt;b class="namespace">&lt;span style="color: #6600cc;">llvm&lt;/span>&lt;/b>::&lt;b class="identifier">&lt;span style="color: #339999;">MCInst&lt;/span>&lt;/b> &lt;b class="identifier">&lt;span style="color: #339999;">Inst&lt;/span>&lt;/b>;&lt;br />&lt;b class="identifier">&lt;span style="color: #339999;">uint64_t&lt;/span>&lt;/b> &lt;b class="identifier">&lt;span style="color: #339999;">Size&lt;/span>&lt;/b>;&lt;br />&lt;b class="identifier">&lt;span style="color: #339999;">disassembler&lt;/span>&lt;/b>-&amp;gt;&lt;b class="function">&lt;span style="color: #336666;">getInstruction&lt;/span>&lt;/b>(&lt;b class="identifier">&lt;span style="color: #339999;">Inst&lt;/span>&lt;/b>, &lt;b class="identifier">&lt;span style="color: #339999;">Size&lt;/span>&lt;/b>, &lt;b class="identifier">&lt;span style="color: #339999;">BufferMObj&lt;/span>&lt;/b>, &lt;b class="literal">&lt;span style="color: #3333ff;">0&lt;/span>&lt;/b>, &lt;b class="function">&lt;b class="namespace">&lt;span style="color: #6600cc;">llvm&lt;/span>&lt;/b>::&lt;span style="color: #336666;">nulls&lt;/span>&lt;/b>()));&lt;br />&lt;/pre>The last argument is an optional diagnostic stream, and the &lt;code>0&lt;/code> indicates that the disassembler should start from address 0 in the buffer.&lt;br />&lt;h2>Where to look for more documentation&lt;/h2>For general information on how the disassembler's decode tables are generated from &lt;code>lib/Target/X86/X86.td&lt;/code>, visit &lt;code>utils/TableGen/DisassemblerEmitter.cpp&lt;/code>, which provides an overview of the TableGen side of the code. If you're interested in the gory, bit-for-bit details of how the disassembler dissects the various instruction bytes, you can go straight to &lt;code>lib/Target/X86/Disassembler/X86Disassembler.h&lt;/code>, which describes the decode process in more detail and gives a guide to the implementation files.</description></item><item><title>Address of Label and Indirect Branches in LLVM IR</title><link>https://blog.llvm.org/2010/01/address-of-label-and-indirect-branches.html</link><pubDate>Sun, 03 Jan 2010 00:11:00 +0000</pubDate><guid>https://blog.llvm.org/2010/01/address-of-label-and-indirect-branches.html</guid><description>The GCC Compiler supports a useful "&lt;a href="http://gcc.gnu.org/onlinedocs/gcc/Labels-as-Values.html#Labels-as-Values">Label as Values&lt;/a>" extension, which allows code to take the address of a label and then later do an unconditional branch to an address specified as a void*. This extension is particularly useful for building efficient interpreters.&lt;br />&lt;br />LLVM has long supported this extension by lowering it to a "correct" but extremely inefficient form. New in LLVM 2.7 is IR support for taking the address of a label and jumping to it later, which allows implementing this extension much more efficiently. This post describes this new LLVM IR feature and how it works.&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;br />In this discussion, I limit the scope to only considering "local" jumps. We don't talk about non-local jumps in the GCC extension sense: jumps from a nested function to an outer one.&lt;br />&lt;br />&lt;span style="font-size: x-large;">The Address of Label Extension&lt;/span>&lt;br />&lt;br />Before I dive into the new feature, I'll describe the GCC C extension along with how LLVM 2.6 and earlier used to compile it. Consider this code (from &lt;a href="http://llvm.org/bugs/show_bug.cgi?id=3120">PR3120&lt;/a>):&lt;br />&lt;br />&lt;pre>static int fn(Opcodes opcodes) {&lt;br /> static const void *codetable[] =&lt;br /> { &amp;amp;&amp;amp;RETURN, &amp;amp;&amp;amp;INCREMENT, &amp;amp;&amp;amp;DECREMENT, &amp;amp;&amp;amp;DOUBLE, &amp;amp;&amp;amp;SWAPWORD };&lt;br /> int result = 0;&lt;br />&lt;br /> goto *codetable[*(opcodes++)];&lt;br />RETURN:&lt;br /> return result;&lt;br />INCREMENT:&lt;br /> result++;&lt;br /> goto *codetable[*(opcodes++)];&lt;br />DECREMENT:&lt;br /> result--;&lt;br /> goto *codetable[*(opcodes++)];&lt;br />DOUBLE:&lt;br /> result &amp;lt;&amp;lt;= 1;&lt;br /> goto *codetable[*(opcodes++)];&lt;br />SWAPWORD:&lt;br /> result = (result &amp;lt;&amp;lt; 16) | (result &amp;gt;&amp;gt; 16);&lt;br /> goto *codetable[*(opcodes++)];&lt;br />}&lt;br />&lt;/pre>&lt;br />As you can see, the code initializes the 'codetable' array with the addresses of 5 labels, and later jumps through a computed pointer.&lt;br />&lt;br />An interesting aspect about this extension is that the only thing you are allowed to do with an address taken label is to jump to it. While it is widely misused for other things (e.g. the BUG macro in the linux kernel, which prints the address of a label on error), you are &lt;b>really really&lt;/b> only allowed jump to it. You are not allowed to use it in an inline asm, inspect the value, or do anything else.&lt;br />&lt;br />&lt;span style="font-size: x-large;">LLVM 2.6 and Earlier&lt;/span>&lt;br />&lt;br />In LLVM 2.6 and earlier, LLVM took full advantage of the fact that you're not allowed to do anything with the value other than jump to the address of a label. Because this extension is only used rarely, we did not want to add direct support for this extension, because it would increase the complexity of LLVM IR. Instead, we took a very simple implementation approach, which faithfully implemented the extension, but did not require any new IR features. The approach was simple:&lt;br />&lt;ol>&lt;li>When the address of a label was taken, that label was assigned a unique integer ID (within its function) starting at 1. Taking the address of the label provided this integer ID, and not the actual address of the label.&lt;/li>&lt;li>When an indirect goto is seen, we lowered this construct as a standard LLVM &lt;a href="http://llvm.org/docs/LangRef.html#i_switch">switch instruction&lt;/a>. For each uniquely assigned integer ID, the switch would jump to the corresponding label.&lt;/li>&lt;/ol>The combination of these two elements meant that we could support this extension with no special support in LLVM IR. To give a more concrete example, this is how the example above was lowered. The "codetable" array was lowered as if it were written as:&lt;br />&lt;br />&lt;pre>static const void *codetable[] =&lt;br /> { (void*)1, (void*)2, (void*)3, (void*)4, (void*)5 };&lt;br />&lt;/pre>&lt;br />This clearly doesn't provide the addresses of the specified labels, but it does provide unique ID numbers for each. With this, an indirect goto was lowered as if it were written as:&lt;br />&lt;br />&lt;pre>switch (..) {&lt;br /> default: __builtin_unreachable();&lt;br /> case 1: goto RETURN;&lt;br /> case 2: goto INCREMENT;&lt;br /> case 3: goto DECREMENT:&lt;br /> case 4: goto DOUBLE;&lt;br /> case 5: goto SWAPWORD;&lt;br /> }&lt;br />&lt;/pre>&lt;br />Since code is only allowed to jump to the address of a label taken in the current function (again, not considering non-local gotos), we know all possible destinations, and we can codegen the indirect jump as a switch. To reiterate, the primary advantage of this approach was that it did not require any LLVM extension: switch statements required the LLVM IR switch instruction, so reusing it here was no problem.&lt;br />&lt;br />It is also worthwhile to point out that while this implementation fulfills the letter of the extension, it is fairly far from the intent of it. Beyond that, the major problem with the LLVM 2.6 implementation is that the generated code is quite slow.&lt;br />&lt;br />&lt;span style="font-size: x-large;">LLVM 2.7 and Later: blockaddress and indirectbr&lt;/span>&lt;br />&lt;br />While it is true that this extension is relatively rare, the cases where it is used are quite important. This extension is used in critical interpreter loops, where it can provide a fairly substantial win (around 15% is typical). Because of this, LLVM grew the ability to represent and codegen this in the intended form. This extension uses two new LLVM IR features:&lt;br />&lt;ol>&lt;li>First, taking the address of a label produces a new &lt;a href="http://llvm.org/docs/LangRef.html#blockaddress">blockaddress&lt;/a> node (represented by the LLVM BlockAddress class).&lt;/li>&lt;li>Second, jumping through an address results in a new &lt;a href="http://llvm.org/docs/LangRef.html#i_indirectbr">indirectbr&lt;/a> terminator instruction (the IndirectBrInst class).&lt;/li>&lt;/ol>The two new features have a couple of interesting ramifications, but before we get into them, I'll show you how the example above compiles. First, the "codetable" array compiles into this pseudo IR:&lt;br />&lt;br />&lt;pre>static const void *codetable[] =&lt;br /> { blockaddress(@fn, %RETURN),&lt;br /> blockaddress(@fn, %INCREMENT),&lt;br /> blockaddress(@fn, %DECREMENT),&lt;br /> blockaddress(@fn, %DOUBLE),&lt;br /> blockaddress(@fn, %SWAPWORD)&lt;br /> };&lt;br />&lt;/pre>&lt;br />At codegen time, the new blockaddress constant actually lowered into a reference to the label for the LLVM BasicBlock that it correspond to. Next, instead of a switch, indirect gotos codegen into the new 'indirectbr' LLVM IR instruction like this:&lt;br />&lt;br />&lt;pre>indirectbr i8* %address, [ label %RETURN, label %DOUBLE, label %INCREMENT, label %DECREMENT, label %SWAPWORD ]&lt;br />&lt;/pre>&lt;br />While the blockaddress constant is relatively straightforward, you might be surprised to see all of the labels duplicated here. The 'indirectbr' is typically lowered to very simple machine code: a machine level jump through a register. Despite this underlying simplicity, the invariant on the "indirectbr" instruction is that it must include (possibly a superset of) all possible label targets in the list of labels in the instruction. Jumping to a label that is not included is undefined behavior. The order of labels in the instruction doesn't matter, but the presence or absence of a label is important.&lt;br />&lt;br />&lt;span style="font-size: x-large;">Ramifications of this design&lt;/span>&lt;br />&lt;br />When this feature was being added to LLVM, we considered many different approaches, which all had a variety of different tradeoffs. Instead of describing all possible implementation approaches, lets just talk about some of the ramifications of this approach by considering a set of questions you might have:&lt;br />&lt;br />&lt;b>Why does indirectbr include a list of possible target blocks?&lt;/b>&lt;br />&lt;br />One of the foremost concerns we had when implementing this new feature was that we wanted it to fit into the rest of the compiler with as little special case code as possible. One particularly important structure is the Control Flow Graph (CFG), which is the basis for all dataflow analysis in LLVM.&lt;br />&lt;br />In LLVM, the CFG is walked with the &lt;a href="http://llvm.org/docs/ProgrammersManual.html#iterate_preds">pred_iterator and succ_iterator&lt;/a> iterators. &lt;tt>succ_iterator&lt;/tt> is very simple, it just walks the BasicBlock operands of the &lt;a href="http://llvm.org/docs/LangRef.html#terminators">terminator instruction&lt;/a> at the end of a block. &lt;tt>pred_iterator&lt;/tt> is trickier: it walks the use-def chains of a BasicBlock, and reports any uses coming from terminators as predecessors.&lt;br />&lt;br />Clearly, for this extension to work with this scheme, we wanted to follow as closely as possible with the way the existing system works. This means that indirectbr having a list of possible targets makes the successor iterator very simple (it can just walk the list to get the possible destinations). A second major benefit is that this also fixes the predecessor iterator: since each operand is considered a 'use', walking the use list of a block that has its address taken will work correctly, because the indirectbr uses will be seen.&lt;br />&lt;br />&lt;b>How does this extension interact with PHI nodes?&lt;/b>&lt;br />&lt;br />PHI nodes are defined based on properties of the CFG, so they work normally as you'd expect based on the CFG behavior described above. Taking the address of a block itself doesn't cause it to have any PHI nodes. An address-taken block gets PHI node entries when an indirectbr jumps to it.&lt;br />&lt;br />&lt;b>Why is blockaddress a constant?&lt;/b>&lt;br />&lt;br />This is an easy one: the BlockAddress IR object inherits from Constant because it needs to be able to be used to initialize global variables. Global variable initializers must be Constant's.&lt;br />&lt;br />&lt;b>Why does blockaddress take both a function and a basic block name?&lt;/b>&lt;br />&lt;br />There are a couple answers to this. The most obvious one is that LLVM IR is not nested like C code is. When the address of a label is used to initialize a static variable, that static variable becomes an LLVM global variable like any other. If there were a reference to "foo" from a global variable, we need to know &lt;i>which&lt;/i> "foo" label is being referenced (since each function has its own local namespace).&lt;br />&lt;br />A second and less obvious answer is that LLVM IR is more general than the GCC C extension: you are allowed to take the address of a block in a different function. This support falls out of the support we need to initialize global variables, and isn't obviously useful, but it is there nonetheless.&lt;br />&lt;br />&lt;b>How does this extension interact with inlining?&lt;/b>&lt;br />&lt;br />Simply put, LLVM currently refuses to inline a function containing an indirectbr (as does GCC). It is conceivably possible to relax this restriction in the future in some cases, but it would require a lot of analysis. The basic problem is that inlining an indirectbr is actually a pretty tricky thing to do: in addition to cloning the callee into the caller, we have to clone all blockaddress objects referring to block in the caller, and clone everything that refers to them. Here's a silly example in pseudo IR:&lt;br />&lt;br />&lt;pre>static void *G = blockaddress(@foo, %bb);&lt;br />void foo() {&lt;br /> goto *G;&lt;br />bb:&lt;br /> return;&lt;br />}&lt;br />void bar() {&lt;br /> foo();&lt;br />}&lt;br />&lt;/pre>&lt;br />Simply cloning foo into bar like this would not be correct:&lt;br />&lt;br />&lt;pre>static void *G = blockaddress(@foo, %bb);&lt;br />void foo() {&lt;br /> goto *G;&lt;br />bb: return;&lt;br />}&lt;br />void bar() {&lt;br /> goto *G;&lt;br />bb:&lt;br /> return;&lt;br />}&lt;br />&lt;/pre>&lt;br />The problem is that 'bar' would jump through G to a label defined in 'foo'. It is not legal to jump from one function to another. To do this inlining, we'd actually have to clone G itself. Doing this is possible, but not worth it, particularly because most functions that use this extension are large interpreter loops.&lt;br />&lt;br />&lt;b>How does this extension interact with critical edge splitting?&lt;/b>&lt;br />&lt;br />Poorly.&lt;br />&lt;br />A critical edge in the CFG is an edge which comes from a block with multiple successors (e.g. a block that ends with a conditional branch) and goes to a block with multiple predecessors (like the merge point of an if/then/else). Critical edges are problematic for various code motion transformations. Prior to this extension, any critical edge in the CFG could be split by introducing a new intermediate block between the source and destination blocks. &lt;br />&lt;br />My biggest disappointment with this extension (and the reason I resisted implementing it for so long) centers around the fact that it inherently makes some edges un-splittable. Consider a simple little CFG like this:&lt;br />&lt;br />&lt;pre>BB1:&lt;br /> indirectbr i8* %P1, [ label %A, label %B ]&lt;br />BB2:&lt;br /> br label %A&lt;br />A:&lt;br /> ...&lt;br />&lt;/pre>&lt;br />The edge "BB1-&amp;gt;A" is critical because A has multiple predecessors (from both BB1 and BB2) and BB1 has multiple successors (to A and B). We could easily split the edge in this example by introducing a new intermediary block:&lt;br />&lt;br />&lt;pre>BB1:&lt;br /> indirectbr i8* %P1, [ label %A1, label %B ]&lt;br />BB2:&lt;br /> br label %A&lt;br />A1:&lt;br /> br label %A&lt;br />A:&lt;br /> ...&lt;br />&lt;/pre>&lt;br />This is the normal critical-edge splitting transformation. Here we can see that the edge from BB1-&amp;gt;A1 is not critical (because A1 has one predecessor) and the edge from A1-&amp;gt;A is not critical either (because A1 has one predecessor). The problem with this is that we just broke an important invariant: since we didn't adjust places that took the address of A, we now have a situation where the CFG looks like BB1 jumps to A1 - but in reality, the pointer that the indirectbr gets will contain the address of A. This will cause us to do invalid dataflow analysis and lead to all sorts of problems.&lt;br />&lt;br />As with inlining, it is possible to teach the optimizer to be able to split some critical edges. However, this isn't enough. If there is a single critical edge that the optimizer may not be able to split it means that various LLVM optimizations have to assume that critical edge splitting can fail. This had some significant effects on the loop optimizer, for example, which assumed that it could split critical edges to form canonical loops.&lt;br />&lt;br />&lt;b>Can we get an N^2 explosion of CFG edges?&lt;/b>&lt;br />&lt;br />Absolutely. The issue here is that you can have N indirect branch instructions (in the example at the top, N = 5) and M labels with their addresses taken (in the example, M = 5). Since each indirectbr needs an edge to each label with its address taken, you get N*M edges, which is N^2. This can quickly become a big compile time problem, because it is fairly common for big interpreters to have hundreds of these things in their loops.&lt;br />&lt;br />Fortunately, the fix for this is pretty simple: while the optimizer can safely duplicate an indirectbr instruction, it decides that it isn't profitable to do so. By trying to maintain at most one indirectbr instruction per function, we effectively get a factoring of the edges. The llvm-gcc and clang frontends both generate IR which has at most one indirectbr instruction per function: all other indirect gotos are lowered as a branch to the communal indirectbr in a function.&lt;br />&lt;br />In order to produce efficient code, the code generator performs tail duplication to introduce the N^2 CFG. It does this early enough to get good code but late enough to not impact compile time too much. &lt;br />&lt;br />&lt;b>What about labels whose address is taken but not branched to?&lt;/b>&lt;br />&lt;br />Circling back to the Linux BUG macro and other abuses of this extension, it is natural to wonder whether we support these uses better than LLVM 2.6. The answer is "sort of". In cases where code takes the address of a block and has an indirectbr in a function, that address will persist and other uses will have the expected behavior: They will see the address of a block and not some magic block ID number.&lt;br />&lt;br />However, this typically isn't good enough. The issue is that taking the address of a block is not enough to prevent other optimizations (like block merging) from affecting it, it needs to have predecessors in the CFG. If we ever decide to better support abuses like this, we will need to extend our model to support them somehow. &lt;br />&lt;br />In any case, I hope this discussion about indirectbr is helpful and illuminating. Interpreter loops will be much more performant with LLVM 2.7 than with LLVM 2.6 and earlier!&lt;br />&lt;br />-Chris</description></item><item><title>Clang Builds LLVM</title><link>https://blog.llvm.org/2009/12/clang-builds-llvm.html</link><pubDate>Thu, 24 Dec 2009 13:23:00 +0000</pubDate><guid>https://blog.llvm.org/2009/12/clang-builds-llvm.html</guid><description>Just in time for the Christmas holiday, the Clang project has hit a major milestone: Clang can now build all of LLVM and Clang!&lt;div>&lt;br />&lt;/div>&lt;div>The resulting Clang-built-Clang is not yet functional, so this "self-build" milestone is well short of full self-hosting. However, self-building indicates that C++ parsing, semantic analysis, and code generation is solid enough to compile the entirety of LLVM (~350k lines of C++ code) and Clang (~200k lines of C++ code) and produce object files that link together properly. To get to this point, we've fixed many bugs in Clang (when compiling C++ code), but also several bugs in LLVM and Clang that were found by Clang itself.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>We are tracking &lt;a href="http://llvm.org/bugs/show_bug.cgi?id=5221">a number of Clang bugs&lt;/a> that manifest when building LLVM and Clang, as we make our way to the next big milestone: full self-hosting of Clang!&lt;/div></description></item><item><title>Advanced Topics in Redundant Load Elimination with a Focus on PHI Translation</title><link>https://blog.llvm.org/2009/12/advanced-topics-in-redundant-load.html</link><pubDate>Sat, 19 Dec 2009 14:45:00 +0000</pubDate><guid>https://blog.llvm.org/2009/12/advanced-topics-in-redundant-load.html</guid><description>In our &lt;a href="http://blog.llvm.org/2009/12/introduction-to-load-elimination-in-gvn.html">previous post on GVN&lt;/a> we introduced some basics of load elimination. &amp;nbsp;This post describes some advanced topics and focuses on PHI translation: what it is, why it is important, shows some nice things it can do, and describes the implementation in LLVM.&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;span style="font-size: x-large;">What is PHI Translation All About?&lt;/span>&lt;br />&lt;br />When performing redundancy elimination on SSA form,&amp;nbsp;PHI translation is required when we are walking through the CFG and the value being analyzed has an operand defined in the block we're walking through. &amp;nbsp;In the case of load elimination, the operand of the value being analyzed is the pointer we're loading from. This means that PHI translation happens when the pointer we're loading is defined in a block. For example, consider this C code:&lt;br />&lt;br />&lt;pre>if (...) {&lt;br /> *A = 5;&lt;br /> P = A;&lt;br /> } else {&lt;br /> *B = 9;&lt;br /> P = B;&lt;br /> }&lt;br /> use(*P);&lt;br />&lt;/pre>&lt;br />This compiles into LLVM IR that looks like this:&lt;br />&lt;br />&lt;pre>BB1:&lt;br />&amp;nbsp;&amp;nbsp;store i32 5, i32* %A&lt;br />&amp;nbsp;&amp;nbsp;br label %Merge&lt;br />&lt;br />BB2:&lt;br />&amp;nbsp;&amp;nbsp;store i32 9, i32* %B&lt;br />&amp;nbsp;&amp;nbsp;br label %Merge&lt;br />&lt;br />Merge:&lt;br />&amp;nbsp;&amp;nbsp;%P = phi i32* [%A, %BB1], [%B, %BB2]&lt;br />&amp;nbsp;&amp;nbsp;%Y = load i32 *%P&lt;br />&amp;nbsp;&amp;nbsp;...&lt;br />&amp;nbsp;&amp;nbsp;... use %Y ...&lt;br />&lt;/pre>&lt;br />In this example, GVN starts looking at the %Y load to see if it can eliminate it. &amp;nbsp;It scans backwards up the block, looking for other things that provide the value of the memory address at %P. &amp;nbsp;Unlike in the example in the previous post, here we actually find a definition of %P: what do we do?&lt;br />&lt;br />In LLVM 2.6 and before, memory dependence analysis would just give up and act as though the memory had been clobbered, preventing the load from being analyzed further (and eventually being eliminated in this case). &amp;nbsp;New in LLVM 2.7, GVN is able to translate %P into each predecessor. &amp;nbsp;In this case, it sees that %P has the value of %A in %BB1 (and then sees that %A is available there) and that %P has the value of %B in %BB2 (where it is also available). This allows GVN to optimize this example into:&lt;br />&lt;br />&lt;pre>BB1:&lt;br />&amp;nbsp;&amp;nbsp;store i32 5, i32* %A&lt;br />&amp;nbsp;&amp;nbsp;br label %Merge&lt;br />&lt;br />BB2:&lt;br />&amp;nbsp;&amp;nbsp;store i32 9, i32* %B&lt;/pre>&lt;pre>&amp;nbsp;&amp;nbsp;br label %Merge&lt;br />&lt;br />Merge:&lt;br />&amp;nbsp;&amp;nbsp;%Y = phi i32 [5, %BB1], [9, %BB2]&lt;br />&amp;nbsp;&amp;nbsp;%P = phi i32* [%A, %BB1], [%B, %BB2]&lt;br />&amp;nbsp;&amp;nbsp;...&lt;br />&amp;nbsp;&amp;nbsp;... use %Y ...&lt;br />&lt;/pre>&lt;br />which eliminates the load. This post talks about how this is done, the nuances involved in getting this right, and what this allows us to optimize.&lt;br />&lt;br />&lt;span style="font-size: x-large;">Why is PHI Translation Required for Correctness?&lt;/span>&lt;br />&lt;br />One thing that wasn't obvious to me when I dove into this is that PHI translation is actually required for correctness. &amp;nbsp;This is the reason why memory dependence analysis must stop scanning if it finds the definition of the pointer. &amp;nbsp;The cases where this happen are somewhat subtle and usually involve partial redundancy elimination. &amp;nbsp;For example, consider this loop:&lt;br />&lt;br />&lt;pre>Loop:&lt;br /> %P = phi i32* [%A, %Entry], [%B, %Loop]&lt;br /> %X = load i32* %P&lt;br /> ...&lt;br /> store i32 5, i32* %B&lt;br /> store i32 4, i32* %P&lt;br /> br i1 %cond, label %Loop, label %Out&lt;br />&lt;/pre>&lt;br />Consider what would happen if PHI translation kept scanning for %P in predecessors as it went up the CFG: it would scan from the %X load up to the top of the Loop block. If not doing PHI translation correctly, it would continue scanning for %P in the Entry block (which we ignore in this example), then scan for %P in the Loop block (which is a predecessor of itself).&lt;br />&lt;br />Scanning for %P in the loop block finds the store of 4 to %P, so we'd consider 4 to be a live-in value on the edge from loop. However, this is &lt;b>incorrect&lt;/b> and will lead to a miscompilation: the actual value live on that backedge is 5, which is provided by the previous store.&lt;br />&lt;br />This simple example is intended to show that PHI translation is not an optimization: it is required for correctness, and that the most simple form of PHI translation is to give up when you see a definition of the address. However, LLVM recently got smart enough to do much better than this or the simple pointer case above.&lt;br />&lt;br />&lt;span style="font-size: x-large;">A More Interesting Case&lt;/span>&lt;br />&lt;br />Consider this test case:&lt;br />&lt;br />&lt;pre>struct S { int X, Y; };&lt;br />&lt;br />int foo(struct S *P1, struct S *P2, int C) {&lt;br /> struct S *P;&lt;br /> if (C) {&lt;br /> P1-&amp;gt;X = 4;&lt;br /> P1-&amp;gt;Y = 2;&lt;br /> P = P1;&lt;br /> } else {&lt;br /> P2-&amp;gt;X = 24;&lt;br /> P2-&amp;gt;Y = 2;&lt;br /> P = P2;&lt;br /> }&lt;br /> return P-&amp;gt;X + P-&amp;gt;Y;&lt;br />} &lt;br />&lt;/pre>&lt;br />This code compiles down to IR that looks like this (using "&lt;tt>clang t.c -S -o - -emit-llvm | opt -mem2reg -S&lt;/tt>":&lt;br />&lt;br />&lt;pre>if.then:&lt;br /> %tmp2 = getelementptr inbounds %struct.S* %P1, i32 0, i32 0&lt;br /> store i32 4, i32* %tmp2&lt;br /> %tmp4 = getelementptr inbounds %struct.S* %P1, i32 0, i32 1&lt;br /> store i32 2, i32* %tmp4&lt;br /> br label %if.end&lt;br />&lt;br />if.else: &lt;br /> %tmp7 = getelementptr inbounds %struct.S* %P2, i32 0, i32 0&lt;br /> store i32 24, i32* %tmp7&lt;br /> %tmp9 = getelementptr inbounds %struct.S* %P2, i32 0, i32 1 &lt;br /> store i32 2, i32* %tmp9&lt;br /> br label %if.end&lt;br />&lt;br />if.end: &lt;br /> %P = phi %struct.S* [ %P1, %if.then ], [ %P2, %if.else ] &lt;br /> %tmp12 = getelementptr inbounds %struct.S* %P, i32 0, i32 0 &lt;br /> %tmp13 = load i32* %tmp12 &lt;br /> %tmp15 = getelementptr inbounds %struct.S* %P, i32 0, i32 1 &lt;br /> %tmp16 = load i32* %tmp15 &lt;br /> %add = add nsw i32 %tmp13, %tmp16 &lt;br /> ret i32 %add&lt;br />}&lt;br />&lt;/pre>&lt;br />In this case, GVN looks to eliminate the %tmp13 and %tmp14 loads. &amp;nbsp;Consider the %tmp13 load: it scans backwards from the load, looking for available values of %tmp12. &amp;nbsp;As it goes, it immediately finds the definition of the pointer (%tmp12), so it needs to PHI translate the pointer or give up. &amp;nbsp;Without getting into the details yet of how this is done, here is the intuition of what happens:&lt;br />&lt;br />In this case, the pointer is not a PHI node, but it &lt;b>uses&lt;/b> a PHI node as an operand. &amp;nbsp;Because of this, GVN needs to phi translate the entire symbolic expression "gep P, 0, 0" into the predecessors. &amp;nbsp;It does this, forming the symbolic expression "gep P1, 0, 0" and it finds that the phi translated address is available as %tmp2 in the %if.then block. &amp;nbsp;It then PHI translates the "gep P, 0, 0" expression into the %if.else forming the "gep P2, 0, 0" symbolic expression and finds that it is available as %tmp7. &amp;nbsp;It scans those blocks for the pointers and finds that the values are, in fact, available. &amp;nbsp;Because they are both available, it can use insert construct SSA form to eliminate the load.&lt;br />&lt;br />This allows it to see the both loads are in fact available in the predecessors. &amp;nbsp;Here is the code after GVN (using "&lt;tt>clang t.c -S -o - -emit-llvm | opt -mem2reg -S -gvn -die&lt;/tt>):&lt;br />&lt;br />&lt;pre>if.then:&lt;br /> %tmp2 = getelementptr inbounds %struct.S* %P1, i32 0, i32 0&lt;br /> store i32 4, i32* %tmp2&lt;br /> %tmp4 = getelementptr inbounds %struct.S* %P1, i32 0, i32 1&lt;br /> store i32 2, i32* %tmp4&lt;br /> br label %if.end&lt;br />&lt;br />if.else:&lt;br /> %tmp7 = getelementptr inbounds %struct.S* %P2, i32 0, i32 0&lt;br /> store i32 24, i32* %tmp7&lt;br /> %tmp9 = getelementptr inbounds %struct.S* %P2, i32 0, i32 1&lt;br /> store i32 2, i32* %tmp9&lt;br /> br label %if.end&lt;br />&lt;br />if.end:&lt;br /> %tmp13 = phi i32 [ 1, %if.then ], [ 2, %if.else ]&lt;br /> %tmp16 = phi i32 [ 3, %if.then ], [ 4, %if.else ]&lt;br /> %add = add nsw i32 %tmp13, %tmp16&lt;br /> ret i32 %add&lt;br />}&lt;br />&lt;/pre>&lt;br />Here you can see that GVN found the available values, inserted PHI nodes, and eliminated the loads.&lt;br />&lt;br />&lt;span style="font-size: x-large;">More Complex Address Expressions&lt;/span>&lt;br />&lt;br />While the example above hopefully makes intuitive sense, it turns out that PHI translating expressions like this is actually a bit more difficult than it looks. It was so much so that it got split out into its own class, &lt;a href="http://llvm.org/doxygen/classllvm_1_1PHITransAddr.html">PHITransAddr&lt;/a> (in &lt;a href="http://llvm.org/doxygen/PHITransAddr_8h-source.html">llvm/Analysis/PHITransAddr.h&lt;/a>). Doing this was actually motivated by a few cute little examples like this:&lt;br />&lt;br />&lt;pre>void test(int N, double* G) {&lt;br /> for (long j = 1; j &amp;lt; 1000; j++)&lt;br /> G[j] = G[j] + G[j-1];&lt;br />}&lt;br />&lt;/pre>&lt;br />This example&amp;nbsp;(which was reduced from a larger example)&amp;nbsp;has a loop carried redundancy where every iteration reads the previous iteration's value. In fact, the code could be rewritten like this, which only has one load in the loop:&lt;br />&lt;br />&lt;pre>void test(int N, double* G) {&lt;br /> double Prev = G[0];&lt;br /> for (long j = 1; j &amp;lt; 1000; j++) {&lt;br /> Prev = G[j] + Prev;&lt;br /> G[j] = Prev;&lt;br /> }&lt;br />}&lt;br />&lt;/pre>&lt;br />Some compilers have specific optimization passes that identify and eliminate these recurrences through dependence analysis. While this is a nice thing to do, sufficiently smart partial redundancy elimination of loads should also be able to eliminate this, and LLVM now does.&lt;br />&lt;br />The unoptimized code looks like this in LLVM IR:&lt;br />&lt;br />&lt;pre>define void @test(i32 %N, double* %G) {&lt;br />bb.nph:&lt;br /> br label %for.body&lt;br />&lt;br />for.body:&lt;br /> %indvar = phi i64 [ 0, %bb.nph ], [ %tmp, %for.body ] ; &lt;b>indvar = [0 ... 999]&lt;/b>&lt;br /> %arrayidx6 = getelementptr double* %G, i64 %indvar&lt;br /> %tmp = add i64 %indvar, 1&lt;br /> %arrayidx = getelementptr double* %G, i64 %tmp&lt;br /> %tmp3 = load double* %arrayidx ; &lt;b>load G[indvar+1]&lt;/b>&lt;br /> %tmp7 = load double* %arrayidx6 ; &lt;b>load G[indvar]&lt;/b>&lt;br /> %add = fadd double %tmp3, %tmp7&lt;br /> store double %add, double* %arrayidx ; &lt;b>store G[indvar+1]&lt;/b>&lt;br /> %exitcond = icmp eq i64 %tmp, 999&lt;br /> br i1 %exitcond, label %for.end, label %for.body&lt;br />&lt;br />for.end:&lt;br /> ret void&lt;br />}&lt;br />&lt;/pre>&lt;br />One interesting thing to be aware of here is that the -indvars&lt;span style="font-family: 'Courier New', Courier, monospace;">&amp;nbsp;&lt;/span>pass rewrote the induction variable to count from 0 to 999 instead of from 1 to 1000. &amp;nbsp;This is just a canonicalization, but it is why we see a store to indvar+1 instead of directly through indvar.&lt;br />&lt;br />In order to eliminate the redundant "&lt;b>load G[indvar]&lt;/b>", GVN starts by looking for the dependencies of the %tmp7 load. &amp;nbsp;It scans up the block, over several instructions that obviously don't modify the memory value, until it gets to the %arrayidx6 instruction, which defines the value. &amp;nbsp;At this point it has to either stop phi translation (correct, but not very aggressive) or incorporate it into the scan and start looking for "gep %G, %indvar". &amp;nbsp;It does this, until the next instruction, which defines %indvar. &amp;nbsp;Since it found a definition of one of the inputs, it either has to phi translate (again, correct, not not very aggressive) or try to incorporate the value.&lt;br />&lt;br />In this case, PHITransAddr attempts to translate the&amp;nbsp;"gep %G, %indvar" symbolic expression across the PHI for each predecessor. &amp;nbsp;In the %for.body predecessor, it looks to see if there is an instruction that produces the value "gep %G, %tmp" (because %tmp is the value of the PHI in the %for.body predecessor), and finds that this expression exists as %arrayidx. &amp;nbsp;Since PHI translation succeeded, it scans from the bottom of the block to see if there is a definition of the value at the address %arrayidx, and finds that the %tmp3 load produces the desired value.&lt;br />&lt;br />In the other predecessor (%bb.nph),&amp;nbsp;PHITransAddr translates the symbolic "gep %G, %indvar" expression into "gep %G, 0" (which it uses InstSimplify to simplify down to "%G") and then checks to see if it is available as an address. &amp;nbsp;"%G" is in fact a value address, so it scans from the bottom of the %bb.nph block to see if the value at address %G is available. &amp;nbsp;In this case it isn't, so it records that the value is not available in the entry block, and that the phi translated address in that block is %G.&lt;br />&lt;br />At this point, the recursive walk of the CFG has completed, and GVN knows that the %tmp7 load is in fact available as the %tmp3 value in one predecessor, but it is not available in the other predecessor. &amp;nbsp;This is a classic case of a partial redundancy. &amp;nbsp;Since the value is redundant on one edge but not the other, GVN makes the value fully redundant by inserting the computation (a load of %G) into the %bb.nph block, constructs SSA and eliminates the original load.&lt;br />&lt;br />The final LLVM IR we get is:&lt;br />&lt;br />&lt;pre>define void @test(i32 %N, double* %G) {&lt;br />bb.nph:&lt;br /> %tmp7.pre = load double* %G ; &lt;b>Inserted by PRE&lt;/b>&lt;br /> br label %for.body&lt;br />&lt;br />for.body:&lt;br /> %tmp7 = phi double [ %tmp7.pre, %bb.nph ],&lt;br /> [ %add, %for.body ] ; &lt;b>SSA Construction&lt;/b>&lt;br /> %indvar = phi i64 [ 0, %bb.nph ], [ %tmp, %for.body ]&lt;br /> %arrayidx6 = getelementptr double* %G, i64 %indvar&lt;br /> %tmp = add i64 %indvar, 1&lt;br /> %arrayidx = getelementptr double* %G, i64 %tmp&lt;br /> %tmp3 = load double* %arrayidx&lt;br /> %add = fadd double %tmp3, %tmp7 ; &lt;b>Now uses the PHI instead of a load&lt;/b>&lt;br /> store double %add, double* %arrayidx&lt;br /> %exitcond = icmp eq i64 %tmp, 999&lt;br /> br i1 %exitcond, label %for.end, label %for.body&lt;br />&lt;br />for.end:&lt;br /> ret void&lt;br />}&lt;br />&lt;/pre>&lt;br />Through this, GVN and PHI translation have worked together to eliminate a load in the loop. &amp;nbsp;If you're more comfortable reading X86 machine code, here is the before and after code for the loop:&lt;br />&lt;br />Before:&lt;br />&lt;pre>LBB1_1:&lt;br /> movsd 8(%rsi,%rax,8), %xmm0 # Load&lt;br /> addsd (%rsi,%rax,8), %xmm0 # Load&lt;br /> movsd %xmm0, 8(%rsi,%rax,8) # Store&lt;br /> incq %rax&lt;br /> cmpq $999, %rax&lt;br /> jne LBB1_1&lt;br />&lt;/pre>&lt;br />After:&lt;br />&lt;span style="font-family: monospace; white-space: pre;">LBB1_1:&lt;/span>&lt;br />&lt;pre>addsd 8(%rsi,%rcx,8), %xmm0 # Load&lt;br /> movsd %xmm0, 8(%rsi,%rcx,8) # Store&lt;br /> incq %rax&lt;br /> incq %rcx&lt;br /> cmpq $999, %rcx&lt;br /> jne LBB1_1&lt;br />&lt;/pre>&lt;br />If you're interested in other examples of PHI translation, take a look at&amp;nbsp;test/Transforms/GVN/rle-phi-translate.ll and&amp;nbsp;test/Transforms/GVN/rle.ll in the LLVM distribution.&lt;br />&lt;br />&lt;span style="font-size: x-large;">Division of Labor&lt;/span>&lt;br />&lt;br />Getting this to work requires a number of different LLVM subsystems to work together. &amp;nbsp;Here are the major players:&lt;br />&lt;br />&lt;b>PHI Translation&lt;/b>&lt;br />&lt;br />The&amp;nbsp;&lt;a href="http://llvm.org/doxygen/classllvm_1_1PHITransAddr.html">PHITransAddr&lt;/a>&amp;nbsp;class is the one that is responsible for building and translating symbolic expression like "gep %P, 1, (add %i, 1))" through PHI nodes. &amp;nbsp;When the "instruction scan" finds a definition of an input to the current PHITransAddr expression, it either has to incorporate it into a (potentially larger and more complex) expression or give up. &amp;nbsp;If it gives up, then PHI translation fails, otherwise it can keep scanning.&lt;br />&lt;br />&lt;b>Memory Dependence Analysis&lt;/b>&lt;br />&lt;br />"MemDep" is the pass that does the CFG and instruction scanning. &amp;nbsp;It builds a lazy and cached representation that is morally similar to "Virtual SSA Form" used by some other compilers, but is significantly more efficient than the virtual SSA forms that I'm aware of.&lt;br />&lt;br />It exposes two major interfaces:&lt;br />&lt;br />1) "give me all the local dependences of this load". &amp;nbsp;This query scans the block the load lives in for dependent instructions. If it does not find a dependent instruction it returns "nonlocal" to indicate that the loaded memory value is potentially live-in to the block.&lt;br />&lt;br />2) "give me all the non-local dependences for a load that is live in to a block". This query does the recursive upwards CFG scan that does PHI translation to find other definitions of the value.&lt;br />&lt;br />In the interesting cases for PHI translation, we end up doing a non-local query and get back a set of blocks where the value is available along with a set of blocks where the value isn't available.&lt;br />&lt;br />&lt;b>Alias Analysis:&lt;/b>&lt;br />&lt;br />&lt;a href="http://llvm.org/docs/AliasAnalysis.html">Alias analysis&lt;/a> (in this case, the -basicaa pass) is the underlying analysis that tells us whether two pointers can point to the same memory location or whether an instruction can modify or read from a memory location. &amp;nbsp;This is required to allow MemDep to scan beyond stores and calls that do not clobber the address we're interested in.&lt;br />&lt;br />&lt;b>SSA Update:&lt;/b>&lt;br />&lt;br />The &lt;a href="http://llvm.org/doxygen/SSAUpdater_8h-source.html">SSAUpdater&lt;/a> class is used to insert PHI nodes based on the set of loads that we find are available.&lt;br />&lt;br />&lt;b>GVN&lt;/b>:&lt;br />&lt;br />The GVN pass is the transformation sitting on top of all of these subsystems. &amp;nbsp;Because it is based on these other facilities, its logic is relatively simple: First, do a non-local memdep query. &amp;nbsp;If it returns a set of definitions with no clobbers, then the load is fully redundant and can be eliminated. &amp;nbsp;Otherwise, if there are some definitions live in, we have a partially redundant case. &amp;nbsp;GVN handles inserting the new computation to make the value fully redundant.&lt;br />&lt;br />&lt;div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&lt;span style="font-size: x-large;">Limitations&lt;/span>&lt;br />&lt;/div>&lt;br />While there is a lot of power here, there are still some significant limitations to this system. &amp;nbsp;As of this writing, here are some of the most significant ones:&lt;br />&lt;br />First, an symbolic expression address must exist as an SSA value for PHI translation to succeed. &amp;nbsp;In the last example, if we tried to phi translate "gep %G, %indvar" into a predecessor value which formed the symbolic expression of "gep %G, %xxx" and that symbolic expression did not actually exist in the code, PHI translation would fail. &amp;nbsp;This happens because because after PHI translation occurs, we need MemDep to scan the block to find dependent instructions. &amp;nbsp;Since MemDep queries are based on pointer values expressed as LLVM 'Value*'s, we have to have one to do the query.&lt;br />&lt;br />Second, critical edges currently block PRE of loads because we do not want to introduce the load on a control flow path where it would not exist before. &amp;nbsp;In principle, we could do this by lazily splitting the edge, but this would require updating the other in-flight data structures that the GVN pass is maintaining and we don't do this yet.&lt;br />&lt;br />Finally, our PRE of loads can certainly be improved. &amp;nbsp;Currently we only do PRE in cases where it would not grow the code and not introduce a computation on a path where it wouldn't exist before. &amp;nbsp;Since we are deleting a load, this means that we only want to insert at most one load. &amp;nbsp;The heuristic we use to determine whether this is the case is currently very local and can be improved.&lt;br />&lt;br />In any case, I hope this gives an useful overview of how this subsystem in LLVM works, and how it got better in what will be LLVM 2.7.&lt;br />&lt;br />-Chris</description></item><item><title>The Dreaded Two-Phase Name Lookup</title><link>https://blog.llvm.org/2009/12/dreaded-two-phase-name-lookup.html</link><pubDate>Fri, 18 Dec 2009 14:17:00 +0000</pubDate><guid>https://blog.llvm.org/2009/12/dreaded-two-phase-name-lookup.html</guid><description>C++ has more than its fair share of dark, dank corners, especially where templates are concerned. One of the most vexing is "two-phase name lookup", which involves lookup for any names that occur in the body of a template. As you might expect, there are two different phases of templates:&lt;br />&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;div>&lt;ol>&lt;li>Template definition time: when the template is initially parsed, long before it is instantiated, the compiler parses the template and looks up any "non-dependent" names. A name is "non-dependent" if the results of name lookup do not depend on any template parameters, and therefore will be the same from one template instantiation to another.&lt;/li>&lt;li>Template instantiation time: when the template is instantiated, the compiler looks up any "dependent" names, now that it has the full set of template arguments to perform lookup. The results of this lookup can (and often do!) vary from one template instantiation to another.&lt;/li>&lt;/ol>&lt;/div>&lt;div>Two-phase name lookup is not as complicated as its reputation implies. There are some non-obvious rules in the determination of what is a dependent vs. a non-dependent name, but otherwise the idea is simple. The problem with two-phase name lookup is that current compiler support for this feature is very poor. For example, GCC implements two-phase name lookup relatively well, but occasionally delays lookups that should have been done at template definition time (phase 1) until template instantiation time or performs lookups in both phases when it shouldn't. Visual C++, on the other hand, has a template parsing model that delays nearly every lookup to instantiation time (phase 2). By not implementing two-phase name lookup fully, both compilers tend to accept incorrect template code, and in some cases will end up compiling code differently from the mythical fully-conforming compiler. This is a portability issue, both between those two compilers (Visual C++ is more lenient) and to other, more pedantic compilers.&lt;br />&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>Like Clang. Clang was designed with complete support for two-phase name lookup, parsing template definitions (phase 1) as completely as possible and only performing name lookup at template instantiation time (phase 2) when required. Since we have chosen to make Clang C++ strict, we end up diagnosing template problems that other compilers miss. While that's generally good---correct code is more portable code---it also means that Clang needs to try extra-hard to produce decent diagnostics. Here's a recent problem Clang found within the LLVM code base (which compiled with GCC):&lt;br />&lt;/div>&lt;div>&lt;div>&lt;/div>&lt;blockquote>&lt;div>In file included from llvm/lib/Analysis/AliasAnalysisCounter.cpp:16:&lt;br />&lt;/div>&lt;div>In file included from llvm/include/llvm/Pass.h:369:&lt;br />&lt;/div>&lt;div>In file included from llvm/include/llvm/PassAnalysisSupport.h:24:&lt;br />&lt;/div>&lt;div>&lt;b>llvm/include/llvm/ADT/SmallVector.h:317:7:&lt;/b>&lt;b>&lt;span style="color: red;"> error: &lt;span style="color: black; font-weight: normal;">use of undeclared identifier 'setEnd'&lt;/span>&lt;/span>&lt;/b>&lt;br />&lt;/div>&lt;div>setEnd(this-&amp;gt;end()+1);&lt;br />&lt;/div>&lt;div>&lt;span style="color: #33ff33;"> ^&lt;/span>&lt;br />&lt;/div>&lt;div>&lt;span style="color: #33ff33;"> this-&amp;gt;&lt;/span>&lt;br />&lt;/div>&lt;div>In file included from llvm/lib/Analysis/AliasAnalysisCounter.cpp:16:&lt;br />&lt;/div>&lt;div>In file included from llvm/include/llvm/Pass.h:369:&lt;br />&lt;/div>&lt;div>&lt;b>llvm/include/llvm/PassAnalysisSupport.h:56:14: note: &lt;span style="font-weight: normal;">in instantiation of member function 'llvm::SmallVectorImpl llvm::PassInfo const *&amp;gt;::push_back' requested here&lt;/span>&lt;/b>&lt;br />&lt;/div>&lt;div>Required.push_back(ID);&lt;br />&lt;/div>&lt;div>&lt;span style="color: #33ff33;"> ^&lt;/span>&lt;br />&lt;/div>&lt;div>In file included from llvm/lib/Analysis/AliasAnalysisCounter.cpp:16:&lt;br />&lt;/div>&lt;div>In file included from llvm/include/llvm/Pass.h:369:&lt;br />&lt;/div>&lt;div>In file included from llvm/include/llvm/PassAnalysisSupport.h:24:&lt;br />&lt;/div>&lt;div>&lt;b>llvm/include/llvm/ADT/SmallVector.h:105:8: note: &lt;/b>&lt;br />&lt;/div>&lt;div>&lt;b> must qualify identifier to find this declaration in dependent base class&lt;/b>&lt;br />&lt;/div>&lt;div>void setEnd(T *P) { this-&amp;gt;EndX = P; }&lt;br />&lt;/div>&lt;div>&lt;span style="color: #33ff33;"> ^&lt;/span>&lt;br />&lt;/div>&lt;/blockquote>&lt;div>&lt;/div>&lt;div>The problem itself is in SmallVectorImpl, in the call to setEnd(). The actual setEnd() function isn't in SmallVectorImpl, but in a base class, so we have a situation that looks like this:&lt;br />&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>&lt;/div>&lt;blockquote>&lt;div>template&amp;lt;typename T&amp;gt;&lt;br />&lt;/div>&lt;div>class SmallVectorTemplateCommon {&lt;br />&lt;/div>&lt;div>protected:&lt;br />&lt;/div>&lt;div>&lt;span style="white-space: pre;"> &lt;/span> void setEnd(T *P);&lt;br />&lt;/div>&lt;div>};&lt;br />&lt;/div>&lt;div>&lt;/div>&lt;div>template&amp;lt;typename T&amp;gt;&lt;br />&lt;/div>&lt;div>class SmallVectorImpl : public SmallVectorTemplateCommon&amp;lt;T&amp;gt; {&lt;br />&lt;/div>&lt;div>public:&lt;br />&lt;/div>&lt;div>&lt;span style="white-space: pre;"> &lt;/span> void push_back(const T&amp;amp; value) {&lt;br />&lt;/div>&lt;div>&lt;span style="white-space: pre;"> &lt;/span> &lt;span style="white-space: pre;"> &lt;/span> // ...&lt;br />&lt;/div>&lt;div>&lt;span style="white-space: pre;"> &lt;/span> &lt;span style="white-space: pre;"> &lt;/span> setEnd(this-&amp;gt;end() + 1);&lt;br />&lt;/div>&lt;div>&lt;span style="white-space: pre;"> &lt;/span> }&lt;br />&lt;/div>&lt;div>};&lt;br />&lt;/div>&lt;/blockquote>&lt;div>&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>If we weren't in a template, this code would be fine, because we would find setEnd in our base class. However, because we're in a template we're dealing with two-phase name lookup. While parsing push_back(), the compiler performs name lookup for the name "setEnd" at phase 1: however, it can't find anything because it isn't allowed to look into the dependent base class SmallVectorTemplateCommon&amp;lt;T&amp;gt;. However, this code is still valid: "setEnd" is taken as the name of a non-member function, which could be found at instantiation time via Argument Dependent Lookup. Unfortunately, when we do get around to instantiating push_back, Argument Dependent Lookup doesn't look into our base class, so Clang gives us a "use of undeclared identifier" error.&lt;br />&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>By itself, that error would leave the programmer scratching her head. GCC and Visual C++ accepted this code, and setEnd() is &lt;i>obviously&lt;/i> in the base class, so what gives? To help out a bit, Clang gives more detail:&lt;br />&lt;/div>&lt;div>&lt;ol>&lt;li>The note at the very end, which reads "must qualify identifier to find this declaration in dependent base class," tells the programmer what declaration Clang could find... if only she were to qualify the name somehow so that Clang were allowed to look there.&lt;/li>&lt;li>The original error had a little hint below the caret diagnostic, in green, providing advice on how to fix this particular issue. By adding "this-&amp;gt;", we tell the compiler that "setEnd" is in the current class or one of its (possibly dependent) base classes, to be found at template instantiation time.&lt;/li>&lt;/ol>&lt;/div>&lt;div>Clang C++ is designed to be a strict but helpful compiler, following the letter of the C++ standard to help programmers make sure that their code is portable. We also hope to make Clang a friendly compiler, that can use its knowledge of the program and the C++ language to help programmers get past portability problems like this one. And maybe, just maybe, Clang can shine a little light into the dark, scary corners of C++.&lt;br />&lt;/div>&lt;/div></description></item><item><title>Introduction to load elimination in the GVN pass</title><link>https://blog.llvm.org/2009/12/introduction-to-load-elimination-in-gvn.html</link><pubDate>Thu, 17 Dec 2009 23:28:00 +0000</pubDate><guid>https://blog.llvm.org/2009/12/introduction-to-load-elimination-in-gvn.html</guid><description>One very important optimization that the GVN pass (opt -gvn) does is load elimination.&amp;nbsp;Load elimination involves several subsystems (including alias analysis, memory dependence analysis,&amp;nbsp;SSA construction, PHI translation) and&amp;nbsp;has many facets (full vs partial redundancy elimination, value coercion, handling memset/memcpy, etc). &amp;nbsp;In this post, I introduce and motivate the topic, which will let us expand on it in future posts.&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;span style="font-size: x-large;">Basic Redundant Load Elimination&lt;/span>&lt;br />&lt;br />GVN (which stands for "Global Value Numbering", though this detail has nothing to do with load elimination) is responsible for the&amp;nbsp;form of load elimination&amp;nbsp;known as&amp;nbsp;&lt;b>redundant&lt;/b> load elimination. &amp;nbsp;This is the elimination of loads whose values are already available (other forms of load elimination includes deletion of &lt;b>dead&lt;/b> loads). &amp;nbsp;A simple example of a redundant load is:&lt;br />&lt;br />&lt;pre>&amp;nbsp;&amp;nbsp;%x = load i32* %P&lt;br />&amp;nbsp;&amp;nbsp;%y = load i32* %P ; &amp;lt;- Redundant&lt;br />&lt;/pre>&lt;br />Clearly in this example, we can delete the second load and "replace all uses" of %y with %x, because the value at address %p is already available as the value "i32 %x". Another simple form of redundant elimination comes about from stores, as in:&lt;br />&lt;br />&lt;pre>&amp;nbsp;&amp;nbsp;store i32 4, i32* %P&lt;br />&amp;nbsp;&amp;nbsp;%a = load i32* %P&lt;/pre>&lt;br />In this example, we can replace %a with 4. &amp;nbsp;This sort of transformation generalizes to support other operations: the GVN pass can forward memsets to loads, memcpy from constant globals to loads, etc. &amp;nbsp;Note that GVN is not allowed to optimize away volatile loads.&lt;br />&lt;br />The implementation of this is pretty straight-forward: GVN (through the memdep class) scans backwards from the load that we are trying to eliminate up through the block until it gets an instruction that provides the value (as in these examples) or until it finds an instruction that might affect the memory in an unknown way like a call. &amp;nbsp;If we find an instruction that potentially clobbers the memory location, we can't eliminate the load.&lt;br />&lt;br />However, straight-line code is pretty boring, lets look at more complex examples.&lt;br />&lt;br />&lt;span style="font-size: x-large;">SSA Construction in GVN&lt;/span>&lt;br />&lt;br />GVN can also eliminate non-local loads, which can require PHI node insertion. &amp;nbsp;Here's a simple example:&lt;br />&lt;br />&lt;pre>BB1:&lt;br />&amp;nbsp;&amp;nbsp;store i32 5, i32* %P&lt;br />&amp;nbsp;&amp;nbsp;br label %Merge&lt;br />&lt;br />BB2:&lt;br />&amp;nbsp;&amp;nbsp;%X = load i32* %P&lt;br />&amp;nbsp;&amp;nbsp; ... use %X ...&lt;br />&amp;nbsp;&amp;nbsp; br label %Merge&lt;br />&lt;br />Merge:&lt;br />&amp;nbsp;&amp;nbsp;%Y = load i32 *%P&lt;br />&amp;nbsp; ...&lt;br />&amp;nbsp; ... use %Y ...&lt;br />&lt;/pre>&lt;br />In this case, GVN scans for available values of %P within the block (starting at the %Y load), and runs into the top of the %Merge block. &amp;nbsp;Since it got to the top of the block, it starts scanning the predecessor blocks (%BB1 and %BB2) and it finds out that the value of the load is 5 in BB1 and %X in BB2. &amp;nbsp;GVN then renames these values with the SSAUpdater class, producing:&lt;br />&lt;br />&lt;pre>BB1:&lt;br />&amp;nbsp;&amp;nbsp;store i32 5, i32* %P&lt;br />&amp;nbsp;&amp;nbsp;br label %Merge&lt;br />&lt;br />BB2:&lt;br />&amp;nbsp;&amp;nbsp;%X = load i32* %P&lt;br />&amp;nbsp; ... use %X ...&lt;br />&amp;nbsp; br label %Merge&lt;br />&lt;br />Merge:&lt;br />&amp;nbsp;&amp;nbsp;%Y = phi i32 [5, %BB1], [%X,&amp;nbsp;%BB2]&lt;br />&amp;nbsp; ...&lt;br />&amp;nbsp; ... use %Y ...&lt;br />&lt;/pre>&lt;br />Replacing a load with a PHI node may not seem like a win, however the cost model we use in the LLVM optimizer assumes that PHI nodes will be coalesced away by the code generator, and are thus free. &amp;nbsp;The logic that does PHI insertion is contained and maintained by the SSAUpdater class, which may be the subject of a future Blog post.&lt;br />&lt;br />&lt;span style="font-size: x-large;">Pros and Cons of Redundant Load Elimination&lt;/span>&lt;br />&lt;br />We always consider it profitable to eliminate a load in the optimizer when possible. Loads can be quite expensive (e.g. if they miss in the cache), and load/store traffic can hide other redundant or further simplifyable logic from the scalar optimizer. &amp;nbsp;One idiom used to test alias analyses usually looks like this:&lt;br />&lt;br />&lt;pre>&amp;nbsp;&amp;nbsp;%A = &lt;b>load i32* %P&lt;/b>&lt;br />&amp;nbsp;&amp;nbsp;store i32 1, i32* %Q&lt;br />&amp;nbsp;&amp;nbsp;%B = &lt;b>load i32* %P&lt;/b>&lt;br />&lt;br />&amp;nbsp;&amp;nbsp;%C = sub i32 %A, %B&lt;br />&amp;nbsp;&amp;nbsp;ret i32 %C&lt;br />&lt;/pre>&lt;br />If GVN + instcombine are able to turn this into "&lt;span style="font-family: 'Courier New', Courier, monospace;">ret i32 0&lt;/span>" then we know that alias analysis was able to prove that P and Q did not alias. &amp;nbsp;While somewhat unlikely in the real world, this is one example that shows a scalar optimization (X-X == 0) that can not be done unless the redundant loads are eliminated.&lt;br />&lt;br />The cost of eliminating redundant loads is that it creates longer live ranges that the code generator may not be able to cope with. &amp;nbsp;This is a real issue that we don't currently have a good solution for. &amp;nbsp;The ultimate answer is that improved rematerialization will be able to rematerialize the load further down in the code to reduce register pressure, we don't have great support for this yet though.</description></item><item><title>'lit' it</title><link>https://blog.llvm.org/2009/12/lit-it.html</link><pubDate>Thu, 17 Dec 2009 20:11:00 +0000</pubDate><guid>https://blog.llvm.org/2009/12/lit-it.html</guid><description>&lt;div>If you've been watching LLVM and Clang, you'll notice that there is a new testing tool we are using called &lt;b>lit&lt;/b>. Clang has already moved to it, and LLVM has support for it (DejaGNU is still the default, but is being phased out). I thought I'd write a little bit about why I wrote &lt;b>lit&lt;/b>, what it is, and how it will make your life better. :)&lt;br />&lt;/div>&lt;div>&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;br />&lt;/div>&lt;div>First, let me summarize the pre-&lt;b>lit&lt;/b> background:&lt;br />&lt;/div>&lt;div>&lt;ul>&lt;li>LLVM used &lt;a href="http://www.gnu.org/software/dejagnu/">DejaGNU&lt;/a> and &lt;a href="http://code.google.com/p/googletest/">googletest&lt;/a> unit tests. Our usage of DejaGNU was pretty limited though, what we really used was a test format which embedded shell scripts inside each test file. Our DejaGNU harness would interpret those commands, substitute a few variables, run them, and check the exit status. The googletest unit tests were run separately, and frequently forgotten.&lt;/li>&lt;li>Clang used a similar looking -- but completely different -- infrastructure which still had embedded shell scripts, but ran them via &lt;b>make&lt;/b> and &lt;b>sed&lt;/b>. It had the notable advantage of running tests in parallel and being significantly simpler, but not particularly flexible.&lt;/li>&lt;/ul>&lt;div>One thing both systems had in common was that it was very easy to add a new test, usually a couple lines in a file in the appropriate directory. But there were some annoying cons:&lt;br />&lt;/div>&lt;div>&lt;ul>&lt;li>There was no way to run tests via CMake or on Windows.&lt;/li>&lt;li>LLVM tests weren't run in parallel.&lt;/li>&lt;li>The UI to the tests was inconsistent and cumbersome (especially for DejaGNU, which would required invoking the LLVM Makefile via a shell script, which then invoked DejaGNU's runtest command).&lt;/li>&lt;/ul>&lt;div>I didn't actually set out to write a new testing tool -- &lt;b>lit &lt;/b>started because I had a need to run a very large number of "tests", which was just a fixed script to run with many different inputs. I hacked up a quick multithreaded Python test runner for it, and over time it grew a progress bar and more features. Later, when there was growing interest in having Clang work on Windows I wrote a Python based interpreter for the scripts (remember, they amounted to just shell scripts, so &lt;b>lit&lt;/b> has what amounts to a little (ba)&lt;b>sh&lt;/b> lexer and parser hiding in it). It didn't take a lot of imagination to put the two together and feature creep it until it could replace DejaGNU (yeah, it has a tiny Tcl parser too).&lt;br />&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>So, what &lt;i>is &lt;/i>&lt;b>lit&lt;/b>? Strictly speaking, &lt;b>lit&lt;/b> is a test running infrastructure, like DejaGNU. Its primary job is to find tests, execute them, and report the results to the user; it just happens to have built in support for the LLVM and Clang test formats. My number one design goal was that &lt;b>lit&lt;/b> should "just work" whenever possible -- running a test should be as easy as&lt;br />&lt;/div>&lt;pre>&lt;b>$ lit exprs.s&lt;/b>&lt;br />lit: lit.cfg:94: note: using out-of-tree build at '/Volumes/Data/ddunbar/llvm.obj.64'&lt;br />-- Testing: 1 tests, 2 threads --&lt;br />PASS: LLVM::MC/AsmParser/exprs.s (1 of 1)&lt;br />Testing Time: 0.06s&lt;br />Expected Passes : 1&lt;br />&lt;/pre>&lt;div>no matter if you are using an in-tree or out-of-tree build, testing Clang or LLVM, a regression test or googletest based unit test, on Windows or Unix, and so on. And of course I also wanted it to be fast!&lt;br />&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>I'm not going to go into more detail on how to use &lt;b>lit&lt;/b> (since it should be self explanatory or documented) but these are some of the features and benefits we've gotten from switching to &lt;b>lit&lt;/b>:&lt;br />&lt;/div>&lt;div>&lt;ul>&lt;li>LLVM tests run much faster, this improved our buildbot build/test cycle on a fast machine by about 25%, if I recall correctly. I still have a secret desire to make them even faster... one day...&lt;/li>&lt;li>Clang tests work on Windows and have been incorporated into our buildbot. There is still work to be done on LLVM tests.&lt;/li>&lt;li>LLVM/Clang tests work in CMake builds (with Makefiles, Xcode, and Visual Studio generators).&lt;/li>&lt;li>&lt;b>lit&lt;/b> integrates nicely into buildbot, so individual failures get split out into their own log. I hope to continue to improve the UI for diagnosing failures.&lt;/li>&lt;li>The LLVM googletest based unit tests are seamlessly integrated with the other tests. In fact, when using the standard LLVM Makefiles, its possibly to run all LLVM &amp;amp; Clang tests with just &lt;tt>make check-all&lt;/tt>.&lt;/li>&lt;li>We're using some of the fancier &lt;b>lit&lt;/b> features to help with C++ testing. For example, we have custom test suites which run &lt;tt>clang -fsyntax-only&lt;/tt> over libstdc++ and the LLVM/Clang headers to test the parser, or which run &lt;tt>clang -c&lt;/tt> over the LLVM and Clang C++ code to test Clang's C++ code generation. I secretly suspect Doug of having more &lt;b>lit &lt;/b>test suites hiding on his hard drive.&lt;/li>&lt;li>And I have more improvements in store...&lt;/li>&lt;/ul>&lt;/div>&lt;div>You can read the &lt;b>lit&lt;/b> man page &lt;a href="http://llvm.org/cmds/lit.html">here&lt;/a>, and I hope to add more information to the LLVM &lt;a href="http://llvm.org/docs/TestingGuide.html">Testing Guide&lt;/a> once all the pieces are fully in place. Try it out, I hope you like it!&lt;br />&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>- Daniel&lt;br />&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>p.s. &lt;b>lit&lt;/b> stands for LLVM Integrated Tester, at least thats what I publicly claim. That, or it's the first three letter pronounceable name I came up with...&lt;br />&lt;/div>&lt;/div>&lt;/div></description></item><item><title>Welcome to the LLVM Blog</title><link>https://blog.llvm.org/2009/12/tag-specific-rss-feed.html</link><pubDate>Mon, 14 Dec 2009 10:02:00 +0000</pubDate><guid>https://blog.llvm.org/2009/12/tag-specific-rss-feed.html</guid><description>Welcome to the new and shiny LLVM Blog. &amp;nbsp;We've noticed that while the greater LLVM community active and thriving, that it is very difficult for people who aren't hacking on it to follow interesting developments. A related problem is that the LLVM web page is really old and crufty, and various bits of it were true of some (long ago) time, but which aren't true anymore. This blog is an attempt to fix this problem, by providing a way for people to percolate interesting news out to the world, news that includes a date on it!&lt;br />&lt;br />&lt;a name='more'>&lt;/a>&lt;br />&lt;br />My goal is that this blog will talk about the motivation and design of various subsystems in LLVM, including things that don't fit well in either code or permanent documentation, such as "why" we did things a certain way. Beyond the LLVM optimizer and code generator itself, I hope that this will eventually showcase ways that people are using LLVM, as well as details about what is going on in the various sub-projects of LLVM like &lt;a href="http://clang.llvm.org/">Clang&lt;/a>, &lt;a href="http://dragonegg.llvm.org/">DragonEgg&lt;/a>, etc.&lt;br />&lt;br />A final aspect of this Blog is that we intend to tag posts well and have tag-specific RSS feeds show up on the various subproject web pages. For example, here are some RSS feeds we have so far: [&lt;a href="feed://blog.llvm.org/feeds/posts/default/-/meta">meta&lt;/a>] [&lt;a href="feed://blog.llvm.org/feeds/posts/default/-/optimization">optimization&lt;/a>] [&lt;a href="feed://blog.llvm.org/feeds/posts/default/-/testing">testing&lt;/a>]&amp;nbsp;[&lt;a href="feed://blog.llvm.org/feeds/posts/default/-/Clang">Clang&lt;/a>]. I'd like to have a tag for each subproject as well as (e.g.) a llvm-2.7 tag for features new in the 2.7 release.&lt;br />&lt;br />One decision so far is that we aren't going to allows comments on posts. We don't have the time or inclination to moderate comment spam, and we already have a great forum for discussions: various mailing lists. If you have comments on a post, ideas for future posts, or (better yet!) would like to contribute to this blog, please bring up your ideas on the relevant mailing lists.&lt;br />&lt;br />-Chris</description></item></channel></rss>